
// Warning! This file is autogenerated.
#include <boost/text/collation_table.hpp>
#include <boost/text/collate.hpp>
#include <boost/text/save_load_table.hpp>
#include <boost/text/data/all.hpp>

#include <boost/filesystem.hpp>

#include <gtest/gtest.h>

using namespace boost::text;

auto const error = [](string const & s) { std::cout << s; };
auto const warning = [](string const & s) {};

collation_table make_save_load_table()
{
    if (!exists(boost::filesystem::path("zh_zhuyin.table"))) {
        string const table_str(data::zh::zhuyin_collation_tailoring());
        collation_table table = tailored_collation_table(
            table_str,
            "zh::zhuyin_collation_tailoring()", error, warning);
        save_table(table, "zh_zhuyin.table.11");
        boost::filesystem::rename("zh_zhuyin.table.11", "zh_zhuyin.table");
    }
    return load_table("zh_zhuyin.table");
}
collation_table const & table()
{
    static collation_table retval = make_save_load_table();
    return retval;
}
TEST(tailoring, zh_zhuyin_010_000)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6c6b);
    auto const rel = std::vector<uint32_t>(1, 0x9631);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9631);
    auto const rel = std::vector<uint32_t>(1, 0x6c6c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6c6c);
    auto const rel = std::vector<uint32_t>(1, 0x80bc);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x80bc);
    auto const rel = std::vector<uint32_t>(1, 0x5244);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5244);
    auto const rel = std::vector<uint32_t>(1, 0x7a7d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7a7d);
    auto const rel = std::vector<uint32_t>(1, 0x9888);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9888);
    auto const rel = std::vector<uint32_t>(1, 0x666f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x666f);
    auto const rel = std::vector<uint32_t>(1, 0x981a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x981a);
    auto const rel = std::vector<uint32_t>(1, 0x5106);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5106);
    auto const rel = std::vector<uint32_t>(1, 0x5e5c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5e5c);
    auto const rel = std::vector<uint32_t>(1, 0x61ac);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x61ac);
    auto const rel = std::vector<uint32_t>(1, 0x66bb);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x66bb);
    auto const rel = std::vector<uint32_t>(1, 0x71db);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x71db);
    auto const rel = std::vector<uint32_t>(1, 0x749f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x749f);
    auto const rel = std::vector<uint32_t>(1, 0x9838);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9838);
    auto const rel = std::vector<uint32_t>(1, 0x61bc);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x61bc);
    auto const rel = std::vector<uint32_t>(1, 0x74a5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x74a5);
    auto const rel = std::vector<uint32_t>(1, 0x87fc);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x87fc);
    auto const rel = std::vector<uint32_t>(1, 0x4718);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4718);
    auto const rel = std::vector<uint32_t>(1, 0x8b66);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8b66);
    auto const rel = std::vector<uint32_t>(1, 0x598c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x598c);
    auto const rel = std::vector<uint32_t>(1, 0x51c0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x51c0);
    auto const rel = std::vector<uint32_t>(1, 0x5f2a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5f2a);
    auto const rel = std::vector<uint32_t>(1, 0x5f84);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5f84);
    auto const rel = std::vector<uint32_t>(1, 0x4fd3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4fd3);
    auto const rel = std::vector<uint32_t>(1, 0x205ca);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x205ca);
    auto const rel = std::vector<uint32_t>(1, 0x6d44);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6d44);
    auto const rel = std::vector<uint32_t>(1, 0x80eb);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x80eb);
    auto const rel = std::vector<uint32_t>(1, 0x8ff3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8ff3);
    auto const rel = std::vector<uint32_t>(1, 0x501e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x501e);
    auto const rel = std::vector<uint32_t>(1, 0x51c8);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x51c8);
    auto const rel = std::vector<uint32_t>(1, 0x5f33);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5f33);
    auto const rel = std::vector<uint32_t>(1, 0x5f91);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5f91);
    auto const rel = std::vector<uint32_t>(1, 0x75c9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x75c9);
    auto const rel = std::vector<uint32_t>(1, 0x7ade);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7ade);
    auto const rel = std::vector<uint32_t>(1, 0x5a59);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5a59);
    auto const rel = std::vector<uint32_t>(1, 0x5a67);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5a67);
    auto const rel = std::vector<uint32_t>(1, 0x6871);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6871);
    auto const rel = std::vector<uint32_t>(1, 0x68b7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x68b7);
    auto const rel = std::vector<uint32_t>(1, 0x6de8);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6de8);
    auto const rel = std::vector<uint32_t>(1, 0x811b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x811b);
    auto const rel = std::vector<uint32_t>(1, 0x9015);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9015);
    auto const rel = std::vector<uint32_t>(1, 0x291d5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x291d5);
    auto const rel = std::vector<uint32_t>(1, 0x7adf);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7adf);
    auto const rel = std::vector<uint32_t>(1, 0x75d9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x75d9);
    auto const rel = std::vector<uint32_t>(1, 0x7ae7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7ae7);
    auto const rel = std::vector<uint32_t>(1, 0x9753);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9753);
    auto const rel = std::vector<uint32_t>(1, 0x50b9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x50b9);
    auto const rel = std::vector<uint32_t>(1, 0x656c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x656c);
    auto const rel = std::vector<uint32_t>(1, 0x3b0c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3b0c);
    auto const rel = std::vector<uint32_t>(1, 0x7aeb);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
}

TEST(tailoring, zh_zhuyin_011_001)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7aeb);
    auto const rel = std::vector<uint32_t>(1, 0x9756);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9756);
    auto const rel = std::vector<uint32_t>(1, 0x5883);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5883);
    auto const rel = std::vector<uint32_t>(1, 0x734d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x734d);
    auto const rel = std::vector<uint32_t>(1, 0x8aa9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8aa9);
    auto const rel = std::vector<uint32_t>(1, 0x8e01);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8e01);
    auto const rel = std::vector<uint32_t>(1, 0x9759);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9759);
    auto const rel = std::vector<uint32_t>(1, 0x477c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x477c);
    auto const rel = std::vector<uint32_t>(1, 0x975a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x975a);
    auto const rel = std::vector<uint32_t>(1, 0x955c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x955c);
    auto const rel = std::vector<uint32_t>(1, 0x975c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x975c);
    auto const rel = std::vector<uint32_t>(1, 0x66d4);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x66d4);
    auto const rel = std::vector<uint32_t>(1, 0x6fea);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6fea);
    auto const rel = std::vector<uint32_t>(1, 0x701e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x701e);
    auto const rel = std::vector<uint32_t>(1, 0x93e1);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x93e1);
    auto const rel = std::vector<uint32_t>(1, 0x7af6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7af6);
    auto const rel = std::vector<uint32_t>(1, 0x7af8);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7af8);
    auto const rel = std::vector<uint32_t>(1, 0x6a78);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6a78);
    auto const rel = std::vector<uint32_t>(1, 0x71dd);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x71dd);
    auto const rel = std::vector<uint32_t>(1, 0x51e5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x51e5);
    auto const rel = std::vector<uint32_t>(1, 0x521f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x521f);
    auto const rel = std::vector<uint32_t>(1, 0x6285);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6285);
    auto const rel = std::vector<uint32_t>(1, 0x530a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x530a);
    auto const rel = std::vector<uint32_t>(1, 0x5c45);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5c45);
    auto const rel = std::vector<uint32_t>(1, 0x62d8);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x62d8);
    auto const rel = std::vector<uint32_t>(1, 0x6cc3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6cc3);
    auto const rel = std::vector<uint32_t>(1, 0x72d9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x72d9);
    auto const rel = std::vector<uint32_t>(1, 0x9a79);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9a79);
    auto const rel = std::vector<uint32_t>(1, 0x82f4);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x82f4);
    auto const rel = std::vector<uint32_t>(1, 0x6336);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6336);
    auto const rel = std::vector<uint32_t>(1, 0x75bd);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x75bd);
    auto const rel = std::vector<uint32_t>(1, 0x75c0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x75c0);
    auto const rel = std::vector<uint32_t>(1, 0x7717);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7717);
    auto const rel = std::vector<uint32_t>(1, 0x7820);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7820);
    auto const rel = std::vector<uint32_t>(1, 0x7f5d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7f5d);
    auto const rel = std::vector<uint32_t>(1, 0x5a35);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5a35);
    auto const rel = std::vector<uint32_t>(1, 0x5a6e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5a6e);
    auto const rel = std::vector<uint32_t>(1, 0x5d0c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5d0c);
    auto const rel = std::vector<uint32_t>(1, 0x63ac);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x63ac);
    auto const rel = std::vector<uint32_t>(1, 0x68ae);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x68ae);
    auto const rel = std::vector<uint32_t>(1, 0x6dba);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6dba);
    auto const rel = std::vector<uint32_t>(1, 0x9671);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9671);
    auto const rel = std::vector<uint32_t>(1, 0x6910);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6910);
    auto const rel = std::vector<uint32_t>(1, 0x741a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x741a);
    auto const rel = std::vector<uint32_t>(1, 0x8152);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8152);
    auto const rel = std::vector<uint32_t>(1, 0x83f9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x83f9);
    auto const rel = std::vector<uint32_t>(1, 0x8d84);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8d84);
    auto const rel = std::vector<uint32_t>(1, 0x8dd4);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8dd4);
    auto const rel = std::vector<uint32_t>(1, 0x9514);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9514);
    auto const rel = std::vector<uint32_t>(1, 0x96ce);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x96ce);
    auto const rel = std::vector<uint32_t>(1, 0x824d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x824d);
    auto const rel = std::vector<uint32_t>(1, 0x871b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
}

TEST(tailoring, zh_zhuyin_011_002)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x871b);
    auto const rel = std::vector<uint32_t>(1, 0x88fe);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x88fe);
    auto const rel = std::vector<uint32_t>(1, 0x8e18);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8e18);
    auto const rel = std::vector<uint32_t>(1, 0x8e19);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8e19);
    auto const rel = std::vector<uint32_t>(1, 0x92e6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x92e6);
    auto const rel = std::vector<uint32_t>(1, 0x99d2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x99d2);
    auto const rel = std::vector<uint32_t>(1, 0x9b88);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9b88);
    auto const rel = std::vector<uint32_t>(1, 0x9d21);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9d21);
    auto const rel = std::vector<uint32_t>(1, 0x97a0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x97a0);
    auto const rel = std::vector<uint32_t>(1, 0x97ab);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x97ab);
    auto const rel = std::vector<uint32_t>(1, 0x9d8b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9d8b);
    auto const rel = std::vector<uint32_t>(1, 0x26951);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x26951);
    auto const rel = std::vector<uint32_t>(1, 0x5c40);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5c40);
    auto const rel = std::vector<uint32_t>(1, 0x3632);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3632);
    auto const rel = std::vector<uint32_t>(1, 0x6ce6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6ce6);
    auto const rel = std::vector<uint32_t>(1, 0x4fb7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4fb7);
    auto const rel = std::vector<uint32_t>(1, 0x72ca);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x72ca);
    auto const rel = std::vector<uint32_t>(1, 0x6854);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6854);
    auto const rel = std::vector<uint32_t>(1, 0x6be9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6be9);
    auto const rel = std::vector<uint32_t>(1, 0x5579);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5579);
    auto const rel = std::vector<uint32_t>(1, 0x5a45);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5a45);
    auto const rel = std::vector<uint32_t>(1, 0x6dd7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6dd7);
    auto const rel = std::vector<uint32_t>(1, 0x7117);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7117);
    auto const rel = std::vector<uint32_t>(1, 0x6908);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6908);
    auto const rel = std::vector<uint32_t>(1, 0x6bf1);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6bf1);
    auto const rel = std::vector<uint32_t>(1, 0x6e68);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6e68);
    auto const rel = std::vector<uint32_t>(1, 0x83ca);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x83ca);
    auto const rel = std::vector<uint32_t>(1, 0x90f9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x90f9);
    auto const rel = std::vector<uint32_t>(1, 0x7291);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7291);
    auto const rel = std::vector<uint32_t>(1, 0x8f02);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8f02);
    auto const rel = std::vector<uint32_t>(1, 0x50ea);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x50ea);
    auto const rel = std::vector<uint32_t>(1, 0x7cb7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7cb7);
    auto const rel = std::vector<uint32_t>(1, 0x8dfc);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8dfc);
    auto const rel = std::vector<uint32_t>(1, 0x8aca);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8aca);
    auto const rel = std::vector<uint32_t>(1, 0x8d9c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8d9c);
    auto const rel = std::vector<uint32_t>(1, 0x8eb9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8eb9);
    auto const rel = std::vector<uint32_t>(1, 0x95b0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x95b0);
    auto const rel = std::vector<uint32_t>(1, 0x6a58);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6a58);
    auto const rel = std::vector<uint32_t>(1, 0x6a8b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6a8b);
    auto const rel = std::vector<uint32_t>(1, 0x99f6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x99f6);
    auto const rel = std::vector<uint32_t>(1, 0x4cd4);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4cd4);
    auto const rel = std::vector<uint32_t>(1, 0x9d59);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9d59);
    auto const rel = std::vector<uint32_t>(1, 0x8e6b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8e6b);
    auto const rel = std::vector<uint32_t>(1, 0x9d74);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9d74);
    auto const rel = std::vector<uint32_t>(1, 0x5dc8);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5dc8);
    auto const rel = std::vector<uint32_t>(1, 0x9daa);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9daa);
    auto const rel = std::vector<uint32_t>(1, 0x861c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x861c);
    auto const rel = std::vector<uint32_t>(1, 0x9f33);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9f33);
    auto const rel = std::vector<uint32_t>(1, 0x9a67);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9a67);
    auto const rel = std::vector<uint32_t>(1, 0x5480);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5480);
    auto const rel = std::vector<uint32_t>(1, 0x5f06);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5f06);
    auto const rel = std::vector<uint32_t>(1, 0x6cae);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
}

TEST(tailoring, zh_zhuyin_011_003)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6cae);
    auto const rel = std::vector<uint32_t>(1, 0x4e3e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4e3e);
    auto const rel = std::vector<uint32_t>(1, 0x6319);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6319);
    auto const rel = std::vector<uint32_t>(1, 0x77e9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x77e9);
    auto const rel = std::vector<uint32_t>(1, 0x8392);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8392);
    auto const rel = std::vector<uint32_t>(1, 0x6907);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6907);
    auto const rel = std::vector<uint32_t>(1, 0x6989);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6989);
    auto const rel = std::vector<uint32_t>(1, 0x6998);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6998);
    auto const rel = std::vector<uint32_t>(1, 0x7b65);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7b65);
    auto const rel = std::vector<uint32_t>(1, 0x9f83);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9f83);
    auto const rel = std::vector<uint32_t>(1, 0x849f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x849f);
    auto const rel = std::vector<uint32_t>(1, 0x8065);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8065);
    auto const rel = std::vector<uint32_t>(1, 0x8209);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8209);
    auto const rel = std::vector<uint32_t>(1, 0x8e3d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8e3d);
    auto const rel = std::vector<uint32_t>(1, 0x64e7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x64e7);
    auto const rel = std::vector<uint32_t>(1, 0x9f5f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9f5f);
    auto const rel = std::vector<uint32_t>(1, 0x6af8);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6af8);
    auto const rel = std::vector<uint32_t>(1, 0x6b05);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6b05);
    auto const rel = std::vector<uint32_t>(1, 0x53e5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x53e5);
    auto const rel = std::vector<uint32_t>(1, 0x5de8);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5de8);
    auto const rel = std::vector<uint32_t>(1, 0x4e6c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4e6c);
    auto const rel = std::vector<uint32_t>(1, 0x5dea);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5dea);
    auto const rel = std::vector<uint32_t>(1, 0x8bb5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8bb5);
    auto const rel = std::vector<uint32_t>(1, 0x5177);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5177);
    auto const rel = std::vector<uint32_t>(1, 0x59d6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x59d6);
    auto const rel = std::vector<uint32_t>(1, 0x5ca0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5ca0);
    auto const rel = std::vector<uint32_t>(1, 0x6007);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6007);
    auto const rel = std::vector<uint32_t>(1, 0x6010);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6010);
    auto const rel = std::vector<uint32_t>(1, 0x601a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x601a);
    auto const rel = std::vector<uint32_t>(1, 0x62d2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x62d2);
    auto const rel = std::vector<uint32_t>(1, 0x62e0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x62e0);
    auto const rel = std::vector<uint32_t>(1, 0x6d30);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6d30);
    auto const rel = std::vector<uint32_t>(1, 0x90ad);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x90ad);
    auto const rel = std::vector<uint32_t>(1, 0x661b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x661b);
    auto const rel = std::vector<uint32_t>(1, 0x6b6b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6b6b);
    auto const rel = std::vector<uint32_t>(1, 0x70ac);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x70ac);
    auto const rel = std::vector<uint32_t>(1, 0x82e3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x82e3);
    auto const rel = std::vector<uint32_t>(1, 0x949c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x949c);
    auto const rel = std::vector<uint32_t>(1, 0x4ff1);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4ff1);
    auto const rel = std::vector<uint32_t>(1, 0x5028);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5028);
    auto const rel = std::vector<uint32_t>(1, 0x5036);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5036);
    auto const rel = std::vector<uint32_t>(1, 0x51a3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x51a3);
    auto const rel = std::vector<uint32_t>(1, 0x5267);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5267);
    auto const rel = std::vector<uint32_t>(1, 0x79ec);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x79ec);
    auto const rel = std::vector<uint32_t>(1, 0x57e7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x57e7);
    auto const rel = std::vector<uint32_t>(1, 0x57fe);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x57fe);
    auto const rel = std::vector<uint32_t>(1, 0x60e7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x60e7);
    auto const rel = std::vector<uint32_t>(1, 0x636e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x636e);
    auto const rel = std::vector<uint32_t>(1, 0x7c94);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7c94);
    auto const rel = std::vector<uint32_t>(1, 0x801f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x801f);
    auto const rel = std::vector<uint32_t>(1, 0x86b7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x86b7);
    auto const rel = std::vector<uint32_t>(1, 0x8893);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
}

TEST(tailoring, zh_zhuyin_011_004)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8893);
    auto const rel = std::vector<uint32_t>(1, 0x728b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x728b);
    auto const rel = std::vector<uint32_t>(1, 0x8a4e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8a4e);
    auto const rel = std::vector<uint32_t>(1, 0x8dd9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8dd9);
    auto const rel = std::vector<uint32_t>(1, 0x8ddd);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8ddd);
    auto const rel = std::vector<uint32_t>(1, 0x98d3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x98d3);
    auto const rel = std::vector<uint32_t>(1, 0x8c66);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8c66);
    auto const rel = std::vector<uint32_t>(1, 0x9245);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9245);
    auto const rel = std::vector<uint32_t>(1, 0x952f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x952f);
    auto const rel = std::vector<uint32_t>(1, 0x5be0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5be0);
    auto const rel = std::vector<uint32_t>(1, 0x6133);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6133);
    auto const rel = std::vector<uint32_t>(1, 0x7aad);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7aad);
    auto const rel = std::vector<uint32_t>(1, 0x805a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x805a);
    auto const rel = std::vector<uint32_t>(1, 0x8661);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8661);
    auto const rel = std::vector<uint32_t>(1, 0x5287);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5287);
    auto const rel = std::vector<uint32_t>(1, 0x52ee);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x52ee);
    auto const rel = std::vector<uint32_t>(1, 0x5c66);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5c66);
    auto const rel = std::vector<uint32_t>(1, 0x8e1e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8e1e);
    auto const rel = std::vector<uint32_t>(1, 0x99cf);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x99cf);
    auto const rel = std::vector<uint32_t>(1, 0x58c9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x58c9);
    auto const rel = std::vector<uint32_t>(1, 0x61c5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x61c5);
    auto const rel = std::vector<uint32_t>(1, 0x64da);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x64da);
    auto const rel = std::vector<uint32_t>(1, 0x6fbd);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6fbd);
    auto const rel = std::vector<uint32_t>(1, 0x7ab6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7ab6);
    auto const rel = std::vector<uint32_t>(1, 0x422e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x422e);
    auto const rel = std::vector<uint32_t>(1, 0x92f8);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x92f8);
    auto const rel = std::vector<uint32_t>(1, 0x9b94);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9b94);
    auto const rel = std::vector<uint32_t>(1, 0x5c68);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5c68);
    auto const rel = std::vector<uint32_t>(1, 0x907d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x907d);
    auto const rel = std::vector<uint32_t>(1, 0x98b6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x98b6);
    auto const rel = std::vector<uint32_t>(1, 0x8c97);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8c97);
    auto const rel = std::vector<uint32_t>(1, 0x7c34);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7c34);
    auto const rel = std::vector<uint32_t>(1, 0x8e86);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8e86);
    auto const rel = std::vector<uint32_t>(1, 0x91b5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x91b5);
    auto const rel = std::vector<uint32_t>(1, 0x61fc);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x61fc);
    auto const rel = std::vector<uint32_t>(1, 0x943b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x943b);
    auto const rel = std::vector<uint32_t>(1, 0x3b2c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3b2c);
    auto const rel = std::vector<uint32_t>(1, 0x7220);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7220);
    auto const rel = std::vector<uint32_t>(1, 0x8977);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8977);
    auto const rel = std::vector<uint32_t>(1, 0x5658);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5658);
    auto const rel = std::vector<uint32_t>(1, 0x6485);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6485);
    auto const rel = std::vector<uint32_t>(1, 0x64a7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x64a7);
    auto const rel = std::vector<uint32_t>(1, 0x5c69);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5c69);
    auto const rel = std::vector<uint32_t>(1, 0x8e7b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8e7b);
    auto const rel = std::vector<uint32_t>(1, 0x4e85);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4e85);
    auto const rel = std::vector<uint32_t>(1, 0x2010c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x2010c);
    auto const rel = std::vector<uint32_t>(1, 0x5b52);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5b52);
    auto const rel = std::vector<uint32_t>(1, 0x5b53);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5b53);
    auto const rel = std::vector<uint32_t>(1, 0x51b3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x51b3);
    auto const rel = std::vector<uint32_t>(1, 0x5214);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5214);
    auto const rel = std::vector<uint32_t>(1, 0x6c12);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6c12);
    auto const rel = std::vector<uint32_t>(1, 0x8bc0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
}

TEST(tailoring, zh_zhuyin_011_005)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8bc0);
    auto const rel = std::vector<uint32_t>(1, 0x6289);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6289);
    auto const rel = std::vector<uint32_t>(1, 0x6c7a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6c7a);
    auto const rel = std::vector<uint32_t>(1, 0x5f21);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5f21);
    auto const rel = std::vector<uint32_t>(1, 0x3b48);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3b48);
    auto const rel = std::vector<uint32_t>(1, 0x6cec);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6cec);
    auto const rel = std::vector<uint32_t>(1, 0x73a6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x73a6);
    auto const rel = std::vector<uint32_t>(1, 0x73a8);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x73a8);
    auto const rel = std::vector<uint32_t>(1, 0x82b5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x82b5);
    auto const rel = std::vector<uint32_t>(1, 0x6317);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6317);
    auto const rel = std::vector<uint32_t>(1, 0x73cf);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x73cf);
    auto const rel = std::vector<uint32_t>(1, 0x75a6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x75a6);
    auto const rel = std::vector<uint32_t>(1, 0x7804);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7804);
    auto const rel = std::vector<uint32_t>(1, 0x7edd);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7edd);
    auto const rel = std::vector<uint32_t>(1, 0x8673);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8673);
    auto const rel = std::vector<uint32_t>(1, 0x89c9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x89c9);
    auto const rel = std::vector<uint32_t>(1, 0x5014);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5014);
    auto const rel = std::vector<uint32_t>(1, 0x6354);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6354);
    auto const rel = std::vector<uint32_t>(1, 0x6b2e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6b2e);
    auto const rel = std::vector<uint32_t>(1, 0x8697);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8697);
    auto const rel = std::vector<uint32_t>(1, 0x5d1b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5d1b);
    auto const rel = std::vector<uint32_t>(1, 0x6398);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6398);
    auto const rel = std::vector<uint32_t>(1, 0x658d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x658d);
    auto const rel = std::vector<uint32_t>(1, 0x6877);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6877);
    auto const rel = std::vector<uint32_t>(1, 0x6b8c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6b8c);
    auto const rel = std::vector<uint32_t>(1, 0x8990);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8990);
    auto const rel = std::vector<uint32_t>(1, 0x89d6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x89d6);
    auto const rel = std::vector<uint32_t>(1, 0x8a23);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8a23);
    auto const rel = std::vector<uint32_t>(1, 0x8d7d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8d7d);
    auto const rel = std::vector<uint32_t>(1, 0x8db9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8db9);
    auto const rel = std::vector<uint32_t>(1, 0x4848);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4848);
    auto const rel = std::vector<uint32_t>(1, 0x5095);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5095);
    auto const rel = std::vector<uint32_t>(1, 0x53a5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x53a5);
    auto const rel = std::vector<uint32_t>(1, 0x3b7e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3b7e);
    auto const rel = std::vector<uint32_t>(1, 0x7133);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7133);
    auto const rel = std::vector<uint32_t>(1, 0x7d55);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7d55);
    auto const rel = std::vector<uint32_t>(1, 0x7d76);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7d76);
    auto const rel = std::vector<uint32_t>(1, 0x899a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x899a);
    auto const rel = std::vector<uint32_t>(1, 0x8d89);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8d89);
    auto const rel = std::vector<uint32_t>(1, 0x902b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x902b);
    auto const rel = std::vector<uint32_t>(1, 0x920c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x920c);
    auto const rel = std::vector<uint32_t>(1, 0x37f2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x37f2);
    auto const rel = std::vector<uint32_t>(1, 0x5282);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5282);
    auto const rel = std::vector<uint32_t>(1, 0x3522);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3522);
    auto const rel = std::vector<uint32_t>(1, 0x52ea);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x52ea);
    auto const rel = std::vector<uint32_t>(1, 0x7474);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7474);
    auto const rel = std::vector<uint32_t>(1, 0x8c32);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8c32);
    auto const rel = std::vector<uint32_t>(1, 0x99c3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x99c3);
    auto const rel = std::vector<uint32_t>(1, 0x5da5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5da5);
    auto const rel = std::vector<uint32_t>(1, 0x61b0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x61b0);
    auto const rel = std::vector<uint32_t>(1, 0x71a6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x71a6);
    auto const rel = std::vector<uint32_t>(1, 0x7234);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
}

TEST(tailoring, zh_zhuyin_011_006)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7234);
    auto const rel = std::vector<uint32_t>(1, 0x7357);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7357);
    auto const rel = std::vector<uint32_t>(1, 0x761a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x761a);
    auto const rel = std::vector<uint32_t>(1, 0x9d02);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9d02);
    auto const rel = std::vector<uint32_t>(1, 0x9d03);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9d03);
    auto const rel = std::vector<uint32_t>(1, 0x5671);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5671);
    auto const rel = std::vector<uint32_t>(1, 0x61a0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x61a0);
    auto const rel = std::vector<uint32_t>(1, 0x6a5b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6a5b);
    auto const rel = std::vector<uint32_t>(1, 0x6a5c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6a5c);
    auto const rel = std::vector<uint32_t>(1, 0x855d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x855d);
    auto const rel = std::vector<uint32_t>(1, 0x8568);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8568);
    auto const rel = std::vector<uint32_t>(1, 0x7235);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7235);
    auto const rel = std::vector<uint32_t>(1, 0x81c4);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x81c4);
    auto const rel = std::vector<uint32_t>(1, 0x9562);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9562);
    auto const rel = std::vector<uint32_t>(1, 0x87e8);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x87e8);
    auto const rel = std::vector<uint32_t>(1, 0x87e9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x87e9);
    auto const rel = std::vector<uint32_t>(1, 0x5c6b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5c6b);
    auto const rel = std::vector<uint32_t>(1, 0x8b4e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8b4e);
    auto const rel = std::vector<uint32_t>(1, 0x8e76);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8e76);
    auto const rel = std::vector<uint32_t>(1, 0x8e77);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8e77);
    auto const rel = std::vector<uint32_t>(1, 0x9d8c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9d8c);
    auto const rel = std::vector<uint32_t>(1, 0x5337);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5337);
    auto const rel = std::vector<uint32_t>(1, 0x56bc);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x56bc);
    auto const rel = std::vector<uint32_t>(1, 0x7211);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7211);
    auto const rel = std::vector<uint32_t>(1, 0x77cd);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x77cd);
    auto const rel = std::vector<uint32_t>(1, 0x89ba);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x89ba);
    auto const rel = std::vector<uint32_t>(1, 0x940d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x940d);
    auto const rel = std::vector<uint32_t>(1, 0x941d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x941d);
    auto const rel = std::vector<uint32_t>(1, 0x721d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x721d);
    auto const rel = std::vector<uint32_t>(1, 0x89fc);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x89fc);
    auto const rel = std::vector<uint32_t>(1, 0x5f4f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5f4f);
    auto const rel = std::vector<uint32_t>(1, 0x6204);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6204);
    auto const rel = std::vector<uint32_t>(1, 0x652b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x652b);
    auto const rel = std::vector<uint32_t>(1, 0x7383);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7383);
    auto const rel = std::vector<uint32_t>(1, 0x9de2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9de2);
    auto const rel = std::vector<uint32_t>(1, 0x6b14);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6b14);
    auto const rel = std::vector<uint32_t>(1, 0x77e1);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x77e1);
    auto const rel = std::vector<uint32_t>(1, 0x9fa3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9fa3);
    auto const rel = std::vector<uint32_t>(1, 0x28c1c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x28c1c);
    auto const rel = std::vector<uint32_t>(1, 0x8c9c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8c9c);
    auto const rel = std::vector<uint32_t>(1, 0x8ea9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8ea9);
    auto const rel = std::vector<uint32_t>(1, 0x9481);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9481);
    auto const rel = std::vector<uint32_t>(1, 0x59e2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x59e2);
    auto const rel = std::vector<uint32_t>(1, 0x5a1f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5a1f);
    auto const rel = std::vector<uint32_t>(1, 0x6350);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6350);
    auto const rel = std::vector<uint32_t>(1, 0x6d93);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6d93);
    auto const rel = std::vector<uint32_t>(1, 0x7106);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7106);
    auto const rel = std::vector<uint32_t>(1, 0x8127);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8127);
    auto const rel = std::vector<uint32_t>(1, 0x74f9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x74f9);
    auto const rel = std::vector<uint32_t>(1, 0x9e43);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9e43);
    auto const rel = std::vector<uint32_t>(1, 0x88d0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x88d0);
    auto const rel = std::vector<uint32_t>(1, 0x52ec);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
}

TEST(tailoring, zh_zhuyin_011_007)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x52ec);
    auto const rel = std::vector<uint32_t>(1, 0x48fa);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x48fa);
    auto const rel = std::vector<uint32_t>(1, 0x954c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x954c);
    auto const rel = std::vector<uint32_t>(1, 0x93b8);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x93b8);
    auto const rel = std::vector<uint32_t>(1, 0x9d51);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9d51);
    auto const rel = std::vector<uint32_t>(1, 0x942b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x942b);
    auto const rel = std::vector<uint32_t>(1, 0x8832);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8832);
    auto const rel = std::vector<uint32_t>(1, 0x5377);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5377);
    auto const rel = std::vector<uint32_t>(1, 0x545f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x545f);
    auto const rel = std::vector<uint32_t>(1, 0x5e23);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5e23);
    auto const rel = std::vector<uint32_t>(1, 0x57cd);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x57cd);
    auto const rel = std::vector<uint32_t>(1, 0x6372);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6372);
    auto const rel = std::vector<uint32_t>(1, 0x83e4);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x83e4);
    auto const rel = std::vector<uint32_t>(1, 0x9529);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9529);
    auto const rel = std::vector<uint32_t>(1, 0x3df7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3df7);
    auto const rel = std::vector<uint32_t>(1, 0x9308);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9308);
    auto const rel = std::vector<uint32_t>(1, 0x81c7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x81c7);
    auto const rel = std::vector<uint32_t>(1, 0x52b5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x52b5);
    auto const rel = std::vector<uint32_t>(1, 0x5946);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5946);
    auto const rel = std::vector<uint32_t>(1, 0x5dfb);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5dfb);
    auto const rel = std::vector<uint32_t>(1, 0x5026);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5026);
    auto const rel = std::vector<uint32_t>(1, 0x52cc);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x52cc);
    auto const rel = std::vector<uint32_t>(1, 0x684a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x684a);
    auto const rel = std::vector<uint32_t>(1, 0x72f7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x72f7);
    auto const rel = std::vector<uint32_t>(1, 0x7ee2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7ee2);
    auto const rel = std::vector<uint32_t>(1, 0x96bd);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x96bd);
    auto const rel = std::vector<uint32_t>(1, 0x6dc3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6dc3);
    auto const rel = std::vector<uint32_t>(1, 0x7737);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7737);
    auto const rel = std::vector<uint32_t>(1, 0x774a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x774a);
    auto const rel = std::vector<uint32_t>(1, 0x7d6d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7d6d);
    auto const rel = std::vector<uint32_t>(1, 0x7f65);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7f65);
    auto const rel = std::vector<uint32_t>(1, 0x45ad);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x45ad);
    auto const rel = std::vector<uint32_t>(1, 0x9104);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9104);
    auto const rel = std::vector<uint32_t>(1, 0x7760);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7760);
    auto const rel = std::vector<uint32_t>(1, 0x7d79);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7d79);
    auto const rel = std::vector<uint32_t>(1, 0x96cb);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x96cb);
    auto const rel = std::vector<uint32_t>(1, 0x98ec);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x98ec);
    auto const rel = std::vector<uint32_t>(1, 0x21840);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x21840);
    auto const rel = std::vector<uint32_t>(1, 0x617b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x617b);
    auto const rel = std::vector<uint32_t>(1, 0x8528);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8528);
    auto const rel = std::vector<uint32_t>(1, 0x990b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x990b);
    auto const rel = std::vector<uint32_t>(1, 0x7367);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7367);
    auto const rel = std::vector<uint32_t>(1, 0x7e33);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7e33);
    auto const rel = std::vector<uint32_t>(1, 0x7f82);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7f82);
    auto const rel = std::vector<uint32_t>(1, 0x519b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x519b);
    auto const rel = std::vector<uint32_t>(1, 0x208d5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x208d5);
    auto const rel = std::vector<uint32_t>(1, 0x541b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x541b);
    auto const rel = std::vector<uint32_t>(1, 0x5747);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5747);
    auto const rel = std::vector<uint32_t>(1, 0x36ac);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x36ac);
    auto const rel = std::vector<uint32_t>(1, 0x6c6e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6c6e);
    auto const rel = std::vector<uint32_t>(1, 0x59f0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x59f0);
    auto const rel = std::vector<uint32_t>(1, 0x8ecd);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
}

TEST(tailoring, zh_zhuyin_011_008)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8ecd);
    auto const rel = std::vector<uint32_t>(1, 0x94a7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x94a7);
    auto const rel = std::vector<uint32_t>(1, 0x8690);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8690);
    auto const rel = std::vector<uint32_t>(1, 0x8880);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8880);
    auto const rel = std::vector<uint32_t>(1, 0x687e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x687e);
    auto const rel = std::vector<uint32_t>(1, 0x76b2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x76b2);
    auto const rel = std::vector<uint32_t>(1, 0x8399);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8399);
    auto const rel = std::vector<uint32_t>(1, 0x83cc);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x83cc);
    auto const rel = std::vector<uint32_t>(1, 0x921e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x921e);
    auto const rel = std::vector<uint32_t>(1, 0x7885);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7885);
    auto const rel = std::vector<uint32_t>(1, 0x76b8);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x76b8);
    auto const rel = std::vector<uint32_t>(1, 0x76b9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x76b9);
    auto const rel = std::vector<uint32_t>(1, 0x89a0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x89a0);
    auto const rel = std::vector<uint32_t>(1, 0x9281);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9281);
    auto const rel = std::vector<uint32_t>(1, 0x929e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x929e);
    auto const rel = std::vector<uint32_t>(1, 0x9caa);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9caa);
    auto const rel = std::vector<uint32_t>(1, 0x9e87);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9e87);
    auto const rel = std::vector<uint32_t>(1, 0x9355);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9355);
    auto const rel = std::vector<uint32_t>(1, 0x9bb6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9bb6);
    auto const rel = std::vector<uint32_t>(1, 0x9e8f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9e8f);
    auto const rel = std::vector<uint32_t>(1, 0x9e95);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9e95);
    auto const rel = std::vector<uint32_t>(1, 0x5441);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5441);
    auto const rel = std::vector<uint32_t>(1, 0x4fca);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4fca);
    auto const rel = std::vector<uint32_t>(1, 0x3f59);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3f59);
    auto const rel = std::vector<uint32_t>(1, 0x57c8);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x57c8);
    auto const rel = std::vector<uint32_t>(1, 0x5cfb);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5cfb);
    auto const rel = std::vector<uint32_t>(1, 0x6343);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6343);
    auto const rel = std::vector<uint32_t>(1, 0x6d5a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6d5a);
    auto const rel = std::vector<uint32_t>(1, 0x90e1);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x90e1);
    auto const rel = std::vector<uint32_t>(1, 0x9656);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9656);
    auto const rel = std::vector<uint32_t>(1, 0x9982);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9982);
    auto const rel = std::vector<uint32_t>(1, 0x9a8f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9a8f);
    auto const rel = std::vector<uint32_t>(1, 0x35a5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x35a5);
    auto const rel = std::vector<uint32_t>(1, 0x6659);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6659);
    auto const rel = std::vector<uint32_t>(1, 0x710c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x710c);
    auto const rel = std::vector<uint32_t>(1, 0x73fa);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x73fa);
    auto const rel = std::vector<uint32_t>(1, 0x2797a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x2797a);
    auto const rel = std::vector<uint32_t>(1, 0x347a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x347a);
    auto const rel = std::vector<uint32_t>(1, 0x68de);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x68de);
    auto const rel = std::vector<uint32_t>(1, 0x756f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x756f);
    auto const rel = std::vector<uint32_t>(1, 0x7ae3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7ae3);
    auto const rel = std::vector<uint32_t>(1, 0x3766);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3766);
    auto const rel = std::vector<uint32_t>(1, 0x41f9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x41f9);
    auto const rel = std::vector<uint32_t>(1, 0x7b98);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7b98);
    auto const rel = std::vector<uint32_t>(1, 0x7b9f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7b9f);
    auto const rel = std::vector<uint32_t>(1, 0x8720);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8720);
    auto const rel = std::vector<uint32_t>(1, 0x28318);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x28318);
    auto const rel = std::vector<uint32_t>(1, 0x5101);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5101);
    auto const rel = std::vector<uint32_t>(1, 0x3559);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3559);
    auto const rel = std::vector<uint32_t>(1, 0x9915);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9915);
    auto const rel = std::vector<uint32_t>(1, 0x5bef);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5bef);
    auto const rel = std::vector<uint32_t>(1, 0x61cf);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
}

TEST(tailoring, zh_zhuyin_011_009)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x61cf);
    auto const rel = std::vector<uint32_t>(1, 0x71c7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x71c7);
    auto const rel = std::vector<uint32_t>(1, 0x6fec);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6fec);
    auto const rel = std::vector<uint32_t>(1, 0x99ff);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x99ff);
    auto const rel = std::vector<uint32_t>(1, 0x9d54);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9d54);
    auto const rel = std::vector<uint32_t>(1, 0x9d58);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9d58);
    auto const rel = std::vector<uint32_t>(1, 0x6508);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6508);
    auto const rel = std::vector<uint32_t>(1, 0x4551);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4551);
    auto const rel = std::vector<uint32_t>(1, 0x651f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x651f);
    auto const rel = std::vector<uint32_t>(1, 0x2e86);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x2e86);
    auto const rel = std::vector<uint32_t>(1, 0x5182);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5182);
    auto const rel = std::vector<uint32_t>(1, 0x518b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x518b);
    auto const rel = std::vector<uint32_t>(1, 0x5770);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5770);
    auto const rel = std::vector<uint32_t>(1, 0x6243);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6243);
    auto const rel = std::vector<uint32_t>(1, 0x57db);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x57db);
    auto const rel = std::vector<uint32_t>(1, 0x7d45);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7d45);
    auto const rel = std::vector<uint32_t>(1, 0x99c9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x99c9);
    auto const rel = std::vector<uint32_t>(1, 0x99eb);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x99eb);
    auto const rel = std::vector<uint32_t>(1, 0x860f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x860f);
    auto const rel = std::vector<uint32_t>(1, 0x8614);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8614);
    auto const rel = std::vector<uint32_t>(1, 0x518f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x518f);
    auto const rel = std::vector<uint32_t>(1, 0x56e7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x56e7);
    auto const rel = std::vector<uint32_t>(1, 0x38a0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x38a0);
    auto const rel = std::vector<uint32_t>(1, 0x6cc2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6cc2);
    auto const rel = std::vector<uint32_t>(1, 0x7085);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7085);
    auto const rel = std::vector<uint32_t>(1, 0x4fb0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4fb0);
    auto const rel = std::vector<uint32_t>(1, 0x70af);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x70af);
    auto const rel = std::vector<uint32_t>(1, 0x8fe5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8fe5);
    auto const rel = std::vector<uint32_t>(1, 0x6d7b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6d7b);
    auto const rel = std::vector<uint32_t>(1, 0x9008);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9008);
    auto const rel = std::vector<uint32_t>(1, 0x70f1);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x70f1);
    auto const rel = std::vector<uint32_t>(1, 0x489b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x489b);
    auto const rel = std::vector<uint32_t>(1, 0x7a98);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7a98);
    auto const rel = std::vector<uint32_t>(1, 0x988e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x988e);
    auto const rel = std::vector<uint32_t>(1, 0x715a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x715a);
    auto const rel = std::vector<uint32_t>(1, 0x7d97);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7d97);
    auto const rel = std::vector<uint32_t>(1, 0x50d2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x50d2);
    auto const rel = std::vector<uint32_t>(1, 0x715b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x715b);
    auto const rel = std::vector<uint32_t>(1, 0x71b2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x71b2);
    auto const rel = std::vector<uint32_t>(1, 0x6f83);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6f83);
    auto const rel = std::vector<uint32_t>(1, 0x8927);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8927);
    auto const rel = std::vector<uint32_t>{0xfdd0, 0x3111};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0xfdd0, 0x3111};
    auto const rel = std::vector<uint32_t>(1, 0x4e03);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4e03);
    auto const rel = std::vector<uint32_t>(1, 0x6c8f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6c8f);
    auto const rel = std::vector<uint32_t>(1, 0x8fc9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8fc9);
    auto const rel = std::vector<uint32_t>(1, 0x59bb);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x59bb);
    auto const rel = std::vector<uint32_t>(1, 0x67d2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x67d2);
    auto const rel = std::vector<uint32_t>(1, 0x501b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x501b);
    auto const rel = std::vector<uint32_t>(1, 0x51c4);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x51c4);
    auto const rel = std::vector<uint32_t>(1, 0x6816);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6816);
    auto const rel = std::vector<uint32_t>(1, 0x6864);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6864);
    auto const rel = std::vector<uint32_t>(1, 0x5a38);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
}

TEST(tailoring, zh_zhuyin_011_010)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5a38);
    auto const rel = std::vector<uint32_t>(1, 0x60bd);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x60bd);
    auto const rel = std::vector<uint32_t>(1, 0x621a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x621a);
    auto const rel = std::vector<uint32_t>(1, 0x687c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x687c);
    auto const rel = std::vector<uint32_t>(1, 0x6dd2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6dd2);
    auto const rel = std::vector<uint32_t>(1, 0x90ea);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x90ea);
    auto const rel = std::vector<uint32_t>(1, 0x6532);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6532);
    auto const rel = std::vector<uint32_t>(1, 0x671f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x671f);
    auto const rel = std::vector<uint32_t>(1, 0x68f2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x68f2);
    auto const rel = std::vector<uint32_t>(1, 0x6b3a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6b3a);
    auto const rel = std::vector<uint32_t>(1, 0x3c66);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3c66);
    auto const rel = std::vector<uint32_t>(1, 0x840b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x840b);
    auto const rel = std::vector<uint32_t>(1, 0x86e3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x86e3);
    auto const rel = std::vector<uint32_t>(1, 0x50db);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x50db);
    auto const rel = std::vector<uint32_t>(1, 0x5601);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5601);
    auto const rel = std::vector<uint32_t>(1, 0x617d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x617d);
    auto const rel = std::vector<uint32_t>(1, 0x69bf);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x69bf);
    auto const rel = std::vector<uint32_t>(1, 0x6f06);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6f06);
    auto const rel = std::vector<uint32_t>(1, 0x7dc0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7dc0);
    auto const rel = std::vector<uint32_t>(1, 0x617c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x617c);
    auto const rel = std::vector<uint32_t>(1, 0x69ed);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x69ed);
    auto const rel = std::vector<uint32_t>(1, 0x25250);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x25250);
    auto const rel = std::vector<uint32_t>(1, 0x8ac6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8ac6);
    auto const rel = std::vector<uint32_t>(1, 0x8aff);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8aff);
    auto const rel = std::vector<uint32_t>(1, 0x970b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x970b);
    auto const rel = std::vector<uint32_t>(1, 0x45e9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x45e9);
    auto const rel = std::vector<uint32_t>(1, 0x8e4a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8e4a);
    auto const rel = std::vector<uint32_t>(1, 0x3b24);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3b24);
    auto const rel = std::vector<uint32_t>(1, 0x9b4c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9b4c);
    auto const rel = std::vector<uint32_t>(1, 0x4953);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4953);
    auto const rel = std::vector<uint32_t>(1, 0x93da);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x93da);
    auto const rel = std::vector<uint32_t>(1, 0x9d88);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9d88);
    auto const rel = std::vector<uint32_t>(1, 0x4e93);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4e93);
    auto const rel = std::vector<uint32_t>(1, 0x9f50);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9f50);
    auto const rel = std::vector<uint32_t>(1, 0x573b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x573b);
    auto const rel = std::vector<uint32_t>(1, 0x5c90);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5c90);
    auto const rel = std::vector<uint32_t>(1, 0x5c93);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5c93);
    auto const rel = std::vector<uint32_t>(1, 0x5fef);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5fef);
    auto const rel = std::vector<uint32_t>(1, 0x4e9d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4e9d);
    auto const rel = std::vector<uint32_t>(1, 0x5176);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5176);
    auto const rel = std::vector<uint32_t>(1, 0x5947);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5947);
    auto const rel = std::vector<uint32_t>(1, 0x6589);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6589);
    auto const rel = std::vector<uint32_t>(1, 0x6b67);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6b67);
    auto const rel = std::vector<uint32_t>(1, 0x7541);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7541);
    auto const rel = std::vector<uint32_t>(1, 0x7941);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7941);
    auto const rel = std::vector<uint32_t>(1, 0x80b5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x80b5);
    auto const rel = std::vector<uint32_t>(1, 0x82aa);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x82aa);
    auto const rel = std::vector<uint32_t>(1, 0x4fdf);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4fdf);
    auto const rel = std::vector<uint32_t>(1, 0x75a7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x75a7);
    auto const rel = std::vector<uint32_t>(1, 0x7947);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7947);
    auto const rel = std::vector<uint32_t>(1, 0x7948);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7948);
    auto const rel = std::vector<uint32_t>(1, 0x7ad2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
}

TEST(tailoring, zh_zhuyin_011_011)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7ad2);
    auto const rel = std::vector<uint32_t>(1, 0x5258);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5258);
    auto const rel = std::vector<uint32_t>(1, 0x658a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x658a);
    auto const rel = std::vector<uint32_t>(1, 0x65c2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x65c2);
    auto const rel = std::vector<uint32_t>(1, 0x8006);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8006);
    auto const rel = std::vector<uint32_t>(1, 0x8110);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8110);
    auto const rel = std::vector<uint32_t>(1, 0x8691);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8691);
    auto const rel = std::vector<uint32_t>(1, 0x8694);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8694);
    auto const rel = std::vector<uint32_t>(1, 0x869a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x869a);
    auto const rel = std::vector<uint32_t>(1, 0x9880);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9880);
    auto const rel = std::vector<uint32_t>(1, 0x57fc);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x57fc);
    auto const rel = std::vector<uint32_t>(1, 0x5d0e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5d0e);
    auto const rel = std::vector<uint32_t>(1, 0x5e3a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5e3a);
    auto const rel = std::vector<uint32_t>(1, 0x6391);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6391);
    auto const rel = std::vector<uint32_t>(1, 0x6dc7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6dc7);
    auto const rel = std::vector<uint32_t>(1, 0x7309);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7309);
    auto const rel = std::vector<uint32_t>(1, 0x7566);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7566);
    auto const rel = std::vector<uint32_t>(1, 0x8dc2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8dc2);
    auto const rel = std::vector<uint32_t>(1, 0x8edd);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8edd);
    auto const rel = std::vector<uint32_t>(1, 0x91ee);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x91ee);
    auto const rel = std::vector<uint32_t>(1, 0x9a90);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9a90);
    auto const rel = std::vector<uint32_t>(1, 0x9a91);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9a91);
    auto const rel = std::vector<uint32_t>(1, 0x68ca);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x68ca);
    auto const rel = std::vector<uint32_t>(1, 0x68cb);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x68cb);
    auto const rel = std::vector<uint32_t>(1, 0x7426);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7426);
    auto const rel = std::vector<uint32_t>(1, 0x742a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x742a);
    auto const rel = std::vector<uint32_t>(1, 0x8401);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8401);
    auto const rel = std::vector<uint32_t>(1, 0x8415);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8415);
    auto const rel = std::vector<uint32_t>(1, 0x86f4);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x86f4);
    auto const rel = std::vector<uint32_t>(1, 0x612d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x612d);
    auto const rel = std::vector<uint32_t>(1, 0x7881);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7881);
    auto const rel = std::vector<uint32_t>(1, 0x7895);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7895);
    auto const rel = std::vector<uint32_t>(1, 0x797a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x797a);
    auto const rel = std::vector<uint32_t>(1, 0x44c5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x44c5);
    auto const rel = std::vector<uint32_t>(1, 0x951c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x951c);
    auto const rel = std::vector<uint32_t>(1, 0x980e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x980e);
    auto const rel = std::vector<uint32_t>(1, 0x65d7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x65d7);
    auto const rel = std::vector<uint32_t>(1, 0x7cb8);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7cb8);
    auto const rel = std::vector<uint32_t>(1, 0x7da5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7da5);
    auto const rel = std::vector<uint32_t>(1, 0x7da6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7da6);
    auto const rel = std::vector<uint32_t>(1, 0x7da8);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7da8);
    auto const rel = std::vector<uint32_t>(1, 0x44eb);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x44eb);
    auto const rel = std::vector<uint32_t>(1, 0x871d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x871d);
    auto const rel = std::vector<uint32_t>(1, 0x871e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x871e);
    auto const rel = std::vector<uint32_t>(1, 0x9b3f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9b3f);
    auto const rel = std::vector<uint32_t>(1, 0x9f4a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9f4a);
    auto const rel = std::vector<uint32_t>(1, 0x7482);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7482);
    auto const rel = std::vector<uint32_t>(1, 0x8e11);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8e11);
    auto const rel = std::vector<uint32_t>(1, 0x79a5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x79a5);
    auto const rel = std::vector<uint32_t>(1, 0x8572);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8572);
    auto const rel = std::vector<uint32_t>(1, 0x9321);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9321);
    auto const rel = std::vector<uint32_t>(1, 0x9caf);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
}

TEST(tailoring, zh_zhuyin_011_012)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9caf);
    auto const rel = std::vector<uint32_t>(1, 0x61e0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x61e0);
    auto const rel = std::vector<uint32_t>(1, 0x6fdd);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6fdd);
    auto const rel = std::vector<uint32_t>(1, 0x2a5c6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x2a5c6);
    auto const rel = std::vector<uint32_t>(1, 0x6ab1);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6ab1);
    auto const rel = std::vector<uint32_t>(1, 0x6ac0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6ac0);
    auto const rel = std::vector<uint32_t>(1, 0x24a8c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x24a8c);
    auto const rel = std::vector<uint32_t>(1, 0x81cd);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x81cd);
    auto const rel = std::vector<uint32_t>(1, 0x85c4);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x85c4);
    auto const rel = std::vector<uint32_t>(1, 0x9a0e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9a0e);
    auto const rel = std::vector<uint32_t>(1, 0x9a0f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9a0f);
    auto const rel = std::vector<uint32_t>(1, 0x9ccd);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9ccd);
    auto const rel = std::vector<uint32_t>(1, 0x4c07);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4c07);
    auto const rel = std::vector<uint32_t>(1, 0x9bd5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9bd5);
    auto const rel = std::vector<uint32_t>(1, 0x9d78);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9d78);
    auto const rel = std::vector<uint32_t>(1, 0x9d80);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9d80);
    auto const rel = std::vector<uint32_t>(1, 0x9e92);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9e92);
    auto const rel = std::vector<uint32_t>(1, 0x7e83);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7e83);
    auto const rel = std::vector<uint32_t>(1, 0x8269);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8269);
    auto const rel = std::vector<uint32_t>(1, 0x8604);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8604);
    auto const rel = std::vector<uint32_t>(1, 0x8810);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8810);
    auto const rel = std::vector<uint32_t>(1, 0x9b10);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9b10);
    auto const rel = std::vector<uint32_t>(1, 0x9c2d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9c2d);
    auto const rel = std::vector<uint32_t>(1, 0x7382);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7382);
    auto const rel = std::vector<uint32_t>(1, 0x9ea1);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9ea1);
    auto const rel = std::vector<uint32_t>(1, 0x4e5e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4e5e);
    auto const rel = std::vector<uint32_t>(1, 0x4f01);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4f01);
    auto const rel = std::vector<uint32_t>(1, 0x5c7a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5c7a);
    auto const rel = std::vector<uint32_t>(1, 0x5c82);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5c82);
    auto const rel = std::vector<uint32_t>(1, 0x9094);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9094);
    auto const rel = std::vector<uint32_t>(1, 0x542f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x542f);
    auto const rel = std::vector<uint32_t>(1, 0x5447);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5447);
    auto const rel = std::vector<uint32_t>(1, 0x675e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x675e);
    auto const rel = std::vector<uint32_t>(1, 0x7398);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7398);
    auto const rel = std::vector<uint32_t>(1, 0x76c0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x76c0);
    auto const rel = std::vector<uint32_t>(1, 0x8291);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8291);
    auto const rel = std::vector<uint32_t>(1, 0x5518);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5518);
    auto const rel = std::vector<uint32_t>(1, 0x8c48);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8c48);
    auto const rel = std::vector<uint32_t>(1, 0x8d77);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8d77);
    auto const rel = std::vector<uint32_t>(1, 0x5553);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5553);
    auto const rel = std::vector<uint32_t>(1, 0x5554);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5554);
    auto const rel = std::vector<uint32_t>(1, 0x5a4d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5a4d);
    auto const rel = std::vector<uint32_t>(1, 0x555f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x555f);
    auto const rel = std::vector<uint32_t>(1, 0x7eee);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7eee);
    auto const rel = std::vector<uint32_t>(1, 0x6675);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6675);
    auto const rel = std::vector<uint32_t>(1, 0x68e8);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x68e8);
    auto const rel = std::vector<uint32_t>(1, 0x410e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x410e);
    auto const rel = std::vector<uint32_t>(1, 0x7dae);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7dae);
    auto const rel = std::vector<uint32_t>(1, 0x7dba);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7dba);
    auto const rel = std::vector<uint32_t>(1, 0x8aec);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8aec);
    auto const rel = std::vector<uint32_t>(1, 0x95d9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x95d9);
    auto const rel = std::vector<uint32_t>(1, 0x6c14);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
}

TEST(tailoring, zh_zhuyin_011_013)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6c14);
    auto const rel = std::vector<uint32_t>(1, 0x8bab);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8bab);
    auto const rel = std::vector<uint32_t>(1, 0x5fd4);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5fd4);
    auto const rel = std::vector<uint32_t>(1, 0x6c17);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6c17);
    auto const rel = std::vector<uint32_t>(1, 0x6c54);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6c54);
    auto const rel = std::vector<uint32_t>(1, 0x5f03);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5f03);
    auto const rel = std::vector<uint32_t>(1, 0x6c7d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6c7d);
    auto const rel = std::vector<uint32_t>(1, 0x77f5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x77f5);
    auto const rel = std::vector<uint32_t>(1, 0x8fc4);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8fc4);
    auto const rel = std::vector<uint32_t>(1, 0x546e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x546e);
    auto const rel = std::vector<uint32_t>(1, 0x6ce3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6ce3);
    auto const rel = std::vector<uint32_t>(1, 0x7081);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7081);
    auto const rel = std::vector<uint32_t>(1, 0x76f5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x76f5);
    auto const rel = std::vector<uint32_t>(1, 0x829e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x829e);
    auto const rel = std::vector<uint32_t>(1, 0x54a0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x54a0);
    auto const rel = std::vector<uint32_t>(1, 0x5951);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5951);
    auto const rel = std::vector<uint32_t>(1, 0x780c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x780c);
    auto const rel = std::vector<uint32_t>(1, 0x6814);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6814);
    auto const rel = std::vector<uint32_t>(1, 0x6b2b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6b2b);
    auto const rel = std::vector<uint32_t>(1, 0x6c23);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6c23);
    auto const rel = std::vector<uint32_t>(1, 0x8a16);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8a16);
    auto const rel = std::vector<uint32_t>(1, 0x552d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x552d);
    auto const rel = std::vector<uint32_t>(1, 0x5921);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5921);
    auto const rel = std::vector<uint32_t>(1, 0x68c4);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x68c4);
    auto const rel = std::vector<uint32_t>(1, 0x6e46);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6e46);
    auto const rel = std::vector<uint32_t>(1, 0x6e47);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6e47);
    auto const rel = std::vector<uint32_t>(1, 0x789b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x789b);
    auto const rel = std::vector<uint32_t>(1, 0x847a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x847a);
    auto const rel = std::vector<uint32_t>(1, 0x6456);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6456);
    auto const rel = std::vector<uint32_t>(1, 0x66a3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x66a3);
    auto const rel = std::vector<uint32_t>(1, 0x78b6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x78b6);
    auto const rel = std::vector<uint32_t>(1, 0x5650);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5650);
    auto const rel = std::vector<uint32_t>(1, 0x6187);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6187);
    auto const rel = std::vector<uint32_t>(1, 0x7508);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7508);
    auto const rel = std::vector<uint32_t>(1, 0x27858);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x27858);
    auto const rel = std::vector<uint32_t>(1, 0x5668);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5668);
    auto const rel = std::vector<uint32_t>(1, 0x61a9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x61a9);
    auto const rel = std::vector<uint32_t>(1, 0x78dc);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x78dc);
    auto const rel = std::vector<uint32_t>(1, 0x78e7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x78e7);
    auto const rel = std::vector<uint32_t>(1, 0x78e9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x78e9);
    auto const rel = std::vector<uint32_t>(1, 0x468d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x468d);
    auto const rel = std::vector<uint32_t>(1, 0x7f4a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7f4a);
    auto const rel = std::vector<uint32_t>(1, 0x87ff);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x87ff);
    auto const rel = std::vector<uint32_t>(1, 0x9f1c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9f1c);
    auto const rel = std::vector<uint32_t>(1, 0x7f3c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7f3c);
    auto const rel = std::vector<uint32_t>(1, 0x6e0f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6e0f);
    auto const rel = std::vector<uint32_t>(1, 0x7dd5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7dd5);
    auto const rel = std::vector<uint32_t>(1, 0x8904);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8904);
    auto const rel = std::vector<uint32_t>(1, 0x87a7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x87a7);
    auto const rel = std::vector<uint32_t>(1, 0x7c2f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7c2f);
    auto const rel = std::vector<uint32_t>(1, 0x7c31);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7c31);
    auto const rel = std::vector<uint32_t>(1, 0x7c4f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
}

TEST(tailoring, zh_zhuyin_011_014)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7c4f);
    auto const rel = std::vector<uint32_t>(1, 0x6390);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6390);
    auto const rel = std::vector<uint32_t>(1, 0x845c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x845c);
    auto const rel = std::vector<uint32_t>(1, 0x62e4);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x62e4);
    auto const rel = std::vector<uint32_t>(1, 0x8dd2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8dd2);
    auto const rel = std::vector<uint32_t>(1, 0x9160);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9160);
    auto const rel = std::vector<uint32_t>(1, 0x5736);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5736);
    auto const rel = std::vector<uint32_t>(1, 0x51be);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x51be);
    auto const rel = std::vector<uint32_t>(1, 0x34e4);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x34e4);
    auto const rel = std::vector<uint32_t>(1, 0x5e22);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5e22);
    auto const rel = std::vector<uint32_t>(1, 0x6070);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6070);
    auto const rel = std::vector<uint32_t>(1, 0x6d3d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6d3d);
    auto const rel = std::vector<uint32_t>(1, 0x6b8e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6b8e);
    auto const rel = std::vector<uint32_t>(1, 0x7848);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7848);
    auto const rel = std::vector<uint32_t>(1, 0x6118);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6118);
    auto const rel = std::vector<uint32_t>(1, 0x9ac2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9ac2);
    auto const rel = std::vector<uint32_t>(1, 0x9790);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9790);
    auto const rel = std::vector<uint32_t>(1, 0x767f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x767f);
    auto const rel = std::vector<uint32_t>(1, 0x21d90);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x21d90);
    auto const rel = std::vector<uint32_t>(1, 0x49a7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x49a7);
    auto const rel = std::vector<uint32_t>(1, 0x807a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x807a);
    auto const rel = std::vector<uint32_t>(1, 0x4e14);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4e14);
    auto const rel = std::vector<uint32_t>(1, 0x5207);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5207);
    auto const rel = std::vector<uint32_t>(1, 0x59be);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x59be);
    auto const rel = std::vector<uint32_t>(1, 0x602f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x602f);
    auto const rel = std::vector<uint32_t>(1, 0x5327);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5327);
    auto const rel = std::vector<uint32_t>(1, 0x7a83);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7a83);
    auto const rel = std::vector<uint32_t>(1, 0x90c4);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x90c4);
    auto const rel = std::vector<uint32_t>(1, 0x20cb5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x20cb5);
    auto const rel = std::vector<uint32_t>(1, 0x608f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x608f);
    auto const rel = std::vector<uint32_t>(1, 0x6308);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6308);
    auto const rel = std::vector<uint32_t>(1, 0x6d2f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6d2f);
    auto const rel = std::vector<uint32_t>(1, 0x3932);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3932);
    auto const rel = std::vector<uint32_t>(1, 0x60ec);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x60ec);
    auto const rel = std::vector<uint32_t>(1, 0x6dc1);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6dc1);
    auto const rel = std::vector<uint32_t>(1, 0x7b21);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7b21);
    auto const rel = std::vector<uint32_t>(1, 0x611c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x611c);
    auto const rel = std::vector<uint32_t>(1, 0x86ea);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x86ea);
    auto const rel = std::vector<uint32_t>(1, 0x3966);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3966);
    auto const rel = std::vector<uint32_t>(1, 0x6705);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6705);
    auto const rel = std::vector<uint32_t>(1, 0x7ba7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7ba7);
    auto const rel = std::vector<uint32_t>(1, 0x7dc1);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7dc1);
    auto const rel = std::vector<uint32_t>(1, 0x9532);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9532);
    auto const rel = std::vector<uint32_t>(1, 0x21424);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x21424);
    auto const rel = std::vector<uint32_t>(1, 0x7bcb);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7bcb);
    auto const rel = std::vector<uint32_t>(1, 0x8e25);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8e25);
    auto const rel = std::vector<uint32_t>(1, 0x7a55);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7a55);
    auto const rel = std::vector<uint32_t>(1, 0x9365);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9365);
    auto const rel = std::vector<uint32_t>(1, 0x85d2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x85d2);
    auto const rel = std::vector<uint32_t>(1, 0x9bdc);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9bdc);
    auto const rel = std::vector<uint32_t>(1, 0x9411);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9411);
    auto const rel = std::vector<uint32_t>(1, 0x7aca);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
}

TEST(tailoring, zh_zhuyin_011_015)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7aca);
    auto const rel = std::vector<uint32_t>(1, 0x2383a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x2383a);
    auto const rel = std::vector<uint32_t>(1, 0x82c6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x82c6);
    auto const rel = std::vector<uint32_t>(1, 0x503f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x503f);
    auto const rel = std::vector<uint32_t>(1, 0x5aab);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5aab);
    auto const rel = std::vector<uint32_t>(1, 0x7c61);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7c61);
    auto const rel = std::vector<uint32_t>(1, 0x6084);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6084);
    auto const rel = std::vector<uint32_t>(1, 0x7857);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7857);
    auto const rel = std::vector<uint32_t>(1, 0x90fb);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x90fb);
    auto const rel = std::vector<uint32_t>(1, 0x5d6a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5d6a);
    auto const rel = std::vector<uint32_t>(1, 0x8df7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8df7);
    auto const rel = std::vector<uint32_t>(1, 0x5281);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5281);
    auto const rel = std::vector<uint32_t>(1, 0x6572);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6572);
    auto const rel = std::vector<uint32_t>(1, 0x6bc3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6bc3);
    auto const rel = std::vector<uint32_t>(1, 0x8e0d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8e0d);
    auto const rel = std::vector<uint32_t>(1, 0x9121);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9121);
    auto const rel = std::vector<uint32_t>(1, 0x9125);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9125);
    auto const rel = std::vector<uint32_t>(1, 0x9539);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9539);
    auto const rel = std::vector<uint32_t>(1, 0x589d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x589d);
    auto const rel = std::vector<uint32_t>(1, 0x981d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x981d);
    auto const rel = std::vector<uint32_t>(1, 0x58bd);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x58bd);
    auto const rel = std::vector<uint32_t>(1, 0x5e67);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5e67);
    auto const rel = std::vector<uint32_t>(1, 0x22fe3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x22fe3);
    auto const rel = std::vector<uint32_t>(1, 0x6a47);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6a47);
    auto const rel = std::vector<uint32_t>(1, 0x71c6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x71c6);
    auto const rel = std::vector<uint32_t>(1, 0x7f32);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7f32);
    auto const rel = std::vector<uint32_t>(1, 0x9ab9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9ab9);
    auto const rel = std::vector<uint32_t>(1, 0x78fd);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x78fd);
    auto const rel = std::vector<uint32_t>(1, 0x936b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x936b);
    auto const rel = std::vector<uint32_t>(1, 0x936c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x936c);
    auto const rel = std::vector<uint32_t>(1, 0x7e51);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7e51);
    auto const rel = std::vector<uint32_t>(1, 0x8dac);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8dac);
    auto const rel = std::vector<uint32_t>(1, 0x8e7a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8e7a);
    auto const rel = std::vector<uint32_t>(1, 0x9430);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9430);
    auto const rel = std::vector<uint32_t>(1, 0x4e54);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4e54);
    auto const rel = std::vector<uint32_t>(1, 0x4fa8);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4fa8);
    auto const rel = std::vector<uint32_t>(1, 0x6865);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6865);
    auto const rel = std::vector<uint32_t>(1, 0x834d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x834d);
    auto const rel = std::vector<uint32_t>(1, 0x835e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x835e);
    auto const rel = std::vector<uint32_t>(1, 0x785a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x785a);
    auto const rel = std::vector<uint32_t>(1, 0x55ac);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x55ac);
    auto const rel = std::vector<uint32_t>(1, 0x83ec);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x83ec);
    auto const rel = std::vector<uint32_t>(1, 0x50d1);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x50d1);
    auto const rel = std::vector<uint32_t>(1, 0x8c2f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8c2f);
    auto const rel = std::vector<uint32_t>(1, 0x563a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x563a);
    auto const rel = std::vector<uint32_t>(1, 0x5af6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5af6);
    auto const rel = std::vector<uint32_t>(1, 0x376f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x376f);
    auto const rel = std::vector<uint32_t>(1, 0x6194);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6194);
    auto const rel = std::vector<uint32_t>(1, 0x9792);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9792);
    auto const rel = std::vector<uint32_t>(1, 0x6a35);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6a35);
    auto const rel = std::vector<uint32_t>(1, 0x6a4b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6a4b);
    auto const rel = std::vector<uint32_t>(1, 0x854e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
}

TEST(tailoring, zh_zhuyin_011_016)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x854e);
    auto const rel = std::vector<uint32_t>(1, 0x7644);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7644);
    auto const rel = std::vector<uint32_t>(1, 0x4009);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4009);
    auto const rel = std::vector<uint32_t>(1, 0x77a7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x77a7);
    auto const rel = std::vector<uint32_t>(1, 0x7904);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7904);
    auto const rel = std::vector<uint32_t>(1, 0x4397);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4397);
    auto const rel = std::vector<uint32_t>(1, 0x8dab);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8dab);
    auto const rel = std::vector<uint32_t>(1, 0x85ee);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x85ee);
    auto const rel = std::vector<uint32_t>(1, 0x9408);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9408);
    auto const rel = std::vector<uint32_t>(1, 0x97bd);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x97bd);
    auto const rel = std::vector<uint32_t>(1, 0x9866);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9866);
    auto const rel = std::vector<uint32_t>(1, 0x2710d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x2710d);
    auto const rel = std::vector<uint32_t>(1, 0x5de7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5de7);
    auto const rel = std::vector<uint32_t>(1, 0x91e5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x91e5);
    auto const rel = std::vector<uint32_t>(1, 0x6100);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6100);
    auto const rel = std::vector<uint32_t>(1, 0x9adc);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9adc);
    auto const rel = std::vector<uint32_t>(1, 0x4fcf);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4fcf);
    auto const rel = std::vector<uint32_t>(1, 0x8bee);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8bee);
    auto const rel = std::vector<uint32_t>(1, 0x5ced);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5ced);
    auto const rel = std::vector<uint32_t>(1, 0x5e29);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5e29);
    auto const rel = std::vector<uint32_t>(1, 0x7a8d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7a8d);
    auto const rel = std::vector<uint32_t>(1, 0x9657);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9657);
    auto const rel = std::vector<uint32_t>(1, 0x6bbb);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6bbb);
    auto const rel = std::vector<uint32_t>(1, 0x7fd8);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7fd8);
    auto const rel = std::vector<uint32_t>(1, 0x8a9a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8a9a);
    auto const rel = std::vector<uint32_t>(1, 0x9ada);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9ada);
    auto const rel = std::vector<uint32_t>(1, 0x50fa);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x50fa);
    auto const rel = std::vector<uint32_t>(1, 0x64ac);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x64ac);
    auto const rel = std::vector<uint32_t>(1, 0x64bd);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x64bd);
    auto const rel = std::vector<uint32_t>(1, 0x9798);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9798);
    auto const rel = std::vector<uint32_t>(1, 0x97d2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x97d2);
    auto const rel = std::vector<uint32_t>(1, 0x7ac5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7ac5);
    auto const rel = std::vector<uint32_t>(1, 0x7ff9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7ff9);
    auto const rel = std::vector<uint32_t>(1, 0x8b59);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8b59);
    auto const rel = std::vector<uint32_t>(1, 0x8e88);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8e88);
    auto const rel = std::vector<uint32_t>(1, 0x3681);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3681);
    auto const rel = std::vector<uint32_t>(1, 0x69d7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x69d7);
    auto const rel = std::vector<uint32_t>(1, 0x729e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x729e);
    auto const rel = std::vector<uint32_t>(1, 0x3400);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3400);
    auto const rel = std::vector<uint32_t>(1, 0x4e18);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4e18);
    auto const rel = std::vector<uint32_t>(1, 0x4e20);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4e20);
    auto const rel = std::vector<uint32_t>(1, 0x20c0b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x20c0b);
    auto const rel = std::vector<uint32_t>(1, 0x5775);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5775);
    auto const rel = std::vector<uint32_t>(1, 0x36b1);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x36b1);
    auto const rel = std::vector<uint32_t>(1, 0x3ccb);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3ccb);
    auto const rel = std::vector<uint32_t>(1, 0x90b1);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x90b1);
    auto const rel = std::vector<uint32_t>(1, 0x6058);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6058);
    auto const rel = std::vector<uint32_t>(1, 0x79cb);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x79cb);
    auto const rel = std::vector<uint32_t>(1, 0x79cc);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x79cc);
    auto const rel = std::vector<uint32_t>(1, 0x86af);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x86af);
    auto const rel = std::vector<uint32_t>(1, 0x5a9d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5a9d);
    auto const rel = std::vector<uint32_t>(1, 0x6978);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
}

TEST(tailoring, zh_zhuyin_011_017)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6978);
    auto const rel = std::vector<uint32_t>(1, 0x8429);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8429);
    auto const rel = std::vector<uint32_t>(1, 0x9e59);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9e59);
    auto const rel = std::vector<uint32_t>(1, 0x7bcd);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7bcd);
    auto const rel = std::vector<uint32_t>(1, 0x7de7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7de7);
    auto const rel = std::vector<uint32_t>(1, 0x84f2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x84f2);
    auto const rel = std::vector<uint32_t>(1, 0x8775);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8775);
    auto const rel = std::vector<uint32_t>(1, 0x7a50);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7a50);
    auto const rel = std::vector<uint32_t>(1, 0x8da5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8da5);
    auto const rel = std::vector<uint32_t>(1, 0x4a02);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4a02);
    auto const rel = std::vector<uint32_t>(1, 0x9cc5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9cc5);
    auto const rel = std::vector<uint32_t>(1, 0x87d7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x87d7);
    auto const rel = std::vector<uint32_t>(1, 0x97a6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x97a6);
    auto const rel = std::vector<uint32_t>(1, 0x97a7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x97a7);
    auto const rel = std::vector<uint32_t>(1, 0x9c0c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9c0c);
    auto const rel = std::vector<uint32_t>(1, 0x9c0d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9c0d);
    auto const rel = std::vector<uint32_t>(1, 0x9d96);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9d96);
    auto const rel = std::vector<uint32_t>(1, 0x8824);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8824);
    auto const rel = std::vector<uint32_t>(1, 0x9f9d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9f9d);
    auto const rel = std::vector<uint32_t>(1, 0x53f4);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x53f4);
    auto const rel = std::vector<uint32_t>(1, 0x56da);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x56da);
    auto const rel = std::vector<uint32_t>(1, 0x624f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x624f);
    auto const rel = std::vector<uint32_t>(1, 0x72b0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x72b0);
    auto const rel = std::vector<uint32_t>(1, 0x738c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x738c);
    auto const rel = std::vector<uint32_t>(1, 0x6c53);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6c53);
    auto const rel = std::vector<uint32_t>(1, 0x808d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x808d);
    auto const rel = std::vector<uint32_t>(1, 0x6c42);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6c42);
    auto const rel = std::vector<uint32_t>(1, 0x866c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x866c);
    auto const rel = std::vector<uint32_t>(1, 0x6cc5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6cc5);
    auto const rel = std::vector<uint32_t>(1, 0x42b5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x42b5);
    auto const rel = std::vector<uint32_t>(1, 0x866f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x866f);
    auto const rel = std::vector<uint32_t>(1, 0x4fc5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4fc5);
    auto const rel = std::vector<uint32_t>(1, 0x89d3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x89d3);
    auto const rel = std::vector<uint32_t>(1, 0x8a04);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8a04);
    auto const rel = std::vector<uint32_t>(1, 0x8a05);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8a05);
    auto const rel = std::vector<uint32_t>(1, 0x914b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x914b);
    auto const rel = std::vector<uint32_t>(1, 0x91d3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x91d3);
    auto const rel = std::vector<uint32_t>(1, 0x5512);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5512);
    auto const rel = std::vector<uint32_t>(1, 0x3797);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3797);
    auto const rel = std::vector<uint32_t>(1, 0x3939);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3939);
    auto const rel = std::vector<uint32_t>(1, 0x3b5d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3b5d);
    auto const rel = std::vector<uint32_t>(1, 0x6d57);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6d57);
    auto const rel = std::vector<uint32_t>(1, 0x7d0c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7d0c);
    auto const rel = std::vector<uint32_t>(1, 0x91da);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x91da);
    auto const rel = std::vector<uint32_t>(1, 0x6882);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6882);
    auto const rel = std::vector<uint32_t>(1, 0x6b8f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6b8f);
    auto const rel = std::vector<uint32_t>(1, 0x6bec);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6bec);
    auto const rel = std::vector<uint32_t>(1, 0x7403);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7403);
    auto const rel = std::vector<uint32_t>(1, 0x838d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x838d);
    auto const rel = std::vector<uint32_t>(1, 0x8d47);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8d47);
    auto const rel = std::vector<uint32_t>(1, 0x900e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x900e);
    auto const rel = std::vector<uint32_t>(1, 0x9011);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
}

TEST(tailoring, zh_zhuyin_011_018)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9011);
    auto const rel = std::vector<uint32_t>(1, 0x5d37);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5d37);
    auto const rel = std::vector<uint32_t>(1, 0x5def);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5def);
    auto const rel = std::vector<uint32_t>(1, 0x3962);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3962);
    auto const rel = std::vector<uint32_t>(1, 0x6e1e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6e1e);
    auto const rel = std::vector<uint32_t>(1, 0x6e6d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6e6d);
    auto const rel = std::vector<uint32_t>(1, 0x76b3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x76b3);
    auto const rel = std::vector<uint32_t>(1, 0x76da);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x76da);
    auto const rel = std::vector<uint32_t>(1, 0x5df0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5df0);
    auto const rel = std::vector<uint32_t>(1, 0x716a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x716a);
    auto const rel = std::vector<uint32_t>(1, 0x7d7f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7d7f);
    auto const rel = std::vector<uint32_t>(1, 0x86f7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x86f7);
    auto const rel = std::vector<uint32_t>(1, 0x88d8);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x88d8);
    auto const rel = std::vector<uint32_t>(1, 0x9052);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9052);
    auto const rel = std::vector<uint32_t>(1, 0x89e9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x89e9);
    auto const rel = std::vector<uint32_t>(1, 0x8cd5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8cd5);
    auto const rel = std::vector<uint32_t>(1, 0x7486);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7486);
    auto const rel = std::vector<uint32_t>(1, 0x8764);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8764);
    auto const rel = std::vector<uint32_t>(1, 0x92b6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x92b6);
    auto const rel = std::vector<uint32_t>(1, 0x9194);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9194);
    auto const rel = std::vector<uint32_t>(1, 0x9b82);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9b82);
    auto const rel = std::vector<uint32_t>(1, 0x9f3d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9f3d);
    auto const rel = std::vector<uint32_t>(1, 0x9bc4);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9bc4);
    auto const rel = std::vector<uint32_t>(1, 0x9c3d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9c3d);
    auto const rel = std::vector<uint32_t>(1, 0x641d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x641d);
    auto const rel = std::vector<uint32_t>(1, 0x7cd7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7cd7);
    auto const rel = std::vector<uint32_t>(1, 0x91fb);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x91fb);
    auto const rel = std::vector<uint32_t>(1, 0x8612);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8612);
    auto const rel = std::vector<uint32_t>(1, 0x5343);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5343);
    auto const rel = std::vector<uint32_t>(1, 0x4edf);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4edf);
    auto const rel = std::vector<uint32_t>(1, 0x5731);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5731);
    auto const rel = std::vector<uint32_t>(1, 0x5732);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5732);
    auto const rel = std::vector<uint32_t>(1, 0x5977);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5977);
    auto const rel = std::vector<uint32_t>(1, 0x6266);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6266);
    auto const rel = std::vector<uint32_t>(1, 0x6c58);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6c58);
    auto const rel = std::vector<uint32_t>(1, 0x9621);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9621);
    auto const rel = std::vector<uint32_t>(1, 0x4f65);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4f65);
    auto const rel = std::vector<uint32_t>(1, 0x5c8d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5c8d);
    auto const rel = std::vector<uint32_t>(1, 0x6744);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6744);
    auto const rel = std::vector<uint32_t>(1, 0x6c67);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6c67);
    auto const rel = std::vector<uint32_t>(1, 0x828a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x828a);
    auto const rel = std::vector<uint32_t>(1, 0x8fc1);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8fc1);
    auto const rel = std::vector<uint32_t>(1, 0x6b26);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6b26);
    auto const rel = std::vector<uint32_t>(1, 0x74e9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x74e9);
    auto const rel = std::vector<uint32_t>(1, 0x81e4);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x81e4);
    auto const rel = std::vector<uint32_t>(1, 0x833e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x833e);
    auto const rel = std::vector<uint32_t>(1, 0x948e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x948e);
    auto const rel = std::vector<uint32_t>(1, 0x62ea);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x62ea);
    auto const rel = std::vector<uint32_t>(1, 0x7275);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7275);
    auto const rel = std::vector<uint32_t>(1, 0x7c81);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7c81);
    auto const rel = std::vector<uint32_t>(1, 0x515b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x515b);
    auto const rel = std::vector<uint32_t>(1, 0x60ad);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
}

TEST(tailoring, zh_zhuyin_011_019)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x60ad);
    auto const rel = std::vector<uint32_t>(1, 0x8c38);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8c38);
    auto const rel = std::vector<uint32_t>(1, 0x94c5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x94c5);
    auto const rel = std::vector<uint32_t>(1, 0x5a5c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5a5c);
    auto const rel = std::vector<uint32_t>(1, 0x5b6f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5b6f);
    auto const rel = std::vector<uint32_t>(1, 0x727d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x727d);
    auto const rel = std::vector<uint32_t>(1, 0x91fa);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x91fa);
    auto const rel = std::vector<uint32_t>(1, 0x6394);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6394);
    auto const rel = std::vector<uint32_t>(1, 0x8688);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8688);
    auto const rel = std::vector<uint32_t>(1, 0x8c26);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8c26);
    auto const rel = std::vector<uint32_t>(1, 0x9206);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9206);
    auto const rel = std::vector<uint32_t>(1, 0x96c3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x96c3);
    auto const rel = std::vector<uint32_t>(1, 0x50c9);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x50c9);
    auto const rel = std::vector<uint32_t>(1, 0x6106);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6106);
    auto const rel = std::vector<uint32_t>(1, 0x7b7e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7b7e);
    auto const rel = std::vector<uint32_t>(1, 0x925b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x925b);
    auto const rel = std::vector<uint32_t>(1, 0x9a9e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9a9e);
    auto const rel = std::vector<uint32_t>(1, 0x9e50);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9e50);
    auto const rel = std::vector<uint32_t>(1, 0x6173);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6173);
    auto const rel = std::vector<uint32_t>(1, 0x6434);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6434);
    auto const rel = std::vector<uint32_t>(1, 0x6481);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6481);
    auto const rel = std::vector<uint32_t>(1, 0x7b9e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7b9e);
    auto const rel = std::vector<uint32_t>(1, 0x8ad0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8ad0);
    auto const rel = std::vector<uint32_t>(1, 0x9077);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9077);
    auto const rel = std::vector<uint32_t>(1, 0x8930);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8930);
    auto const rel = std::vector<uint32_t>(1, 0x8b19);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8b19);
    auto const rel = std::vector<uint32_t>(1, 0x9845);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9845);
    auto const rel = std::vector<uint32_t>(1, 0x6ab6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6ab6);
    auto const rel = std::vector<uint32_t>(1, 0x6510);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6510);
    auto const rel = std::vector<uint32_t>(1, 0x6acf);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6acf);
    auto const rel = std::vector<uint32_t>(1, 0x7c3d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7c3d);
    auto const rel = std::vector<uint32_t>(1, 0x9d6e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9d6e);
    auto const rel = std::vector<uint32_t>(1, 0x5b45);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5b45);
    auto const rel = std::vector<uint32_t>(1, 0x6513);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6513);
    auto const rel = std::vector<uint32_t>(1, 0x9a2b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9a2b);
    auto const rel = std::vector<uint32_t>(1, 0x6511);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6511);
    auto const rel = std::vector<uint32_t>(1, 0x9b1d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9b1d);
    auto const rel = std::vector<uint32_t>(1, 0x9b1c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x9b1c);
    auto const rel = std::vector<uint32_t>(1, 0x3a77);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x3a77);
    auto const rel = std::vector<uint32_t>(1, 0x7c64);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x7c64);
    auto const rel = std::vector<uint32_t>(1, 0x97c6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x97c6);
    auto const rel = std::vector<uint32_t>(1, 0x4ef1);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x4ef1);
    auto const rel = std::vector<uint32_t>(1, 0x5c92);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5c92);
    auto const rel = std::vector<uint32_t>(1, 0x5ff4);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x5ff4);
    auto const rel = std::vector<uint32_t>(1, 0x6272);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6272);
    auto const rel = std::vector<uint32_t>(1, 0x62d1);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x62d1);
    auto const rel = std::vector<uint32_t>(1, 0x524d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x524d);
    auto const rel = std::vector<uint32_t>(1, 0x94a4);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x94a4);
    auto const rel = std::vector<uint32_t>(1, 0x6b6c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x6b6c);
    auto const rel = std::vector<uint32_t>(1, 0x8654);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x8654);
    auto const rel = std::vector<uint32_t>(1, 0x94b1);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x94b1);
    auto const rel = std::vector<uint32_t>(1, 0x94b3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
}

