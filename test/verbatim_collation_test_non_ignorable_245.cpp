// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_245_000)
{
    // 11CF 0062;	
    // (ᇏ) HANGUL JONGSEONG RIEUL-TIKEUT-HIEUH	[3E0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CF, 0x0062 };
    uint32_t const ces[9] = { 0x3E0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_001)
{
    // 11D0 0021;	
    // (ᇐ) HANGUL JONGSEONG SSANGRIEUL	[3E10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D0, 0x0021 };
    uint32_t const ces[9] = { 0x3E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_002)
{
    // 11D0 003F;	
    // (ᇐ) HANGUL JONGSEONG SSANGRIEUL	[3E10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D0, 0x003F };
    uint32_t const ces[9] = { 0x3E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_003)
{
    // 11D0 0061;	
    // (ᇐ) HANGUL JONGSEONG SSANGRIEUL	[3E10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D0, 0x0061 };
    uint32_t const ces[9] = { 0x3E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_004)
{
    // 11D0 0041;	
    // (ᇐ) HANGUL JONGSEONG SSANGRIEUL	[3E10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11D0, 0x0041 };
    uint32_t const ces[9] = { 0x3E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_005)
{
    // 11D0 0062;	
    // (ᇐ) HANGUL JONGSEONG SSANGRIEUL	[3E10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D0, 0x0062 };
    uint32_t const ces[9] = { 0x3E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_006)
{
    // 11D1 0021;	
    // (ᇑ) HANGUL JONGSEONG RIEUL-MIEUM-KIYEOK	[3E11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D1, 0x0021 };
    uint32_t const ces[9] = { 0x3E11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_007)
{
    // 11D1 003F;	
    // (ᇑ) HANGUL JONGSEONG RIEUL-MIEUM-KIYEOK	[3E11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D1, 0x003F };
    uint32_t const ces[9] = { 0x3E11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_008)
{
    // 11D1 0061;	
    // (ᇑ) HANGUL JONGSEONG RIEUL-MIEUM-KIYEOK	[3E11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D1, 0x0061 };
    uint32_t const ces[9] = { 0x3E11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_009)
{
    // 11D1 0041;	
    // (ᇑ) HANGUL JONGSEONG RIEUL-MIEUM-KIYEOK	[3E11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11D1, 0x0041 };
    uint32_t const ces[9] = { 0x3E11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_010)
{
    // 11D1 0062;	
    // (ᇑ) HANGUL JONGSEONG RIEUL-MIEUM-KIYEOK	[3E11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D1, 0x0062 };
    uint32_t const ces[9] = { 0x3E11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_011)
{
    // 11D2 0021;	
    // (ᇒ) HANGUL JONGSEONG RIEUL-MIEUM-SIOS	[3E12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D2, 0x0021 };
    uint32_t const ces[9] = { 0x3E12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_012)
{
    // 11D2 003F;	
    // (ᇒ) HANGUL JONGSEONG RIEUL-MIEUM-SIOS	[3E12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D2, 0x003F };
    uint32_t const ces[9] = { 0x3E12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_013)
{
    // 11D2 0061;	
    // (ᇒ) HANGUL JONGSEONG RIEUL-MIEUM-SIOS	[3E12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D2, 0x0061 };
    uint32_t const ces[9] = { 0x3E12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_014)
{
    // 11D2 0041;	
    // (ᇒ) HANGUL JONGSEONG RIEUL-MIEUM-SIOS	[3E12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11D2, 0x0041 };
    uint32_t const ces[9] = { 0x3E12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_015)
{
    // 11D2 0062;	
    // (ᇒ) HANGUL JONGSEONG RIEUL-MIEUM-SIOS	[3E12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D2, 0x0062 };
    uint32_t const ces[9] = { 0x3E12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_016)
{
    // 11D3 0021;	
    // (ᇓ) HANGUL JONGSEONG RIEUL-PIEUP-SIOS	[3E13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D3, 0x0021 };
    uint32_t const ces[9] = { 0x3E13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_017)
{
    // 316B 0021;	
    // (ㅫ) HANGUL LETTER RIEUL-PIEUP-SIOS	[3E13 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x316B, 0x0021 };
    uint32_t const ces[9] = { 0x3E13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_018)
{
    // 11D3 003F;	
    // (ᇓ) HANGUL JONGSEONG RIEUL-PIEUP-SIOS	[3E13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D3, 0x003F };
    uint32_t const ces[9] = { 0x3E13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_019)
{
    // 316B 003F;	
    // (ㅫ) HANGUL LETTER RIEUL-PIEUP-SIOS	[3E13 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x316B, 0x003F };
    uint32_t const ces[9] = { 0x3E13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_020)
{
    // 11D3 0061;	
    // (ᇓ) HANGUL JONGSEONG RIEUL-PIEUP-SIOS	[3E13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D3, 0x0061 };
    uint32_t const ces[9] = { 0x3E13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_021)
{
    // 11D3 0041;	
    // (ᇓ) HANGUL JONGSEONG RIEUL-PIEUP-SIOS	[3E13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11D3, 0x0041 };
    uint32_t const ces[9] = { 0x3E13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_022)
{
    // 316B 0061;	
    // (ㅫ) HANGUL LETTER RIEUL-PIEUP-SIOS	[3E13 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x316B, 0x0061 };
    uint32_t const ces[9] = { 0x3E13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_023)
{
    // 316B 0041;	
    // (ㅫ) HANGUL LETTER RIEUL-PIEUP-SIOS	[3E13 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x316B, 0x0041 };
    uint32_t const ces[9] = { 0x3E13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_024)
{
    // 11D3 0062;	
    // (ᇓ) HANGUL JONGSEONG RIEUL-PIEUP-SIOS	[3E13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D3, 0x0062 };
    uint32_t const ces[9] = { 0x3E13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_025)
{
    // 316B 0062;	
    // (ㅫ) HANGUL LETTER RIEUL-PIEUP-SIOS	[3E13 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x316B, 0x0062 };
    uint32_t const ces[9] = { 0x3E13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_026)
{
    // 11D4 0021;	
    // (ᇔ) HANGUL JONGSEONG RIEUL-PIEUP-HIEUH	[3E14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D4, 0x0021 };
    uint32_t const ces[9] = { 0x3E14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_027)
{
    // 11D4 003F;	
    // (ᇔ) HANGUL JONGSEONG RIEUL-PIEUP-HIEUH	[3E14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D4, 0x003F };
    uint32_t const ces[9] = { 0x3E14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_028)
{
    // 11D4 0061;	
    // (ᇔ) HANGUL JONGSEONG RIEUL-PIEUP-HIEUH	[3E14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D4, 0x0061 };
    uint32_t const ces[9] = { 0x3E14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_029)
{
    // 11D4 0041;	
    // (ᇔ) HANGUL JONGSEONG RIEUL-PIEUP-HIEUH	[3E14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11D4, 0x0041 };
    uint32_t const ces[9] = { 0x3E14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_030)
{
    // 11D4 0062;	
    // (ᇔ) HANGUL JONGSEONG RIEUL-PIEUP-HIEUH	[3E14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D4, 0x0062 };
    uint32_t const ces[9] = { 0x3E14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_031)
{
    // 11D5 0021;	
    // (ᇕ) HANGUL JONGSEONG RIEUL-KAPYEOUNPIEUP	[3E15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D5, 0x0021 };
    uint32_t const ces[9] = { 0x3E15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_032)
{
    // 11D5 003F;	
    // (ᇕ) HANGUL JONGSEONG RIEUL-KAPYEOUNPIEUP	[3E15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D5, 0x003F };
    uint32_t const ces[9] = { 0x3E15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_033)
{
    // 11D5 0061;	
    // (ᇕ) HANGUL JONGSEONG RIEUL-KAPYEOUNPIEUP	[3E15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D5, 0x0061 };
    uint32_t const ces[9] = { 0x3E15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_034)
{
    // 11D5 0041;	
    // (ᇕ) HANGUL JONGSEONG RIEUL-KAPYEOUNPIEUP	[3E15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11D5, 0x0041 };
    uint32_t const ces[9] = { 0x3E15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_035)
{
    // 11D5 0062;	
    // (ᇕ) HANGUL JONGSEONG RIEUL-KAPYEOUNPIEUP	[3E15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D5, 0x0062 };
    uint32_t const ces[9] = { 0x3E15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_036)
{
    // 11D6 0021;	
    // (ᇖ) HANGUL JONGSEONG RIEUL-SSANGSIOS	[3E16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D6, 0x0021 };
    uint32_t const ces[9] = { 0x3E16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_037)
{
    // 11D6 003F;	
    // (ᇖ) HANGUL JONGSEONG RIEUL-SSANGSIOS	[3E16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D6, 0x003F };
    uint32_t const ces[9] = { 0x3E16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_038)
{
    // 11D6 0061;	
    // (ᇖ) HANGUL JONGSEONG RIEUL-SSANGSIOS	[3E16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D6, 0x0061 };
    uint32_t const ces[9] = { 0x3E16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_039)
{
    // 11D6 0041;	
    // (ᇖ) HANGUL JONGSEONG RIEUL-SSANGSIOS	[3E16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11D6, 0x0041 };
    uint32_t const ces[9] = { 0x3E16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_040)
{
    // 11D6 0062;	
    // (ᇖ) HANGUL JONGSEONG RIEUL-SSANGSIOS	[3E16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D6, 0x0062 };
    uint32_t const ces[9] = { 0x3E16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_041)
{
    // 11D7 0021;	
    // (ᇗ) HANGUL JONGSEONG RIEUL-PANSIOS	[3E17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D7, 0x0021 };
    uint32_t const ces[9] = { 0x3E17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_042)
{
    // 316C 0021;	
    // (ㅬ) HANGUL LETTER RIEUL-PANSIOS	[3E17 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x316C, 0x0021 };
    uint32_t const ces[9] = { 0x3E17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_043)
{
    // 11D7 003F;	
    // (ᇗ) HANGUL JONGSEONG RIEUL-PANSIOS	[3E17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D7, 0x003F };
    uint32_t const ces[9] = { 0x3E17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_044)
{
    // 316C 003F;	
    // (ㅬ) HANGUL LETTER RIEUL-PANSIOS	[3E17 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x316C, 0x003F };
    uint32_t const ces[9] = { 0x3E17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_045)
{
    // 11D7 0061;	
    // (ᇗ) HANGUL JONGSEONG RIEUL-PANSIOS	[3E17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D7, 0x0061 };
    uint32_t const ces[9] = { 0x3E17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_046)
{
    // 11D7 0041;	
    // (ᇗ) HANGUL JONGSEONG RIEUL-PANSIOS	[3E17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11D7, 0x0041 };
    uint32_t const ces[9] = { 0x3E17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_047)
{
    // 316C 0061;	
    // (ㅬ) HANGUL LETTER RIEUL-PANSIOS	[3E17 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x316C, 0x0061 };
    uint32_t const ces[9] = { 0x3E17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_048)
{
    // 316C 0041;	
    // (ㅬ) HANGUL LETTER RIEUL-PANSIOS	[3E17 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x316C, 0x0041 };
    uint32_t const ces[9] = { 0x3E17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_049)
{
    // 11D7 0062;	
    // (ᇗ) HANGUL JONGSEONG RIEUL-PANSIOS	[3E17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D7, 0x0062 };
    uint32_t const ces[9] = { 0x3E17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_050)
{
    // 316C 0062;	
    // (ㅬ) HANGUL LETTER RIEUL-PANSIOS	[3E17 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x316C, 0x0062 };
    uint32_t const ces[9] = { 0x3E17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_051)
{
    // 11D8 0021;	
    // (ᇘ) HANGUL JONGSEONG RIEUL-KHIEUKH	[3E18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D8, 0x0021 };
    uint32_t const ces[9] = { 0x3E18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_052)
{
    // 11D8 003F;	
    // (ᇘ) HANGUL JONGSEONG RIEUL-KHIEUKH	[3E18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D8, 0x003F };
    uint32_t const ces[9] = { 0x3E18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_053)
{
    // 11D8 0061;	
    // (ᇘ) HANGUL JONGSEONG RIEUL-KHIEUKH	[3E18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D8, 0x0061 };
    uint32_t const ces[9] = { 0x3E18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_054)
{
    // 11D8 0041;	
    // (ᇘ) HANGUL JONGSEONG RIEUL-KHIEUKH	[3E18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11D8, 0x0041 };
    uint32_t const ces[9] = { 0x3E18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_055)
{
    // 11D8 0062;	
    // (ᇘ) HANGUL JONGSEONG RIEUL-KHIEUKH	[3E18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D8, 0x0062 };
    uint32_t const ces[9] = { 0x3E18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_056)
{
    // 11D9 0021;	
    // (ᇙ) HANGUL JONGSEONG RIEUL-YEORINHIEUH	[3E19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D9, 0x0021 };
    uint32_t const ces[9] = { 0x3E19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_057)
{
    // 316D 0021;	
    // (ㅭ) HANGUL LETTER RIEUL-YEORINHIEUH	[3E19 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x316D, 0x0021 };
    uint32_t const ces[9] = { 0x3E19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_058)
{
    // 11D9 003F;	
    // (ᇙ) HANGUL JONGSEONG RIEUL-YEORINHIEUH	[3E19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D9, 0x003F };
    uint32_t const ces[9] = { 0x3E19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_059)
{
    // 316D 003F;	
    // (ㅭ) HANGUL LETTER RIEUL-YEORINHIEUH	[3E19 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x316D, 0x003F };
    uint32_t const ces[9] = { 0x3E19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_060)
{
    // 11D9 0061;	
    // (ᇙ) HANGUL JONGSEONG RIEUL-YEORINHIEUH	[3E19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D9, 0x0061 };
    uint32_t const ces[9] = { 0x3E19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_061)
{
    // 11D9 0041;	
    // (ᇙ) HANGUL JONGSEONG RIEUL-YEORINHIEUH	[3E19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11D9, 0x0041 };
    uint32_t const ces[9] = { 0x3E19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_062)
{
    // 316D 0061;	
    // (ㅭ) HANGUL LETTER RIEUL-YEORINHIEUH	[3E19 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x316D, 0x0061 };
    uint32_t const ces[9] = { 0x3E19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_063)
{
    // 316D 0041;	
    // (ㅭ) HANGUL LETTER RIEUL-YEORINHIEUH	[3E19 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x316D, 0x0041 };
    uint32_t const ces[9] = { 0x3E19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_064)
{
    // 11D9 0062;	
    // (ᇙ) HANGUL JONGSEONG RIEUL-YEORINHIEUH	[3E19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D9, 0x0062 };
    uint32_t const ces[9] = { 0x3E19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_065)
{
    // 316D 0062;	
    // (ㅭ) HANGUL LETTER RIEUL-YEORINHIEUH	[3E19 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x316D, 0x0062 };
    uint32_t const ces[9] = { 0x3E19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_066)
{
    // 11DA 0021;	
    // (ᇚ) HANGUL JONGSEONG MIEUM-KIYEOK	[3E1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DA, 0x0021 };
    uint32_t const ces[9] = { 0x3E1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_067)
{
    // 11DA 003F;	
    // (ᇚ) HANGUL JONGSEONG MIEUM-KIYEOK	[3E1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DA, 0x003F };
    uint32_t const ces[9] = { 0x3E1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_068)
{
    // 11DA 0061;	
    // (ᇚ) HANGUL JONGSEONG MIEUM-KIYEOK	[3E1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DA, 0x0061 };
    uint32_t const ces[9] = { 0x3E1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_069)
{
    // 11DA 0041;	
    // (ᇚ) HANGUL JONGSEONG MIEUM-KIYEOK	[3E1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11DA, 0x0041 };
    uint32_t const ces[9] = { 0x3E1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_070)
{
    // 11DA 0062;	
    // (ᇚ) HANGUL JONGSEONG MIEUM-KIYEOK	[3E1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DA, 0x0062 };
    uint32_t const ces[9] = { 0x3E1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_071)
{
    // 11DB 0021;	
    // (ᇛ) HANGUL JONGSEONG MIEUM-RIEUL	[3E1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DB, 0x0021 };
    uint32_t const ces[9] = { 0x3E1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_072)
{
    // 11DB 003F;	
    // (ᇛ) HANGUL JONGSEONG MIEUM-RIEUL	[3E1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DB, 0x003F };
    uint32_t const ces[9] = { 0x3E1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_073)
{
    // 11DB 0061;	
    // (ᇛ) HANGUL JONGSEONG MIEUM-RIEUL	[3E1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DB, 0x0061 };
    uint32_t const ces[9] = { 0x3E1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_074)
{
    // 11DB 0041;	
    // (ᇛ) HANGUL JONGSEONG MIEUM-RIEUL	[3E1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11DB, 0x0041 };
    uint32_t const ces[9] = { 0x3E1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_075)
{
    // 11DB 0062;	
    // (ᇛ) HANGUL JONGSEONG MIEUM-RIEUL	[3E1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DB, 0x0062 };
    uint32_t const ces[9] = { 0x3E1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_076)
{
    // 11DC 0021;	
    // (ᇜ) HANGUL JONGSEONG MIEUM-PIEUP	[3E1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DC, 0x0021 };
    uint32_t const ces[9] = { 0x3E1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_077)
{
    // 11DC 003F;	
    // (ᇜ) HANGUL JONGSEONG MIEUM-PIEUP	[3E1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DC, 0x003F };
    uint32_t const ces[9] = { 0x3E1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_078)
{
    // 11DC 0061;	
    // (ᇜ) HANGUL JONGSEONG MIEUM-PIEUP	[3E1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DC, 0x0061 };
    uint32_t const ces[9] = { 0x3E1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_079)
{
    // 11DC 0041;	
    // (ᇜ) HANGUL JONGSEONG MIEUM-PIEUP	[3E1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11DC, 0x0041 };
    uint32_t const ces[9] = { 0x3E1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_080)
{
    // 11DC 0062;	
    // (ᇜ) HANGUL JONGSEONG MIEUM-PIEUP	[3E1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DC, 0x0062 };
    uint32_t const ces[9] = { 0x3E1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_081)
{
    // 11DD 0021;	
    // (ᇝ) HANGUL JONGSEONG MIEUM-SIOS	[3E1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DD, 0x0021 };
    uint32_t const ces[9] = { 0x3E1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_082)
{
    // 316F 0021;	
    // (ㅯ) HANGUL LETTER MIEUM-SIOS	[3E1D 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x316F, 0x0021 };
    uint32_t const ces[9] = { 0x3E1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_083)
{
    // 11DD 003F;	
    // (ᇝ) HANGUL JONGSEONG MIEUM-SIOS	[3E1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DD, 0x003F };
    uint32_t const ces[9] = { 0x3E1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_084)
{
    // 316F 003F;	
    // (ㅯ) HANGUL LETTER MIEUM-SIOS	[3E1D 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x316F, 0x003F };
    uint32_t const ces[9] = { 0x3E1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_085)
{
    // 11DD 0061;	
    // (ᇝ) HANGUL JONGSEONG MIEUM-SIOS	[3E1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DD, 0x0061 };
    uint32_t const ces[9] = { 0x3E1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_086)
{
    // 11DD 0041;	
    // (ᇝ) HANGUL JONGSEONG MIEUM-SIOS	[3E1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11DD, 0x0041 };
    uint32_t const ces[9] = { 0x3E1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_087)
{
    // 316F 0061;	
    // (ㅯ) HANGUL LETTER MIEUM-SIOS	[3E1D 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x316F, 0x0061 };
    uint32_t const ces[9] = { 0x3E1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_088)
{
    // 316F 0041;	
    // (ㅯ) HANGUL LETTER MIEUM-SIOS	[3E1D 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x316F, 0x0041 };
    uint32_t const ces[9] = { 0x3E1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_089)
{
    // 11DD 0062;	
    // (ᇝ) HANGUL JONGSEONG MIEUM-SIOS	[3E1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DD, 0x0062 };
    uint32_t const ces[9] = { 0x3E1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_090)
{
    // 316F 0062;	
    // (ㅯ) HANGUL LETTER MIEUM-SIOS	[3E1D 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x316F, 0x0062 };
    uint32_t const ces[9] = { 0x3E1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_091)
{
    // 11DE 0021;	
    // (ᇞ) HANGUL JONGSEONG MIEUM-SSANGSIOS	[3E1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DE, 0x0021 };
    uint32_t const ces[9] = { 0x3E1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_092)
{
    // 11DE 003F;	
    // (ᇞ) HANGUL JONGSEONG MIEUM-SSANGSIOS	[3E1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DE, 0x003F };
    uint32_t const ces[9] = { 0x3E1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_093)
{
    // 11DE 0061;	
    // (ᇞ) HANGUL JONGSEONG MIEUM-SSANGSIOS	[3E1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DE, 0x0061 };
    uint32_t const ces[9] = { 0x3E1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_094)
{
    // 11DE 0041;	
    // (ᇞ) HANGUL JONGSEONG MIEUM-SSANGSIOS	[3E1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11DE, 0x0041 };
    uint32_t const ces[9] = { 0x3E1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_095)
{
    // 11DE 0062;	
    // (ᇞ) HANGUL JONGSEONG MIEUM-SSANGSIOS	[3E1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DE, 0x0062 };
    uint32_t const ces[9] = { 0x3E1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_096)
{
    // 11DF 0021;	
    // (ᇟ) HANGUL JONGSEONG MIEUM-PANSIOS	[3E1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DF, 0x0021 };
    uint32_t const ces[9] = { 0x3E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_097)
{
    // 3170 0021;	
    // (ㅰ) HANGUL LETTER MIEUM-PANSIOS	[3E1F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3170, 0x0021 };
    uint32_t const ces[9] = { 0x3E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_098)
{
    // 11DF 003F;	
    // (ᇟ) HANGUL JONGSEONG MIEUM-PANSIOS	[3E1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DF, 0x003F };
    uint32_t const ces[9] = { 0x3E1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_099)
{
    // 3170 003F;	
    // (ㅰ) HANGUL LETTER MIEUM-PANSIOS	[3E1F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3170, 0x003F };
    uint32_t const ces[9] = { 0x3E1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_100)
{
    // 11DF 0061;	
    // (ᇟ) HANGUL JONGSEONG MIEUM-PANSIOS	[3E1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DF, 0x0061 };
    uint32_t const ces[9] = { 0x3E1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_101)
{
    // 11DF 0041;	
    // (ᇟ) HANGUL JONGSEONG MIEUM-PANSIOS	[3E1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11DF, 0x0041 };
    uint32_t const ces[9] = { 0x3E1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_102)
{
    // 3170 0061;	
    // (ㅰ) HANGUL LETTER MIEUM-PANSIOS	[3E1F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3170, 0x0061 };
    uint32_t const ces[9] = { 0x3E1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_103)
{
    // 3170 0041;	
    // (ㅰ) HANGUL LETTER MIEUM-PANSIOS	[3E1F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x3170, 0x0041 };
    uint32_t const ces[9] = { 0x3E1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_104)
{
    // 11DF 0062;	
    // (ᇟ) HANGUL JONGSEONG MIEUM-PANSIOS	[3E1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11DF, 0x0062 };
    uint32_t const ces[9] = { 0x3E1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_105)
{
    // 3170 0062;	
    // (ㅰ) HANGUL LETTER MIEUM-PANSIOS	[3E1F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3170, 0x0062 };
    uint32_t const ces[9] = { 0x3E1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_106)
{
    // 11E0 0021;	
    // (ᇠ) HANGUL JONGSEONG MIEUM-CHIEUCH	[3E20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E0, 0x0021 };
    uint32_t const ces[9] = { 0x3E20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_107)
{
    // 11E0 003F;	
    // (ᇠ) HANGUL JONGSEONG MIEUM-CHIEUCH	[3E20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E0, 0x003F };
    uint32_t const ces[9] = { 0x3E20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_108)
{
    // 11E0 0061;	
    // (ᇠ) HANGUL JONGSEONG MIEUM-CHIEUCH	[3E20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E0, 0x0061 };
    uint32_t const ces[9] = { 0x3E20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_109)
{
    // 11E0 0041;	
    // (ᇠ) HANGUL JONGSEONG MIEUM-CHIEUCH	[3E20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11E0, 0x0041 };
    uint32_t const ces[9] = { 0x3E20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_110)
{
    // 11E0 0062;	
    // (ᇠ) HANGUL JONGSEONG MIEUM-CHIEUCH	[3E20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E0, 0x0062 };
    uint32_t const ces[9] = { 0x3E20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_111)
{
    // 11E1 0021;	
    // (ᇡ) HANGUL JONGSEONG MIEUM-HIEUH	[3E21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E1, 0x0021 };
    uint32_t const ces[9] = { 0x3E21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_112)
{
    // 11E1 003F;	
    // (ᇡ) HANGUL JONGSEONG MIEUM-HIEUH	[3E21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E1, 0x003F };
    uint32_t const ces[9] = { 0x3E21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_113)
{
    // 11E1 0061;	
    // (ᇡ) HANGUL JONGSEONG MIEUM-HIEUH	[3E21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E1, 0x0061 };
    uint32_t const ces[9] = { 0x3E21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_114)
{
    // 11E1 0041;	
    // (ᇡ) HANGUL JONGSEONG MIEUM-HIEUH	[3E21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11E1, 0x0041 };
    uint32_t const ces[9] = { 0x3E21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_115)
{
    // 11E1 0062;	
    // (ᇡ) HANGUL JONGSEONG MIEUM-HIEUH	[3E21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E1, 0x0062 };
    uint32_t const ces[9] = { 0x3E21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_116)
{
    // 11E2 0021;	
    // (ᇢ) HANGUL JONGSEONG KAPYEOUNMIEUM	[3E22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E2, 0x0021 };
    uint32_t const ces[9] = { 0x3E22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_117)
{
    // 11E2 003F;	
    // (ᇢ) HANGUL JONGSEONG KAPYEOUNMIEUM	[3E22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E2, 0x003F };
    uint32_t const ces[9] = { 0x3E22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_118)
{
    // 11E2 0061;	
    // (ᇢ) HANGUL JONGSEONG KAPYEOUNMIEUM	[3E22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E2, 0x0061 };
    uint32_t const ces[9] = { 0x3E22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_119)
{
    // 11E2 0041;	
    // (ᇢ) HANGUL JONGSEONG KAPYEOUNMIEUM	[3E22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11E2, 0x0041 };
    uint32_t const ces[9] = { 0x3E22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_120)
{
    // 11E2 0062;	
    // (ᇢ) HANGUL JONGSEONG KAPYEOUNMIEUM	[3E22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E2, 0x0062 };
    uint32_t const ces[9] = { 0x3E22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_121)
{
    // 11E3 0021;	
    // (ᇣ) HANGUL JONGSEONG PIEUP-RIEUL	[3E23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E3, 0x0021 };
    uint32_t const ces[9] = { 0x3E23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_122)
{
    // 11E3 003F;	
    // (ᇣ) HANGUL JONGSEONG PIEUP-RIEUL	[3E23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E3, 0x003F };
    uint32_t const ces[9] = { 0x3E23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_123)
{
    // 11E3 0061;	
    // (ᇣ) HANGUL JONGSEONG PIEUP-RIEUL	[3E23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E3, 0x0061 };
    uint32_t const ces[9] = { 0x3E23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_124)
{
    // 11E3 0041;	
    // (ᇣ) HANGUL JONGSEONG PIEUP-RIEUL	[3E23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11E3, 0x0041 };
    uint32_t const ces[9] = { 0x3E23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_125)
{
    // 11E3 0062;	
    // (ᇣ) HANGUL JONGSEONG PIEUP-RIEUL	[3E23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E3, 0x0062 };
    uint32_t const ces[9] = { 0x3E23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_126)
{
    // 11E4 0021;	
    // (ᇤ) HANGUL JONGSEONG PIEUP-PHIEUPH	[3E24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E4, 0x0021 };
    uint32_t const ces[9] = { 0x3E24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_127)
{
    // 11E4 003F;	
    // (ᇤ) HANGUL JONGSEONG PIEUP-PHIEUPH	[3E24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E4, 0x003F };
    uint32_t const ces[9] = { 0x3E24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_128)
{
    // 11E4 0061;	
    // (ᇤ) HANGUL JONGSEONG PIEUP-PHIEUPH	[3E24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E4, 0x0061 };
    uint32_t const ces[9] = { 0x3E24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_129)
{
    // 11E4 0041;	
    // (ᇤ) HANGUL JONGSEONG PIEUP-PHIEUPH	[3E24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11E4, 0x0041 };
    uint32_t const ces[9] = { 0x3E24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_130)
{
    // 11E4 0062;	
    // (ᇤ) HANGUL JONGSEONG PIEUP-PHIEUPH	[3E24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E4, 0x0062 };
    uint32_t const ces[9] = { 0x3E24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_131)
{
    // 11E5 0021;	
    // (ᇥ) HANGUL JONGSEONG PIEUP-HIEUH	[3E25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E5, 0x0021 };
    uint32_t const ces[9] = { 0x3E25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_132)
{
    // 11E5 003F;	
    // (ᇥ) HANGUL JONGSEONG PIEUP-HIEUH	[3E25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E5, 0x003F };
    uint32_t const ces[9] = { 0x3E25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_133)
{
    // 11E5 0061;	
    // (ᇥ) HANGUL JONGSEONG PIEUP-HIEUH	[3E25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E5, 0x0061 };
    uint32_t const ces[9] = { 0x3E25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_134)
{
    // 11E5 0041;	
    // (ᇥ) HANGUL JONGSEONG PIEUP-HIEUH	[3E25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11E5, 0x0041 };
    uint32_t const ces[9] = { 0x3E25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_135)
{
    // 11E5 0062;	
    // (ᇥ) HANGUL JONGSEONG PIEUP-HIEUH	[3E25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E5, 0x0062 };
    uint32_t const ces[9] = { 0x3E25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_136)
{
    // 11E6 0021;	
    // (ᇦ) HANGUL JONGSEONG KAPYEOUNPIEUP	[3E26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E6, 0x0021 };
    uint32_t const ces[9] = { 0x3E26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_137)
{
    // 11E6 003F;	
    // (ᇦ) HANGUL JONGSEONG KAPYEOUNPIEUP	[3E26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E6, 0x003F };
    uint32_t const ces[9] = { 0x3E26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_138)
{
    // 11E6 0061;	
    // (ᇦ) HANGUL JONGSEONG KAPYEOUNPIEUP	[3E26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E6, 0x0061 };
    uint32_t const ces[9] = { 0x3E26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_139)
{
    // 11E6 0041;	
    // (ᇦ) HANGUL JONGSEONG KAPYEOUNPIEUP	[3E26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11E6, 0x0041 };
    uint32_t const ces[9] = { 0x3E26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_140)
{
    // 11E6 0062;	
    // (ᇦ) HANGUL JONGSEONG KAPYEOUNPIEUP	[3E26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E6, 0x0062 };
    uint32_t const ces[9] = { 0x3E26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_141)
{
    // 11E7 0021;	
    // (ᇧ) HANGUL JONGSEONG SIOS-KIYEOK	[3E27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E7, 0x0021 };
    uint32_t const ces[9] = { 0x3E27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_142)
{
    // 11E7 003F;	
    // (ᇧ) HANGUL JONGSEONG SIOS-KIYEOK	[3E27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E7, 0x003F };
    uint32_t const ces[9] = { 0x3E27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_143)
{
    // 11E7 0061;	
    // (ᇧ) HANGUL JONGSEONG SIOS-KIYEOK	[3E27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E7, 0x0061 };
    uint32_t const ces[9] = { 0x3E27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_144)
{
    // 11E7 0041;	
    // (ᇧ) HANGUL JONGSEONG SIOS-KIYEOK	[3E27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11E7, 0x0041 };
    uint32_t const ces[9] = { 0x3E27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_145)
{
    // 11E7 0062;	
    // (ᇧ) HANGUL JONGSEONG SIOS-KIYEOK	[3E27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E7, 0x0062 };
    uint32_t const ces[9] = { 0x3E27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_146)
{
    // 11E8 0021;	
    // (ᇨ) HANGUL JONGSEONG SIOS-TIKEUT	[3E28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E8, 0x0021 };
    uint32_t const ces[9] = { 0x3E28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_147)
{
    // 11E8 003F;	
    // (ᇨ) HANGUL JONGSEONG SIOS-TIKEUT	[3E28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E8, 0x003F };
    uint32_t const ces[9] = { 0x3E28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_148)
{
    // 11E8 0061;	
    // (ᇨ) HANGUL JONGSEONG SIOS-TIKEUT	[3E28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E8, 0x0061 };
    uint32_t const ces[9] = { 0x3E28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_149)
{
    // 11E8 0041;	
    // (ᇨ) HANGUL JONGSEONG SIOS-TIKEUT	[3E28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11E8, 0x0041 };
    uint32_t const ces[9] = { 0x3E28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_150)
{
    // 11E8 0062;	
    // (ᇨ) HANGUL JONGSEONG SIOS-TIKEUT	[3E28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E8, 0x0062 };
    uint32_t const ces[9] = { 0x3E28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_151)
{
    // 11E9 0021;	
    // (ᇩ) HANGUL JONGSEONG SIOS-RIEUL	[3E29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E9, 0x0021 };
    uint32_t const ces[9] = { 0x3E29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_152)
{
    // 11E9 003F;	
    // (ᇩ) HANGUL JONGSEONG SIOS-RIEUL	[3E29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E9, 0x003F };
    uint32_t const ces[9] = { 0x3E29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_153)
{
    // 11E9 0061;	
    // (ᇩ) HANGUL JONGSEONG SIOS-RIEUL	[3E29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E9, 0x0061 };
    uint32_t const ces[9] = { 0x3E29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_154)
{
    // 11E9 0041;	
    // (ᇩ) HANGUL JONGSEONG SIOS-RIEUL	[3E29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11E9, 0x0041 };
    uint32_t const ces[9] = { 0x3E29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_155)
{
    // 11E9 0062;	
    // (ᇩ) HANGUL JONGSEONG SIOS-RIEUL	[3E29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11E9, 0x0062 };
    uint32_t const ces[9] = { 0x3E29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_156)
{
    // 11EA 0021;	
    // (ᇪ) HANGUL JONGSEONG SIOS-PIEUP	[3E2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11EA, 0x0021 };
    uint32_t const ces[9] = { 0x3E2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_157)
{
    // 11EA 003F;	
    // (ᇪ) HANGUL JONGSEONG SIOS-PIEUP	[3E2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11EA, 0x003F };
    uint32_t const ces[9] = { 0x3E2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_158)
{
    // 11EA 0061;	
    // (ᇪ) HANGUL JONGSEONG SIOS-PIEUP	[3E2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11EA, 0x0061 };
    uint32_t const ces[9] = { 0x3E2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_159)
{
    // 11EA 0041;	
    // (ᇪ) HANGUL JONGSEONG SIOS-PIEUP	[3E2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11EA, 0x0041 };
    uint32_t const ces[9] = { 0x3E2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_160)
{
    // 11EA 0062;	
    // (ᇪ) HANGUL JONGSEONG SIOS-PIEUP	[3E2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11EA, 0x0062 };
    uint32_t const ces[9] = { 0x3E2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_161)
{
    // 11EB 0021;	
    // (ᇫ) HANGUL JONGSEONG PANSIOS	[3E2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11EB, 0x0021 };
    uint32_t const ces[9] = { 0x3E2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_162)
{
    // 11EB 003F;	
    // (ᇫ) HANGUL JONGSEONG PANSIOS	[3E2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11EB, 0x003F };
    uint32_t const ces[9] = { 0x3E2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_163)
{
    // 11EB 0061;	
    // (ᇫ) HANGUL JONGSEONG PANSIOS	[3E2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11EB, 0x0061 };
    uint32_t const ces[9] = { 0x3E2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_164)
{
    // 11EB 0041;	
    // (ᇫ) HANGUL JONGSEONG PANSIOS	[3E2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11EB, 0x0041 };
    uint32_t const ces[9] = { 0x3E2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_165)
{
    // 11EB 0062;	
    // (ᇫ) HANGUL JONGSEONG PANSIOS	[3E2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11EB, 0x0062 };
    uint32_t const ces[9] = { 0x3E2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_166)
{
    // 11EC 0021;	
    // (ᇬ) HANGUL JONGSEONG IEUNG-KIYEOK	[3E2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11EC, 0x0021 };
    uint32_t const ces[9] = { 0x3E2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_167)
{
    // 11EC 003F;	
    // (ᇬ) HANGUL JONGSEONG IEUNG-KIYEOK	[3E2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11EC, 0x003F };
    uint32_t const ces[9] = { 0x3E2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_168)
{
    // 11EC 0061;	
    // (ᇬ) HANGUL JONGSEONG IEUNG-KIYEOK	[3E2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11EC, 0x0061 };
    uint32_t const ces[9] = { 0x3E2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_169)
{
    // 11EC 0041;	
    // (ᇬ) HANGUL JONGSEONG IEUNG-KIYEOK	[3E2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11EC, 0x0041 };
    uint32_t const ces[9] = { 0x3E2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_170)
{
    // 11EC 0062;	
    // (ᇬ) HANGUL JONGSEONG IEUNG-KIYEOK	[3E2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11EC, 0x0062 };
    uint32_t const ces[9] = { 0x3E2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_171)
{
    // 11ED 0021;	
    // (ᇭ) HANGUL JONGSEONG IEUNG-SSANGKIYEOK	[3E2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11ED, 0x0021 };
    uint32_t const ces[9] = { 0x3E2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_172)
{
    // 11ED 003F;	
    // (ᇭ) HANGUL JONGSEONG IEUNG-SSANGKIYEOK	[3E2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11ED, 0x003F };
    uint32_t const ces[9] = { 0x3E2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_173)
{
    // 11ED 0061;	
    // (ᇭ) HANGUL JONGSEONG IEUNG-SSANGKIYEOK	[3E2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11ED, 0x0061 };
    uint32_t const ces[9] = { 0x3E2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_174)
{
    // 11ED 0041;	
    // (ᇭ) HANGUL JONGSEONG IEUNG-SSANGKIYEOK	[3E2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11ED, 0x0041 };
    uint32_t const ces[9] = { 0x3E2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_175)
{
    // 11ED 0062;	
    // (ᇭ) HANGUL JONGSEONG IEUNG-SSANGKIYEOK	[3E2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11ED, 0x0062 };
    uint32_t const ces[9] = { 0x3E2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_176)
{
    // 11EE 0021;	
    // (ᇮ) HANGUL JONGSEONG SSANGIEUNG	[3E2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11EE, 0x0021 };
    uint32_t const ces[9] = { 0x3E2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_177)
{
    // 11EE 003F;	
    // (ᇮ) HANGUL JONGSEONG SSANGIEUNG	[3E2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11EE, 0x003F };
    uint32_t const ces[9] = { 0x3E2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_178)
{
    // 11EE 0061;	
    // (ᇮ) HANGUL JONGSEONG SSANGIEUNG	[3E2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11EE, 0x0061 };
    uint32_t const ces[9] = { 0x3E2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_179)
{
    // 11EE 0041;	
    // (ᇮ) HANGUL JONGSEONG SSANGIEUNG	[3E2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11EE, 0x0041 };
    uint32_t const ces[9] = { 0x3E2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_180)
{
    // 11EE 0062;	
    // (ᇮ) HANGUL JONGSEONG SSANGIEUNG	[3E2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11EE, 0x0062 };
    uint32_t const ces[9] = { 0x3E2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_181)
{
    // 11EF 0021;	
    // (ᇯ) HANGUL JONGSEONG IEUNG-KHIEUKH	[3E2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11EF, 0x0021 };
    uint32_t const ces[9] = { 0x3E2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_182)
{
    // 11EF 003F;	
    // (ᇯ) HANGUL JONGSEONG IEUNG-KHIEUKH	[3E2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11EF, 0x003F };
    uint32_t const ces[9] = { 0x3E2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_183)
{
    // 11EF 0061;	
    // (ᇯ) HANGUL JONGSEONG IEUNG-KHIEUKH	[3E2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11EF, 0x0061 };
    uint32_t const ces[9] = { 0x3E2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_184)
{
    // 11EF 0041;	
    // (ᇯ) HANGUL JONGSEONG IEUNG-KHIEUKH	[3E2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11EF, 0x0041 };
    uint32_t const ces[9] = { 0x3E2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_185)
{
    // 11EF 0062;	
    // (ᇯ) HANGUL JONGSEONG IEUNG-KHIEUKH	[3E2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11EF, 0x0062 };
    uint32_t const ces[9] = { 0x3E2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_186)
{
    // 11F0 0021;	
    // (ᇰ) HANGUL JONGSEONG YESIEUNG	[3E30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F0, 0x0021 };
    uint32_t const ces[9] = { 0x3E30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_187)
{
    // 11F0 003F;	
    // (ᇰ) HANGUL JONGSEONG YESIEUNG	[3E30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F0, 0x003F };
    uint32_t const ces[9] = { 0x3E30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_188)
{
    // 11F0 0061;	
    // (ᇰ) HANGUL JONGSEONG YESIEUNG	[3E30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F0, 0x0061 };
    uint32_t const ces[9] = { 0x3E30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_189)
{
    // 11F0 0041;	
    // (ᇰ) HANGUL JONGSEONG YESIEUNG	[3E30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11F0, 0x0041 };
    uint32_t const ces[9] = { 0x3E30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_190)
{
    // 11F0 0062;	
    // (ᇰ) HANGUL JONGSEONG YESIEUNG	[3E30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F0, 0x0062 };
    uint32_t const ces[9] = { 0x3E30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_191)
{
    // 11F1 0021;	
    // (ᇱ) HANGUL JONGSEONG YESIEUNG-SIOS	[3E31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F1, 0x0021 };
    uint32_t const ces[9] = { 0x3E31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_192)
{
    // 3182 0021;	
    // (ㆂ) HANGUL LETTER YESIEUNG-SIOS	[3E31 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3182, 0x0021 };
    uint32_t const ces[9] = { 0x3E31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_193)
{
    // 11F1 003F;	
    // (ᇱ) HANGUL JONGSEONG YESIEUNG-SIOS	[3E31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F1, 0x003F };
    uint32_t const ces[9] = { 0x3E31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_194)
{
    // 3182 003F;	
    // (ㆂ) HANGUL LETTER YESIEUNG-SIOS	[3E31 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3182, 0x003F };
    uint32_t const ces[9] = { 0x3E31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_195)
{
    // 11F1 0061;	
    // (ᇱ) HANGUL JONGSEONG YESIEUNG-SIOS	[3E31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F1, 0x0061 };
    uint32_t const ces[9] = { 0x3E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_196)
{
    // 11F1 0041;	
    // (ᇱ) HANGUL JONGSEONG YESIEUNG-SIOS	[3E31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11F1, 0x0041 };
    uint32_t const ces[9] = { 0x3E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_197)
{
    // 3182 0061;	
    // (ㆂ) HANGUL LETTER YESIEUNG-SIOS	[3E31 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3182, 0x0061 };
    uint32_t const ces[9] = { 0x3E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_198)
{
    // 3182 0041;	
    // (ㆂ) HANGUL LETTER YESIEUNG-SIOS	[3E31 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x3182, 0x0041 };
    uint32_t const ces[9] = { 0x3E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_199)
{
    // 11F1 0062;	
    // (ᇱ) HANGUL JONGSEONG YESIEUNG-SIOS	[3E31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F1, 0x0062 };
    uint32_t const ces[9] = { 0x3E31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_200)
{
    // 3182 0062;	
    // (ㆂ) HANGUL LETTER YESIEUNG-SIOS	[3E31 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3182, 0x0062 };
    uint32_t const ces[9] = { 0x3E31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_201)
{
    // 11F2 0021;	
    // (ᇲ) HANGUL JONGSEONG YESIEUNG-PANSIOS	[3E32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F2, 0x0021 };
    uint32_t const ces[9] = { 0x3E32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_202)
{
    // 3183 0021;	
    // (ㆃ) HANGUL LETTER YESIEUNG-PANSIOS	[3E32 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3183, 0x0021 };
    uint32_t const ces[9] = { 0x3E32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_203)
{
    // 11F2 003F;	
    // (ᇲ) HANGUL JONGSEONG YESIEUNG-PANSIOS	[3E32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F2, 0x003F };
    uint32_t const ces[9] = { 0x3E32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_204)
{
    // 3183 003F;	
    // (ㆃ) HANGUL LETTER YESIEUNG-PANSIOS	[3E32 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3183, 0x003F };
    uint32_t const ces[9] = { 0x3E32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_205)
{
    // 11F2 0061;	
    // (ᇲ) HANGUL JONGSEONG YESIEUNG-PANSIOS	[3E32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F2, 0x0061 };
    uint32_t const ces[9] = { 0x3E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_206)
{
    // 11F2 0041;	
    // (ᇲ) HANGUL JONGSEONG YESIEUNG-PANSIOS	[3E32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11F2, 0x0041 };
    uint32_t const ces[9] = { 0x3E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_207)
{
    // 3183 0061;	
    // (ㆃ) HANGUL LETTER YESIEUNG-PANSIOS	[3E32 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3183, 0x0061 };
    uint32_t const ces[9] = { 0x3E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_208)
{
    // 3183 0041;	
    // (ㆃ) HANGUL LETTER YESIEUNG-PANSIOS	[3E32 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x3183, 0x0041 };
    uint32_t const ces[9] = { 0x3E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_209)
{
    // 11F2 0062;	
    // (ᇲ) HANGUL JONGSEONG YESIEUNG-PANSIOS	[3E32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F2, 0x0062 };
    uint32_t const ces[9] = { 0x3E32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_210)
{
    // 3183 0062;	
    // (ㆃ) HANGUL LETTER YESIEUNG-PANSIOS	[3E32 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x3183, 0x0062 };
    uint32_t const ces[9] = { 0x3E32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_211)
{
    // 11F3 0021;	
    // (ᇳ) HANGUL JONGSEONG PHIEUPH-PIEUP	[3E33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F3, 0x0021 };
    uint32_t const ces[9] = { 0x3E33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_212)
{
    // 11F3 003F;	
    // (ᇳ) HANGUL JONGSEONG PHIEUPH-PIEUP	[3E33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F3, 0x003F };
    uint32_t const ces[9] = { 0x3E33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_213)
{
    // 11F3 0061;	
    // (ᇳ) HANGUL JONGSEONG PHIEUPH-PIEUP	[3E33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F3, 0x0061 };
    uint32_t const ces[9] = { 0x3E33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_214)
{
    // 11F3 0041;	
    // (ᇳ) HANGUL JONGSEONG PHIEUPH-PIEUP	[3E33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11F3, 0x0041 };
    uint32_t const ces[9] = { 0x3E33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_215)
{
    // 11F3 0062;	
    // (ᇳ) HANGUL JONGSEONG PHIEUPH-PIEUP	[3E33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F3, 0x0062 };
    uint32_t const ces[9] = { 0x3E33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_216)
{
    // 11F4 0021;	
    // (ᇴ) HANGUL JONGSEONG KAPYEOUNPHIEUPH	[3E34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F4, 0x0021 };
    uint32_t const ces[9] = { 0x3E34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_217)
{
    // 11F4 003F;	
    // (ᇴ) HANGUL JONGSEONG KAPYEOUNPHIEUPH	[3E34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F4, 0x003F };
    uint32_t const ces[9] = { 0x3E34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_218)
{
    // 11F4 0061;	
    // (ᇴ) HANGUL JONGSEONG KAPYEOUNPHIEUPH	[3E34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F4, 0x0061 };
    uint32_t const ces[9] = { 0x3E34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_219)
{
    // 11F4 0041;	
    // (ᇴ) HANGUL JONGSEONG KAPYEOUNPHIEUPH	[3E34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11F4, 0x0041 };
    uint32_t const ces[9] = { 0x3E34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_220)
{
    // 11F4 0062;	
    // (ᇴ) HANGUL JONGSEONG KAPYEOUNPHIEUPH	[3E34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F4, 0x0062 };
    uint32_t const ces[9] = { 0x3E34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_221)
{
    // 11F5 0021;	
    // (ᇵ) HANGUL JONGSEONG HIEUH-NIEUN	[3E35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F5, 0x0021 };
    uint32_t const ces[9] = { 0x3E35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_222)
{
    // 11F5 003F;	
    // (ᇵ) HANGUL JONGSEONG HIEUH-NIEUN	[3E35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F5, 0x003F };
    uint32_t const ces[9] = { 0x3E35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_223)
{
    // 11F5 0061;	
    // (ᇵ) HANGUL JONGSEONG HIEUH-NIEUN	[3E35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F5, 0x0061 };
    uint32_t const ces[9] = { 0x3E35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_224)
{
    // 11F5 0041;	
    // (ᇵ) HANGUL JONGSEONG HIEUH-NIEUN	[3E35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11F5, 0x0041 };
    uint32_t const ces[9] = { 0x3E35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_225)
{
    // 11F5 0062;	
    // (ᇵ) HANGUL JONGSEONG HIEUH-NIEUN	[3E35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F5, 0x0062 };
    uint32_t const ces[9] = { 0x3E35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_226)
{
    // 11F6 0021;	
    // (ᇶ) HANGUL JONGSEONG HIEUH-RIEUL	[3E36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F6, 0x0021 };
    uint32_t const ces[9] = { 0x3E36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_227)
{
    // 11F6 003F;	
    // (ᇶ) HANGUL JONGSEONG HIEUH-RIEUL	[3E36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F6, 0x003F };
    uint32_t const ces[9] = { 0x3E36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_228)
{
    // 11F6 0061;	
    // (ᇶ) HANGUL JONGSEONG HIEUH-RIEUL	[3E36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F6, 0x0061 };
    uint32_t const ces[9] = { 0x3E36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_229)
{
    // 11F6 0041;	
    // (ᇶ) HANGUL JONGSEONG HIEUH-RIEUL	[3E36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11F6, 0x0041 };
    uint32_t const ces[9] = { 0x3E36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_230)
{
    // 11F6 0062;	
    // (ᇶ) HANGUL JONGSEONG HIEUH-RIEUL	[3E36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F6, 0x0062 };
    uint32_t const ces[9] = { 0x3E36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_231)
{
    // 11F7 0021;	
    // (ᇷ) HANGUL JONGSEONG HIEUH-MIEUM	[3E37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F7, 0x0021 };
    uint32_t const ces[9] = { 0x3E37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_232)
{
    // 11F7 003F;	
    // (ᇷ) HANGUL JONGSEONG HIEUH-MIEUM	[3E37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F7, 0x003F };
    uint32_t const ces[9] = { 0x3E37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_233)
{
    // 11F7 0061;	
    // (ᇷ) HANGUL JONGSEONG HIEUH-MIEUM	[3E37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F7, 0x0061 };
    uint32_t const ces[9] = { 0x3E37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_234)
{
    // 11F7 0041;	
    // (ᇷ) HANGUL JONGSEONG HIEUH-MIEUM	[3E37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11F7, 0x0041 };
    uint32_t const ces[9] = { 0x3E37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_235)
{
    // 11F7 0062;	
    // (ᇷ) HANGUL JONGSEONG HIEUH-MIEUM	[3E37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F7, 0x0062 };
    uint32_t const ces[9] = { 0x3E37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_236)
{
    // 11F8 0021;	
    // (ᇸ) HANGUL JONGSEONG HIEUH-PIEUP	[3E38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F8, 0x0021 };
    uint32_t const ces[9] = { 0x3E38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_237)
{
    // 11F8 003F;	
    // (ᇸ) HANGUL JONGSEONG HIEUH-PIEUP	[3E38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F8, 0x003F };
    uint32_t const ces[9] = { 0x3E38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_238)
{
    // 11F8 0061;	
    // (ᇸ) HANGUL JONGSEONG HIEUH-PIEUP	[3E38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F8, 0x0061 };
    uint32_t const ces[9] = { 0x3E38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_239)
{
    // 11F8 0041;	
    // (ᇸ) HANGUL JONGSEONG HIEUH-PIEUP	[3E38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11F8, 0x0041 };
    uint32_t const ces[9] = { 0x3E38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_240)
{
    // 11F8 0062;	
    // (ᇸ) HANGUL JONGSEONG HIEUH-PIEUP	[3E38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F8, 0x0062 };
    uint32_t const ces[9] = { 0x3E38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_241)
{
    // 11F9 0021;	
    // (ᇹ) HANGUL JONGSEONG YEORINHIEUH	[3E39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F9, 0x0021 };
    uint32_t const ces[9] = { 0x3E39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_242)
{
    // 11F9 003F;	
    // (ᇹ) HANGUL JONGSEONG YEORINHIEUH	[3E39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F9, 0x003F };
    uint32_t const ces[9] = { 0x3E39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_243)
{
    // 11F9 0061;	
    // (ᇹ) HANGUL JONGSEONG YEORINHIEUH	[3E39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F9, 0x0061 };
    uint32_t const ces[9] = { 0x3E39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_244)
{
    // 11F9 0041;	
    // (ᇹ) HANGUL JONGSEONG YEORINHIEUH	[3E39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11F9, 0x0041 };
    uint32_t const ces[9] = { 0x3E39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_245)
{
    // 11F9 0062;	
    // (ᇹ) HANGUL JONGSEONG YEORINHIEUH	[3E39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11F9, 0x0062 };
    uint32_t const ces[9] = { 0x3E39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_246)
{
    // 11FA 0021;	
    // (ᇺ) HANGUL JONGSEONG KIYEOK-NIEUN	[3E3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FA, 0x0021 };
    uint32_t const ces[9] = { 0x3E3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_247)
{
    // 11FA 003F;	
    // (ᇺ) HANGUL JONGSEONG KIYEOK-NIEUN	[3E3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FA, 0x003F };
    uint32_t const ces[9] = { 0x3E3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_248)
{
    // 11FA 0061;	
    // (ᇺ) HANGUL JONGSEONG KIYEOK-NIEUN	[3E3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FA, 0x0061 };
    uint32_t const ces[9] = { 0x3E3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_249)
{
    // 11FA 0041;	
    // (ᇺ) HANGUL JONGSEONG KIYEOK-NIEUN	[3E3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11FA, 0x0041 };
    uint32_t const ces[9] = { 0x3E3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_250)
{
    // 11FA 0062;	
    // (ᇺ) HANGUL JONGSEONG KIYEOK-NIEUN	[3E3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FA, 0x0062 };
    uint32_t const ces[9] = { 0x3E3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_251)
{
    // 11FB 0021;	
    // (ᇻ) HANGUL JONGSEONG KIYEOK-PIEUP	[3E3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FB, 0x0021 };
    uint32_t const ces[9] = { 0x3E3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_252)
{
    // 11FB 003F;	
    // (ᇻ) HANGUL JONGSEONG KIYEOK-PIEUP	[3E3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FB, 0x003F };
    uint32_t const ces[9] = { 0x3E3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_253)
{
    // 11FB 0061;	
    // (ᇻ) HANGUL JONGSEONG KIYEOK-PIEUP	[3E3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FB, 0x0061 };
    uint32_t const ces[9] = { 0x3E3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_254)
{
    // 11FB 0041;	
    // (ᇻ) HANGUL JONGSEONG KIYEOK-PIEUP	[3E3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11FB, 0x0041 };
    uint32_t const ces[9] = { 0x3E3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_255)
{
    // 11FB 0062;	
    // (ᇻ) HANGUL JONGSEONG KIYEOK-PIEUP	[3E3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FB, 0x0062 };
    uint32_t const ces[9] = { 0x3E3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_256)
{
    // 11FC 0021;	
    // (ᇼ) HANGUL JONGSEONG KIYEOK-CHIEUCH	[3E3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FC, 0x0021 };
    uint32_t const ces[9] = { 0x3E3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_257)
{
    // 11FC 003F;	
    // (ᇼ) HANGUL JONGSEONG KIYEOK-CHIEUCH	[3E3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FC, 0x003F };
    uint32_t const ces[9] = { 0x3E3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_258)
{
    // 11FC 0061;	
    // (ᇼ) HANGUL JONGSEONG KIYEOK-CHIEUCH	[3E3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FC, 0x0061 };
    uint32_t const ces[9] = { 0x3E3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_259)
{
    // 11FC 0041;	
    // (ᇼ) HANGUL JONGSEONG KIYEOK-CHIEUCH	[3E3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11FC, 0x0041 };
    uint32_t const ces[9] = { 0x3E3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_260)
{
    // 11FC 0062;	
    // (ᇼ) HANGUL JONGSEONG KIYEOK-CHIEUCH	[3E3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FC, 0x0062 };
    uint32_t const ces[9] = { 0x3E3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_261)
{
    // 11FD 0021;	
    // (ᇽ) HANGUL JONGSEONG KIYEOK-KHIEUKH	[3E3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FD, 0x0021 };
    uint32_t const ces[9] = { 0x3E3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_262)
{
    // 11FD 003F;	
    // (ᇽ) HANGUL JONGSEONG KIYEOK-KHIEUKH	[3E3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FD, 0x003F };
    uint32_t const ces[9] = { 0x3E3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_263)
{
    // 11FD 0061;	
    // (ᇽ) HANGUL JONGSEONG KIYEOK-KHIEUKH	[3E3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FD, 0x0061 };
    uint32_t const ces[9] = { 0x3E3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_264)
{
    // 11FD 0041;	
    // (ᇽ) HANGUL JONGSEONG KIYEOK-KHIEUKH	[3E3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11FD, 0x0041 };
    uint32_t const ces[9] = { 0x3E3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_265)
{
    // 11FD 0062;	
    // (ᇽ) HANGUL JONGSEONG KIYEOK-KHIEUKH	[3E3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FD, 0x0062 };
    uint32_t const ces[9] = { 0x3E3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_266)
{
    // 11FE 0021;	
    // (ᇾ) HANGUL JONGSEONG KIYEOK-HIEUH	[3E3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FE, 0x0021 };
    uint32_t const ces[9] = { 0x3E3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_267)
{
    // 11FE 003F;	
    // (ᇾ) HANGUL JONGSEONG KIYEOK-HIEUH	[3E3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FE, 0x003F };
    uint32_t const ces[9] = { 0x3E3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_268)
{
    // 11FE 0061;	
    // (ᇾ) HANGUL JONGSEONG KIYEOK-HIEUH	[3E3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FE, 0x0061 };
    uint32_t const ces[9] = { 0x3E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_269)
{
    // 11FE 0041;	
    // (ᇾ) HANGUL JONGSEONG KIYEOK-HIEUH	[3E3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11FE, 0x0041 };
    uint32_t const ces[9] = { 0x3E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_270)
{
    // 11FE 0062;	
    // (ᇾ) HANGUL JONGSEONG KIYEOK-HIEUH	[3E3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FE, 0x0062 };
    uint32_t const ces[9] = { 0x3E3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_271)
{
    // 11FF 0021;	
    // (ᇿ) HANGUL JONGSEONG SSANGNIEUN	[3E3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FF, 0x0021 };
    uint32_t const ces[9] = { 0x3E3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_272)
{
    // 11FF 003F;	
    // (ᇿ) HANGUL JONGSEONG SSANGNIEUN	[3E3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FF, 0x003F };
    uint32_t const ces[9] = { 0x3E3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_273)
{
    // 11FF 0061;	
    // (ᇿ) HANGUL JONGSEONG SSANGNIEUN	[3E3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FF, 0x0061 };
    uint32_t const ces[9] = { 0x3E3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_274)
{
    // 11FF 0041;	
    // (ᇿ) HANGUL JONGSEONG SSANGNIEUN	[3E3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11FF, 0x0041 };
    uint32_t const ces[9] = { 0x3E3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_275)
{
    // 11FF 0062;	
    // (ᇿ) HANGUL JONGSEONG SSANGNIEUN	[3E3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11FF, 0x0062 };
    uint32_t const ces[9] = { 0x3E3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_276)
{
    // D7CB 0021;	
    // (ퟋ) HANGUL JONGSEONG NIEUN-RIEUL	[3E40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7CB, 0x0021 };
    uint32_t const ces[9] = { 0x3E40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_277)
{
    // D7CB 003F;	
    // (ퟋ) HANGUL JONGSEONG NIEUN-RIEUL	[3E40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7CB, 0x003F };
    uint32_t const ces[9] = { 0x3E40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_278)
{
    // D7CB 0061;	
    // (ퟋ) HANGUL JONGSEONG NIEUN-RIEUL	[3E40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7CB, 0x0061 };
    uint32_t const ces[9] = { 0x3E40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_279)
{
    // D7CB 0041;	
    // (ퟋ) HANGUL JONGSEONG NIEUN-RIEUL	[3E40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7CB, 0x0041 };
    uint32_t const ces[9] = { 0x3E40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_280)
{
    // D7CB 0062;	
    // (ퟋ) HANGUL JONGSEONG NIEUN-RIEUL	[3E40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7CB, 0x0062 };
    uint32_t const ces[9] = { 0x3E40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_281)
{
    // D7CC 0021;	
    // (ퟌ) HANGUL JONGSEONG NIEUN-CHIEUCH	[3E41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7CC, 0x0021 };
    uint32_t const ces[9] = { 0x3E41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_282)
{
    // D7CC 003F;	
    // (ퟌ) HANGUL JONGSEONG NIEUN-CHIEUCH	[3E41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7CC, 0x003F };
    uint32_t const ces[9] = { 0x3E41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_283)
{
    // D7CC 0061;	
    // (ퟌ) HANGUL JONGSEONG NIEUN-CHIEUCH	[3E41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7CC, 0x0061 };
    uint32_t const ces[9] = { 0x3E41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_284)
{
    // D7CC 0041;	
    // (ퟌ) HANGUL JONGSEONG NIEUN-CHIEUCH	[3E41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7CC, 0x0041 };
    uint32_t const ces[9] = { 0x3E41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_285)
{
    // D7CC 0062;	
    // (ퟌ) HANGUL JONGSEONG NIEUN-CHIEUCH	[3E41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7CC, 0x0062 };
    uint32_t const ces[9] = { 0x3E41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_286)
{
    // D7CD 0021;	
    // (ퟍ) HANGUL JONGSEONG SSANGTIKEUT	[3E42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7CD, 0x0021 };
    uint32_t const ces[9] = { 0x3E42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_287)
{
    // D7CD 003F;	
    // (ퟍ) HANGUL JONGSEONG SSANGTIKEUT	[3E42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7CD, 0x003F };
    uint32_t const ces[9] = { 0x3E42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_288)
{
    // D7CD 0061;	
    // (ퟍ) HANGUL JONGSEONG SSANGTIKEUT	[3E42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7CD, 0x0061 };
    uint32_t const ces[9] = { 0x3E42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_289)
{
    // D7CD 0041;	
    // (ퟍ) HANGUL JONGSEONG SSANGTIKEUT	[3E42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7CD, 0x0041 };
    uint32_t const ces[9] = { 0x3E42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_290)
{
    // D7CD 0062;	
    // (ퟍ) HANGUL JONGSEONG SSANGTIKEUT	[3E42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7CD, 0x0062 };
    uint32_t const ces[9] = { 0x3E42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_291)
{
    // D7CE 0021;	
    // (ퟎ) HANGUL JONGSEONG SSANGTIKEUT-PIEUP	[3E43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7CE, 0x0021 };
    uint32_t const ces[9] = { 0x3E43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_292)
{
    // D7CE 003F;	
    // (ퟎ) HANGUL JONGSEONG SSANGTIKEUT-PIEUP	[3E43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7CE, 0x003F };
    uint32_t const ces[9] = { 0x3E43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_293)
{
    // D7CE 0061;	
    // (ퟎ) HANGUL JONGSEONG SSANGTIKEUT-PIEUP	[3E43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7CE, 0x0061 };
    uint32_t const ces[9] = { 0x3E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_294)
{
    // D7CE 0041;	
    // (ퟎ) HANGUL JONGSEONG SSANGTIKEUT-PIEUP	[3E43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7CE, 0x0041 };
    uint32_t const ces[9] = { 0x3E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_295)
{
    // D7CE 0062;	
    // (ퟎ) HANGUL JONGSEONG SSANGTIKEUT-PIEUP	[3E43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7CE, 0x0062 };
    uint32_t const ces[9] = { 0x3E43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_296)
{
    // D7CF 0021;	
    // (ퟏ) HANGUL JONGSEONG TIKEUT-PIEUP	[3E44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7CF, 0x0021 };
    uint32_t const ces[9] = { 0x3E44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_297)
{
    // D7CF 003F;	
    // (ퟏ) HANGUL JONGSEONG TIKEUT-PIEUP	[3E44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7CF, 0x003F };
    uint32_t const ces[9] = { 0x3E44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_298)
{
    // D7CF 0061;	
    // (ퟏ) HANGUL JONGSEONG TIKEUT-PIEUP	[3E44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7CF, 0x0061 };
    uint32_t const ces[9] = { 0x3E44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_299)
{
    // D7CF 0041;	
    // (ퟏ) HANGUL JONGSEONG TIKEUT-PIEUP	[3E44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7CF, 0x0041 };
    uint32_t const ces[9] = { 0x3E44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_300)
{
    // D7CF 0062;	
    // (ퟏ) HANGUL JONGSEONG TIKEUT-PIEUP	[3E44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7CF, 0x0062 };
    uint32_t const ces[9] = { 0x3E44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_301)
{
    // D7D0 0021;	
    // (ퟐ) HANGUL JONGSEONG TIKEUT-SIOS	[3E45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D0, 0x0021 };
    uint32_t const ces[9] = { 0x3E45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_302)
{
    // D7D0 003F;	
    // (ퟐ) HANGUL JONGSEONG TIKEUT-SIOS	[3E45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D0, 0x003F };
    uint32_t const ces[9] = { 0x3E45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_303)
{
    // D7D0 0061;	
    // (ퟐ) HANGUL JONGSEONG TIKEUT-SIOS	[3E45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D0, 0x0061 };
    uint32_t const ces[9] = { 0x3E45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_304)
{
    // D7D0 0041;	
    // (ퟐ) HANGUL JONGSEONG TIKEUT-SIOS	[3E45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7D0, 0x0041 };
    uint32_t const ces[9] = { 0x3E45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_305)
{
    // D7D0 0062;	
    // (ퟐ) HANGUL JONGSEONG TIKEUT-SIOS	[3E45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D0, 0x0062 };
    uint32_t const ces[9] = { 0x3E45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_306)
{
    // D7D1 0021;	
    // (ퟑ) HANGUL JONGSEONG TIKEUT-SIOS-KIYEOK	[3E46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D1, 0x0021 };
    uint32_t const ces[9] = { 0x3E46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_307)
{
    // D7D1 003F;	
    // (ퟑ) HANGUL JONGSEONG TIKEUT-SIOS-KIYEOK	[3E46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D1, 0x003F };
    uint32_t const ces[9] = { 0x3E46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_308)
{
    // D7D1 0061;	
    // (ퟑ) HANGUL JONGSEONG TIKEUT-SIOS-KIYEOK	[3E46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D1, 0x0061 };
    uint32_t const ces[9] = { 0x3E46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_309)
{
    // D7D1 0041;	
    // (ퟑ) HANGUL JONGSEONG TIKEUT-SIOS-KIYEOK	[3E46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7D1, 0x0041 };
    uint32_t const ces[9] = { 0x3E46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_310)
{
    // D7D1 0062;	
    // (ퟑ) HANGUL JONGSEONG TIKEUT-SIOS-KIYEOK	[3E46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D1, 0x0062 };
    uint32_t const ces[9] = { 0x3E46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_311)
{
    // D7D2 0021;	
    // (ퟒ) HANGUL JONGSEONG TIKEUT-CIEUC	[3E47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D2, 0x0021 };
    uint32_t const ces[9] = { 0x3E47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_312)
{
    // D7D2 003F;	
    // (ퟒ) HANGUL JONGSEONG TIKEUT-CIEUC	[3E47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D2, 0x003F };
    uint32_t const ces[9] = { 0x3E47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_313)
{
    // D7D2 0061;	
    // (ퟒ) HANGUL JONGSEONG TIKEUT-CIEUC	[3E47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D2, 0x0061 };
    uint32_t const ces[9] = { 0x3E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_314)
{
    // D7D2 0041;	
    // (ퟒ) HANGUL JONGSEONG TIKEUT-CIEUC	[3E47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7D2, 0x0041 };
    uint32_t const ces[9] = { 0x3E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_315)
{
    // D7D2 0062;	
    // (ퟒ) HANGUL JONGSEONG TIKEUT-CIEUC	[3E47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D2, 0x0062 };
    uint32_t const ces[9] = { 0x3E47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_316)
{
    // D7D3 0021;	
    // (ퟓ) HANGUL JONGSEONG TIKEUT-CHIEUCH	[3E48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D3, 0x0021 };
    uint32_t const ces[9] = { 0x3E48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_317)
{
    // D7D3 003F;	
    // (ퟓ) HANGUL JONGSEONG TIKEUT-CHIEUCH	[3E48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D3, 0x003F };
    uint32_t const ces[9] = { 0x3E48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_318)
{
    // D7D3 0061;	
    // (ퟓ) HANGUL JONGSEONG TIKEUT-CHIEUCH	[3E48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D3, 0x0061 };
    uint32_t const ces[9] = { 0x3E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_319)
{
    // D7D3 0041;	
    // (ퟓ) HANGUL JONGSEONG TIKEUT-CHIEUCH	[3E48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7D3, 0x0041 };
    uint32_t const ces[9] = { 0x3E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_320)
{
    // D7D3 0062;	
    // (ퟓ) HANGUL JONGSEONG TIKEUT-CHIEUCH	[3E48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D3, 0x0062 };
    uint32_t const ces[9] = { 0x3E48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_321)
{
    // D7D4 0021;	
    // (ퟔ) HANGUL JONGSEONG TIKEUT-THIEUTH	[3E49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D4, 0x0021 };
    uint32_t const ces[9] = { 0x3E49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_322)
{
    // D7D4 003F;	
    // (ퟔ) HANGUL JONGSEONG TIKEUT-THIEUTH	[3E49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D4, 0x003F };
    uint32_t const ces[9] = { 0x3E49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_323)
{
    // D7D4 0061;	
    // (ퟔ) HANGUL JONGSEONG TIKEUT-THIEUTH	[3E49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D4, 0x0061 };
    uint32_t const ces[9] = { 0x3E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_324)
{
    // D7D4 0041;	
    // (ퟔ) HANGUL JONGSEONG TIKEUT-THIEUTH	[3E49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7D4, 0x0041 };
    uint32_t const ces[9] = { 0x3E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_325)
{
    // D7D4 0062;	
    // (ퟔ) HANGUL JONGSEONG TIKEUT-THIEUTH	[3E49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D4, 0x0062 };
    uint32_t const ces[9] = { 0x3E49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_326)
{
    // D7D5 0021;	
    // (ퟕ) HANGUL JONGSEONG RIEUL-SSANGKIYEOK	[3E4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D5, 0x0021 };
    uint32_t const ces[9] = { 0x3E4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_327)
{
    // D7D5 003F;	
    // (ퟕ) HANGUL JONGSEONG RIEUL-SSANGKIYEOK	[3E4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D5, 0x003F };
    uint32_t const ces[9] = { 0x3E4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_328)
{
    // D7D5 0061;	
    // (ퟕ) HANGUL JONGSEONG RIEUL-SSANGKIYEOK	[3E4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D5, 0x0061 };
    uint32_t const ces[9] = { 0x3E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_329)
{
    // D7D5 0041;	
    // (ퟕ) HANGUL JONGSEONG RIEUL-SSANGKIYEOK	[3E4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7D5, 0x0041 };
    uint32_t const ces[9] = { 0x3E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_330)
{
    // D7D5 0062;	
    // (ퟕ) HANGUL JONGSEONG RIEUL-SSANGKIYEOK	[3E4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D5, 0x0062 };
    uint32_t const ces[9] = { 0x3E4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_331)
{
    // D7D6 0021;	
    // (ퟖ) HANGUL JONGSEONG RIEUL-KIYEOK-HIEUH	[3E4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D6, 0x0021 };
    uint32_t const ces[9] = { 0x3E4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_332)
{
    // D7D6 003F;	
    // (ퟖ) HANGUL JONGSEONG RIEUL-KIYEOK-HIEUH	[3E4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D6, 0x003F };
    uint32_t const ces[9] = { 0x3E4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_333)
{
    // D7D6 0061;	
    // (ퟖ) HANGUL JONGSEONG RIEUL-KIYEOK-HIEUH	[3E4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D6, 0x0061 };
    uint32_t const ces[9] = { 0x3E4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_334)
{
    // D7D6 0041;	
    // (ퟖ) HANGUL JONGSEONG RIEUL-KIYEOK-HIEUH	[3E4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7D6, 0x0041 };
    uint32_t const ces[9] = { 0x3E4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_335)
{
    // D7D6 0062;	
    // (ퟖ) HANGUL JONGSEONG RIEUL-KIYEOK-HIEUH	[3E4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D6, 0x0062 };
    uint32_t const ces[9] = { 0x3E4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_336)
{
    // D7D7 0021;	
    // (ퟗ) HANGUL JONGSEONG SSANGRIEUL-KHIEUKH	[3E4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D7, 0x0021 };
    uint32_t const ces[9] = { 0x3E4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_337)
{
    // D7D7 003F;	
    // (ퟗ) HANGUL JONGSEONG SSANGRIEUL-KHIEUKH	[3E4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D7, 0x003F };
    uint32_t const ces[9] = { 0x3E4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_338)
{
    // D7D7 0061;	
    // (ퟗ) HANGUL JONGSEONG SSANGRIEUL-KHIEUKH	[3E4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D7, 0x0061 };
    uint32_t const ces[9] = { 0x3E4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_339)
{
    // D7D7 0041;	
    // (ퟗ) HANGUL JONGSEONG SSANGRIEUL-KHIEUKH	[3E4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7D7, 0x0041 };
    uint32_t const ces[9] = { 0x3E4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_340)
{
    // D7D7 0062;	
    // (ퟗ) HANGUL JONGSEONG SSANGRIEUL-KHIEUKH	[3E4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D7, 0x0062 };
    uint32_t const ces[9] = { 0x3E4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_341)
{
    // D7D8 0021;	
    // (ퟘ) HANGUL JONGSEONG RIEUL-MIEUM-HIEUH	[3E4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D8, 0x0021 };
    uint32_t const ces[9] = { 0x3E4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_342)
{
    // D7D8 003F;	
    // (ퟘ) HANGUL JONGSEONG RIEUL-MIEUM-HIEUH	[3E4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D8, 0x003F };
    uint32_t const ces[9] = { 0x3E4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_343)
{
    // D7D8 0061;	
    // (ퟘ) HANGUL JONGSEONG RIEUL-MIEUM-HIEUH	[3E4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D8, 0x0061 };
    uint32_t const ces[9] = { 0x3E4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_344)
{
    // D7D8 0041;	
    // (ퟘ) HANGUL JONGSEONG RIEUL-MIEUM-HIEUH	[3E4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7D8, 0x0041 };
    uint32_t const ces[9] = { 0x3E4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_345)
{
    // D7D8 0062;	
    // (ퟘ) HANGUL JONGSEONG RIEUL-MIEUM-HIEUH	[3E4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D8, 0x0062 };
    uint32_t const ces[9] = { 0x3E4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_346)
{
    // D7D9 0021;	
    // (ퟙ) HANGUL JONGSEONG RIEUL-PIEUP-TIKEUT	[3E4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D9, 0x0021 };
    uint32_t const ces[9] = { 0x3E4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_347)
{
    // D7D9 003F;	
    // (ퟙ) HANGUL JONGSEONG RIEUL-PIEUP-TIKEUT	[3E4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D9, 0x003F };
    uint32_t const ces[9] = { 0x3E4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_348)
{
    // D7D9 0061;	
    // (ퟙ) HANGUL JONGSEONG RIEUL-PIEUP-TIKEUT	[3E4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D9, 0x0061 };
    uint32_t const ces[9] = { 0x3E4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_349)
{
    // D7D9 0041;	
    // (ퟙ) HANGUL JONGSEONG RIEUL-PIEUP-TIKEUT	[3E4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7D9, 0x0041 };
    uint32_t const ces[9] = { 0x3E4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_350)
{
    // D7D9 0062;	
    // (ퟙ) HANGUL JONGSEONG RIEUL-PIEUP-TIKEUT	[3E4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7D9, 0x0062 };
    uint32_t const ces[9] = { 0x3E4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_351)
{
    // D7DA 0021;	
    // (ퟚ) HANGUL JONGSEONG RIEUL-PIEUP-PHIEUPH	[3E4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DA, 0x0021 };
    uint32_t const ces[9] = { 0x3E4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_352)
{
    // D7DA 003F;	
    // (ퟚ) HANGUL JONGSEONG RIEUL-PIEUP-PHIEUPH	[3E4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DA, 0x003F };
    uint32_t const ces[9] = { 0x3E4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_353)
{
    // D7DA 0061;	
    // (ퟚ) HANGUL JONGSEONG RIEUL-PIEUP-PHIEUPH	[3E4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DA, 0x0061 };
    uint32_t const ces[9] = { 0x3E4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_354)
{
    // D7DA 0041;	
    // (ퟚ) HANGUL JONGSEONG RIEUL-PIEUP-PHIEUPH	[3E4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7DA, 0x0041 };
    uint32_t const ces[9] = { 0x3E4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_355)
{
    // D7DA 0062;	
    // (ퟚ) HANGUL JONGSEONG RIEUL-PIEUP-PHIEUPH	[3E4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DA, 0x0062 };
    uint32_t const ces[9] = { 0x3E4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_356)
{
    // D7DB 0021;	
    // (ퟛ) HANGUL JONGSEONG RIEUL-YESIEUNG	[3E50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DB, 0x0021 };
    uint32_t const ces[9] = { 0x3E50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_357)
{
    // D7DB 003F;	
    // (ퟛ) HANGUL JONGSEONG RIEUL-YESIEUNG	[3E50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DB, 0x003F };
    uint32_t const ces[9] = { 0x3E50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_358)
{
    // D7DB 0061;	
    // (ퟛ) HANGUL JONGSEONG RIEUL-YESIEUNG	[3E50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DB, 0x0061 };
    uint32_t const ces[9] = { 0x3E50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_359)
{
    // D7DB 0041;	
    // (ퟛ) HANGUL JONGSEONG RIEUL-YESIEUNG	[3E50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7DB, 0x0041 };
    uint32_t const ces[9] = { 0x3E50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_360)
{
    // D7DB 0062;	
    // (ퟛ) HANGUL JONGSEONG RIEUL-YESIEUNG	[3E50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DB, 0x0062 };
    uint32_t const ces[9] = { 0x3E50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_361)
{
    // D7DC 0021;	
    // (ퟜ) HANGUL JONGSEONG RIEUL-YEORINHIEUH-HIEUH	[3E51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DC, 0x0021 };
    uint32_t const ces[9] = { 0x3E51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_362)
{
    // D7DC 003F;	
    // (ퟜ) HANGUL JONGSEONG RIEUL-YEORINHIEUH-HIEUH	[3E51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DC, 0x003F };
    uint32_t const ces[9] = { 0x3E51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_363)
{
    // D7DC 0061;	
    // (ퟜ) HANGUL JONGSEONG RIEUL-YEORINHIEUH-HIEUH	[3E51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DC, 0x0061 };
    uint32_t const ces[9] = { 0x3E51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_364)
{
    // D7DC 0041;	
    // (ퟜ) HANGUL JONGSEONG RIEUL-YEORINHIEUH-HIEUH	[3E51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7DC, 0x0041 };
    uint32_t const ces[9] = { 0x3E51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_365)
{
    // D7DC 0062;	
    // (ퟜ) HANGUL JONGSEONG RIEUL-YEORINHIEUH-HIEUH	[3E51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DC, 0x0062 };
    uint32_t const ces[9] = { 0x3E51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_366)
{
    // D7DD 0021;	
    // (ퟝ) HANGUL JONGSEONG KAPYEOUNRIEUL	[3E52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DD, 0x0021 };
    uint32_t const ces[9] = { 0x3E52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_367)
{
    // D7DD 003F;	
    // (ퟝ) HANGUL JONGSEONG KAPYEOUNRIEUL	[3E52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DD, 0x003F };
    uint32_t const ces[9] = { 0x3E52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_368)
{
    // D7DD 0061;	
    // (ퟝ) HANGUL JONGSEONG KAPYEOUNRIEUL	[3E52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DD, 0x0061 };
    uint32_t const ces[9] = { 0x3E52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_369)
{
    // D7DD 0041;	
    // (ퟝ) HANGUL JONGSEONG KAPYEOUNRIEUL	[3E52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7DD, 0x0041 };
    uint32_t const ces[9] = { 0x3E52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_370)
{
    // D7DD 0062;	
    // (ퟝ) HANGUL JONGSEONG KAPYEOUNRIEUL	[3E52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DD, 0x0062 };
    uint32_t const ces[9] = { 0x3E52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_371)
{
    // D7DE 0021;	
    // (ퟞ) HANGUL JONGSEONG MIEUM-NIEUN	[3E53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DE, 0x0021 };
    uint32_t const ces[9] = { 0x3E53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_372)
{
    // D7DE 003F;	
    // (ퟞ) HANGUL JONGSEONG MIEUM-NIEUN	[3E53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DE, 0x003F };
    uint32_t const ces[9] = { 0x3E53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_373)
{
    // D7DE 0061;	
    // (ퟞ) HANGUL JONGSEONG MIEUM-NIEUN	[3E53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DE, 0x0061 };
    uint32_t const ces[9] = { 0x3E53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_374)
{
    // D7DE 0041;	
    // (ퟞ) HANGUL JONGSEONG MIEUM-NIEUN	[3E53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7DE, 0x0041 };
    uint32_t const ces[9] = { 0x3E53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_375)
{
    // D7DE 0062;	
    // (ퟞ) HANGUL JONGSEONG MIEUM-NIEUN	[3E53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DE, 0x0062 };
    uint32_t const ces[9] = { 0x3E53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_376)
{
    // D7DF 0021;	
    // (ퟟ) HANGUL JONGSEONG MIEUM-SSANGNIEUN	[3E54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DF, 0x0021 };
    uint32_t const ces[9] = { 0x3E54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_377)
{
    // D7DF 003F;	
    // (ퟟ) HANGUL JONGSEONG MIEUM-SSANGNIEUN	[3E54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DF, 0x003F };
    uint32_t const ces[9] = { 0x3E54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_378)
{
    // D7DF 0061;	
    // (ퟟ) HANGUL JONGSEONG MIEUM-SSANGNIEUN	[3E54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DF, 0x0061 };
    uint32_t const ces[9] = { 0x3E54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_379)
{
    // D7DF 0041;	
    // (ퟟ) HANGUL JONGSEONG MIEUM-SSANGNIEUN	[3E54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7DF, 0x0041 };
    uint32_t const ces[9] = { 0x3E54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_380)
{
    // D7DF 0062;	
    // (ퟟ) HANGUL JONGSEONG MIEUM-SSANGNIEUN	[3E54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7DF, 0x0062 };
    uint32_t const ces[9] = { 0x3E54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_381)
{
    // D7E0 0021;	
    // (ퟠ) HANGUL JONGSEONG SSANGMIEUM	[3E55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E0, 0x0021 };
    uint32_t const ces[9] = { 0x3E55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_382)
{
    // D7E0 003F;	
    // (ퟠ) HANGUL JONGSEONG SSANGMIEUM	[3E55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E0, 0x003F };
    uint32_t const ces[9] = { 0x3E55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_383)
{
    // D7E0 0061;	
    // (ퟠ) HANGUL JONGSEONG SSANGMIEUM	[3E55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E0, 0x0061 };
    uint32_t const ces[9] = { 0x3E55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_384)
{
    // D7E0 0041;	
    // (ퟠ) HANGUL JONGSEONG SSANGMIEUM	[3E55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7E0, 0x0041 };
    uint32_t const ces[9] = { 0x3E55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_385)
{
    // D7E0 0062;	
    // (ퟠ) HANGUL JONGSEONG SSANGMIEUM	[3E55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E0, 0x0062 };
    uint32_t const ces[9] = { 0x3E55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_386)
{
    // D7E1 0021;	
    // (ퟡ) HANGUL JONGSEONG MIEUM-PIEUP-SIOS	[3E56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E1, 0x0021 };
    uint32_t const ces[9] = { 0x3E56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_387)
{
    // D7E1 003F;	
    // (ퟡ) HANGUL JONGSEONG MIEUM-PIEUP-SIOS	[3E56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E1, 0x003F };
    uint32_t const ces[9] = { 0x3E56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_388)
{
    // D7E1 0061;	
    // (ퟡ) HANGUL JONGSEONG MIEUM-PIEUP-SIOS	[3E56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E1, 0x0061 };
    uint32_t const ces[9] = { 0x3E56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_389)
{
    // D7E1 0041;	
    // (ퟡ) HANGUL JONGSEONG MIEUM-PIEUP-SIOS	[3E56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7E1, 0x0041 };
    uint32_t const ces[9] = { 0x3E56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_390)
{
    // D7E1 0062;	
    // (ퟡ) HANGUL JONGSEONG MIEUM-PIEUP-SIOS	[3E56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E1, 0x0062 };
    uint32_t const ces[9] = { 0x3E56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_391)
{
    // D7E2 0021;	
    // (ퟢ) HANGUL JONGSEONG MIEUM-CIEUC	[3E57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E2, 0x0021 };
    uint32_t const ces[9] = { 0x3E57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_392)
{
    // D7E2 003F;	
    // (ퟢ) HANGUL JONGSEONG MIEUM-CIEUC	[3E57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E2, 0x003F };
    uint32_t const ces[9] = { 0x3E57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_393)
{
    // D7E2 0061;	
    // (ퟢ) HANGUL JONGSEONG MIEUM-CIEUC	[3E57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E2, 0x0061 };
    uint32_t const ces[9] = { 0x3E57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_394)
{
    // D7E2 0041;	
    // (ퟢ) HANGUL JONGSEONG MIEUM-CIEUC	[3E57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7E2, 0x0041 };
    uint32_t const ces[9] = { 0x3E57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_395)
{
    // D7E2 0062;	
    // (ퟢ) HANGUL JONGSEONG MIEUM-CIEUC	[3E57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E2, 0x0062 };
    uint32_t const ces[9] = { 0x3E57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_396)
{
    // D7E3 0021;	
    // (ퟣ) HANGUL JONGSEONG PIEUP-TIKEUT	[3E58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E3, 0x0021 };
    uint32_t const ces[9] = { 0x3E58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_397)
{
    // D7E3 003F;	
    // (ퟣ) HANGUL JONGSEONG PIEUP-TIKEUT	[3E58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E3, 0x003F };
    uint32_t const ces[9] = { 0x3E58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_398)
{
    // D7E3 0061;	
    // (ퟣ) HANGUL JONGSEONG PIEUP-TIKEUT	[3E58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E3, 0x0061 };
    uint32_t const ces[9] = { 0x3E58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_399)
{
    // D7E3 0041;	
    // (ퟣ) HANGUL JONGSEONG PIEUP-TIKEUT	[3E58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7E3, 0x0041 };
    uint32_t const ces[9] = { 0x3E58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_400)
{
    // D7E3 0062;	
    // (ퟣ) HANGUL JONGSEONG PIEUP-TIKEUT	[3E58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E3, 0x0062 };
    uint32_t const ces[9] = { 0x3E58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_401)
{
    // D7E4 0021;	
    // (ퟤ) HANGUL JONGSEONG PIEUP-RIEUL-PHIEUPH	[3E59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E4, 0x0021 };
    uint32_t const ces[9] = { 0x3E59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_402)
{
    // D7E4 003F;	
    // (ퟤ) HANGUL JONGSEONG PIEUP-RIEUL-PHIEUPH	[3E59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E4, 0x003F };
    uint32_t const ces[9] = { 0x3E59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_403)
{
    // D7E4 0061;	
    // (ퟤ) HANGUL JONGSEONG PIEUP-RIEUL-PHIEUPH	[3E59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E4, 0x0061 };
    uint32_t const ces[9] = { 0x3E59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_404)
{
    // D7E4 0041;	
    // (ퟤ) HANGUL JONGSEONG PIEUP-RIEUL-PHIEUPH	[3E59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7E4, 0x0041 };
    uint32_t const ces[9] = { 0x3E59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_405)
{
    // D7E4 0062;	
    // (ퟤ) HANGUL JONGSEONG PIEUP-RIEUL-PHIEUPH	[3E59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E4, 0x0062 };
    uint32_t const ces[9] = { 0x3E59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_406)
{
    // D7E5 0021;	
    // (ퟥ) HANGUL JONGSEONG PIEUP-MIEUM	[3E5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E5, 0x0021 };
    uint32_t const ces[9] = { 0x3E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_407)
{
    // D7E5 003F;	
    // (ퟥ) HANGUL JONGSEONG PIEUP-MIEUM	[3E5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E5, 0x003F };
    uint32_t const ces[9] = { 0x3E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_408)
{
    // D7E5 0061;	
    // (ퟥ) HANGUL JONGSEONG PIEUP-MIEUM	[3E5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E5, 0x0061 };
    uint32_t const ces[9] = { 0x3E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_409)
{
    // D7E5 0041;	
    // (ퟥ) HANGUL JONGSEONG PIEUP-MIEUM	[3E5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7E5, 0x0041 };
    uint32_t const ces[9] = { 0x3E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_410)
{
    // D7E5 0062;	
    // (ퟥ) HANGUL JONGSEONG PIEUP-MIEUM	[3E5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E5, 0x0062 };
    uint32_t const ces[9] = { 0x3E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_411)
{
    // D7E6 0021;	
    // (ퟦ) HANGUL JONGSEONG SSANGPIEUP	[3E5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E6, 0x0021 };
    uint32_t const ces[9] = { 0x3E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_412)
{
    // D7E6 003F;	
    // (ퟦ) HANGUL JONGSEONG SSANGPIEUP	[3E5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E6, 0x003F };
    uint32_t const ces[9] = { 0x3E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_413)
{
    // D7E6 0061;	
    // (ퟦ) HANGUL JONGSEONG SSANGPIEUP	[3E5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E6, 0x0061 };
    uint32_t const ces[9] = { 0x3E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_414)
{
    // D7E6 0041;	
    // (ퟦ) HANGUL JONGSEONG SSANGPIEUP	[3E5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7E6, 0x0041 };
    uint32_t const ces[9] = { 0x3E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_415)
{
    // D7E6 0062;	
    // (ퟦ) HANGUL JONGSEONG SSANGPIEUP	[3E5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E6, 0x0062 };
    uint32_t const ces[9] = { 0x3E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_416)
{
    // D7E7 0021;	
    // (ퟧ) HANGUL JONGSEONG PIEUP-SIOS-TIKEUT	[3E5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E7, 0x0021 };
    uint32_t const ces[9] = { 0x3E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_417)
{
    // D7E7 003F;	
    // (ퟧ) HANGUL JONGSEONG PIEUP-SIOS-TIKEUT	[3E5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E7, 0x003F };
    uint32_t const ces[9] = { 0x3E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_418)
{
    // D7E7 0061;	
    // (ퟧ) HANGUL JONGSEONG PIEUP-SIOS-TIKEUT	[3E5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E7, 0x0061 };
    uint32_t const ces[9] = { 0x3E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_419)
{
    // D7E7 0041;	
    // (ퟧ) HANGUL JONGSEONG PIEUP-SIOS-TIKEUT	[3E5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7E7, 0x0041 };
    uint32_t const ces[9] = { 0x3E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_420)
{
    // D7E7 0062;	
    // (ퟧ) HANGUL JONGSEONG PIEUP-SIOS-TIKEUT	[3E5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E7, 0x0062 };
    uint32_t const ces[9] = { 0x3E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_421)
{
    // D7E8 0021;	
    // (ퟨ) HANGUL JONGSEONG PIEUP-CIEUC	[3E5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E8, 0x0021 };
    uint32_t const ces[9] = { 0x3E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_422)
{
    // D7E8 003F;	
    // (ퟨ) HANGUL JONGSEONG PIEUP-CIEUC	[3E5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E8, 0x003F };
    uint32_t const ces[9] = { 0x3E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_423)
{
    // D7E8 0061;	
    // (ퟨ) HANGUL JONGSEONG PIEUP-CIEUC	[3E5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E8, 0x0061 };
    uint32_t const ces[9] = { 0x3E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_424)
{
    // D7E8 0041;	
    // (ퟨ) HANGUL JONGSEONG PIEUP-CIEUC	[3E5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7E8, 0x0041 };
    uint32_t const ces[9] = { 0x3E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_425)
{
    // D7E8 0062;	
    // (ퟨ) HANGUL JONGSEONG PIEUP-CIEUC	[3E5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E8, 0x0062 };
    uint32_t const ces[9] = { 0x3E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_426)
{
    // D7E9 0021;	
    // (ퟩ) HANGUL JONGSEONG PIEUP-CHIEUCH	[3E5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E9, 0x0021 };
    uint32_t const ces[9] = { 0x3E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_427)
{
    // D7E9 003F;	
    // (ퟩ) HANGUL JONGSEONG PIEUP-CHIEUCH	[3E5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E9, 0x003F };
    uint32_t const ces[9] = { 0x3E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_428)
{
    // D7E9 0061;	
    // (ퟩ) HANGUL JONGSEONG PIEUP-CHIEUCH	[3E5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E9, 0x0061 };
    uint32_t const ces[9] = { 0x3E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_429)
{
    // D7E9 0041;	
    // (ퟩ) HANGUL JONGSEONG PIEUP-CHIEUCH	[3E5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7E9, 0x0041 };
    uint32_t const ces[9] = { 0x3E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_430)
{
    // D7E9 0062;	
    // (ퟩ) HANGUL JONGSEONG PIEUP-CHIEUCH	[3E5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7E9, 0x0062 };
    uint32_t const ces[9] = { 0x3E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_431)
{
    // D7EA 0021;	
    // (ퟪ) HANGUL JONGSEONG SIOS-MIEUM	[3E5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7EA, 0x0021 };
    uint32_t const ces[9] = { 0x3E5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_432)
{
    // D7EA 003F;	
    // (ퟪ) HANGUL JONGSEONG SIOS-MIEUM	[3E5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7EA, 0x003F };
    uint32_t const ces[9] = { 0x3E5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_433)
{
    // D7EA 0061;	
    // (ퟪ) HANGUL JONGSEONG SIOS-MIEUM	[3E5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7EA, 0x0061 };
    uint32_t const ces[9] = { 0x3E5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_434)
{
    // D7EA 0041;	
    // (ퟪ) HANGUL JONGSEONG SIOS-MIEUM	[3E5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7EA, 0x0041 };
    uint32_t const ces[9] = { 0x3E5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_435)
{
    // D7EA 0062;	
    // (ퟪ) HANGUL JONGSEONG SIOS-MIEUM	[3E5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7EA, 0x0062 };
    uint32_t const ces[9] = { 0x3E5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_436)
{
    // D7EB 0021;	
    // (ퟫ) HANGUL JONGSEONG SIOS-KAPYEOUNPIEUP	[3E60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7EB, 0x0021 };
    uint32_t const ces[9] = { 0x3E60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_437)
{
    // D7EB 003F;	
    // (ퟫ) HANGUL JONGSEONG SIOS-KAPYEOUNPIEUP	[3E60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7EB, 0x003F };
    uint32_t const ces[9] = { 0x3E60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_438)
{
    // D7EB 0061;	
    // (ퟫ) HANGUL JONGSEONG SIOS-KAPYEOUNPIEUP	[3E60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7EB, 0x0061 };
    uint32_t const ces[9] = { 0x3E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_439)
{
    // D7EB 0041;	
    // (ퟫ) HANGUL JONGSEONG SIOS-KAPYEOUNPIEUP	[3E60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7EB, 0x0041 };
    uint32_t const ces[9] = { 0x3E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_440)
{
    // D7EB 0062;	
    // (ퟫ) HANGUL JONGSEONG SIOS-KAPYEOUNPIEUP	[3E60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7EB, 0x0062 };
    uint32_t const ces[9] = { 0x3E60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_441)
{
    // D7EC 0021;	
    // (ퟬ) HANGUL JONGSEONG SSANGSIOS-KIYEOK	[3E61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7EC, 0x0021 };
    uint32_t const ces[9] = { 0x3E61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_442)
{
    // D7EC 003F;	
    // (ퟬ) HANGUL JONGSEONG SSANGSIOS-KIYEOK	[3E61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7EC, 0x003F };
    uint32_t const ces[9] = { 0x3E61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_443)
{
    // D7EC 0061;	
    // (ퟬ) HANGUL JONGSEONG SSANGSIOS-KIYEOK	[3E61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7EC, 0x0061 };
    uint32_t const ces[9] = { 0x3E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_444)
{
    // D7EC 0041;	
    // (ퟬ) HANGUL JONGSEONG SSANGSIOS-KIYEOK	[3E61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7EC, 0x0041 };
    uint32_t const ces[9] = { 0x3E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_445)
{
    // D7EC 0062;	
    // (ퟬ) HANGUL JONGSEONG SSANGSIOS-KIYEOK	[3E61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7EC, 0x0062 };
    uint32_t const ces[9] = { 0x3E61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_446)
{
    // D7ED 0021;	
    // (ퟭ) HANGUL JONGSEONG SSANGSIOS-TIKEUT	[3E62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7ED, 0x0021 };
    uint32_t const ces[9] = { 0x3E62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_447)
{
    // D7ED 003F;	
    // (ퟭ) HANGUL JONGSEONG SSANGSIOS-TIKEUT	[3E62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7ED, 0x003F };
    uint32_t const ces[9] = { 0x3E62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_448)
{
    // D7ED 0061;	
    // (ퟭ) HANGUL JONGSEONG SSANGSIOS-TIKEUT	[3E62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7ED, 0x0061 };
    uint32_t const ces[9] = { 0x3E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_449)
{
    // D7ED 0041;	
    // (ퟭ) HANGUL JONGSEONG SSANGSIOS-TIKEUT	[3E62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7ED, 0x0041 };
    uint32_t const ces[9] = { 0x3E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_450)
{
    // D7ED 0062;	
    // (ퟭ) HANGUL JONGSEONG SSANGSIOS-TIKEUT	[3E62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7ED, 0x0062 };
    uint32_t const ces[9] = { 0x3E62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_451)
{
    // D7EE 0021;	
    // (ퟮ) HANGUL JONGSEONG SIOS-PANSIOS	[3E63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7EE, 0x0021 };
    uint32_t const ces[9] = { 0x3E63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_452)
{
    // D7EE 003F;	
    // (ퟮ) HANGUL JONGSEONG SIOS-PANSIOS	[3E63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7EE, 0x003F };
    uint32_t const ces[9] = { 0x3E63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_453)
{
    // D7EE 0061;	
    // (ퟮ) HANGUL JONGSEONG SIOS-PANSIOS	[3E63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7EE, 0x0061 };
    uint32_t const ces[9] = { 0x3E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_454)
{
    // D7EE 0041;	
    // (ퟮ) HANGUL JONGSEONG SIOS-PANSIOS	[3E63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7EE, 0x0041 };
    uint32_t const ces[9] = { 0x3E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_455)
{
    // D7EE 0062;	
    // (ퟮ) HANGUL JONGSEONG SIOS-PANSIOS	[3E63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7EE, 0x0062 };
    uint32_t const ces[9] = { 0x3E63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_456)
{
    // D7EF 0021;	
    // (ퟯ) HANGUL JONGSEONG SIOS-CIEUC	[3E64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7EF, 0x0021 };
    uint32_t const ces[9] = { 0x3E64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_457)
{
    // D7EF 003F;	
    // (ퟯ) HANGUL JONGSEONG SIOS-CIEUC	[3E64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7EF, 0x003F };
    uint32_t const ces[9] = { 0x3E64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_458)
{
    // D7EF 0061;	
    // (ퟯ) HANGUL JONGSEONG SIOS-CIEUC	[3E64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7EF, 0x0061 };
    uint32_t const ces[9] = { 0x3E64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_459)
{
    // D7EF 0041;	
    // (ퟯ) HANGUL JONGSEONG SIOS-CIEUC	[3E64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7EF, 0x0041 };
    uint32_t const ces[9] = { 0x3E64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_460)
{
    // D7EF 0062;	
    // (ퟯ) HANGUL JONGSEONG SIOS-CIEUC	[3E64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7EF, 0x0062 };
    uint32_t const ces[9] = { 0x3E64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_461)
{
    // D7F0 0021;	
    // (ퟰ) HANGUL JONGSEONG SIOS-CHIEUCH	[3E65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F0, 0x0021 };
    uint32_t const ces[9] = { 0x3E65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_462)
{
    // D7F0 003F;	
    // (ퟰ) HANGUL JONGSEONG SIOS-CHIEUCH	[3E65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F0, 0x003F };
    uint32_t const ces[9] = { 0x3E65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_463)
{
    // D7F0 0061;	
    // (ퟰ) HANGUL JONGSEONG SIOS-CHIEUCH	[3E65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F0, 0x0061 };
    uint32_t const ces[9] = { 0x3E65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_464)
{
    // D7F0 0041;	
    // (ퟰ) HANGUL JONGSEONG SIOS-CHIEUCH	[3E65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7F0, 0x0041 };
    uint32_t const ces[9] = { 0x3E65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_465)
{
    // D7F0 0062;	
    // (ퟰ) HANGUL JONGSEONG SIOS-CHIEUCH	[3E65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F0, 0x0062 };
    uint32_t const ces[9] = { 0x3E65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_466)
{
    // D7F1 0021;	
    // (ퟱ) HANGUL JONGSEONG SIOS-THIEUTH	[3E66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F1, 0x0021 };
    uint32_t const ces[9] = { 0x3E66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_467)
{
    // D7F1 003F;	
    // (ퟱ) HANGUL JONGSEONG SIOS-THIEUTH	[3E66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F1, 0x003F };
    uint32_t const ces[9] = { 0x3E66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_468)
{
    // D7F1 0061;	
    // (ퟱ) HANGUL JONGSEONG SIOS-THIEUTH	[3E66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F1, 0x0061 };
    uint32_t const ces[9] = { 0x3E66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_469)
{
    // D7F1 0041;	
    // (ퟱ) HANGUL JONGSEONG SIOS-THIEUTH	[3E66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7F1, 0x0041 };
    uint32_t const ces[9] = { 0x3E66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_470)
{
    // D7F1 0062;	
    // (ퟱ) HANGUL JONGSEONG SIOS-THIEUTH	[3E66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F1, 0x0062 };
    uint32_t const ces[9] = { 0x3E66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_471)
{
    // D7F2 0021;	
    // (ퟲ) HANGUL JONGSEONG SIOS-HIEUH	[3E67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F2, 0x0021 };
    uint32_t const ces[9] = { 0x3E67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_472)
{
    // D7F2 003F;	
    // (ퟲ) HANGUL JONGSEONG SIOS-HIEUH	[3E67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F2, 0x003F };
    uint32_t const ces[9] = { 0x3E67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_473)
{
    // D7F2 0061;	
    // (ퟲ) HANGUL JONGSEONG SIOS-HIEUH	[3E67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F2, 0x0061 };
    uint32_t const ces[9] = { 0x3E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_474)
{
    // D7F2 0041;	
    // (ퟲ) HANGUL JONGSEONG SIOS-HIEUH	[3E67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7F2, 0x0041 };
    uint32_t const ces[9] = { 0x3E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_475)
{
    // D7F2 0062;	
    // (ퟲ) HANGUL JONGSEONG SIOS-HIEUH	[3E67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F2, 0x0062 };
    uint32_t const ces[9] = { 0x3E67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_476)
{
    // D7F3 0021;	
    // (ퟳ) HANGUL JONGSEONG PANSIOS-PIEUP	[3E68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F3, 0x0021 };
    uint32_t const ces[9] = { 0x3E68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_477)
{
    // D7F3 003F;	
    // (ퟳ) HANGUL JONGSEONG PANSIOS-PIEUP	[3E68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F3, 0x003F };
    uint32_t const ces[9] = { 0x3E68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_478)
{
    // D7F3 0061;	
    // (ퟳ) HANGUL JONGSEONG PANSIOS-PIEUP	[3E68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F3, 0x0061 };
    uint32_t const ces[9] = { 0x3E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_479)
{
    // D7F3 0041;	
    // (ퟳ) HANGUL JONGSEONG PANSIOS-PIEUP	[3E68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7F3, 0x0041 };
    uint32_t const ces[9] = { 0x3E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_480)
{
    // D7F3 0062;	
    // (ퟳ) HANGUL JONGSEONG PANSIOS-PIEUP	[3E68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F3, 0x0062 };
    uint32_t const ces[9] = { 0x3E68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_481)
{
    // D7F4 0021;	
    // (ퟴ) HANGUL JONGSEONG PANSIOS-KAPYEOUNPIEUP	[3E69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F4, 0x0021 };
    uint32_t const ces[9] = { 0x3E69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_482)
{
    // D7F4 003F;	
    // (ퟴ) HANGUL JONGSEONG PANSIOS-KAPYEOUNPIEUP	[3E69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F4, 0x003F };
    uint32_t const ces[9] = { 0x3E69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_483)
{
    // D7F4 0061;	
    // (ퟴ) HANGUL JONGSEONG PANSIOS-KAPYEOUNPIEUP	[3E69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F4, 0x0061 };
    uint32_t const ces[9] = { 0x3E69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_484)
{
    // D7F4 0041;	
    // (ퟴ) HANGUL JONGSEONG PANSIOS-KAPYEOUNPIEUP	[3E69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7F4, 0x0041 };
    uint32_t const ces[9] = { 0x3E69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_485)
{
    // D7F4 0062;	
    // (ퟴ) HANGUL JONGSEONG PANSIOS-KAPYEOUNPIEUP	[3E69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F4, 0x0062 };
    uint32_t const ces[9] = { 0x3E69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_486)
{
    // D7F5 0021;	
    // (ퟵ) HANGUL JONGSEONG YESIEUNG-MIEUM	[3E6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F5, 0x0021 };
    uint32_t const ces[9] = { 0x3E6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_487)
{
    // D7F5 003F;	
    // (ퟵ) HANGUL JONGSEONG YESIEUNG-MIEUM	[3E6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F5, 0x003F };
    uint32_t const ces[9] = { 0x3E6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_488)
{
    // D7F5 0061;	
    // (ퟵ) HANGUL JONGSEONG YESIEUNG-MIEUM	[3E6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F5, 0x0061 };
    uint32_t const ces[9] = { 0x3E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_489)
{
    // D7F5 0041;	
    // (ퟵ) HANGUL JONGSEONG YESIEUNG-MIEUM	[3E6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7F5, 0x0041 };
    uint32_t const ces[9] = { 0x3E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_490)
{
    // D7F5 0062;	
    // (ퟵ) HANGUL JONGSEONG YESIEUNG-MIEUM	[3E6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F5, 0x0062 };
    uint32_t const ces[9] = { 0x3E6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_491)
{
    // D7F6 0021;	
    // (ퟶ) HANGUL JONGSEONG YESIEUNG-HIEUH	[3E6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F6, 0x0021 };
    uint32_t const ces[9] = { 0x3E6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_492)
{
    // D7F6 003F;	
    // (ퟶ) HANGUL JONGSEONG YESIEUNG-HIEUH	[3E6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F6, 0x003F };
    uint32_t const ces[9] = { 0x3E6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_493)
{
    // D7F6 0061;	
    // (ퟶ) HANGUL JONGSEONG YESIEUNG-HIEUH	[3E6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F6, 0x0061 };
    uint32_t const ces[9] = { 0x3E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_494)
{
    // D7F6 0041;	
    // (ퟶ) HANGUL JONGSEONG YESIEUNG-HIEUH	[3E6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7F6, 0x0041 };
    uint32_t const ces[9] = { 0x3E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_495)
{
    // D7F6 0062;	
    // (ퟶ) HANGUL JONGSEONG YESIEUNG-HIEUH	[3E6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F6, 0x0062 };
    uint32_t const ces[9] = { 0x3E6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_496)
{
    // D7F7 0021;	
    // (ퟷ) HANGUL JONGSEONG CIEUC-PIEUP	[3E6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F7, 0x0021 };
    uint32_t const ces[9] = { 0x3E6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_497)
{
    // D7F7 003F;	
    // (ퟷ) HANGUL JONGSEONG CIEUC-PIEUP	[3E6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F7, 0x003F };
    uint32_t const ces[9] = { 0x3E6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_498)
{
    // D7F7 0061;	
    // (ퟷ) HANGUL JONGSEONG CIEUC-PIEUP	[3E6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD7F7, 0x0061 };
    uint32_t const ces[9] = { 0x3E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_245_499)
{
    // D7F7 0041;	
    // (ퟷ) HANGUL JONGSEONG CIEUC-PIEUP	[3E6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD7F7, 0x0041 };
    uint32_t const ces[9] = { 0x3E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

