// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_287_000)
{
    // 120A3 003F;	
    // (𒂣) CUNEIFORM SIGN EZEN TIMES A PLUS LAL	[4C8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A3, 0x003F };
    uint32_t const ces[9] = { 0x4C8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_001)
{
    // 120A3 0061;	
    // (𒂣) CUNEIFORM SIGN EZEN TIMES A PLUS LAL	[4C8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A3, 0x0061 };
    uint32_t const ces[9] = { 0x4C8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_002)
{
    // 120A3 0041;	
    // (𒂣) CUNEIFORM SIGN EZEN TIMES A PLUS LAL	[4C8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120A3, 0x0041 };
    uint32_t const ces[9] = { 0x4C8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_003)
{
    // 120A3 0062;	
    // (𒂣) CUNEIFORM SIGN EZEN TIMES A PLUS LAL	[4C8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A3, 0x0062 };
    uint32_t const ces[9] = { 0x4C8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_004)
{
    // 120A4 0021;	
    // (𒂤) CUNEIFORM SIGN EZEN TIMES A PLUS LAL TIMES LAL	[4C90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A4, 0x0021 };
    uint32_t const ces[9] = { 0x4C90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_005)
{
    // 120A4 003F;	
    // (𒂤) CUNEIFORM SIGN EZEN TIMES A PLUS LAL TIMES LAL	[4C90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A4, 0x003F };
    uint32_t const ces[9] = { 0x4C90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_006)
{
    // 120A4 0061;	
    // (𒂤) CUNEIFORM SIGN EZEN TIMES A PLUS LAL TIMES LAL	[4C90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A4, 0x0061 };
    uint32_t const ces[9] = { 0x4C90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_007)
{
    // 120A4 0041;	
    // (𒂤) CUNEIFORM SIGN EZEN TIMES A PLUS LAL TIMES LAL	[4C90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120A4, 0x0041 };
    uint32_t const ces[9] = { 0x4C90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_008)
{
    // 120A4 0062;	
    // (𒂤) CUNEIFORM SIGN EZEN TIMES A PLUS LAL TIMES LAL	[4C90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A4, 0x0062 };
    uint32_t const ces[9] = { 0x4C90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_009)
{
    // 120A5 0021;	
    // (𒂥) CUNEIFORM SIGN EZEN TIMES AN	[4C91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A5, 0x0021 };
    uint32_t const ces[9] = { 0x4C91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_010)
{
    // 120A5 003F;	
    // (𒂥) CUNEIFORM SIGN EZEN TIMES AN	[4C91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A5, 0x003F };
    uint32_t const ces[9] = { 0x4C91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_011)
{
    // 120A5 0061;	
    // (𒂥) CUNEIFORM SIGN EZEN TIMES AN	[4C91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A5, 0x0061 };
    uint32_t const ces[9] = { 0x4C91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_012)
{
    // 120A5 0041;	
    // (𒂥) CUNEIFORM SIGN EZEN TIMES AN	[4C91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120A5, 0x0041 };
    uint32_t const ces[9] = { 0x4C91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_013)
{
    // 120A5 0062;	
    // (𒂥) CUNEIFORM SIGN EZEN TIMES AN	[4C91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A5, 0x0062 };
    uint32_t const ces[9] = { 0x4C91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_014)
{
    // 120A6 0021;	
    // (𒂦) CUNEIFORM SIGN EZEN TIMES BAD	[4C92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A6, 0x0021 };
    uint32_t const ces[9] = { 0x4C92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_015)
{
    // 120A6 003F;	
    // (𒂦) CUNEIFORM SIGN EZEN TIMES BAD	[4C92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A6, 0x003F };
    uint32_t const ces[9] = { 0x4C92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_016)
{
    // 120A6 0061;	
    // (𒂦) CUNEIFORM SIGN EZEN TIMES BAD	[4C92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A6, 0x0061 };
    uint32_t const ces[9] = { 0x4C92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_017)
{
    // 120A6 0041;	
    // (𒂦) CUNEIFORM SIGN EZEN TIMES BAD	[4C92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120A6, 0x0041 };
    uint32_t const ces[9] = { 0x4C92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_018)
{
    // 120A6 0062;	
    // (𒂦) CUNEIFORM SIGN EZEN TIMES BAD	[4C92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A6, 0x0062 };
    uint32_t const ces[9] = { 0x4C92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_019)
{
    // 120A7 0021;	
    // (𒂧) CUNEIFORM SIGN EZEN TIMES DUN3 GUNU	[4C93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A7, 0x0021 };
    uint32_t const ces[9] = { 0x4C93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_020)
{
    // 120A7 003F;	
    // (𒂧) CUNEIFORM SIGN EZEN TIMES DUN3 GUNU	[4C93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A7, 0x003F };
    uint32_t const ces[9] = { 0x4C93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_021)
{
    // 120A7 0061;	
    // (𒂧) CUNEIFORM SIGN EZEN TIMES DUN3 GUNU	[4C93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A7, 0x0061 };
    uint32_t const ces[9] = { 0x4C93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_022)
{
    // 120A7 0041;	
    // (𒂧) CUNEIFORM SIGN EZEN TIMES DUN3 GUNU	[4C93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120A7, 0x0041 };
    uint32_t const ces[9] = { 0x4C93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_023)
{
    // 120A7 0062;	
    // (𒂧) CUNEIFORM SIGN EZEN TIMES DUN3 GUNU	[4C93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A7, 0x0062 };
    uint32_t const ces[9] = { 0x4C93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_024)
{
    // 120A8 0021;	
    // (𒂨) CUNEIFORM SIGN EZEN TIMES DUN3 GUNU GUNU	[4C94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A8, 0x0021 };
    uint32_t const ces[9] = { 0x4C94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_025)
{
    // 120A8 003F;	
    // (𒂨) CUNEIFORM SIGN EZEN TIMES DUN3 GUNU GUNU	[4C94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A8, 0x003F };
    uint32_t const ces[9] = { 0x4C94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_026)
{
    // 120A8 0061;	
    // (𒂨) CUNEIFORM SIGN EZEN TIMES DUN3 GUNU GUNU	[4C94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A8, 0x0061 };
    uint32_t const ces[9] = { 0x4C94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_027)
{
    // 120A8 0041;	
    // (𒂨) CUNEIFORM SIGN EZEN TIMES DUN3 GUNU GUNU	[4C94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120A8, 0x0041 };
    uint32_t const ces[9] = { 0x4C94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_028)
{
    // 120A8 0062;	
    // (𒂨) CUNEIFORM SIGN EZEN TIMES DUN3 GUNU GUNU	[4C94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A8, 0x0062 };
    uint32_t const ces[9] = { 0x4C94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_029)
{
    // 120A9 0021;	
    // (𒂩) CUNEIFORM SIGN EZEN TIMES HA	[4C95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A9, 0x0021 };
    uint32_t const ces[9] = { 0x4C95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_030)
{
    // 120A9 003F;	
    // (𒂩) CUNEIFORM SIGN EZEN TIMES HA	[4C95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A9, 0x003F };
    uint32_t const ces[9] = { 0x4C95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_031)
{
    // 120A9 0061;	
    // (𒂩) CUNEIFORM SIGN EZEN TIMES HA	[4C95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A9, 0x0061 };
    uint32_t const ces[9] = { 0x4C95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_032)
{
    // 120A9 0041;	
    // (𒂩) CUNEIFORM SIGN EZEN TIMES HA	[4C95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120A9, 0x0041 };
    uint32_t const ces[9] = { 0x4C95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_033)
{
    // 120A9 0062;	
    // (𒂩) CUNEIFORM SIGN EZEN TIMES HA	[4C95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120A9, 0x0062 };
    uint32_t const ces[9] = { 0x4C95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_034)
{
    // 120AA 0021;	
    // (𒂪) CUNEIFORM SIGN EZEN TIMES HA GUNU	[4C96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AA, 0x0021 };
    uint32_t const ces[9] = { 0x4C96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_035)
{
    // 120AA 003F;	
    // (𒂪) CUNEIFORM SIGN EZEN TIMES HA GUNU	[4C96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AA, 0x003F };
    uint32_t const ces[9] = { 0x4C96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_036)
{
    // 120AA 0061;	
    // (𒂪) CUNEIFORM SIGN EZEN TIMES HA GUNU	[4C96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AA, 0x0061 };
    uint32_t const ces[9] = { 0x4C96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_037)
{
    // 120AA 0041;	
    // (𒂪) CUNEIFORM SIGN EZEN TIMES HA GUNU	[4C96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120AA, 0x0041 };
    uint32_t const ces[9] = { 0x4C96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_038)
{
    // 120AA 0062;	
    // (𒂪) CUNEIFORM SIGN EZEN TIMES HA GUNU	[4C96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AA, 0x0062 };
    uint32_t const ces[9] = { 0x4C96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_039)
{
    // 120AB 0021;	
    // (𒂫) CUNEIFORM SIGN EZEN TIMES IGI GUNU	[4C97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AB, 0x0021 };
    uint32_t const ces[9] = { 0x4C97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_040)
{
    // 120AB 003F;	
    // (𒂫) CUNEIFORM SIGN EZEN TIMES IGI GUNU	[4C97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AB, 0x003F };
    uint32_t const ces[9] = { 0x4C97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_041)
{
    // 120AB 0061;	
    // (𒂫) CUNEIFORM SIGN EZEN TIMES IGI GUNU	[4C97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AB, 0x0061 };
    uint32_t const ces[9] = { 0x4C97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_042)
{
    // 120AB 0041;	
    // (𒂫) CUNEIFORM SIGN EZEN TIMES IGI GUNU	[4C97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120AB, 0x0041 };
    uint32_t const ces[9] = { 0x4C97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_043)
{
    // 120AB 0062;	
    // (𒂫) CUNEIFORM SIGN EZEN TIMES IGI GUNU	[4C97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AB, 0x0062 };
    uint32_t const ces[9] = { 0x4C97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_044)
{
    // 120AC 0021;	
    // (𒂬) CUNEIFORM SIGN EZEN TIMES KASKAL	[4C98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AC, 0x0021 };
    uint32_t const ces[9] = { 0x4C98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_045)
{
    // 120AC 003F;	
    // (𒂬) CUNEIFORM SIGN EZEN TIMES KASKAL	[4C98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AC, 0x003F };
    uint32_t const ces[9] = { 0x4C98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_046)
{
    // 120AC 0061;	
    // (𒂬) CUNEIFORM SIGN EZEN TIMES KASKAL	[4C98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AC, 0x0061 };
    uint32_t const ces[9] = { 0x4C98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_047)
{
    // 120AC 0041;	
    // (𒂬) CUNEIFORM SIGN EZEN TIMES KASKAL	[4C98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120AC, 0x0041 };
    uint32_t const ces[9] = { 0x4C98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_048)
{
    // 120AC 0062;	
    // (𒂬) CUNEIFORM SIGN EZEN TIMES KASKAL	[4C98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AC, 0x0062 };
    uint32_t const ces[9] = { 0x4C98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_049)
{
    // 120AD 0021;	
    // (𒂭) CUNEIFORM SIGN EZEN TIMES KASKAL SQUARED	[4C99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AD, 0x0021 };
    uint32_t const ces[9] = { 0x4C99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_050)
{
    // 120AD 003F;	
    // (𒂭) CUNEIFORM SIGN EZEN TIMES KASKAL SQUARED	[4C99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AD, 0x003F };
    uint32_t const ces[9] = { 0x4C99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_051)
{
    // 120AD 0061;	
    // (𒂭) CUNEIFORM SIGN EZEN TIMES KASKAL SQUARED	[4C99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AD, 0x0061 };
    uint32_t const ces[9] = { 0x4C99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_052)
{
    // 120AD 0041;	
    // (𒂭) CUNEIFORM SIGN EZEN TIMES KASKAL SQUARED	[4C99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120AD, 0x0041 };
    uint32_t const ces[9] = { 0x4C99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_053)
{
    // 120AD 0062;	
    // (𒂭) CUNEIFORM SIGN EZEN TIMES KASKAL SQUARED	[4C99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AD, 0x0062 };
    uint32_t const ces[9] = { 0x4C99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_054)
{
    // 120AE 0021;	
    // (𒂮) CUNEIFORM SIGN EZEN TIMES KU3	[4C9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AE, 0x0021 };
    uint32_t const ces[9] = { 0x4C9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_055)
{
    // 120AE 003F;	
    // (𒂮) CUNEIFORM SIGN EZEN TIMES KU3	[4C9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AE, 0x003F };
    uint32_t const ces[9] = { 0x4C9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_056)
{
    // 120AE 0061;	
    // (𒂮) CUNEIFORM SIGN EZEN TIMES KU3	[4C9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AE, 0x0061 };
    uint32_t const ces[9] = { 0x4C9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_057)
{
    // 120AE 0041;	
    // (𒂮) CUNEIFORM SIGN EZEN TIMES KU3	[4C9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120AE, 0x0041 };
    uint32_t const ces[9] = { 0x4C9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_058)
{
    // 120AE 0062;	
    // (𒂮) CUNEIFORM SIGN EZEN TIMES KU3	[4C9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AE, 0x0062 };
    uint32_t const ces[9] = { 0x4C9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_059)
{
    // 120AF 0021;	
    // (𒂯) CUNEIFORM SIGN EZEN TIMES LA	[4C9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AF, 0x0021 };
    uint32_t const ces[9] = { 0x4C9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_060)
{
    // 120AF 003F;	
    // (𒂯) CUNEIFORM SIGN EZEN TIMES LA	[4C9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AF, 0x003F };
    uint32_t const ces[9] = { 0x4C9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_061)
{
    // 120AF 0061;	
    // (𒂯) CUNEIFORM SIGN EZEN TIMES LA	[4C9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AF, 0x0061 };
    uint32_t const ces[9] = { 0x4C9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_062)
{
    // 120AF 0041;	
    // (𒂯) CUNEIFORM SIGN EZEN TIMES LA	[4C9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120AF, 0x0041 };
    uint32_t const ces[9] = { 0x4C9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_063)
{
    // 120AF 0062;	
    // (𒂯) CUNEIFORM SIGN EZEN TIMES LA	[4C9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120AF, 0x0062 };
    uint32_t const ces[9] = { 0x4C9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_064)
{
    // 120B0 0021;	
    // (𒂰) CUNEIFORM SIGN EZEN TIMES LAL TIMES LAL	[4C9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B0, 0x0021 };
    uint32_t const ces[9] = { 0x4C9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_065)
{
    // 120B0 003F;	
    // (𒂰) CUNEIFORM SIGN EZEN TIMES LAL TIMES LAL	[4C9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B0, 0x003F };
    uint32_t const ces[9] = { 0x4C9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_066)
{
    // 120B0 0061;	
    // (𒂰) CUNEIFORM SIGN EZEN TIMES LAL TIMES LAL	[4C9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B0, 0x0061 };
    uint32_t const ces[9] = { 0x4C9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_067)
{
    // 120B0 0041;	
    // (𒂰) CUNEIFORM SIGN EZEN TIMES LAL TIMES LAL	[4C9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120B0, 0x0041 };
    uint32_t const ces[9] = { 0x4C9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_068)
{
    // 120B0 0062;	
    // (𒂰) CUNEIFORM SIGN EZEN TIMES LAL TIMES LAL	[4C9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B0, 0x0062 };
    uint32_t const ces[9] = { 0x4C9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_069)
{
    // 120B1 0021;	
    // (𒂱) CUNEIFORM SIGN EZEN TIMES LI	[4C9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B1, 0x0021 };
    uint32_t const ces[9] = { 0x4C9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_070)
{
    // 120B1 003F;	
    // (𒂱) CUNEIFORM SIGN EZEN TIMES LI	[4C9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B1, 0x003F };
    uint32_t const ces[9] = { 0x4C9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_071)
{
    // 120B1 0061;	
    // (𒂱) CUNEIFORM SIGN EZEN TIMES LI	[4C9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B1, 0x0061 };
    uint32_t const ces[9] = { 0x4C9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_072)
{
    // 120B1 0041;	
    // (𒂱) CUNEIFORM SIGN EZEN TIMES LI	[4C9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120B1, 0x0041 };
    uint32_t const ces[9] = { 0x4C9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_073)
{
    // 120B1 0062;	
    // (𒂱) CUNEIFORM SIGN EZEN TIMES LI	[4C9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B1, 0x0062 };
    uint32_t const ces[9] = { 0x4C9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_074)
{
    // 120B2 0021;	
    // (𒂲) CUNEIFORM SIGN EZEN TIMES LU	[4C9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B2, 0x0021 };
    uint32_t const ces[9] = { 0x4C9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_075)
{
    // 120B2 003F;	
    // (𒂲) CUNEIFORM SIGN EZEN TIMES LU	[4C9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B2, 0x003F };
    uint32_t const ces[9] = { 0x4C9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_076)
{
    // 120B2 0061;	
    // (𒂲) CUNEIFORM SIGN EZEN TIMES LU	[4C9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B2, 0x0061 };
    uint32_t const ces[9] = { 0x4C9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_077)
{
    // 120B2 0041;	
    // (𒂲) CUNEIFORM SIGN EZEN TIMES LU	[4C9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120B2, 0x0041 };
    uint32_t const ces[9] = { 0x4C9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_078)
{
    // 120B2 0062;	
    // (𒂲) CUNEIFORM SIGN EZEN TIMES LU	[4C9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B2, 0x0062 };
    uint32_t const ces[9] = { 0x4C9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_079)
{
    // 120B3 0021;	
    // (𒂳) CUNEIFORM SIGN EZEN TIMES U2	[4C9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B3, 0x0021 };
    uint32_t const ces[9] = { 0x4C9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_080)
{
    // 120B3 003F;	
    // (𒂳) CUNEIFORM SIGN EZEN TIMES U2	[4C9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B3, 0x003F };
    uint32_t const ces[9] = { 0x4C9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_081)
{
    // 120B3 0061;	
    // (𒂳) CUNEIFORM SIGN EZEN TIMES U2	[4C9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B3, 0x0061 };
    uint32_t const ces[9] = { 0x4C9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_082)
{
    // 120B3 0041;	
    // (𒂳) CUNEIFORM SIGN EZEN TIMES U2	[4C9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120B3, 0x0041 };
    uint32_t const ces[9] = { 0x4C9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_083)
{
    // 120B3 0062;	
    // (𒂳) CUNEIFORM SIGN EZEN TIMES U2	[4C9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B3, 0x0062 };
    uint32_t const ces[9] = { 0x4C9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_084)
{
    // 120B4 0021;	
    // (𒂴) CUNEIFORM SIGN EZEN TIMES UD	[4CA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B4, 0x0021 };
    uint32_t const ces[9] = { 0x4CA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_085)
{
    // 120B4 003F;	
    // (𒂴) CUNEIFORM SIGN EZEN TIMES UD	[4CA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B4, 0x003F };
    uint32_t const ces[9] = { 0x4CA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_086)
{
    // 120B4 0061;	
    // (𒂴) CUNEIFORM SIGN EZEN TIMES UD	[4CA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B4, 0x0061 };
    uint32_t const ces[9] = { 0x4CA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_087)
{
    // 120B4 0041;	
    // (𒂴) CUNEIFORM SIGN EZEN TIMES UD	[4CA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120B4, 0x0041 };
    uint32_t const ces[9] = { 0x4CA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_088)
{
    // 120B4 0062;	
    // (𒂴) CUNEIFORM SIGN EZEN TIMES UD	[4CA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B4, 0x0062 };
    uint32_t const ces[9] = { 0x4CA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_089)
{
    // 120B5 0021;	
    // (𒂵) CUNEIFORM SIGN GA	[4CA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B5, 0x0021 };
    uint32_t const ces[9] = { 0x4CA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_090)
{
    // 120B5 003F;	
    // (𒂵) CUNEIFORM SIGN GA	[4CA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B5, 0x003F };
    uint32_t const ces[9] = { 0x4CA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_091)
{
    // 120B5 0061;	
    // (𒂵) CUNEIFORM SIGN GA	[4CA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B5, 0x0061 };
    uint32_t const ces[9] = { 0x4CA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_092)
{
    // 120B5 0041;	
    // (𒂵) CUNEIFORM SIGN GA	[4CA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120B5, 0x0041 };
    uint32_t const ces[9] = { 0x4CA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_093)
{
    // 120B5 0062;	
    // (𒂵) CUNEIFORM SIGN GA	[4CA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B5, 0x0062 };
    uint32_t const ces[9] = { 0x4CA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_094)
{
    // 120B6 0021;	
    // (𒂶) CUNEIFORM SIGN GA GUNU	[4CA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B6, 0x0021 };
    uint32_t const ces[9] = { 0x4CA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_095)
{
    // 120B6 003F;	
    // (𒂶) CUNEIFORM SIGN GA GUNU	[4CA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B6, 0x003F };
    uint32_t const ces[9] = { 0x4CA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_096)
{
    // 120B6 0061;	
    // (𒂶) CUNEIFORM SIGN GA GUNU	[4CA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B6, 0x0061 };
    uint32_t const ces[9] = { 0x4CA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_097)
{
    // 120B6 0041;	
    // (𒂶) CUNEIFORM SIGN GA GUNU	[4CA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120B6, 0x0041 };
    uint32_t const ces[9] = { 0x4CA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_098)
{
    // 120B6 0062;	
    // (𒂶) CUNEIFORM SIGN GA GUNU	[4CA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B6, 0x0062 };
    uint32_t const ces[9] = { 0x4CA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_099)
{
    // 120B7 0021;	
    // (𒂷) CUNEIFORM SIGN GA2	[4CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B7, 0x0021 };
    uint32_t const ces[9] = { 0x4CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_100)
{
    // 120B7 003F;	
    // (𒂷) CUNEIFORM SIGN GA2	[4CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B7, 0x003F };
    uint32_t const ces[9] = { 0x4CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_101)
{
    // 120B7 0061;	
    // (𒂷) CUNEIFORM SIGN GA2	[4CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B7, 0x0061 };
    uint32_t const ces[9] = { 0x4CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_102)
{
    // 120B7 0041;	
    // (𒂷) CUNEIFORM SIGN GA2	[4CA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120B7, 0x0041 };
    uint32_t const ces[9] = { 0x4CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_103)
{
    // 120B7 0062;	
    // (𒂷) CUNEIFORM SIGN GA2	[4CA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B7, 0x0062 };
    uint32_t const ces[9] = { 0x4CA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_104)
{
    // 120B8 0021;	
    // (𒂸) CUNEIFORM SIGN GA2 TIMES A PLUS DA PLUS HA	[4CA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B8, 0x0021 };
    uint32_t const ces[9] = { 0x4CA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_105)
{
    // 120B8 003F;	
    // (𒂸) CUNEIFORM SIGN GA2 TIMES A PLUS DA PLUS HA	[4CA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B8, 0x003F };
    uint32_t const ces[9] = { 0x4CA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_106)
{
    // 120B8 0061;	
    // (𒂸) CUNEIFORM SIGN GA2 TIMES A PLUS DA PLUS HA	[4CA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B8, 0x0061 };
    uint32_t const ces[9] = { 0x4CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_107)
{
    // 120B8 0041;	
    // (𒂸) CUNEIFORM SIGN GA2 TIMES A PLUS DA PLUS HA	[4CA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120B8, 0x0041 };
    uint32_t const ces[9] = { 0x4CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_108)
{
    // 120B8 0062;	
    // (𒂸) CUNEIFORM SIGN GA2 TIMES A PLUS DA PLUS HA	[4CA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B8, 0x0062 };
    uint32_t const ces[9] = { 0x4CA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_109)
{
    // 120B9 0021;	
    // (𒂹) CUNEIFORM SIGN GA2 TIMES A PLUS HA	[4CA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B9, 0x0021 };
    uint32_t const ces[9] = { 0x4CA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_110)
{
    // 120B9 003F;	
    // (𒂹) CUNEIFORM SIGN GA2 TIMES A PLUS HA	[4CA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B9, 0x003F };
    uint32_t const ces[9] = { 0x4CA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_111)
{
    // 120B9 0061;	
    // (𒂹) CUNEIFORM SIGN GA2 TIMES A PLUS HA	[4CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B9, 0x0061 };
    uint32_t const ces[9] = { 0x4CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_112)
{
    // 120B9 0041;	
    // (𒂹) CUNEIFORM SIGN GA2 TIMES A PLUS HA	[4CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120B9, 0x0041 };
    uint32_t const ces[9] = { 0x4CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_113)
{
    // 120B9 0062;	
    // (𒂹) CUNEIFORM SIGN GA2 TIMES A PLUS HA	[4CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120B9, 0x0062 };
    uint32_t const ces[9] = { 0x4CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_114)
{
    // 120BA 0021;	
    // (𒂺) CUNEIFORM SIGN GA2 TIMES A PLUS IGI	[4CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BA, 0x0021 };
    uint32_t const ces[9] = { 0x4CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_115)
{
    // 120BA 003F;	
    // (𒂺) CUNEIFORM SIGN GA2 TIMES A PLUS IGI	[4CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BA, 0x003F };
    uint32_t const ces[9] = { 0x4CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_116)
{
    // 120BA 0061;	
    // (𒂺) CUNEIFORM SIGN GA2 TIMES A PLUS IGI	[4CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BA, 0x0061 };
    uint32_t const ces[9] = { 0x4CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_117)
{
    // 120BA 0041;	
    // (𒂺) CUNEIFORM SIGN GA2 TIMES A PLUS IGI	[4CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120BA, 0x0041 };
    uint32_t const ces[9] = { 0x4CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_118)
{
    // 120BA 0062;	
    // (𒂺) CUNEIFORM SIGN GA2 TIMES A PLUS IGI	[4CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BA, 0x0062 };
    uint32_t const ces[9] = { 0x4CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_119)
{
    // 120BB 0021;	
    // (𒂻) CUNEIFORM SIGN GA2 TIMES AB2 TENU PLUS TAB	[4CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BB, 0x0021 };
    uint32_t const ces[9] = { 0x4CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_120)
{
    // 120BB 003F;	
    // (𒂻) CUNEIFORM SIGN GA2 TIMES AB2 TENU PLUS TAB	[4CA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BB, 0x003F };
    uint32_t const ces[9] = { 0x4CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_121)
{
    // 120BB 0061;	
    // (𒂻) CUNEIFORM SIGN GA2 TIMES AB2 TENU PLUS TAB	[4CA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BB, 0x0061 };
    uint32_t const ces[9] = { 0x4CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_122)
{
    // 120BB 0041;	
    // (𒂻) CUNEIFORM SIGN GA2 TIMES AB2 TENU PLUS TAB	[4CA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120BB, 0x0041 };
    uint32_t const ces[9] = { 0x4CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_123)
{
    // 120BB 0062;	
    // (𒂻) CUNEIFORM SIGN GA2 TIMES AB2 TENU PLUS TAB	[4CA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BB, 0x0062 };
    uint32_t const ces[9] = { 0x4CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_124)
{
    // 120BC 0021;	
    // (𒂼) CUNEIFORM SIGN GA2 TIMES AN	[4CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BC, 0x0021 };
    uint32_t const ces[9] = { 0x4CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_125)
{
    // 120BC 003F;	
    // (𒂼) CUNEIFORM SIGN GA2 TIMES AN	[4CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BC, 0x003F };
    uint32_t const ces[9] = { 0x4CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_126)
{
    // 120BC 0061;	
    // (𒂼) CUNEIFORM SIGN GA2 TIMES AN	[4CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BC, 0x0061 };
    uint32_t const ces[9] = { 0x4CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_127)
{
    // 120BC 0041;	
    // (𒂼) CUNEIFORM SIGN GA2 TIMES AN	[4CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120BC, 0x0041 };
    uint32_t const ces[9] = { 0x4CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_128)
{
    // 120BC 0062;	
    // (𒂼) CUNEIFORM SIGN GA2 TIMES AN	[4CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BC, 0x0062 };
    uint32_t const ces[9] = { 0x4CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_129)
{
    // 120BD 0021;	
    // (𒂽) CUNEIFORM SIGN GA2 TIMES ASH	[4CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BD, 0x0021 };
    uint32_t const ces[9] = { 0x4CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_130)
{
    // 120BD 003F;	
    // (𒂽) CUNEIFORM SIGN GA2 TIMES ASH	[4CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BD, 0x003F };
    uint32_t const ces[9] = { 0x4CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_131)
{
    // 120BD 0061;	
    // (𒂽) CUNEIFORM SIGN GA2 TIMES ASH	[4CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BD, 0x0061 };
    uint32_t const ces[9] = { 0x4CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_132)
{
    // 120BD 0041;	
    // (𒂽) CUNEIFORM SIGN GA2 TIMES ASH	[4CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120BD, 0x0041 };
    uint32_t const ces[9] = { 0x4CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_133)
{
    // 120BD 0062;	
    // (𒂽) CUNEIFORM SIGN GA2 TIMES ASH	[4CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BD, 0x0062 };
    uint32_t const ces[9] = { 0x4CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_134)
{
    // 120BE 0021;	
    // (𒂾) CUNEIFORM SIGN GA2 TIMES ASH2 PLUS GAL	[4CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BE, 0x0021 };
    uint32_t const ces[9] = { 0x4CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_135)
{
    // 120BE 003F;	
    // (𒂾) CUNEIFORM SIGN GA2 TIMES ASH2 PLUS GAL	[4CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BE, 0x003F };
    uint32_t const ces[9] = { 0x4CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_136)
{
    // 120BE 0061;	
    // (𒂾) CUNEIFORM SIGN GA2 TIMES ASH2 PLUS GAL	[4CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BE, 0x0061 };
    uint32_t const ces[9] = { 0x4CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_137)
{
    // 120BE 0041;	
    // (𒂾) CUNEIFORM SIGN GA2 TIMES ASH2 PLUS GAL	[4CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120BE, 0x0041 };
    uint32_t const ces[9] = { 0x4CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_138)
{
    // 120BE 0062;	
    // (𒂾) CUNEIFORM SIGN GA2 TIMES ASH2 PLUS GAL	[4CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BE, 0x0062 };
    uint32_t const ces[9] = { 0x4CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_139)
{
    // 120BF 0021;	
    // (𒂿) CUNEIFORM SIGN GA2 TIMES BAD	[4CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BF, 0x0021 };
    uint32_t const ces[9] = { 0x4CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_140)
{
    // 120BF 003F;	
    // (𒂿) CUNEIFORM SIGN GA2 TIMES BAD	[4CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BF, 0x003F };
    uint32_t const ces[9] = { 0x4CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_141)
{
    // 120BF 0061;	
    // (𒂿) CUNEIFORM SIGN GA2 TIMES BAD	[4CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BF, 0x0061 };
    uint32_t const ces[9] = { 0x4CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_142)
{
    // 120BF 0041;	
    // (𒂿) CUNEIFORM SIGN GA2 TIMES BAD	[4CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120BF, 0x0041 };
    uint32_t const ces[9] = { 0x4CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_143)
{
    // 120BF 0062;	
    // (𒂿) CUNEIFORM SIGN GA2 TIMES BAD	[4CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120BF, 0x0062 };
    uint32_t const ces[9] = { 0x4CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_144)
{
    // 120C0 0021;	
    // (𒃀) CUNEIFORM SIGN GA2 TIMES BAR PLUS RA	[4CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C0, 0x0021 };
    uint32_t const ces[9] = { 0x4CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_145)
{
    // 120C0 003F;	
    // (𒃀) CUNEIFORM SIGN GA2 TIMES BAR PLUS RA	[4CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C0, 0x003F };
    uint32_t const ces[9] = { 0x4CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_146)
{
    // 120C0 0061;	
    // (𒃀) CUNEIFORM SIGN GA2 TIMES BAR PLUS RA	[4CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C0, 0x0061 };
    uint32_t const ces[9] = { 0x4CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_147)
{
    // 120C0 0041;	
    // (𒃀) CUNEIFORM SIGN GA2 TIMES BAR PLUS RA	[4CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120C0, 0x0041 };
    uint32_t const ces[9] = { 0x4CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_148)
{
    // 120C0 0062;	
    // (𒃀) CUNEIFORM SIGN GA2 TIMES BAR PLUS RA	[4CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C0, 0x0062 };
    uint32_t const ces[9] = { 0x4CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_149)
{
    // 120C1 0021;	
    // (𒃁) CUNEIFORM SIGN GA2 TIMES BUR	[4CAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C1, 0x0021 };
    uint32_t const ces[9] = { 0x4CAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_150)
{
    // 120C1 003F;	
    // (𒃁) CUNEIFORM SIGN GA2 TIMES BUR	[4CAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C1, 0x003F };
    uint32_t const ces[9] = { 0x4CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_151)
{
    // 120C1 0061;	
    // (𒃁) CUNEIFORM SIGN GA2 TIMES BUR	[4CAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C1, 0x0061 };
    uint32_t const ces[9] = { 0x4CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_152)
{
    // 120C1 0041;	
    // (𒃁) CUNEIFORM SIGN GA2 TIMES BUR	[4CAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120C1, 0x0041 };
    uint32_t const ces[9] = { 0x4CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_153)
{
    // 120C1 0062;	
    // (𒃁) CUNEIFORM SIGN GA2 TIMES BUR	[4CAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C1, 0x0062 };
    uint32_t const ces[9] = { 0x4CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_154)
{
    // 120C2 0021;	
    // (𒃂) CUNEIFORM SIGN GA2 TIMES BUR PLUS RA	[4CAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C2, 0x0021 };
    uint32_t const ces[9] = { 0x4CAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_155)
{
    // 120C2 003F;	
    // (𒃂) CUNEIFORM SIGN GA2 TIMES BUR PLUS RA	[4CAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C2, 0x003F };
    uint32_t const ces[9] = { 0x4CAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_156)
{
    // 120C2 0061;	
    // (𒃂) CUNEIFORM SIGN GA2 TIMES BUR PLUS RA	[4CAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C2, 0x0061 };
    uint32_t const ces[9] = { 0x4CAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_157)
{
    // 120C2 0041;	
    // (𒃂) CUNEIFORM SIGN GA2 TIMES BUR PLUS RA	[4CAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120C2, 0x0041 };
    uint32_t const ces[9] = { 0x4CAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_158)
{
    // 120C2 0062;	
    // (𒃂) CUNEIFORM SIGN GA2 TIMES BUR PLUS RA	[4CAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C2, 0x0062 };
    uint32_t const ces[9] = { 0x4CAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_159)
{
    // 120C3 0021;	
    // (𒃃) CUNEIFORM SIGN GA2 TIMES DA	[4CAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C3, 0x0021 };
    uint32_t const ces[9] = { 0x4CAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_160)
{
    // 120C3 003F;	
    // (𒃃) CUNEIFORM SIGN GA2 TIMES DA	[4CAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C3, 0x003F };
    uint32_t const ces[9] = { 0x4CAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_161)
{
    // 120C3 0061;	
    // (𒃃) CUNEIFORM SIGN GA2 TIMES DA	[4CAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C3, 0x0061 };
    uint32_t const ces[9] = { 0x4CAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_162)
{
    // 120C3 0041;	
    // (𒃃) CUNEIFORM SIGN GA2 TIMES DA	[4CAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120C3, 0x0041 };
    uint32_t const ces[9] = { 0x4CAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_163)
{
    // 120C3 0062;	
    // (𒃃) CUNEIFORM SIGN GA2 TIMES DA	[4CAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C3, 0x0062 };
    uint32_t const ces[9] = { 0x4CAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_164)
{
    // 120C4 0021;	
    // (𒃄) CUNEIFORM SIGN GA2 TIMES DI	[4CB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C4, 0x0021 };
    uint32_t const ces[9] = { 0x4CB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_165)
{
    // 120C4 003F;	
    // (𒃄) CUNEIFORM SIGN GA2 TIMES DI	[4CB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C4, 0x003F };
    uint32_t const ces[9] = { 0x4CB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_166)
{
    // 120C4 0061;	
    // (𒃄) CUNEIFORM SIGN GA2 TIMES DI	[4CB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C4, 0x0061 };
    uint32_t const ces[9] = { 0x4CB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_167)
{
    // 120C4 0041;	
    // (𒃄) CUNEIFORM SIGN GA2 TIMES DI	[4CB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120C4, 0x0041 };
    uint32_t const ces[9] = { 0x4CB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_168)
{
    // 120C4 0062;	
    // (𒃄) CUNEIFORM SIGN GA2 TIMES DI	[4CB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C4, 0x0062 };
    uint32_t const ces[9] = { 0x4CB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_169)
{
    // 120C5 0021;	
    // (𒃅) CUNEIFORM SIGN GA2 TIMES DIM TIMES SHE	[4CB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C5, 0x0021 };
    uint32_t const ces[9] = { 0x4CB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_170)
{
    // 120C5 003F;	
    // (𒃅) CUNEIFORM SIGN GA2 TIMES DIM TIMES SHE	[4CB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C5, 0x003F };
    uint32_t const ces[9] = { 0x4CB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_171)
{
    // 120C5 0061;	
    // (𒃅) CUNEIFORM SIGN GA2 TIMES DIM TIMES SHE	[4CB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C5, 0x0061 };
    uint32_t const ces[9] = { 0x4CB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_172)
{
    // 120C5 0041;	
    // (𒃅) CUNEIFORM SIGN GA2 TIMES DIM TIMES SHE	[4CB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120C5, 0x0041 };
    uint32_t const ces[9] = { 0x4CB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_173)
{
    // 120C5 0062;	
    // (𒃅) CUNEIFORM SIGN GA2 TIMES DIM TIMES SHE	[4CB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C5, 0x0062 };
    uint32_t const ces[9] = { 0x4CB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_174)
{
    // 120C6 0021;	
    // (𒃆) CUNEIFORM SIGN GA2 TIMES DUB	[4CB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C6, 0x0021 };
    uint32_t const ces[9] = { 0x4CB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_175)
{
    // 120C6 003F;	
    // (𒃆) CUNEIFORM SIGN GA2 TIMES DUB	[4CB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C6, 0x003F };
    uint32_t const ces[9] = { 0x4CB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_176)
{
    // 120C6 0061;	
    // (𒃆) CUNEIFORM SIGN GA2 TIMES DUB	[4CB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C6, 0x0061 };
    uint32_t const ces[9] = { 0x4CB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_177)
{
    // 120C6 0041;	
    // (𒃆) CUNEIFORM SIGN GA2 TIMES DUB	[4CB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120C6, 0x0041 };
    uint32_t const ces[9] = { 0x4CB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_178)
{
    // 120C6 0062;	
    // (𒃆) CUNEIFORM SIGN GA2 TIMES DUB	[4CB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C6, 0x0062 };
    uint32_t const ces[9] = { 0x4CB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_179)
{
    // 120C7 0021;	
    // (𒃇) CUNEIFORM SIGN GA2 TIMES EL	[4CB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C7, 0x0021 };
    uint32_t const ces[9] = { 0x4CB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_180)
{
    // 120C7 003F;	
    // (𒃇) CUNEIFORM SIGN GA2 TIMES EL	[4CB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C7, 0x003F };
    uint32_t const ces[9] = { 0x4CB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_181)
{
    // 120C7 0061;	
    // (𒃇) CUNEIFORM SIGN GA2 TIMES EL	[4CB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C7, 0x0061 };
    uint32_t const ces[9] = { 0x4CB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_182)
{
    // 120C7 0041;	
    // (𒃇) CUNEIFORM SIGN GA2 TIMES EL	[4CB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120C7, 0x0041 };
    uint32_t const ces[9] = { 0x4CB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_183)
{
    // 120C7 0062;	
    // (𒃇) CUNEIFORM SIGN GA2 TIMES EL	[4CB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C7, 0x0062 };
    uint32_t const ces[9] = { 0x4CB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_184)
{
    // 120C8 0021;	
    // (𒃈) CUNEIFORM SIGN GA2 TIMES EL PLUS LA	[4CB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C8, 0x0021 };
    uint32_t const ces[9] = { 0x4CB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_185)
{
    // 120C8 003F;	
    // (𒃈) CUNEIFORM SIGN GA2 TIMES EL PLUS LA	[4CB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C8, 0x003F };
    uint32_t const ces[9] = { 0x4CB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_186)
{
    // 120C8 0061;	
    // (𒃈) CUNEIFORM SIGN GA2 TIMES EL PLUS LA	[4CB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C8, 0x0061 };
    uint32_t const ces[9] = { 0x4CB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_187)
{
    // 120C8 0041;	
    // (𒃈) CUNEIFORM SIGN GA2 TIMES EL PLUS LA	[4CB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120C8, 0x0041 };
    uint32_t const ces[9] = { 0x4CB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_188)
{
    // 120C8 0062;	
    // (𒃈) CUNEIFORM SIGN GA2 TIMES EL PLUS LA	[4CB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C8, 0x0062 };
    uint32_t const ces[9] = { 0x4CB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_189)
{
    // 120C9 0021;	
    // (𒃉) CUNEIFORM SIGN GA2 TIMES EN	[4CB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C9, 0x0021 };
    uint32_t const ces[9] = { 0x4CB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_190)
{
    // 120C9 003F;	
    // (𒃉) CUNEIFORM SIGN GA2 TIMES EN	[4CB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C9, 0x003F };
    uint32_t const ces[9] = { 0x4CB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_191)
{
    // 120C9 0061;	
    // (𒃉) CUNEIFORM SIGN GA2 TIMES EN	[4CB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C9, 0x0061 };
    uint32_t const ces[9] = { 0x4CB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_192)
{
    // 120C9 0041;	
    // (𒃉) CUNEIFORM SIGN GA2 TIMES EN	[4CB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120C9, 0x0041 };
    uint32_t const ces[9] = { 0x4CB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_193)
{
    // 120C9 0062;	
    // (𒃉) CUNEIFORM SIGN GA2 TIMES EN	[4CB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120C9, 0x0062 };
    uint32_t const ces[9] = { 0x4CB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_194)
{
    // 120CA 0021;	
    // (𒃊) CUNEIFORM SIGN GA2 TIMES EN TIMES GAN2 TENU	[4CB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CA, 0x0021 };
    uint32_t const ces[9] = { 0x4CB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_195)
{
    // 120CA 003F;	
    // (𒃊) CUNEIFORM SIGN GA2 TIMES EN TIMES GAN2 TENU	[4CB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CA, 0x003F };
    uint32_t const ces[9] = { 0x4CB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_196)
{
    // 120CA 0061;	
    // (𒃊) CUNEIFORM SIGN GA2 TIMES EN TIMES GAN2 TENU	[4CB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CA, 0x0061 };
    uint32_t const ces[9] = { 0x4CB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_197)
{
    // 120CA 0041;	
    // (𒃊) CUNEIFORM SIGN GA2 TIMES EN TIMES GAN2 TENU	[4CB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120CA, 0x0041 };
    uint32_t const ces[9] = { 0x4CB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_198)
{
    // 120CA 0062;	
    // (𒃊) CUNEIFORM SIGN GA2 TIMES EN TIMES GAN2 TENU	[4CB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CA, 0x0062 };
    uint32_t const ces[9] = { 0x4CB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_199)
{
    // 120CB 0021;	
    // (𒃋) CUNEIFORM SIGN GA2 TIMES GAN2 TENU	[4CB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CB, 0x0021 };
    uint32_t const ces[9] = { 0x4CB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_200)
{
    // 120CB 003F;	
    // (𒃋) CUNEIFORM SIGN GA2 TIMES GAN2 TENU	[4CB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CB, 0x003F };
    uint32_t const ces[9] = { 0x4CB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_201)
{
    // 120CB 0061;	
    // (𒃋) CUNEIFORM SIGN GA2 TIMES GAN2 TENU	[4CB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CB, 0x0061 };
    uint32_t const ces[9] = { 0x4CB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_202)
{
    // 120CB 0041;	
    // (𒃋) CUNEIFORM SIGN GA2 TIMES GAN2 TENU	[4CB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120CB, 0x0041 };
    uint32_t const ces[9] = { 0x4CB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_203)
{
    // 120CB 0062;	
    // (𒃋) CUNEIFORM SIGN GA2 TIMES GAN2 TENU	[4CB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CB, 0x0062 };
    uint32_t const ces[9] = { 0x4CB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_204)
{
    // 120CC 0021;	
    // (𒃌) CUNEIFORM SIGN GA2 TIMES GAR	[4CB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CC, 0x0021 };
    uint32_t const ces[9] = { 0x4CB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_205)
{
    // 120CC 003F;	
    // (𒃌) CUNEIFORM SIGN GA2 TIMES GAR	[4CB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CC, 0x003F };
    uint32_t const ces[9] = { 0x4CB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_206)
{
    // 120CC 0061;	
    // (𒃌) CUNEIFORM SIGN GA2 TIMES GAR	[4CB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CC, 0x0061 };
    uint32_t const ces[9] = { 0x4CB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_207)
{
    // 120CC 0041;	
    // (𒃌) CUNEIFORM SIGN GA2 TIMES GAR	[4CB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120CC, 0x0041 };
    uint32_t const ces[9] = { 0x4CB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_208)
{
    // 120CC 0062;	
    // (𒃌) CUNEIFORM SIGN GA2 TIMES GAR	[4CB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CC, 0x0062 };
    uint32_t const ces[9] = { 0x4CB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_209)
{
    // 120CD 0021;	
    // (𒃍) CUNEIFORM SIGN GA2 TIMES GI	[4CB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CD, 0x0021 };
    uint32_t const ces[9] = { 0x4CB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_210)
{
    // 120CD 003F;	
    // (𒃍) CUNEIFORM SIGN GA2 TIMES GI	[4CB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CD, 0x003F };
    uint32_t const ces[9] = { 0x4CB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_211)
{
    // 120CD 0061;	
    // (𒃍) CUNEIFORM SIGN GA2 TIMES GI	[4CB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CD, 0x0061 };
    uint32_t const ces[9] = { 0x4CB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_212)
{
    // 120CD 0041;	
    // (𒃍) CUNEIFORM SIGN GA2 TIMES GI	[4CB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120CD, 0x0041 };
    uint32_t const ces[9] = { 0x4CB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_213)
{
    // 120CD 0062;	
    // (𒃍) CUNEIFORM SIGN GA2 TIMES GI	[4CB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CD, 0x0062 };
    uint32_t const ces[9] = { 0x4CB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_214)
{
    // 120CE 0021;	
    // (𒃎) CUNEIFORM SIGN GA2 TIMES GI4	[4CBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CE, 0x0021 };
    uint32_t const ces[9] = { 0x4CBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_215)
{
    // 120CE 003F;	
    // (𒃎) CUNEIFORM SIGN GA2 TIMES GI4	[4CBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CE, 0x003F };
    uint32_t const ces[9] = { 0x4CBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_216)
{
    // 120CE 0061;	
    // (𒃎) CUNEIFORM SIGN GA2 TIMES GI4	[4CBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CE, 0x0061 };
    uint32_t const ces[9] = { 0x4CBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_217)
{
    // 120CE 0041;	
    // (𒃎) CUNEIFORM SIGN GA2 TIMES GI4	[4CBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120CE, 0x0041 };
    uint32_t const ces[9] = { 0x4CBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_218)
{
    // 120CE 0062;	
    // (𒃎) CUNEIFORM SIGN GA2 TIMES GI4	[4CBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CE, 0x0062 };
    uint32_t const ces[9] = { 0x4CBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_219)
{
    // 120CF 0021;	
    // (𒃏) CUNEIFORM SIGN GA2 TIMES GI4 PLUS A	[4CBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CF, 0x0021 };
    uint32_t const ces[9] = { 0x4CBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_220)
{
    // 120CF 003F;	
    // (𒃏) CUNEIFORM SIGN GA2 TIMES GI4 PLUS A	[4CBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CF, 0x003F };
    uint32_t const ces[9] = { 0x4CBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_221)
{
    // 120CF 0061;	
    // (𒃏) CUNEIFORM SIGN GA2 TIMES GI4 PLUS A	[4CBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CF, 0x0061 };
    uint32_t const ces[9] = { 0x4CBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_222)
{
    // 120CF 0041;	
    // (𒃏) CUNEIFORM SIGN GA2 TIMES GI4 PLUS A	[4CBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120CF, 0x0041 };
    uint32_t const ces[9] = { 0x4CBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_223)
{
    // 120CF 0062;	
    // (𒃏) CUNEIFORM SIGN GA2 TIMES GI4 PLUS A	[4CBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120CF, 0x0062 };
    uint32_t const ces[9] = { 0x4CBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_224)
{
    // 120D0 0021;	
    // (𒃐) CUNEIFORM SIGN GA2 TIMES GIR2 PLUS SU	[4CBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D0, 0x0021 };
    uint32_t const ces[9] = { 0x4CBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_225)
{
    // 120D0 003F;	
    // (𒃐) CUNEIFORM SIGN GA2 TIMES GIR2 PLUS SU	[4CBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D0, 0x003F };
    uint32_t const ces[9] = { 0x4CBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_226)
{
    // 120D0 0061;	
    // (𒃐) CUNEIFORM SIGN GA2 TIMES GIR2 PLUS SU	[4CBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D0, 0x0061 };
    uint32_t const ces[9] = { 0x4CBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_227)
{
    // 120D0 0041;	
    // (𒃐) CUNEIFORM SIGN GA2 TIMES GIR2 PLUS SU	[4CBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120D0, 0x0041 };
    uint32_t const ces[9] = { 0x4CBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_228)
{
    // 120D0 0062;	
    // (𒃐) CUNEIFORM SIGN GA2 TIMES GIR2 PLUS SU	[4CBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D0, 0x0062 };
    uint32_t const ces[9] = { 0x4CBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_229)
{
    // 120D1 0021;	
    // (𒃑) CUNEIFORM SIGN GA2 TIMES HA PLUS LU PLUS ESH2	[4CBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D1, 0x0021 };
    uint32_t const ces[9] = { 0x4CBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_230)
{
    // 120D1 003F;	
    // (𒃑) CUNEIFORM SIGN GA2 TIMES HA PLUS LU PLUS ESH2	[4CBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D1, 0x003F };
    uint32_t const ces[9] = { 0x4CBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_231)
{
    // 120D1 0061;	
    // (𒃑) CUNEIFORM SIGN GA2 TIMES HA PLUS LU PLUS ESH2	[4CBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D1, 0x0061 };
    uint32_t const ces[9] = { 0x4CBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_232)
{
    // 120D1 0041;	
    // (𒃑) CUNEIFORM SIGN GA2 TIMES HA PLUS LU PLUS ESH2	[4CBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120D1, 0x0041 };
    uint32_t const ces[9] = { 0x4CBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_233)
{
    // 120D1 0062;	
    // (𒃑) CUNEIFORM SIGN GA2 TIMES HA PLUS LU PLUS ESH2	[4CBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D1, 0x0062 };
    uint32_t const ces[9] = { 0x4CBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_234)
{
    // 120D2 0021;	
    // (𒃒) CUNEIFORM SIGN GA2 TIMES HAL	[4CBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D2, 0x0021 };
    uint32_t const ces[9] = { 0x4CBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_235)
{
    // 120D2 003F;	
    // (𒃒) CUNEIFORM SIGN GA2 TIMES HAL	[4CBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D2, 0x003F };
    uint32_t const ces[9] = { 0x4CBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_236)
{
    // 120D2 0061;	
    // (𒃒) CUNEIFORM SIGN GA2 TIMES HAL	[4CBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D2, 0x0061 };
    uint32_t const ces[9] = { 0x4CBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_237)
{
    // 120D2 0041;	
    // (𒃒) CUNEIFORM SIGN GA2 TIMES HAL	[4CBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120D2, 0x0041 };
    uint32_t const ces[9] = { 0x4CBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_238)
{
    // 120D2 0062;	
    // (𒃒) CUNEIFORM SIGN GA2 TIMES HAL	[4CBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D2, 0x0062 };
    uint32_t const ces[9] = { 0x4CBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_239)
{
    // 120D3 0021;	
    // (𒃓) CUNEIFORM SIGN GA2 TIMES HAL PLUS LA	[4CBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D3, 0x0021 };
    uint32_t const ces[9] = { 0x4CBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_240)
{
    // 120D3 003F;	
    // (𒃓) CUNEIFORM SIGN GA2 TIMES HAL PLUS LA	[4CBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D3, 0x003F };
    uint32_t const ces[9] = { 0x4CBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_241)
{
    // 120D3 0061;	
    // (𒃓) CUNEIFORM SIGN GA2 TIMES HAL PLUS LA	[4CBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D3, 0x0061 };
    uint32_t const ces[9] = { 0x4CBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_242)
{
    // 120D3 0041;	
    // (𒃓) CUNEIFORM SIGN GA2 TIMES HAL PLUS LA	[4CBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120D3, 0x0041 };
    uint32_t const ces[9] = { 0x4CBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_243)
{
    // 120D3 0062;	
    // (𒃓) CUNEIFORM SIGN GA2 TIMES HAL PLUS LA	[4CBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D3, 0x0062 };
    uint32_t const ces[9] = { 0x4CBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_244)
{
    // 120D4 0021;	
    // (𒃔) CUNEIFORM SIGN GA2 TIMES HI PLUS LI	[4CC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D4, 0x0021 };
    uint32_t const ces[9] = { 0x4CC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_245)
{
    // 120D4 003F;	
    // (𒃔) CUNEIFORM SIGN GA2 TIMES HI PLUS LI	[4CC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D4, 0x003F };
    uint32_t const ces[9] = { 0x4CC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_246)
{
    // 120D4 0061;	
    // (𒃔) CUNEIFORM SIGN GA2 TIMES HI PLUS LI	[4CC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D4, 0x0061 };
    uint32_t const ces[9] = { 0x4CC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_247)
{
    // 120D4 0041;	
    // (𒃔) CUNEIFORM SIGN GA2 TIMES HI PLUS LI	[4CC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120D4, 0x0041 };
    uint32_t const ces[9] = { 0x4CC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_248)
{
    // 120D4 0062;	
    // (𒃔) CUNEIFORM SIGN GA2 TIMES HI PLUS LI	[4CC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D4, 0x0062 };
    uint32_t const ces[9] = { 0x4CC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_249)
{
    // 120D5 0021;	
    // (𒃕) CUNEIFORM SIGN GA2 TIMES HUB2	[4CC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D5, 0x0021 };
    uint32_t const ces[9] = { 0x4CC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_250)
{
    // 120D5 003F;	
    // (𒃕) CUNEIFORM SIGN GA2 TIMES HUB2	[4CC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D5, 0x003F };
    uint32_t const ces[9] = { 0x4CC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_251)
{
    // 120D5 0061;	
    // (𒃕) CUNEIFORM SIGN GA2 TIMES HUB2	[4CC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D5, 0x0061 };
    uint32_t const ces[9] = { 0x4CC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_252)
{
    // 120D5 0041;	
    // (𒃕) CUNEIFORM SIGN GA2 TIMES HUB2	[4CC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120D5, 0x0041 };
    uint32_t const ces[9] = { 0x4CC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_253)
{
    // 120D5 0062;	
    // (𒃕) CUNEIFORM SIGN GA2 TIMES HUB2	[4CC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D5, 0x0062 };
    uint32_t const ces[9] = { 0x4CC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_254)
{
    // 120D6 0021;	
    // (𒃖) CUNEIFORM SIGN GA2 TIMES IGI GUNU	[4CC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D6, 0x0021 };
    uint32_t const ces[9] = { 0x4CC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_255)
{
    // 120D6 003F;	
    // (𒃖) CUNEIFORM SIGN GA2 TIMES IGI GUNU	[4CC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D6, 0x003F };
    uint32_t const ces[9] = { 0x4CC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_256)
{
    // 120D6 0061;	
    // (𒃖) CUNEIFORM SIGN GA2 TIMES IGI GUNU	[4CC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D6, 0x0061 };
    uint32_t const ces[9] = { 0x4CC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_257)
{
    // 120D6 0041;	
    // (𒃖) CUNEIFORM SIGN GA2 TIMES IGI GUNU	[4CC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120D6, 0x0041 };
    uint32_t const ces[9] = { 0x4CC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_258)
{
    // 120D6 0062;	
    // (𒃖) CUNEIFORM SIGN GA2 TIMES IGI GUNU	[4CC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D6, 0x0062 };
    uint32_t const ces[9] = { 0x4CC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_259)
{
    // 120D7 0021;	
    // (𒃗) CUNEIFORM SIGN GA2 TIMES ISH PLUS HU PLUS ASH	[4CC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D7, 0x0021 };
    uint32_t const ces[9] = { 0x4CC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_260)
{
    // 120D7 003F;	
    // (𒃗) CUNEIFORM SIGN GA2 TIMES ISH PLUS HU PLUS ASH	[4CC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D7, 0x003F };
    uint32_t const ces[9] = { 0x4CC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_261)
{
    // 120D7 0061;	
    // (𒃗) CUNEIFORM SIGN GA2 TIMES ISH PLUS HU PLUS ASH	[4CC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D7, 0x0061 };
    uint32_t const ces[9] = { 0x4CC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_262)
{
    // 120D7 0041;	
    // (𒃗) CUNEIFORM SIGN GA2 TIMES ISH PLUS HU PLUS ASH	[4CC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120D7, 0x0041 };
    uint32_t const ces[9] = { 0x4CC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_263)
{
    // 120D7 0062;	
    // (𒃗) CUNEIFORM SIGN GA2 TIMES ISH PLUS HU PLUS ASH	[4CC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D7, 0x0062 };
    uint32_t const ces[9] = { 0x4CC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_264)
{
    // 120D8 0021;	
    // (𒃘) CUNEIFORM SIGN GA2 TIMES KAK	[4CC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D8, 0x0021 };
    uint32_t const ces[9] = { 0x4CC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_265)
{
    // 120D8 003F;	
    // (𒃘) CUNEIFORM SIGN GA2 TIMES KAK	[4CC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D8, 0x003F };
    uint32_t const ces[9] = { 0x4CC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_266)
{
    // 120D8 0061;	
    // (𒃘) CUNEIFORM SIGN GA2 TIMES KAK	[4CC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D8, 0x0061 };
    uint32_t const ces[9] = { 0x4CC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_267)
{
    // 120D8 0041;	
    // (𒃘) CUNEIFORM SIGN GA2 TIMES KAK	[4CC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120D8, 0x0041 };
    uint32_t const ces[9] = { 0x4CC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_268)
{
    // 120D8 0062;	
    // (𒃘) CUNEIFORM SIGN GA2 TIMES KAK	[4CC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D8, 0x0062 };
    uint32_t const ces[9] = { 0x4CC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_269)
{
    // 120D9 0021;	
    // (𒃙) CUNEIFORM SIGN GA2 TIMES KASKAL	[4CC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D9, 0x0021 };
    uint32_t const ces[9] = { 0x4CC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_270)
{
    // 120D9 003F;	
    // (𒃙) CUNEIFORM SIGN GA2 TIMES KASKAL	[4CC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D9, 0x003F };
    uint32_t const ces[9] = { 0x4CC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_271)
{
    // 120D9 0061;	
    // (𒃙) CUNEIFORM SIGN GA2 TIMES KASKAL	[4CC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D9, 0x0061 };
    uint32_t const ces[9] = { 0x4CC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_272)
{
    // 120D9 0041;	
    // (𒃙) CUNEIFORM SIGN GA2 TIMES KASKAL	[4CC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120D9, 0x0041 };
    uint32_t const ces[9] = { 0x4CC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_273)
{
    // 120D9 0062;	
    // (𒃙) CUNEIFORM SIGN GA2 TIMES KASKAL	[4CC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120D9, 0x0062 };
    uint32_t const ces[9] = { 0x4CC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_274)
{
    // 120DA 0021;	
    // (𒃚) CUNEIFORM SIGN GA2 TIMES KID	[4CC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DA, 0x0021 };
    uint32_t const ces[9] = { 0x4CC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_275)
{
    // 120DA 003F;	
    // (𒃚) CUNEIFORM SIGN GA2 TIMES KID	[4CC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DA, 0x003F };
    uint32_t const ces[9] = { 0x4CC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_276)
{
    // 120DA 0061;	
    // (𒃚) CUNEIFORM SIGN GA2 TIMES KID	[4CC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DA, 0x0061 };
    uint32_t const ces[9] = { 0x4CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_277)
{
    // 120DA 0041;	
    // (𒃚) CUNEIFORM SIGN GA2 TIMES KID	[4CC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120DA, 0x0041 };
    uint32_t const ces[9] = { 0x4CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_278)
{
    // 120DA 0062;	
    // (𒃚) CUNEIFORM SIGN GA2 TIMES KID	[4CC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DA, 0x0062 };
    uint32_t const ces[9] = { 0x4CC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_279)
{
    // 120DB 0021;	
    // (𒃛) CUNEIFORM SIGN GA2 TIMES KID PLUS LAL	[4CC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DB, 0x0021 };
    uint32_t const ces[9] = { 0x4CC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_280)
{
    // 120DB 003F;	
    // (𒃛) CUNEIFORM SIGN GA2 TIMES KID PLUS LAL	[4CC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DB, 0x003F };
    uint32_t const ces[9] = { 0x4CC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_281)
{
    // 120DB 0061;	
    // (𒃛) CUNEIFORM SIGN GA2 TIMES KID PLUS LAL	[4CC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DB, 0x0061 };
    uint32_t const ces[9] = { 0x4CC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_282)
{
    // 120DB 0041;	
    // (𒃛) CUNEIFORM SIGN GA2 TIMES KID PLUS LAL	[4CC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120DB, 0x0041 };
    uint32_t const ces[9] = { 0x4CC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_283)
{
    // 120DB 0062;	
    // (𒃛) CUNEIFORM SIGN GA2 TIMES KID PLUS LAL	[4CC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DB, 0x0062 };
    uint32_t const ces[9] = { 0x4CC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_284)
{
    // 120DC 0021;	
    // (𒃜) CUNEIFORM SIGN GA2 TIMES KU3 PLUS AN	[4CC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DC, 0x0021 };
    uint32_t const ces[9] = { 0x4CC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_285)
{
    // 120DC 003F;	
    // (𒃜) CUNEIFORM SIGN GA2 TIMES KU3 PLUS AN	[4CC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DC, 0x003F };
    uint32_t const ces[9] = { 0x4CC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_286)
{
    // 120DC 0061;	
    // (𒃜) CUNEIFORM SIGN GA2 TIMES KU3 PLUS AN	[4CC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DC, 0x0061 };
    uint32_t const ces[9] = { 0x4CC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_287)
{
    // 120DC 0041;	
    // (𒃜) CUNEIFORM SIGN GA2 TIMES KU3 PLUS AN	[4CC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120DC, 0x0041 };
    uint32_t const ces[9] = { 0x4CC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_288)
{
    // 120DC 0062;	
    // (𒃜) CUNEIFORM SIGN GA2 TIMES KU3 PLUS AN	[4CC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DC, 0x0062 };
    uint32_t const ces[9] = { 0x4CC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_289)
{
    // 120DD 0021;	
    // (𒃝) CUNEIFORM SIGN GA2 TIMES LA	[4CC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DD, 0x0021 };
    uint32_t const ces[9] = { 0x4CC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_290)
{
    // 120DD 003F;	
    // (𒃝) CUNEIFORM SIGN GA2 TIMES LA	[4CC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DD, 0x003F };
    uint32_t const ces[9] = { 0x4CC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_291)
{
    // 120DD 0061;	
    // (𒃝) CUNEIFORM SIGN GA2 TIMES LA	[4CC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DD, 0x0061 };
    uint32_t const ces[9] = { 0x4CC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_292)
{
    // 120DD 0041;	
    // (𒃝) CUNEIFORM SIGN GA2 TIMES LA	[4CC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120DD, 0x0041 };
    uint32_t const ces[9] = { 0x4CC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_293)
{
    // 120DD 0062;	
    // (𒃝) CUNEIFORM SIGN GA2 TIMES LA	[4CC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DD, 0x0062 };
    uint32_t const ces[9] = { 0x4CC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_294)
{
    // 120DE 0021;	
    // (𒃞) CUNEIFORM SIGN GA2 TIMES ME PLUS EN	[4CCA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DE, 0x0021 };
    uint32_t const ces[9] = { 0x4CCA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_295)
{
    // 120DE 003F;	
    // (𒃞) CUNEIFORM SIGN GA2 TIMES ME PLUS EN	[4CCA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DE, 0x003F };
    uint32_t const ces[9] = { 0x4CCA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_296)
{
    // 120DE 0061;	
    // (𒃞) CUNEIFORM SIGN GA2 TIMES ME PLUS EN	[4CCA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DE, 0x0061 };
    uint32_t const ces[9] = { 0x4CCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_297)
{
    // 120DE 0041;	
    // (𒃞) CUNEIFORM SIGN GA2 TIMES ME PLUS EN	[4CCA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120DE, 0x0041 };
    uint32_t const ces[9] = { 0x4CCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_298)
{
    // 120DE 0062;	
    // (𒃞) CUNEIFORM SIGN GA2 TIMES ME PLUS EN	[4CCA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DE, 0x0062 };
    uint32_t const ces[9] = { 0x4CCA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_299)
{
    // 120DF 0021;	
    // (𒃟) CUNEIFORM SIGN GA2 TIMES MI	[4CCB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DF, 0x0021 };
    uint32_t const ces[9] = { 0x4CCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_300)
{
    // 120DF 003F;	
    // (𒃟) CUNEIFORM SIGN GA2 TIMES MI	[4CCB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DF, 0x003F };
    uint32_t const ces[9] = { 0x4CCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_301)
{
    // 120DF 0061;	
    // (𒃟) CUNEIFORM SIGN GA2 TIMES MI	[4CCB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DF, 0x0061 };
    uint32_t const ces[9] = { 0x4CCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_302)
{
    // 120DF 0041;	
    // (𒃟) CUNEIFORM SIGN GA2 TIMES MI	[4CCB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120DF, 0x0041 };
    uint32_t const ces[9] = { 0x4CCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_303)
{
    // 120DF 0062;	
    // (𒃟) CUNEIFORM SIGN GA2 TIMES MI	[4CCB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120DF, 0x0062 };
    uint32_t const ces[9] = { 0x4CCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_304)
{
    // 120E0 0021;	
    // (𒃠) CUNEIFORM SIGN GA2 TIMES NUN	[4CCC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E0, 0x0021 };
    uint32_t const ces[9] = { 0x4CCC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_305)
{
    // 120E0 003F;	
    // (𒃠) CUNEIFORM SIGN GA2 TIMES NUN	[4CCC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E0, 0x003F };
    uint32_t const ces[9] = { 0x4CCC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_306)
{
    // 120E0 0061;	
    // (𒃠) CUNEIFORM SIGN GA2 TIMES NUN	[4CCC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E0, 0x0061 };
    uint32_t const ces[9] = { 0x4CCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_307)
{
    // 120E0 0041;	
    // (𒃠) CUNEIFORM SIGN GA2 TIMES NUN	[4CCC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120E0, 0x0041 };
    uint32_t const ces[9] = { 0x4CCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_308)
{
    // 120E0 0062;	
    // (𒃠) CUNEIFORM SIGN GA2 TIMES NUN	[4CCC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E0, 0x0062 };
    uint32_t const ces[9] = { 0x4CCC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_309)
{
    // 120E1 0021;	
    // (𒃡) CUNEIFORM SIGN GA2 TIMES NUN OVER NUN	[4CCD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E1, 0x0021 };
    uint32_t const ces[9] = { 0x4CCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_310)
{
    // 120E1 003F;	
    // (𒃡) CUNEIFORM SIGN GA2 TIMES NUN OVER NUN	[4CCD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E1, 0x003F };
    uint32_t const ces[9] = { 0x4CCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_311)
{
    // 120E1 0061;	
    // (𒃡) CUNEIFORM SIGN GA2 TIMES NUN OVER NUN	[4CCD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E1, 0x0061 };
    uint32_t const ces[9] = { 0x4CCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_312)
{
    // 120E1 0041;	
    // (𒃡) CUNEIFORM SIGN GA2 TIMES NUN OVER NUN	[4CCD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120E1, 0x0041 };
    uint32_t const ces[9] = { 0x4CCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_313)
{
    // 120E1 0062;	
    // (𒃡) CUNEIFORM SIGN GA2 TIMES NUN OVER NUN	[4CCD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E1, 0x0062 };
    uint32_t const ces[9] = { 0x4CCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_314)
{
    // 120E2 0021;	
    // (𒃢) CUNEIFORM SIGN GA2 TIMES PA	[4CCE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E2, 0x0021 };
    uint32_t const ces[9] = { 0x4CCE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_315)
{
    // 120E2 003F;	
    // (𒃢) CUNEIFORM SIGN GA2 TIMES PA	[4CCE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E2, 0x003F };
    uint32_t const ces[9] = { 0x4CCE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_316)
{
    // 120E2 0061;	
    // (𒃢) CUNEIFORM SIGN GA2 TIMES PA	[4CCE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E2, 0x0061 };
    uint32_t const ces[9] = { 0x4CCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_317)
{
    // 120E2 0041;	
    // (𒃢) CUNEIFORM SIGN GA2 TIMES PA	[4CCE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120E2, 0x0041 };
    uint32_t const ces[9] = { 0x4CCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_318)
{
    // 120E2 0062;	
    // (𒃢) CUNEIFORM SIGN GA2 TIMES PA	[4CCE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E2, 0x0062 };
    uint32_t const ces[9] = { 0x4CCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_319)
{
    // 120E3 0021;	
    // (𒃣) CUNEIFORM SIGN GA2 TIMES SAL	[4CCF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E3, 0x0021 };
    uint32_t const ces[9] = { 0x4CCF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_320)
{
    // 120E3 003F;	
    // (𒃣) CUNEIFORM SIGN GA2 TIMES SAL	[4CCF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E3, 0x003F };
    uint32_t const ces[9] = { 0x4CCF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_321)
{
    // 120E3 0061;	
    // (𒃣) CUNEIFORM SIGN GA2 TIMES SAL	[4CCF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E3, 0x0061 };
    uint32_t const ces[9] = { 0x4CCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_322)
{
    // 120E3 0041;	
    // (𒃣) CUNEIFORM SIGN GA2 TIMES SAL	[4CCF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120E3, 0x0041 };
    uint32_t const ces[9] = { 0x4CCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_323)
{
    // 120E3 0062;	
    // (𒃣) CUNEIFORM SIGN GA2 TIMES SAL	[4CCF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E3, 0x0062 };
    uint32_t const ces[9] = { 0x4CCF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_324)
{
    // 120E4 0021;	
    // (𒃤) CUNEIFORM SIGN GA2 TIMES SAR	[4CD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E4, 0x0021 };
    uint32_t const ces[9] = { 0x4CD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_325)
{
    // 120E4 003F;	
    // (𒃤) CUNEIFORM SIGN GA2 TIMES SAR	[4CD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E4, 0x003F };
    uint32_t const ces[9] = { 0x4CD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_326)
{
    // 120E4 0061;	
    // (𒃤) CUNEIFORM SIGN GA2 TIMES SAR	[4CD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E4, 0x0061 };
    uint32_t const ces[9] = { 0x4CD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_327)
{
    // 120E4 0041;	
    // (𒃤) CUNEIFORM SIGN GA2 TIMES SAR	[4CD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120E4, 0x0041 };
    uint32_t const ces[9] = { 0x4CD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_328)
{
    // 120E4 0062;	
    // (𒃤) CUNEIFORM SIGN GA2 TIMES SAR	[4CD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E4, 0x0062 };
    uint32_t const ces[9] = { 0x4CD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_329)
{
    // 120E5 0021;	
    // (𒃥) CUNEIFORM SIGN GA2 TIMES SHE	[4CD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E5, 0x0021 };
    uint32_t const ces[9] = { 0x4CD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_330)
{
    // 120E5 003F;	
    // (𒃥) CUNEIFORM SIGN GA2 TIMES SHE	[4CD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E5, 0x003F };
    uint32_t const ces[9] = { 0x4CD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_331)
{
    // 120E5 0061;	
    // (𒃥) CUNEIFORM SIGN GA2 TIMES SHE	[4CD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E5, 0x0061 };
    uint32_t const ces[9] = { 0x4CD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_332)
{
    // 120E5 0041;	
    // (𒃥) CUNEIFORM SIGN GA2 TIMES SHE	[4CD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120E5, 0x0041 };
    uint32_t const ces[9] = { 0x4CD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_333)
{
    // 120E5 0062;	
    // (𒃥) CUNEIFORM SIGN GA2 TIMES SHE	[4CD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E5, 0x0062 };
    uint32_t const ces[9] = { 0x4CD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_334)
{
    // 120E6 0021;	
    // (𒃦) CUNEIFORM SIGN GA2 TIMES SHE PLUS TUR	[4CD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E6, 0x0021 };
    uint32_t const ces[9] = { 0x4CD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_335)
{
    // 120E6 003F;	
    // (𒃦) CUNEIFORM SIGN GA2 TIMES SHE PLUS TUR	[4CD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E6, 0x003F };
    uint32_t const ces[9] = { 0x4CD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_336)
{
    // 120E6 0061;	
    // (𒃦) CUNEIFORM SIGN GA2 TIMES SHE PLUS TUR	[4CD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E6, 0x0061 };
    uint32_t const ces[9] = { 0x4CD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_337)
{
    // 120E6 0041;	
    // (𒃦) CUNEIFORM SIGN GA2 TIMES SHE PLUS TUR	[4CD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120E6, 0x0041 };
    uint32_t const ces[9] = { 0x4CD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_338)
{
    // 120E6 0062;	
    // (𒃦) CUNEIFORM SIGN GA2 TIMES SHE PLUS TUR	[4CD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E6, 0x0062 };
    uint32_t const ces[9] = { 0x4CD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_339)
{
    // 120E7 0021;	
    // (𒃧) CUNEIFORM SIGN GA2 TIMES SHID	[4CD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E7, 0x0021 };
    uint32_t const ces[9] = { 0x4CD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_340)
{
    // 120E7 003F;	
    // (𒃧) CUNEIFORM SIGN GA2 TIMES SHID	[4CD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E7, 0x003F };
    uint32_t const ces[9] = { 0x4CD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_341)
{
    // 120E7 0061;	
    // (𒃧) CUNEIFORM SIGN GA2 TIMES SHID	[4CD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E7, 0x0061 };
    uint32_t const ces[9] = { 0x4CD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_342)
{
    // 120E7 0041;	
    // (𒃧) CUNEIFORM SIGN GA2 TIMES SHID	[4CD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120E7, 0x0041 };
    uint32_t const ces[9] = { 0x4CD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_343)
{
    // 120E7 0062;	
    // (𒃧) CUNEIFORM SIGN GA2 TIMES SHID	[4CD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E7, 0x0062 };
    uint32_t const ces[9] = { 0x4CD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_344)
{
    // 120E8 0021;	
    // (𒃨) CUNEIFORM SIGN GA2 TIMES SUM	[4CD4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E8, 0x0021 };
    uint32_t const ces[9] = { 0x4CD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_345)
{
    // 120E8 003F;	
    // (𒃨) CUNEIFORM SIGN GA2 TIMES SUM	[4CD4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E8, 0x003F };
    uint32_t const ces[9] = { 0x4CD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_346)
{
    // 120E8 0061;	
    // (𒃨) CUNEIFORM SIGN GA2 TIMES SUM	[4CD4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E8, 0x0061 };
    uint32_t const ces[9] = { 0x4CD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_347)
{
    // 120E8 0041;	
    // (𒃨) CUNEIFORM SIGN GA2 TIMES SUM	[4CD4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120E8, 0x0041 };
    uint32_t const ces[9] = { 0x4CD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_348)
{
    // 120E8 0062;	
    // (𒃨) CUNEIFORM SIGN GA2 TIMES SUM	[4CD4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E8, 0x0062 };
    uint32_t const ces[9] = { 0x4CD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_349)
{
    // 120E9 0021;	
    // (𒃩) CUNEIFORM SIGN GA2 TIMES TAK4	[4CD5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E9, 0x0021 };
    uint32_t const ces[9] = { 0x4CD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_350)
{
    // 120E9 003F;	
    // (𒃩) CUNEIFORM SIGN GA2 TIMES TAK4	[4CD5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E9, 0x003F };
    uint32_t const ces[9] = { 0x4CD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_351)
{
    // 120E9 0061;	
    // (𒃩) CUNEIFORM SIGN GA2 TIMES TAK4	[4CD5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E9, 0x0061 };
    uint32_t const ces[9] = { 0x4CD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_352)
{
    // 120E9 0041;	
    // (𒃩) CUNEIFORM SIGN GA2 TIMES TAK4	[4CD5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120E9, 0x0041 };
    uint32_t const ces[9] = { 0x4CD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_353)
{
    // 120E9 0062;	
    // (𒃩) CUNEIFORM SIGN GA2 TIMES TAK4	[4CD5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120E9, 0x0062 };
    uint32_t const ces[9] = { 0x4CD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_354)
{
    // 120EA 0021;	
    // (𒃪) CUNEIFORM SIGN GA2 TIMES U	[4CD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120EA, 0x0021 };
    uint32_t const ces[9] = { 0x4CD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_355)
{
    // 120EA 003F;	
    // (𒃪) CUNEIFORM SIGN GA2 TIMES U	[4CD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120EA, 0x003F };
    uint32_t const ces[9] = { 0x4CD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_356)
{
    // 120EA 0061;	
    // (𒃪) CUNEIFORM SIGN GA2 TIMES U	[4CD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120EA, 0x0061 };
    uint32_t const ces[9] = { 0x4CD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_357)
{
    // 120EA 0041;	
    // (𒃪) CUNEIFORM SIGN GA2 TIMES U	[4CD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120EA, 0x0041 };
    uint32_t const ces[9] = { 0x4CD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_358)
{
    // 120EA 0062;	
    // (𒃪) CUNEIFORM SIGN GA2 TIMES U	[4CD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120EA, 0x0062 };
    uint32_t const ces[9] = { 0x4CD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_359)
{
    // 120EB 0021;	
    // (𒃫) CUNEIFORM SIGN GA2 TIMES UD	[4CD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120EB, 0x0021 };
    uint32_t const ces[9] = { 0x4CD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_360)
{
    // 120EB 003F;	
    // (𒃫) CUNEIFORM SIGN GA2 TIMES UD	[4CD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120EB, 0x003F };
    uint32_t const ces[9] = { 0x4CD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_361)
{
    // 120EB 0061;	
    // (𒃫) CUNEIFORM SIGN GA2 TIMES UD	[4CD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120EB, 0x0061 };
    uint32_t const ces[9] = { 0x4CD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_362)
{
    // 120EB 0041;	
    // (𒃫) CUNEIFORM SIGN GA2 TIMES UD	[4CD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120EB, 0x0041 };
    uint32_t const ces[9] = { 0x4CD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_363)
{
    // 120EB 0062;	
    // (𒃫) CUNEIFORM SIGN GA2 TIMES UD	[4CD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120EB, 0x0062 };
    uint32_t const ces[9] = { 0x4CD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_364)
{
    // 120EC 0021;	
    // (𒃬) CUNEIFORM SIGN GA2 TIMES UD PLUS DU	[4CD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120EC, 0x0021 };
    uint32_t const ces[9] = { 0x4CD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_365)
{
    // 120EC 003F;	
    // (𒃬) CUNEIFORM SIGN GA2 TIMES UD PLUS DU	[4CD8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120EC, 0x003F };
    uint32_t const ces[9] = { 0x4CD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_366)
{
    // 120EC 0061;	
    // (𒃬) CUNEIFORM SIGN GA2 TIMES UD PLUS DU	[4CD8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120EC, 0x0061 };
    uint32_t const ces[9] = { 0x4CD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_367)
{
    // 120EC 0041;	
    // (𒃬) CUNEIFORM SIGN GA2 TIMES UD PLUS DU	[4CD8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120EC, 0x0041 };
    uint32_t const ces[9] = { 0x4CD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_368)
{
    // 120EC 0062;	
    // (𒃬) CUNEIFORM SIGN GA2 TIMES UD PLUS DU	[4CD8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120EC, 0x0062 };
    uint32_t const ces[9] = { 0x4CD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_369)
{
    // 120ED 0021;	
    // (𒃭) CUNEIFORM SIGN GA2 OVER GA2	[4CD9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120ED, 0x0021 };
    uint32_t const ces[9] = { 0x4CD9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_370)
{
    // 120ED 003F;	
    // (𒃭) CUNEIFORM SIGN GA2 OVER GA2	[4CD9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120ED, 0x003F };
    uint32_t const ces[9] = { 0x4CD9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_371)
{
    // 120ED 0061;	
    // (𒃭) CUNEIFORM SIGN GA2 OVER GA2	[4CD9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120ED, 0x0061 };
    uint32_t const ces[9] = { 0x4CD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_372)
{
    // 120ED 0041;	
    // (𒃭) CUNEIFORM SIGN GA2 OVER GA2	[4CD9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120ED, 0x0041 };
    uint32_t const ces[9] = { 0x4CD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_373)
{
    // 120ED 0062;	
    // (𒃭) CUNEIFORM SIGN GA2 OVER GA2	[4CD9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120ED, 0x0062 };
    uint32_t const ces[9] = { 0x4CD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_374)
{
    // 120EE 0021;	
    // (𒃮) CUNEIFORM SIGN GABA	[4CDA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120EE, 0x0021 };
    uint32_t const ces[9] = { 0x4CDA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_375)
{
    // 120EE 003F;	
    // (𒃮) CUNEIFORM SIGN GABA	[4CDA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120EE, 0x003F };
    uint32_t const ces[9] = { 0x4CDA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_376)
{
    // 120EE 0061;	
    // (𒃮) CUNEIFORM SIGN GABA	[4CDA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120EE, 0x0061 };
    uint32_t const ces[9] = { 0x4CDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_377)
{
    // 120EE 0041;	
    // (𒃮) CUNEIFORM SIGN GABA	[4CDA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120EE, 0x0041 };
    uint32_t const ces[9] = { 0x4CDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_378)
{
    // 120EE 0062;	
    // (𒃮) CUNEIFORM SIGN GABA	[4CDA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120EE, 0x0062 };
    uint32_t const ces[9] = { 0x4CDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_379)
{
    // 120EF 0021;	
    // (𒃯) CUNEIFORM SIGN GABA CROSSING GABA	[4CDB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120EF, 0x0021 };
    uint32_t const ces[9] = { 0x4CDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_380)
{
    // 120EF 003F;	
    // (𒃯) CUNEIFORM SIGN GABA CROSSING GABA	[4CDB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120EF, 0x003F };
    uint32_t const ces[9] = { 0x4CDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_381)
{
    // 120EF 0061;	
    // (𒃯) CUNEIFORM SIGN GABA CROSSING GABA	[4CDB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120EF, 0x0061 };
    uint32_t const ces[9] = { 0x4CDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_382)
{
    // 120EF 0041;	
    // (𒃯) CUNEIFORM SIGN GABA CROSSING GABA	[4CDB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120EF, 0x0041 };
    uint32_t const ces[9] = { 0x4CDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_383)
{
    // 120EF 0062;	
    // (𒃯) CUNEIFORM SIGN GABA CROSSING GABA	[4CDB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120EF, 0x0062 };
    uint32_t const ces[9] = { 0x4CDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_384)
{
    // 120F0 0021;	
    // (𒃰) CUNEIFORM SIGN GAD	[4CDC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F0, 0x0021 };
    uint32_t const ces[9] = { 0x4CDC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_385)
{
    // 120F0 003F;	
    // (𒃰) CUNEIFORM SIGN GAD	[4CDC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F0, 0x003F };
    uint32_t const ces[9] = { 0x4CDC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_386)
{
    // 120F0 0061;	
    // (𒃰) CUNEIFORM SIGN GAD	[4CDC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F0, 0x0061 };
    uint32_t const ces[9] = { 0x4CDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_387)
{
    // 120F0 0041;	
    // (𒃰) CUNEIFORM SIGN GAD	[4CDC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120F0, 0x0041 };
    uint32_t const ces[9] = { 0x4CDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_388)
{
    // 120F0 0062;	
    // (𒃰) CUNEIFORM SIGN GAD	[4CDC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F0, 0x0062 };
    uint32_t const ces[9] = { 0x4CDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_389)
{
    // 120F1 0021;	
    // (𒃱) CUNEIFORM SIGN GAD OVER GAD GAR OVER GAR	[4CDD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F1, 0x0021 };
    uint32_t const ces[9] = { 0x4CDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_390)
{
    // 120F1 003F;	
    // (𒃱) CUNEIFORM SIGN GAD OVER GAD GAR OVER GAR	[4CDD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F1, 0x003F };
    uint32_t const ces[9] = { 0x4CDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_391)
{
    // 120F1 0061;	
    // (𒃱) CUNEIFORM SIGN GAD OVER GAD GAR OVER GAR	[4CDD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F1, 0x0061 };
    uint32_t const ces[9] = { 0x4CDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_392)
{
    // 120F1 0041;	
    // (𒃱) CUNEIFORM SIGN GAD OVER GAD GAR OVER GAR	[4CDD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120F1, 0x0041 };
    uint32_t const ces[9] = { 0x4CDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_393)
{
    // 120F1 0062;	
    // (𒃱) CUNEIFORM SIGN GAD OVER GAD GAR OVER GAR	[4CDD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F1, 0x0062 };
    uint32_t const ces[9] = { 0x4CDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_394)
{
    // 120F2 0021;	
    // (𒃲) CUNEIFORM SIGN GAL	[4CDE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F2, 0x0021 };
    uint32_t const ces[9] = { 0x4CDE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_395)
{
    // 120F2 003F;	
    // (𒃲) CUNEIFORM SIGN GAL	[4CDE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F2, 0x003F };
    uint32_t const ces[9] = { 0x4CDE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_396)
{
    // 120F2 0061;	
    // (𒃲) CUNEIFORM SIGN GAL	[4CDE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F2, 0x0061 };
    uint32_t const ces[9] = { 0x4CDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_397)
{
    // 120F2 0041;	
    // (𒃲) CUNEIFORM SIGN GAL	[4CDE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120F2, 0x0041 };
    uint32_t const ces[9] = { 0x4CDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_398)
{
    // 120F2 0062;	
    // (𒃲) CUNEIFORM SIGN GAL	[4CDE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F2, 0x0062 };
    uint32_t const ces[9] = { 0x4CDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_399)
{
    // 120F3 0021;	
    // (𒃳) CUNEIFORM SIGN GAL GAD OVER GAD GAR OVER GAR	[4CDF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F3, 0x0021 };
    uint32_t const ces[9] = { 0x4CDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_400)
{
    // 120F3 003F;	
    // (𒃳) CUNEIFORM SIGN GAL GAD OVER GAD GAR OVER GAR	[4CDF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F3, 0x003F };
    uint32_t const ces[9] = { 0x4CDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_401)
{
    // 120F3 0061;	
    // (𒃳) CUNEIFORM SIGN GAL GAD OVER GAD GAR OVER GAR	[4CDF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F3, 0x0061 };
    uint32_t const ces[9] = { 0x4CDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_402)
{
    // 120F3 0041;	
    // (𒃳) CUNEIFORM SIGN GAL GAD OVER GAD GAR OVER GAR	[4CDF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120F3, 0x0041 };
    uint32_t const ces[9] = { 0x4CDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_403)
{
    // 120F3 0062;	
    // (𒃳) CUNEIFORM SIGN GAL GAD OVER GAD GAR OVER GAR	[4CDF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F3, 0x0062 };
    uint32_t const ces[9] = { 0x4CDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_404)
{
    // 120F4 0021;	
    // (𒃴) CUNEIFORM SIGN GALAM	[4CE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F4, 0x0021 };
    uint32_t const ces[9] = { 0x4CE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_405)
{
    // 120F4 003F;	
    // (𒃴) CUNEIFORM SIGN GALAM	[4CE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F4, 0x003F };
    uint32_t const ces[9] = { 0x4CE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_406)
{
    // 120F4 0061;	
    // (𒃴) CUNEIFORM SIGN GALAM	[4CE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F4, 0x0061 };
    uint32_t const ces[9] = { 0x4CE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_407)
{
    // 120F4 0041;	
    // (𒃴) CUNEIFORM SIGN GALAM	[4CE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120F4, 0x0041 };
    uint32_t const ces[9] = { 0x4CE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_408)
{
    // 120F4 0062;	
    // (𒃴) CUNEIFORM SIGN GALAM	[4CE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F4, 0x0062 };
    uint32_t const ces[9] = { 0x4CE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_409)
{
    // 120F5 0021;	
    // (𒃵) CUNEIFORM SIGN GAM	[4CE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F5, 0x0021 };
    uint32_t const ces[9] = { 0x4CE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_410)
{
    // 120F5 003F;	
    // (𒃵) CUNEIFORM SIGN GAM	[4CE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F5, 0x003F };
    uint32_t const ces[9] = { 0x4CE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_411)
{
    // 120F5 0061;	
    // (𒃵) CUNEIFORM SIGN GAM	[4CE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F5, 0x0061 };
    uint32_t const ces[9] = { 0x4CE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_412)
{
    // 120F5 0041;	
    // (𒃵) CUNEIFORM SIGN GAM	[4CE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120F5, 0x0041 };
    uint32_t const ces[9] = { 0x4CE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_413)
{
    // 120F5 0062;	
    // (𒃵) CUNEIFORM SIGN GAM	[4CE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F5, 0x0062 };
    uint32_t const ces[9] = { 0x4CE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_414)
{
    // 120F6 0021;	
    // (𒃶) CUNEIFORM SIGN GAN	[4CE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F6, 0x0021 };
    uint32_t const ces[9] = { 0x4CE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_415)
{
    // 120F6 003F;	
    // (𒃶) CUNEIFORM SIGN GAN	[4CE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F6, 0x003F };
    uint32_t const ces[9] = { 0x4CE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_416)
{
    // 120F6 0061;	
    // (𒃶) CUNEIFORM SIGN GAN	[4CE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F6, 0x0061 };
    uint32_t const ces[9] = { 0x4CE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_417)
{
    // 120F6 0041;	
    // (𒃶) CUNEIFORM SIGN GAN	[4CE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120F6, 0x0041 };
    uint32_t const ces[9] = { 0x4CE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_418)
{
    // 120F6 0062;	
    // (𒃶) CUNEIFORM SIGN GAN	[4CE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F6, 0x0062 };
    uint32_t const ces[9] = { 0x4CE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_419)
{
    // 120F7 0021;	
    // (𒃷) CUNEIFORM SIGN GAN2	[4CE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F7, 0x0021 };
    uint32_t const ces[9] = { 0x4CE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_420)
{
    // 120F7 003F;	
    // (𒃷) CUNEIFORM SIGN GAN2	[4CE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F7, 0x003F };
    uint32_t const ces[9] = { 0x4CE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_421)
{
    // 120F7 0061;	
    // (𒃷) CUNEIFORM SIGN GAN2	[4CE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F7, 0x0061 };
    uint32_t const ces[9] = { 0x4CE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_422)
{
    // 120F7 0041;	
    // (𒃷) CUNEIFORM SIGN GAN2	[4CE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120F7, 0x0041 };
    uint32_t const ces[9] = { 0x4CE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_423)
{
    // 120F7 0062;	
    // (𒃷) CUNEIFORM SIGN GAN2	[4CE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F7, 0x0062 };
    uint32_t const ces[9] = { 0x4CE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_424)
{
    // 120F8 0021;	
    // (𒃸) CUNEIFORM SIGN GAN2 TENU	[4CE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F8, 0x0021 };
    uint32_t const ces[9] = { 0x4CE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_425)
{
    // 120F8 003F;	
    // (𒃸) CUNEIFORM SIGN GAN2 TENU	[4CE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F8, 0x003F };
    uint32_t const ces[9] = { 0x4CE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_426)
{
    // 120F8 0061;	
    // (𒃸) CUNEIFORM SIGN GAN2 TENU	[4CE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F8, 0x0061 };
    uint32_t const ces[9] = { 0x4CE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_427)
{
    // 120F8 0041;	
    // (𒃸) CUNEIFORM SIGN GAN2 TENU	[4CE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120F8, 0x0041 };
    uint32_t const ces[9] = { 0x4CE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_428)
{
    // 120F8 0062;	
    // (𒃸) CUNEIFORM SIGN GAN2 TENU	[4CE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F8, 0x0062 };
    uint32_t const ces[9] = { 0x4CE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_429)
{
    // 120F9 0021;	
    // (𒃹) CUNEIFORM SIGN GAN2 OVER GAN2	[4CE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F9, 0x0021 };
    uint32_t const ces[9] = { 0x4CE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_430)
{
    // 120F9 003F;	
    // (𒃹) CUNEIFORM SIGN GAN2 OVER GAN2	[4CE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F9, 0x003F };
    uint32_t const ces[9] = { 0x4CE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_431)
{
    // 120F9 0061;	
    // (𒃹) CUNEIFORM SIGN GAN2 OVER GAN2	[4CE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F9, 0x0061 };
    uint32_t const ces[9] = { 0x4CE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_432)
{
    // 120F9 0041;	
    // (𒃹) CUNEIFORM SIGN GAN2 OVER GAN2	[4CE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120F9, 0x0041 };
    uint32_t const ces[9] = { 0x4CE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_433)
{
    // 120F9 0062;	
    // (𒃹) CUNEIFORM SIGN GAN2 OVER GAN2	[4CE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120F9, 0x0062 };
    uint32_t const ces[9] = { 0x4CE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_434)
{
    // 120FA 0021;	
    // (𒃺) CUNEIFORM SIGN GAN2 CROSSING GAN2	[4CE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FA, 0x0021 };
    uint32_t const ces[9] = { 0x4CE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_435)
{
    // 120FA 003F;	
    // (𒃺) CUNEIFORM SIGN GAN2 CROSSING GAN2	[4CE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FA, 0x003F };
    uint32_t const ces[9] = { 0x4CE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_436)
{
    // 120FA 0061;	
    // (𒃺) CUNEIFORM SIGN GAN2 CROSSING GAN2	[4CE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FA, 0x0061 };
    uint32_t const ces[9] = { 0x4CE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_437)
{
    // 120FA 0041;	
    // (𒃺) CUNEIFORM SIGN GAN2 CROSSING GAN2	[4CE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120FA, 0x0041 };
    uint32_t const ces[9] = { 0x4CE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_438)
{
    // 120FA 0062;	
    // (𒃺) CUNEIFORM SIGN GAN2 CROSSING GAN2	[4CE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FA, 0x0062 };
    uint32_t const ces[9] = { 0x4CE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_439)
{
    // 120FB 0021;	
    // (𒃻) CUNEIFORM SIGN GAR	[4CE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FB, 0x0021 };
    uint32_t const ces[9] = { 0x4CE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_440)
{
    // 120FB 003F;	
    // (𒃻) CUNEIFORM SIGN GAR	[4CE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FB, 0x003F };
    uint32_t const ces[9] = { 0x4CE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_441)
{
    // 120FB 0061;	
    // (𒃻) CUNEIFORM SIGN GAR	[4CE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FB, 0x0061 };
    uint32_t const ces[9] = { 0x4CE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_442)
{
    // 120FB 0041;	
    // (𒃻) CUNEIFORM SIGN GAR	[4CE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120FB, 0x0041 };
    uint32_t const ces[9] = { 0x4CE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_443)
{
    // 120FB 0062;	
    // (𒃻) CUNEIFORM SIGN GAR	[4CE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FB, 0x0062 };
    uint32_t const ces[9] = { 0x4CE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_444)
{
    // 120FC 0021;	
    // (𒃼) CUNEIFORM SIGN GAR3	[4CE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FC, 0x0021 };
    uint32_t const ces[9] = { 0x4CE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_445)
{
    // 120FC 003F;	
    // (𒃼) CUNEIFORM SIGN GAR3	[4CE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FC, 0x003F };
    uint32_t const ces[9] = { 0x4CE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_446)
{
    // 120FC 0061;	
    // (𒃼) CUNEIFORM SIGN GAR3	[4CE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FC, 0x0061 };
    uint32_t const ces[9] = { 0x4CE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_447)
{
    // 120FC 0041;	
    // (𒃼) CUNEIFORM SIGN GAR3	[4CE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120FC, 0x0041 };
    uint32_t const ces[9] = { 0x4CE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_448)
{
    // 120FC 0062;	
    // (𒃼) CUNEIFORM SIGN GAR3	[4CE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FC, 0x0062 };
    uint32_t const ces[9] = { 0x4CE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_449)
{
    // 120FD 0021;	
    // (𒃽) CUNEIFORM SIGN GASHAN	[4CE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FD, 0x0021 };
    uint32_t const ces[9] = { 0x4CE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_450)
{
    // 120FD 003F;	
    // (𒃽) CUNEIFORM SIGN GASHAN	[4CE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FD, 0x003F };
    uint32_t const ces[9] = { 0x4CE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_451)
{
    // 120FD 0061;	
    // (𒃽) CUNEIFORM SIGN GASHAN	[4CE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FD, 0x0061 };
    uint32_t const ces[9] = { 0x4CE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_452)
{
    // 120FD 0041;	
    // (𒃽) CUNEIFORM SIGN GASHAN	[4CE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120FD, 0x0041 };
    uint32_t const ces[9] = { 0x4CE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_453)
{
    // 120FD 0062;	
    // (𒃽) CUNEIFORM SIGN GASHAN	[4CE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FD, 0x0062 };
    uint32_t const ces[9] = { 0x4CE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_454)
{
    // 120FE 0021;	
    // (𒃾) CUNEIFORM SIGN GESHTIN	[4CEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FE, 0x0021 };
    uint32_t const ces[9] = { 0x4CEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_455)
{
    // 120FE 003F;	
    // (𒃾) CUNEIFORM SIGN GESHTIN	[4CEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FE, 0x003F };
    uint32_t const ces[9] = { 0x4CEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_456)
{
    // 120FE 0061;	
    // (𒃾) CUNEIFORM SIGN GESHTIN	[4CEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FE, 0x0061 };
    uint32_t const ces[9] = { 0x4CEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_457)
{
    // 120FE 0041;	
    // (𒃾) CUNEIFORM SIGN GESHTIN	[4CEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120FE, 0x0041 };
    uint32_t const ces[9] = { 0x4CEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_458)
{
    // 120FE 0062;	
    // (𒃾) CUNEIFORM SIGN GESHTIN	[4CEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FE, 0x0062 };
    uint32_t const ces[9] = { 0x4CEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_459)
{
    // 120FF 0021;	
    // (𒃿) CUNEIFORM SIGN GESHTIN TIMES KUR	[4CEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FF, 0x0021 };
    uint32_t const ces[9] = { 0x4CEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_460)
{
    // 120FF 003F;	
    // (𒃿) CUNEIFORM SIGN GESHTIN TIMES KUR	[4CEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FF, 0x003F };
    uint32_t const ces[9] = { 0x4CEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_461)
{
    // 120FF 0061;	
    // (𒃿) CUNEIFORM SIGN GESHTIN TIMES KUR	[4CEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FF, 0x0061 };
    uint32_t const ces[9] = { 0x4CEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_462)
{
    // 120FF 0041;	
    // (𒃿) CUNEIFORM SIGN GESHTIN TIMES KUR	[4CEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x120FF, 0x0041 };
    uint32_t const ces[9] = { 0x4CEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_463)
{
    // 120FF 0062;	
    // (𒃿) CUNEIFORM SIGN GESHTIN TIMES KUR	[4CEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x120FF, 0x0062 };
    uint32_t const ces[9] = { 0x4CEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_464)
{
    // 12100 0021;	
    // (𒄀) CUNEIFORM SIGN GI	[4CEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12100, 0x0021 };
    uint32_t const ces[9] = { 0x4CEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_465)
{
    // 12100 003F;	
    // (𒄀) CUNEIFORM SIGN GI	[4CEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12100, 0x003F };
    uint32_t const ces[9] = { 0x4CEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_466)
{
    // 12100 0061;	
    // (𒄀) CUNEIFORM SIGN GI	[4CEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12100, 0x0061 };
    uint32_t const ces[9] = { 0x4CEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_467)
{
    // 12100 0041;	
    // (𒄀) CUNEIFORM SIGN GI	[4CEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12100, 0x0041 };
    uint32_t const ces[9] = { 0x4CEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_468)
{
    // 12100 0062;	
    // (𒄀) CUNEIFORM SIGN GI	[4CEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12100, 0x0062 };
    uint32_t const ces[9] = { 0x4CEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_469)
{
    // 12101 0021;	
    // (𒄁) CUNEIFORM SIGN GI TIMES E	[4CED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12101, 0x0021 };
    uint32_t const ces[9] = { 0x4CED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_470)
{
    // 12101 003F;	
    // (𒄁) CUNEIFORM SIGN GI TIMES E	[4CED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12101, 0x003F };
    uint32_t const ces[9] = { 0x4CED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_471)
{
    // 12101 0061;	
    // (𒄁) CUNEIFORM SIGN GI TIMES E	[4CED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12101, 0x0061 };
    uint32_t const ces[9] = { 0x4CED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_472)
{
    // 12101 0041;	
    // (𒄁) CUNEIFORM SIGN GI TIMES E	[4CED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12101, 0x0041 };
    uint32_t const ces[9] = { 0x4CED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_473)
{
    // 12101 0062;	
    // (𒄁) CUNEIFORM SIGN GI TIMES E	[4CED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12101, 0x0062 };
    uint32_t const ces[9] = { 0x4CED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_474)
{
    // 12102 0021;	
    // (𒄂) CUNEIFORM SIGN GI TIMES U	[4CEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12102, 0x0021 };
    uint32_t const ces[9] = { 0x4CEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_475)
{
    // 12102 003F;	
    // (𒄂) CUNEIFORM SIGN GI TIMES U	[4CEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12102, 0x003F };
    uint32_t const ces[9] = { 0x4CEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_476)
{
    // 12102 0061;	
    // (𒄂) CUNEIFORM SIGN GI TIMES U	[4CEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12102, 0x0061 };
    uint32_t const ces[9] = { 0x4CEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_477)
{
    // 12102 0041;	
    // (𒄂) CUNEIFORM SIGN GI TIMES U	[4CEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12102, 0x0041 };
    uint32_t const ces[9] = { 0x4CEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_478)
{
    // 12102 0062;	
    // (𒄂) CUNEIFORM SIGN GI TIMES U	[4CEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12102, 0x0062 };
    uint32_t const ces[9] = { 0x4CEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_479)
{
    // 12103 0021;	
    // (𒄃) CUNEIFORM SIGN GI CROSSING GI	[4CEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12103, 0x0021 };
    uint32_t const ces[9] = { 0x4CEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_480)
{
    // 12103 003F;	
    // (𒄃) CUNEIFORM SIGN GI CROSSING GI	[4CEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12103, 0x003F };
    uint32_t const ces[9] = { 0x4CEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_481)
{
    // 12103 0061;	
    // (𒄃) CUNEIFORM SIGN GI CROSSING GI	[4CEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12103, 0x0061 };
    uint32_t const ces[9] = { 0x4CEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_482)
{
    // 12103 0041;	
    // (𒄃) CUNEIFORM SIGN GI CROSSING GI	[4CEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12103, 0x0041 };
    uint32_t const ces[9] = { 0x4CEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_483)
{
    // 12103 0062;	
    // (𒄃) CUNEIFORM SIGN GI CROSSING GI	[4CEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12103, 0x0062 };
    uint32_t const ces[9] = { 0x4CEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_484)
{
    // 12104 0021;	
    // (𒄄) CUNEIFORM SIGN GI4	[4CF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12104, 0x0021 };
    uint32_t const ces[9] = { 0x4CF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_485)
{
    // 12104 003F;	
    // (𒄄) CUNEIFORM SIGN GI4	[4CF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12104, 0x003F };
    uint32_t const ces[9] = { 0x4CF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_486)
{
    // 12104 0061;	
    // (𒄄) CUNEIFORM SIGN GI4	[4CF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12104, 0x0061 };
    uint32_t const ces[9] = { 0x4CF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_487)
{
    // 12104 0041;	
    // (𒄄) CUNEIFORM SIGN GI4	[4CF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12104, 0x0041 };
    uint32_t const ces[9] = { 0x4CF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_488)
{
    // 12104 0062;	
    // (𒄄) CUNEIFORM SIGN GI4	[4CF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12104, 0x0062 };
    uint32_t const ces[9] = { 0x4CF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_489)
{
    // 12105 0021;	
    // (𒄅) CUNEIFORM SIGN GI4 OVER GI4	[4CF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12105, 0x0021 };
    uint32_t const ces[9] = { 0x4CF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_490)
{
    // 12105 003F;	
    // (𒄅) CUNEIFORM SIGN GI4 OVER GI4	[4CF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12105, 0x003F };
    uint32_t const ces[9] = { 0x4CF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_491)
{
    // 12105 0061;	
    // (𒄅) CUNEIFORM SIGN GI4 OVER GI4	[4CF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12105, 0x0061 };
    uint32_t const ces[9] = { 0x4CF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_492)
{
    // 12105 0041;	
    // (𒄅) CUNEIFORM SIGN GI4 OVER GI4	[4CF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12105, 0x0041 };
    uint32_t const ces[9] = { 0x4CF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_493)
{
    // 12105 0062;	
    // (𒄅) CUNEIFORM SIGN GI4 OVER GI4	[4CF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12105, 0x0062 };
    uint32_t const ces[9] = { 0x4CF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_494)
{
    // 12106 0021;	
    // (𒄆) CUNEIFORM SIGN GI4 CROSSING GI4	[4CF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12106, 0x0021 };
    uint32_t const ces[9] = { 0x4CF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_495)
{
    // 12106 003F;	
    // (𒄆) CUNEIFORM SIGN GI4 CROSSING GI4	[4CF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12106, 0x003F };
    uint32_t const ces[9] = { 0x4CF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_496)
{
    // 12106 0061;	
    // (𒄆) CUNEIFORM SIGN GI4 CROSSING GI4	[4CF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12106, 0x0061 };
    uint32_t const ces[9] = { 0x4CF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_497)
{
    // 12106 0041;	
    // (𒄆) CUNEIFORM SIGN GI4 CROSSING GI4	[4CF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x12106, 0x0041 };
    uint32_t const ces[9] = { 0x4CF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_498)
{
    // 12106 0062;	
    // (𒄆) CUNEIFORM SIGN GI4 CROSSING GI4	[4CF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12106, 0x0062 };
    uint32_t const ces[9] = { 0x4CF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_287_499)
{
    // 12107 0021;	
    // (𒄇) CUNEIFORM SIGN GIDIM	[4CF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x12107, 0x0021 };
    uint32_t const ces[9] = { 0x4CF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

