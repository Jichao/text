// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_205_000)
{
    // 101C 0041;	
    // (လ) MYANMAR LETTER LA	[31A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x101C, 0x0041 };
    uint32_t const ces[9] = { 0x31A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_001)
{
    // 101C 0062;	
    // (လ) MYANMAR LETTER LA	[31A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x101C, 0x0062 };
    uint32_t const ces[9] = { 0x31A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_002)
{
    // 1060 0021;	
    // (ၠ) MYANMAR CONSONANT SIGN MON MEDIAL LA	[31A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060, 0x0021 };
    uint32_t const ces[9] = { 0x31A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_003)
{
    // 1060 003F;	
    // (ၠ) MYANMAR CONSONANT SIGN MON MEDIAL LA	[31A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060, 0x003F };
    uint32_t const ces[9] = { 0x31A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_004)
{
    // 1060 0061;	
    // (ၠ) MYANMAR CONSONANT SIGN MON MEDIAL LA	[31A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060, 0x0061 };
    uint32_t const ces[9] = { 0x31A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_005)
{
    // 1060 0041;	
    // (ၠ) MYANMAR CONSONANT SIGN MON MEDIAL LA	[31A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1060, 0x0041 };
    uint32_t const ces[9] = { 0x31A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_006)
{
    // 1060 0062;	
    // (ၠ) MYANMAR CONSONANT SIGN MON MEDIAL LA	[31A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060, 0x0062 };
    uint32_t const ces[9] = { 0x31A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_007)
{
    // 101D 0021;	
    // (ဝ) MYANMAR LETTER WA	[31A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x101D, 0x0021 };
    uint32_t const ces[9] = { 0x31A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_008)
{
    // 101D 003F;	
    // (ဝ) MYANMAR LETTER WA	[31A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x101D, 0x003F };
    uint32_t const ces[9] = { 0x31A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_009)
{
    // 101D 0061;	
    // (ဝ) MYANMAR LETTER WA	[31A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x101D, 0x0061 };
    uint32_t const ces[9] = { 0x31A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_010)
{
    // 101D 0041;	
    // (ဝ) MYANMAR LETTER WA	[31A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x101D, 0x0041 };
    uint32_t const ces[9] = { 0x31A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_011)
{
    // 101D 0062;	
    // (ဝ) MYANMAR LETTER WA	[31A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x101D, 0x0062 };
    uint32_t const ces[9] = { 0x31A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_012)
{
    // 103D 0021;	
    // (ွ) MYANMAR CONSONANT SIGN MEDIAL WA	[31A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103D, 0x0021 };
    uint32_t const ces[9] = { 0x31A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_013)
{
    // 103D 003F;	
    // (ွ) MYANMAR CONSONANT SIGN MEDIAL WA	[31A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103D, 0x003F };
    uint32_t const ces[9] = { 0x31A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_014)
{
    // 103D 0061;	
    // (ွ) MYANMAR CONSONANT SIGN MEDIAL WA	[31A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103D, 0x0061 };
    uint32_t const ces[9] = { 0x31A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_015)
{
    // 103D 0041;	
    // (ွ) MYANMAR CONSONANT SIGN MEDIAL WA	[31A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103D, 0x0041 };
    uint32_t const ces[9] = { 0x31A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_016)
{
    // 103D 0062;	
    // (ွ) MYANMAR CONSONANT SIGN MEDIAL WA	[31A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103D, 0x0062 };
    uint32_t const ces[9] = { 0x31A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_017)
{
    // 1082 0021;	
    // (ႂ) MYANMAR CONSONANT SIGN SHAN MEDIAL WA	[31A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1082, 0x0021 };
    uint32_t const ces[9] = { 0x31A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_018)
{
    // 1082 003F;	
    // (ႂ) MYANMAR CONSONANT SIGN SHAN MEDIAL WA	[31A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1082, 0x003F };
    uint32_t const ces[9] = { 0x31A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_019)
{
    // 1082 0061;	
    // (ႂ) MYANMAR CONSONANT SIGN SHAN MEDIAL WA	[31A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1082, 0x0061 };
    uint32_t const ces[9] = { 0x31A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_020)
{
    // 1082 0041;	
    // (ႂ) MYANMAR CONSONANT SIGN SHAN MEDIAL WA	[31A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1082, 0x0041 };
    uint32_t const ces[9] = { 0x31A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_021)
{
    // 1082 0062;	
    // (ႂ) MYANMAR CONSONANT SIGN SHAN MEDIAL WA	[31A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1082, 0x0062 };
    uint32_t const ces[9] = { 0x31A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_022)
{
    // 1080 0021;	
    // (ႀ) MYANMAR LETTER SHAN THA	[31A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1080, 0x0021 };
    uint32_t const ces[9] = { 0x31A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_023)
{
    // 1080 003F;	
    // (ႀ) MYANMAR LETTER SHAN THA	[31A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1080, 0x003F };
    uint32_t const ces[9] = { 0x31A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_024)
{
    // 1080 0061;	
    // (ႀ) MYANMAR LETTER SHAN THA	[31A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1080, 0x0061 };
    uint32_t const ces[9] = { 0x31A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_025)
{
    // 1080 0041;	
    // (ႀ) MYANMAR LETTER SHAN THA	[31A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1080, 0x0041 };
    uint32_t const ces[9] = { 0x31A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_026)
{
    // 1080 0062;	
    // (ႀ) MYANMAR LETTER SHAN THA	[31A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1080, 0x0062 };
    uint32_t const ces[9] = { 0x31A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_027)
{
    // 1050 0021;	
    // (ၐ) MYANMAR LETTER SHA	[31A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050, 0x0021 };
    uint32_t const ces[9] = { 0x31A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_028)
{
    // 1050 003F;	
    // (ၐ) MYANMAR LETTER SHA	[31A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050, 0x003F };
    uint32_t const ces[9] = { 0x31A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_029)
{
    // 1050 0061;	
    // (ၐ) MYANMAR LETTER SHA	[31A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050, 0x0061 };
    uint32_t const ces[9] = { 0x31A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_030)
{
    // 1050 0041;	
    // (ၐ) MYANMAR LETTER SHA	[31A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1050, 0x0041 };
    uint32_t const ces[9] = { 0x31A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_031)
{
    // 1050 0062;	
    // (ၐ) MYANMAR LETTER SHA	[31A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1050, 0x0062 };
    uint32_t const ces[9] = { 0x31A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_032)
{
    // 1051 0021;	
    // (ၑ) MYANMAR LETTER SSA	[31A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051, 0x0021 };
    uint32_t const ces[9] = { 0x31A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_033)
{
    // 1051 003F;	
    // (ၑ) MYANMAR LETTER SSA	[31A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051, 0x003F };
    uint32_t const ces[9] = { 0x31A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_034)
{
    // 1051 0061;	
    // (ၑ) MYANMAR LETTER SSA	[31A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051, 0x0061 };
    uint32_t const ces[9] = { 0x31A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_035)
{
    // 1051 0041;	
    // (ၑ) MYANMAR LETTER SSA	[31A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1051, 0x0041 };
    uint32_t const ces[9] = { 0x31A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_036)
{
    // 1051 0062;	
    // (ၑ) MYANMAR LETTER SSA	[31A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1051, 0x0062 };
    uint32_t const ces[9] = { 0x31A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_037)
{
    // 1065 0021;	
    // (ၥ) MYANMAR LETTER WESTERN PWO KAREN THA	[31A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065, 0x0021 };
    uint32_t const ces[9] = { 0x31A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_038)
{
    // 1065 003F;	
    // (ၥ) MYANMAR LETTER WESTERN PWO KAREN THA	[31A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065, 0x003F };
    uint32_t const ces[9] = { 0x31A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_039)
{
    // 1065 0061;	
    // (ၥ) MYANMAR LETTER WESTERN PWO KAREN THA	[31A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065, 0x0061 };
    uint32_t const ces[9] = { 0x31A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_040)
{
    // 1065 0041;	
    // (ၥ) MYANMAR LETTER WESTERN PWO KAREN THA	[31A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1065, 0x0041 };
    uint32_t const ces[9] = { 0x31A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_041)
{
    // 1065 0062;	
    // (ၥ) MYANMAR LETTER WESTERN PWO KAREN THA	[31A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1065, 0x0062 };
    uint32_t const ces[9] = { 0x31A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_042)
{
    // 101E 0021;	
    // (သ) MYANMAR LETTER SA	[31A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x101E, 0x0021 };
    uint32_t const ces[9] = { 0x31A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_043)
{
    // 101E 003F;	
    // (သ) MYANMAR LETTER SA	[31A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x101E, 0x003F };
    uint32_t const ces[9] = { 0x31A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_044)
{
    // 101E 0061;	
    // (သ) MYANMAR LETTER SA	[31A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x101E, 0x0061 };
    uint32_t const ces[9] = { 0x31A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_045)
{
    // 101E 0041;	
    // (သ) MYANMAR LETTER SA	[31A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x101E, 0x0041 };
    uint32_t const ces[9] = { 0x31A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_046)
{
    // 101E 0062;	
    // (သ) MYANMAR LETTER SA	[31A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x101E, 0x0062 };
    uint32_t const ces[9] = { 0x31A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_047)
{
    // 103F 0021;	
    // (ဿ) MYANMAR LETTER GREAT SA	[31A9 31E2 31A9 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x103F, 0x0021 };
    uint32_t const ces[15] = { 0x31A9, 0x31E2, 0x31A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_048)
{
    // 103F 003F;	
    // (ဿ) MYANMAR LETTER GREAT SA	[31A9 31E2 31A9 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x103F, 0x003F };
    uint32_t const ces[15] = { 0x31A9, 0x31E2, 0x31A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_049)
{
    // 103F 0061;	
    // (ဿ) MYANMAR LETTER GREAT SA	[31A9 31E2 31A9 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x103F, 0x0061 };
    uint32_t const ces[15] = { 0x31A9, 0x31E2, 0x31A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_050)
{
    // 103F 0041;	
    // (ဿ) MYANMAR LETTER GREAT SA	[31A9 31E2 31A9 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x103F, 0x0041 };
    uint32_t const ces[15] = { 0x31A9, 0x31E2, 0x31A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_051)
{
    // 103F 0062;	
    // (ဿ) MYANMAR LETTER GREAT SA	[31A9 31E2 31A9 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x103F, 0x0062 };
    uint32_t const ces[15] = { 0x31A9, 0x31E2, 0x31A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_052)
{
    // AA6C 0021;	
    // (ꩬ) MYANMAR LETTER KHAMTI SA	[31AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA6C, 0x0021 };
    uint32_t const ces[9] = { 0x31AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_053)
{
    // AA6C 003F;	
    // (ꩬ) MYANMAR LETTER KHAMTI SA	[31AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA6C, 0x003F };
    uint32_t const ces[9] = { 0x31AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_054)
{
    // AA6C 0061;	
    // (ꩬ) MYANMAR LETTER KHAMTI SA	[31AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA6C, 0x0061 };
    uint32_t const ces[9] = { 0x31AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_055)
{
    // AA6C 0041;	
    // (ꩬ) MYANMAR LETTER KHAMTI SA	[31AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA6C, 0x0041 };
    uint32_t const ces[9] = { 0x31AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_056)
{
    // AA6C 0062;	
    // (ꩬ) MYANMAR LETTER KHAMTI SA	[31AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA6C, 0x0062 };
    uint32_t const ces[9] = { 0x31AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_057)
{
    // 101F 0021;	
    // (ဟ) MYANMAR LETTER HA	[31AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x101F, 0x0021 };
    uint32_t const ces[9] = { 0x31AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_058)
{
    // 101F 003F;	
    // (ဟ) MYANMAR LETTER HA	[31AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x101F, 0x003F };
    uint32_t const ces[9] = { 0x31AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_059)
{
    // 101F 0061;	
    // (ဟ) MYANMAR LETTER HA	[31AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x101F, 0x0061 };
    uint32_t const ces[9] = { 0x31AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_060)
{
    // 101F 0041;	
    // (ဟ) MYANMAR LETTER HA	[31AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x101F, 0x0041 };
    uint32_t const ces[9] = { 0x31AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_061)
{
    // 101F 0062;	
    // (ဟ) MYANMAR LETTER HA	[31AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x101F, 0x0062 };
    uint32_t const ces[9] = { 0x31AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_062)
{
    // 1081 0021;	
    // (ႁ) MYANMAR LETTER SHAN HA	[31AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1081, 0x0021 };
    uint32_t const ces[9] = { 0x31AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_063)
{
    // 1081 003F;	
    // (ႁ) MYANMAR LETTER SHAN HA	[31AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1081, 0x003F };
    uint32_t const ces[9] = { 0x31AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_064)
{
    // 1081 0061;	
    // (ႁ) MYANMAR LETTER SHAN HA	[31AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1081, 0x0061 };
    uint32_t const ces[9] = { 0x31AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_065)
{
    // 1081 0041;	
    // (ႁ) MYANMAR LETTER SHAN HA	[31AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1081, 0x0041 };
    uint32_t const ces[9] = { 0x31AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_066)
{
    // 1081 0062;	
    // (ႁ) MYANMAR LETTER SHAN HA	[31AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1081, 0x0062 };
    uint32_t const ces[9] = { 0x31AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_067)
{
    // AA6D 0021;	
    // (ꩭ) MYANMAR LETTER KHAMTI HA	[31AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA6D, 0x0021 };
    uint32_t const ces[9] = { 0x31AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_068)
{
    // AA6D 003F;	
    // (ꩭ) MYANMAR LETTER KHAMTI HA	[31AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA6D, 0x003F };
    uint32_t const ces[9] = { 0x31AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_069)
{
    // AA6D 0061;	
    // (ꩭ) MYANMAR LETTER KHAMTI HA	[31AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA6D, 0x0061 };
    uint32_t const ces[9] = { 0x31AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_070)
{
    // AA6D 0041;	
    // (ꩭ) MYANMAR LETTER KHAMTI HA	[31AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA6D, 0x0041 };
    uint32_t const ces[9] = { 0x31AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_071)
{
    // AA6D 0062;	
    // (ꩭ) MYANMAR LETTER KHAMTI HA	[31AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA6D, 0x0062 };
    uint32_t const ces[9] = { 0x31AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_072)
{
    // 103E 0021;	
    // (ှ) MYANMAR CONSONANT SIGN MEDIAL HA	[31AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103E, 0x0021 };
    uint32_t const ces[9] = { 0x31AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_073)
{
    // 103E 003F;	
    // (ှ) MYANMAR CONSONANT SIGN MEDIAL HA	[31AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103E, 0x003F };
    uint32_t const ces[9] = { 0x31AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_074)
{
    // 103E 0061;	
    // (ှ) MYANMAR CONSONANT SIGN MEDIAL HA	[31AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103E, 0x0061 };
    uint32_t const ces[9] = { 0x31AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_075)
{
    // 103E 0041;	
    // (ှ) MYANMAR CONSONANT SIGN MEDIAL HA	[31AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103E, 0x0041 };
    uint32_t const ces[9] = { 0x31AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_076)
{
    // 103E 0062;	
    // (ှ) MYANMAR CONSONANT SIGN MEDIAL HA	[31AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103E, 0x0062 };
    uint32_t const ces[9] = { 0x31AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_077)
{
    // AA6E 0021;	
    // (ꩮ) MYANMAR LETTER KHAMTI HHA	[31AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA6E, 0x0021 };
    uint32_t const ces[9] = { 0x31AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_078)
{
    // AA6E 003F;	
    // (ꩮ) MYANMAR LETTER KHAMTI HHA	[31AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA6E, 0x003F };
    uint32_t const ces[9] = { 0x31AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_079)
{
    // AA6E 0061;	
    // (ꩮ) MYANMAR LETTER KHAMTI HHA	[31AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA6E, 0x0061 };
    uint32_t const ces[9] = { 0x31AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_080)
{
    // AA6E 0041;	
    // (ꩮ) MYANMAR LETTER KHAMTI HHA	[31AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA6E, 0x0041 };
    uint32_t const ces[9] = { 0x31AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_081)
{
    // AA6E 0062;	
    // (ꩮ) MYANMAR LETTER KHAMTI HHA	[31AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA6E, 0x0062 };
    uint32_t const ces[9] = { 0x31AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_082)
{
    // AA71 0021;	
    // (ꩱ) MYANMAR LETTER KHAMTI XA	[31B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA71, 0x0021 };
    uint32_t const ces[9] = { 0x31B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_083)
{
    // AA71 003F;	
    // (ꩱ) MYANMAR LETTER KHAMTI XA	[31B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA71, 0x003F };
    uint32_t const ces[9] = { 0x31B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_084)
{
    // AA71 0061;	
    // (ꩱ) MYANMAR LETTER KHAMTI XA	[31B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA71, 0x0061 };
    uint32_t const ces[9] = { 0x31B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_085)
{
    // AA71 0041;	
    // (ꩱ) MYANMAR LETTER KHAMTI XA	[31B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA71, 0x0041 };
    uint32_t const ces[9] = { 0x31B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_086)
{
    // AA71 0062;	
    // (ꩱ) MYANMAR LETTER KHAMTI XA	[31B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA71, 0x0062 };
    uint32_t const ces[9] = { 0x31B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_087)
{
    // 1020 0021;	
    // (ဠ) MYANMAR LETTER LLA	[31B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1020, 0x0021 };
    uint32_t const ces[9] = { 0x31B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_088)
{
    // 1020 003F;	
    // (ဠ) MYANMAR LETTER LLA	[31B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1020, 0x003F };
    uint32_t const ces[9] = { 0x31B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_089)
{
    // 1020 0061;	
    // (ဠ) MYANMAR LETTER LLA	[31B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1020, 0x0061 };
    uint32_t const ces[9] = { 0x31B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_090)
{
    // 1020 0041;	
    // (ဠ) MYANMAR LETTER LLA	[31B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1020, 0x0041 };
    uint32_t const ces[9] = { 0x31B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_091)
{
    // 1020 0062;	
    // (ဠ) MYANMAR LETTER LLA	[31B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1020, 0x0062 };
    uint32_t const ces[9] = { 0x31B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_092)
{
    // A9FA 0021;	
    // (ꧺ) MYANMAR LETTER TAI LAING LLA	[31B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9FA, 0x0021 };
    uint32_t const ces[9] = { 0x31B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_093)
{
    // A9FA 003F;	
    // (ꧺ) MYANMAR LETTER TAI LAING LLA	[31B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9FA, 0x003F };
    uint32_t const ces[9] = { 0x31B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_094)
{
    // A9FA 0061;	
    // (ꧺ) MYANMAR LETTER TAI LAING LLA	[31B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9FA, 0x0061 };
    uint32_t const ces[9] = { 0x31B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_095)
{
    // A9FA 0041;	
    // (ꧺ) MYANMAR LETTER TAI LAING LLA	[31B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9FA, 0x0041 };
    uint32_t const ces[9] = { 0x31B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_096)
{
    // A9FA 0062;	
    // (ꧺ) MYANMAR LETTER TAI LAING LLA	[31B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9FA, 0x0062 };
    uint32_t const ces[9] = { 0x31B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_097)
{
    // 105C 0021;	
    // (ၜ) MYANMAR LETTER MON BBA	[31B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x105C, 0x0021 };
    uint32_t const ces[9] = { 0x31B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_098)
{
    // 105C 003F;	
    // (ၜ) MYANMAR LETTER MON BBA	[31B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x105C, 0x003F };
    uint32_t const ces[9] = { 0x31B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_099)
{
    // 105C 0061;	
    // (ၜ) MYANMAR LETTER MON BBA	[31B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x105C, 0x0061 };
    uint32_t const ces[9] = { 0x31B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_100)
{
    // 105C 0041;	
    // (ၜ) MYANMAR LETTER MON BBA	[31B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x105C, 0x0041 };
    uint32_t const ces[9] = { 0x31B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_101)
{
    // 105C 0062;	
    // (ၜ) MYANMAR LETTER MON BBA	[31B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x105C, 0x0062 };
    uint32_t const ces[9] = { 0x31B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_102)
{
    // 105D 0021;	
    // (ၝ) MYANMAR LETTER MON BBE	[31B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x105D, 0x0021 };
    uint32_t const ces[9] = { 0x31B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_103)
{
    // 105D 003F;	
    // (ၝ) MYANMAR LETTER MON BBE	[31B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x105D, 0x003F };
    uint32_t const ces[9] = { 0x31B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_104)
{
    // 105D 0061;	
    // (ၝ) MYANMAR LETTER MON BBE	[31B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x105D, 0x0061 };
    uint32_t const ces[9] = { 0x31B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_105)
{
    // 105D 0041;	
    // (ၝ) MYANMAR LETTER MON BBE	[31B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x105D, 0x0041 };
    uint32_t const ces[9] = { 0x31B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_106)
{
    // 105D 0062;	
    // (ၝ) MYANMAR LETTER MON BBE	[31B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x105D, 0x0062 };
    uint32_t const ces[9] = { 0x31B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_107)
{
    // 106F 0021;	
    // (ၯ) MYANMAR LETTER EASTERN PWO KAREN YWA	[31B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F, 0x0021 };
    uint32_t const ces[9] = { 0x31B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_108)
{
    // 106F 003F;	
    // (ၯ) MYANMAR LETTER EASTERN PWO KAREN YWA	[31B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F, 0x003F };
    uint32_t const ces[9] = { 0x31B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_109)
{
    // 106F 0061;	
    // (ၯ) MYANMAR LETTER EASTERN PWO KAREN YWA	[31B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F, 0x0061 };
    uint32_t const ces[9] = { 0x31B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_110)
{
    // 106F 0041;	
    // (ၯ) MYANMAR LETTER EASTERN PWO KAREN YWA	[31B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106F, 0x0041 };
    uint32_t const ces[9] = { 0x31B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_111)
{
    // 106F 0062;	
    // (ၯ) MYANMAR LETTER EASTERN PWO KAREN YWA	[31B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F, 0x0062 };
    uint32_t const ces[9] = { 0x31B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_112)
{
    // 1070 0021;	
    // (ၰ) MYANMAR LETTER EASTERN PWO KAREN GHWA	[31B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070, 0x0021 };
    uint32_t const ces[9] = { 0x31B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_113)
{
    // 1070 003F;	
    // (ၰ) MYANMAR LETTER EASTERN PWO KAREN GHWA	[31B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070, 0x003F };
    uint32_t const ces[9] = { 0x31B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_114)
{
    // 1070 0061;	
    // (ၰ) MYANMAR LETTER EASTERN PWO KAREN GHWA	[31B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070, 0x0061 };
    uint32_t const ces[9] = { 0x31B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_115)
{
    // 1070 0041;	
    // (ၰ) MYANMAR LETTER EASTERN PWO KAREN GHWA	[31B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1070, 0x0041 };
    uint32_t const ces[9] = { 0x31B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_116)
{
    // 1070 0062;	
    // (ၰ) MYANMAR LETTER EASTERN PWO KAREN GHWA	[31B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070, 0x0062 };
    uint32_t const ces[9] = { 0x31B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_117)
{
    // 1066 0021;	
    // (ၦ) MYANMAR LETTER WESTERN PWO KAREN PWA	[31B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066, 0x0021 };
    uint32_t const ces[9] = { 0x31B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_118)
{
    // 1066 003F;	
    // (ၦ) MYANMAR LETTER WESTERN PWO KAREN PWA	[31B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066, 0x003F };
    uint32_t const ces[9] = { 0x31B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_119)
{
    // 1066 0061;	
    // (ၦ) MYANMAR LETTER WESTERN PWO KAREN PWA	[31B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066, 0x0061 };
    uint32_t const ces[9] = { 0x31B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_120)
{
    // 1066 0041;	
    // (ၦ) MYANMAR LETTER WESTERN PWO KAREN PWA	[31B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1066, 0x0041 };
    uint32_t const ces[9] = { 0x31B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_121)
{
    // 1066 0062;	
    // (ၦ) MYANMAR LETTER WESTERN PWO KAREN PWA	[31B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1066, 0x0062 };
    uint32_t const ces[9] = { 0x31B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_122)
{
    // 1021 0021;	
    // (အ) MYANMAR LETTER A	[31B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1021, 0x0021 };
    uint32_t const ces[9] = { 0x31B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_123)
{
    // 1021 003F;	
    // (အ) MYANMAR LETTER A	[31B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1021, 0x003F };
    uint32_t const ces[9] = { 0x31B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_124)
{
    // 1021 0061;	
    // (အ) MYANMAR LETTER A	[31B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1021, 0x0061 };
    uint32_t const ces[9] = { 0x31B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_125)
{
    // 1021 0041;	
    // (အ) MYANMAR LETTER A	[31B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1021, 0x0041 };
    uint32_t const ces[9] = { 0x31B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_126)
{
    // 1021 0062;	
    // (အ) MYANMAR LETTER A	[31B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1021, 0x0062 };
    uint32_t const ces[9] = { 0x31B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_127)
{
    // 1022 0021;	
    // (ဢ) MYANMAR LETTER SHAN A	[31B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1022, 0x0021 };
    uint32_t const ces[9] = { 0x31B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_128)
{
    // 1022 003F;	
    // (ဢ) MYANMAR LETTER SHAN A	[31B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1022, 0x003F };
    uint32_t const ces[9] = { 0x31B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_129)
{
    // 1022 0061;	
    // (ဢ) MYANMAR LETTER SHAN A	[31B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1022, 0x0061 };
    uint32_t const ces[9] = { 0x31B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_130)
{
    // 1022 0041;	
    // (ဢ) MYANMAR LETTER SHAN A	[31B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1022, 0x0041 };
    uint32_t const ces[9] = { 0x31B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_131)
{
    // 1022 0062;	
    // (ဢ) MYANMAR LETTER SHAN A	[31B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1022, 0x0062 };
    uint32_t const ces[9] = { 0x31B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_132)
{
    // 1023 0021;	
    // (ဣ) MYANMAR LETTER I	[31BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1023, 0x0021 };
    uint32_t const ces[9] = { 0x31BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_133)
{
    // 1023 003F;	
    // (ဣ) MYANMAR LETTER I	[31BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1023, 0x003F };
    uint32_t const ces[9] = { 0x31BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_134)
{
    // 1023 0061;	
    // (ဣ) MYANMAR LETTER I	[31BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1023, 0x0061 };
    uint32_t const ces[9] = { 0x31BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_135)
{
    // 1023 0041;	
    // (ဣ) MYANMAR LETTER I	[31BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1023, 0x0041 };
    uint32_t const ces[9] = { 0x31BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_136)
{
    // 1023 0062;	
    // (ဣ) MYANMAR LETTER I	[31BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1023, 0x0062 };
    uint32_t const ces[9] = { 0x31BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_137)
{
    // 1024 0021;	
    // (ဤ) MYANMAR LETTER II	[31BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1024, 0x0021 };
    uint32_t const ces[9] = { 0x31BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_138)
{
    // 1024 003F;	
    // (ဤ) MYANMAR LETTER II	[31BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1024, 0x003F };
    uint32_t const ces[9] = { 0x31BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_139)
{
    // 1024 0061;	
    // (ဤ) MYANMAR LETTER II	[31BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1024, 0x0061 };
    uint32_t const ces[9] = { 0x31BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_140)
{
    // 1024 0041;	
    // (ဤ) MYANMAR LETTER II	[31BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1024, 0x0041 };
    uint32_t const ces[9] = { 0x31BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_141)
{
    // 1024 0062;	
    // (ဤ) MYANMAR LETTER II	[31BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1024, 0x0062 };
    uint32_t const ces[9] = { 0x31BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_142)
{
    // 1025 0021;	
    // (ဥ) MYANMAR LETTER U	[31BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1025, 0x0021 };
    uint32_t const ces[9] = { 0x31BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_143)
{
    // 1025 003F;	
    // (ဥ) MYANMAR LETTER U	[31BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1025, 0x003F };
    uint32_t const ces[9] = { 0x31BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_144)
{
    // 1025 0061;	
    // (ဥ) MYANMAR LETTER U	[31BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1025, 0x0061 };
    uint32_t const ces[9] = { 0x31BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_145)
{
    // 1025 0041;	
    // (ဥ) MYANMAR LETTER U	[31BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1025, 0x0041 };
    uint32_t const ces[9] = { 0x31BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_146)
{
    // 1025 0062;	
    // (ဥ) MYANMAR LETTER U	[31BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1025, 0x0062 };
    uint32_t const ces[9] = { 0x31BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_147)
{
    // 1025 0001 102E 0061;	
    // (ဥ'\u0001'ီ) MYANMAR LETTER U, <START OF HEADING>, MYANMAR VOWEL SIGN II	[31BC 31CC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1025, 0x0001, 0x102E, 0x0061 };
    uint32_t const ces[12] = { 0x31BC, 0x31CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_148)
{
    // 1025 0591 102E 0061;	
    // (ဥ֑ီ) MYANMAR LETTER U, HEBREW ACCENT ETNAHTA, MYANMAR VOWEL SIGN II	[31BC 31CC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1025, 0x0591, 0x102E, 0x0061 };
    uint32_t const ces[12] = { 0x31BC, 0x31CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_149)
{
    // 1025 1D165 102E 0061;	
    // (ဥ𝅥ီ) MYANMAR LETTER U, MUSICAL SYMBOL COMBINING STEM, MYANMAR VOWEL SIGN II	[31BC 31CC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1025, 0x1D165, 0x102E, 0x0061 };
    uint32_t const ces[12] = { 0x31BC, 0x31CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_150)
{
    // 1025 102E 0021;	
    // (ဦ) MYANMAR LETTER U, MYANMAR VOWEL SIGN II	[31BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x1025, 0x102E, 0x0021 };
    uint32_t const ces[9] = { 0x31BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_151)
{
    // 1026 0021;	
    // (ဦ) MYANMAR LETTER UU	[31BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1026, 0x0021 };
    uint32_t const ces[9] = { 0x31BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_152)
{
    // 1025 102E 003F;	
    // (ဦ) MYANMAR LETTER U, MYANMAR VOWEL SIGN II	[31BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x1025, 0x102E, 0x003F };
    uint32_t const ces[9] = { 0x31BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_153)
{
    // 1026 003F;	
    // (ဦ) MYANMAR LETTER UU	[31BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1026, 0x003F };
    uint32_t const ces[9] = { 0x31BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_154)
{
    // 1025 102E 0061;	
    // (ဦ) MYANMAR LETTER U, MYANMAR VOWEL SIGN II	[31BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x1025, 0x102E, 0x0061 };
    uint32_t const ces[9] = { 0x31BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_155)
{
    // 1026 0061;	
    // (ဦ) MYANMAR LETTER UU	[31BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1026, 0x0061 };
    uint32_t const ces[9] = { 0x31BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_156)
{
    // 1025 102E 0041;	
    // (ဦ) MYANMAR LETTER U, MYANMAR VOWEL SIGN II	[31BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x1025, 0x102E, 0x0041 };
    uint32_t const ces[9] = { 0x31BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_157)
{
    // 1026 0041;	
    // (ဦ) MYANMAR LETTER UU	[31BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1026, 0x0041 };
    uint32_t const ces[9] = { 0x31BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_158)
{
    // 1025 102E 0062;	
    // (ဦ) MYANMAR LETTER U, MYANMAR VOWEL SIGN II	[31BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x1025, 0x102E, 0x0062 };
    uint32_t const ces[9] = { 0x31BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_159)
{
    // 1026 0062;	
    // (ဦ) MYANMAR LETTER UU	[31BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1026, 0x0062 };
    uint32_t const ces[9] = { 0x31BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_160)
{
    // 1052 0021;	
    // (ၒ) MYANMAR LETTER VOCALIC R	[31BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1052, 0x0021 };
    uint32_t const ces[9] = { 0x31BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_161)
{
    // 1052 003F;	
    // (ၒ) MYANMAR LETTER VOCALIC R	[31BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1052, 0x003F };
    uint32_t const ces[9] = { 0x31BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_162)
{
    // 1052 0061;	
    // (ၒ) MYANMAR LETTER VOCALIC R	[31BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1052, 0x0061 };
    uint32_t const ces[9] = { 0x31BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_163)
{
    // 1052 0041;	
    // (ၒ) MYANMAR LETTER VOCALIC R	[31BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1052, 0x0041 };
    uint32_t const ces[9] = { 0x31BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_164)
{
    // 1052 0062;	
    // (ၒ) MYANMAR LETTER VOCALIC R	[31BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1052, 0x0062 };
    uint32_t const ces[9] = { 0x31BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_165)
{
    // 1053 0021;	
    // (ၓ) MYANMAR LETTER VOCALIC RR	[31BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053, 0x0021 };
    uint32_t const ces[9] = { 0x31BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_166)
{
    // 1053 003F;	
    // (ၓ) MYANMAR LETTER VOCALIC RR	[31BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053, 0x003F };
    uint32_t const ces[9] = { 0x31BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_167)
{
    // 1053 0061;	
    // (ၓ) MYANMAR LETTER VOCALIC RR	[31BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053, 0x0061 };
    uint32_t const ces[9] = { 0x31BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_168)
{
    // 1053 0041;	
    // (ၓ) MYANMAR LETTER VOCALIC RR	[31BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1053, 0x0041 };
    uint32_t const ces[9] = { 0x31BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_169)
{
    // 1053 0062;	
    // (ၓ) MYANMAR LETTER VOCALIC RR	[31BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1053, 0x0062 };
    uint32_t const ces[9] = { 0x31BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_170)
{
    // 1054 0021;	
    // (ၔ) MYANMAR LETTER VOCALIC L	[31C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054, 0x0021 };
    uint32_t const ces[9] = { 0x31C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_171)
{
    // 1054 003F;	
    // (ၔ) MYANMAR LETTER VOCALIC L	[31C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054, 0x003F };
    uint32_t const ces[9] = { 0x31C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_172)
{
    // 1054 0061;	
    // (ၔ) MYANMAR LETTER VOCALIC L	[31C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054, 0x0061 };
    uint32_t const ces[9] = { 0x31C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_173)
{
    // 1054 0041;	
    // (ၔ) MYANMAR LETTER VOCALIC L	[31C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1054, 0x0041 };
    uint32_t const ces[9] = { 0x31C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_174)
{
    // 1054 0062;	
    // (ၔ) MYANMAR LETTER VOCALIC L	[31C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1054, 0x0062 };
    uint32_t const ces[9] = { 0x31C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_175)
{
    // 1055 0021;	
    // (ၕ) MYANMAR LETTER VOCALIC LL	[31C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055, 0x0021 };
    uint32_t const ces[9] = { 0x31C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_176)
{
    // 1055 003F;	
    // (ၕ) MYANMAR LETTER VOCALIC LL	[31C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055, 0x003F };
    uint32_t const ces[9] = { 0x31C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_177)
{
    // 1055 0061;	
    // (ၕ) MYANMAR LETTER VOCALIC LL	[31C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055, 0x0061 };
    uint32_t const ces[9] = { 0x31C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_178)
{
    // 1055 0041;	
    // (ၕ) MYANMAR LETTER VOCALIC LL	[31C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1055, 0x0041 };
    uint32_t const ces[9] = { 0x31C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_179)
{
    // 1055 0062;	
    // (ၕ) MYANMAR LETTER VOCALIC LL	[31C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1055, 0x0062 };
    uint32_t const ces[9] = { 0x31C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_180)
{
    // 1027 0021;	
    // (ဧ) MYANMAR LETTER E	[31C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1027, 0x0021 };
    uint32_t const ces[9] = { 0x31C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_181)
{
    // 1027 003F;	
    // (ဧ) MYANMAR LETTER E	[31C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1027, 0x003F };
    uint32_t const ces[9] = { 0x31C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_182)
{
    // 1027 0061;	
    // (ဧ) MYANMAR LETTER E	[31C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1027, 0x0061 };
    uint32_t const ces[9] = { 0x31C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_183)
{
    // 1027 0041;	
    // (ဧ) MYANMAR LETTER E	[31C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1027, 0x0041 };
    uint32_t const ces[9] = { 0x31C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_184)
{
    // 1027 0062;	
    // (ဧ) MYANMAR LETTER E	[31C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1027, 0x0062 };
    uint32_t const ces[9] = { 0x31C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_185)
{
    // 1028 0021;	
    // (ဨ) MYANMAR LETTER MON E	[31C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028, 0x0021 };
    uint32_t const ces[9] = { 0x31C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_186)
{
    // 1028 003F;	
    // (ဨ) MYANMAR LETTER MON E	[31C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028, 0x003F };
    uint32_t const ces[9] = { 0x31C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_187)
{
    // 1028 0061;	
    // (ဨ) MYANMAR LETTER MON E	[31C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028, 0x0061 };
    uint32_t const ces[9] = { 0x31C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_188)
{
    // 1028 0041;	
    // (ဨ) MYANMAR LETTER MON E	[31C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1028, 0x0041 };
    uint32_t const ces[9] = { 0x31C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_189)
{
    // 1028 0062;	
    // (ဨ) MYANMAR LETTER MON E	[31C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1028, 0x0062 };
    uint32_t const ces[9] = { 0x31C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_190)
{
    // 1029 0021;	
    // (ဩ) MYANMAR LETTER O	[31C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1029, 0x0021 };
    uint32_t const ces[9] = { 0x31C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_191)
{
    // 1029 003F;	
    // (ဩ) MYANMAR LETTER O	[31C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1029, 0x003F };
    uint32_t const ces[9] = { 0x31C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_192)
{
    // 1029 0061;	
    // (ဩ) MYANMAR LETTER O	[31C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1029, 0x0061 };
    uint32_t const ces[9] = { 0x31C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_193)
{
    // 1029 0041;	
    // (ဩ) MYANMAR LETTER O	[31C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1029, 0x0041 };
    uint32_t const ces[9] = { 0x31C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_194)
{
    // 1029 0062;	
    // (ဩ) MYANMAR LETTER O	[31C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1029, 0x0062 };
    uint32_t const ces[9] = { 0x31C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_195)
{
    // 102A 0021;	
    // (ဪ) MYANMAR LETTER AU	[31C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A, 0x0021 };
    uint32_t const ces[9] = { 0x31C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_196)
{
    // 102A 003F;	
    // (ဪ) MYANMAR LETTER AU	[31C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A, 0x003F };
    uint32_t const ces[9] = { 0x31C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_197)
{
    // 102A 0061;	
    // (ဪ) MYANMAR LETTER AU	[31C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A, 0x0061 };
    uint32_t const ces[9] = { 0x31C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_198)
{
    // 102A 0041;	
    // (ဪ) MYANMAR LETTER AU	[31C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102A, 0x0041 };
    uint32_t const ces[9] = { 0x31C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_199)
{
    // 102A 0062;	
    // (ဪ) MYANMAR LETTER AU	[31C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102A, 0x0062 };
    uint32_t const ces[9] = { 0x31C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_200)
{
    // 102C 0021;	
    // (ာ) MYANMAR VOWEL SIGN AA	[31C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C, 0x0021 };
    uint32_t const ces[9] = { 0x31C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_201)
{
    // 102B 0021;	
    // (ါ) MYANMAR VOWEL SIGN TALL AA	[31C6 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x102B, 0x0021 };
    uint32_t const ces[9] = { 0x31C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_202)
{
    // 102C 003F;	
    // (ာ) MYANMAR VOWEL SIGN AA	[31C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C, 0x003F };
    uint32_t const ces[9] = { 0x31C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_203)
{
    // 102B 003F;	
    // (ါ) MYANMAR VOWEL SIGN TALL AA	[31C6 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x102B, 0x003F };
    uint32_t const ces[9] = { 0x31C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_204)
{
    // 102C 0061;	
    // (ာ) MYANMAR VOWEL SIGN AA	[31C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C, 0x0061 };
    uint32_t const ces[9] = { 0x31C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_205)
{
    // 102C 0041;	
    // (ာ) MYANMAR VOWEL SIGN AA	[31C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102C, 0x0041 };
    uint32_t const ces[9] = { 0x31C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_206)
{
    // 102B 0061;	
    // (ါ) MYANMAR VOWEL SIGN TALL AA	[31C6 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x102B, 0x0061 };
    uint32_t const ces[9] = { 0x31C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_207)
{
    // 102B 0041;	
    // (ါ) MYANMAR VOWEL SIGN TALL AA	[31C6 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x102B, 0x0041 };
    uint32_t const ces[9] = { 0x31C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_208)
{
    // 102C 0062;	
    // (ာ) MYANMAR VOWEL SIGN AA	[31C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102C, 0x0062 };
    uint32_t const ces[9] = { 0x31C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_209)
{
    // 102B 0062;	
    // (ါ) MYANMAR VOWEL SIGN TALL AA	[31C6 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x102B, 0x0062 };
    uint32_t const ces[9] = { 0x31C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_210)
{
    // 1083 0021;	
    // (ႃ) MYANMAR VOWEL SIGN SHAN AA	[31C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1083, 0x0021 };
    uint32_t const ces[9] = { 0x31C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_211)
{
    // 1083 003F;	
    // (ႃ) MYANMAR VOWEL SIGN SHAN AA	[31C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1083, 0x003F };
    uint32_t const ces[9] = { 0x31C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_212)
{
    // 1083 0061;	
    // (ႃ) MYANMAR VOWEL SIGN SHAN AA	[31C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1083, 0x0061 };
    uint32_t const ces[9] = { 0x31C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_213)
{
    // 1083 0041;	
    // (ႃ) MYANMAR VOWEL SIGN SHAN AA	[31C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1083, 0x0041 };
    uint32_t const ces[9] = { 0x31C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_214)
{
    // 1083 0062;	
    // (ႃ) MYANMAR VOWEL SIGN SHAN AA	[31C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1083, 0x0062 };
    uint32_t const ces[9] = { 0x31C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_215)
{
    // 1072 0021;	
    // (ၲ) MYANMAR VOWEL SIGN KAYAH OE	[31C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072, 0x0021 };
    uint32_t const ces[9] = { 0x31C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_216)
{
    // 1072 003F;	
    // (ၲ) MYANMAR VOWEL SIGN KAYAH OE	[31C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072, 0x003F };
    uint32_t const ces[9] = { 0x31C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_217)
{
    // 1072 0061;	
    // (ၲ) MYANMAR VOWEL SIGN KAYAH OE	[31C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072, 0x0061 };
    uint32_t const ces[9] = { 0x31C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_218)
{
    // 1072 0041;	
    // (ၲ) MYANMAR VOWEL SIGN KAYAH OE	[31C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1072, 0x0041 };
    uint32_t const ces[9] = { 0x31C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_219)
{
    // 1072 0062;	
    // (ၲ) MYANMAR VOWEL SIGN KAYAH OE	[31C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072, 0x0062 };
    uint32_t const ces[9] = { 0x31C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_220)
{
    // 109C 0021;	
    // (ႜ) MYANMAR VOWEL SIGN AITON A	[31C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C, 0x0021 };
    uint32_t const ces[9] = { 0x31C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_221)
{
    // 109C 003F;	
    // (ႜ) MYANMAR VOWEL SIGN AITON A	[31C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C, 0x003F };
    uint32_t const ces[9] = { 0x31C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_222)
{
    // 109C 0061;	
    // (ႜ) MYANMAR VOWEL SIGN AITON A	[31C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C, 0x0061 };
    uint32_t const ces[9] = { 0x31C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_223)
{
    // 109C 0041;	
    // (ႜ) MYANMAR VOWEL SIGN AITON A	[31C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109C, 0x0041 };
    uint32_t const ces[9] = { 0x31C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_224)
{
    // 109C 0062;	
    // (ႜ) MYANMAR VOWEL SIGN AITON A	[31C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109C, 0x0062 };
    uint32_t const ces[9] = { 0x31C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_225)
{
    // 102D 0021;	
    // (ိ) MYANMAR VOWEL SIGN I	[31CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102D, 0x0021 };
    uint32_t const ces[9] = { 0x31CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_226)
{
    // 102D 003F;	
    // (ိ) MYANMAR VOWEL SIGN I	[31CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102D, 0x003F };
    uint32_t const ces[9] = { 0x31CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_227)
{
    // 102D 0061;	
    // (ိ) MYANMAR VOWEL SIGN I	[31CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102D, 0x0061 };
    uint32_t const ces[9] = { 0x31CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_228)
{
    // 102D 0041;	
    // (ိ) MYANMAR VOWEL SIGN I	[31CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102D, 0x0041 };
    uint32_t const ces[9] = { 0x31CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_229)
{
    // 102D 0062;	
    // (ိ) MYANMAR VOWEL SIGN I	[31CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102D, 0x0062 };
    uint32_t const ces[9] = { 0x31CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_230)
{
    // 1071 0021;	
    // (ၱ) MYANMAR VOWEL SIGN GEBA KAREN I	[31CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071, 0x0021 };
    uint32_t const ces[9] = { 0x31CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_231)
{
    // 1071 003F;	
    // (ၱ) MYANMAR VOWEL SIGN GEBA KAREN I	[31CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071, 0x003F };
    uint32_t const ces[9] = { 0x31CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_232)
{
    // 1071 0061;	
    // (ၱ) MYANMAR VOWEL SIGN GEBA KAREN I	[31CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071, 0x0061 };
    uint32_t const ces[9] = { 0x31CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_233)
{
    // 1071 0041;	
    // (ၱ) MYANMAR VOWEL SIGN GEBA KAREN I	[31CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1071, 0x0041 };
    uint32_t const ces[9] = { 0x31CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_234)
{
    // 1071 0062;	
    // (ၱ) MYANMAR VOWEL SIGN GEBA KAREN I	[31CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071, 0x0062 };
    uint32_t const ces[9] = { 0x31CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_235)
{
    // 102E 0021;	
    // (ီ) MYANMAR VOWEL SIGN II	[31CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E, 0x0021 };
    uint32_t const ces[9] = { 0x31CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_236)
{
    // 102E 003F;	
    // (ီ) MYANMAR VOWEL SIGN II	[31CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E, 0x003F };
    uint32_t const ces[9] = { 0x31CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_237)
{
    // 102E 0061;	
    // (ီ) MYANMAR VOWEL SIGN II	[31CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E, 0x0061 };
    uint32_t const ces[9] = { 0x31CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_238)
{
    // 102E 0041;	
    // (ီ) MYANMAR VOWEL SIGN II	[31CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102E, 0x0041 };
    uint32_t const ces[9] = { 0x31CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_239)
{
    // 102E 0062;	
    // (ီ) MYANMAR VOWEL SIGN II	[31CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102E, 0x0062 };
    uint32_t const ces[9] = { 0x31CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_240)
{
    // 1033 0021;	
    // (ဳ) MYANMAR VOWEL SIGN MON II	[31CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033, 0x0021 };
    uint32_t const ces[9] = { 0x31CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_241)
{
    // 1033 003F;	
    // (ဳ) MYANMAR VOWEL SIGN MON II	[31CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033, 0x003F };
    uint32_t const ces[9] = { 0x31CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_242)
{
    // 1033 0061;	
    // (ဳ) MYANMAR VOWEL SIGN MON II	[31CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033, 0x0061 };
    uint32_t const ces[9] = { 0x31CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_243)
{
    // 1033 0041;	
    // (ဳ) MYANMAR VOWEL SIGN MON II	[31CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1033, 0x0041 };
    uint32_t const ces[9] = { 0x31CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_244)
{
    // 1033 0062;	
    // (ဳ) MYANMAR VOWEL SIGN MON II	[31CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1033, 0x0062 };
    uint32_t const ces[9] = { 0x31CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_245)
{
    // 102F 0021;	
    // (ု) MYANMAR VOWEL SIGN U	[31CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F, 0x0021 };
    uint32_t const ces[9] = { 0x31CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_246)
{
    // 102F 003F;	
    // (ု) MYANMAR VOWEL SIGN U	[31CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F, 0x003F };
    uint32_t const ces[9] = { 0x31CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_247)
{
    // 102F 0061;	
    // (ု) MYANMAR VOWEL SIGN U	[31CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F, 0x0061 };
    uint32_t const ces[9] = { 0x31CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_248)
{
    // 102F 0041;	
    // (ု) MYANMAR VOWEL SIGN U	[31CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x102F, 0x0041 };
    uint32_t const ces[9] = { 0x31CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_249)
{
    // 102F 0062;	
    // (ု) MYANMAR VOWEL SIGN U	[31CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x102F, 0x0062 };
    uint32_t const ces[9] = { 0x31CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_250)
{
    // 1073 0021;	
    // (ၳ) MYANMAR VOWEL SIGN KAYAH U	[31CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1073, 0x0021 };
    uint32_t const ces[9] = { 0x31CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_251)
{
    // 1073 003F;	
    // (ၳ) MYANMAR VOWEL SIGN KAYAH U	[31CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1073, 0x003F };
    uint32_t const ces[9] = { 0x31CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_252)
{
    // 1073 0061;	
    // (ၳ) MYANMAR VOWEL SIGN KAYAH U	[31CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1073, 0x0061 };
    uint32_t const ces[9] = { 0x31CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_253)
{
    // 1073 0041;	
    // (ၳ) MYANMAR VOWEL SIGN KAYAH U	[31CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1073, 0x0041 };
    uint32_t const ces[9] = { 0x31CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_254)
{
    // 1073 0062;	
    // (ၳ) MYANMAR VOWEL SIGN KAYAH U	[31CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1073, 0x0062 };
    uint32_t const ces[9] = { 0x31CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_255)
{
    // 1074 0021;	
    // (ၴ) MYANMAR VOWEL SIGN KAYAH EE	[31D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074, 0x0021 };
    uint32_t const ces[9] = { 0x31D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_256)
{
    // 1074 003F;	
    // (ၴ) MYANMAR VOWEL SIGN KAYAH EE	[31D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074, 0x003F };
    uint32_t const ces[9] = { 0x31D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_257)
{
    // 1074 0061;	
    // (ၴ) MYANMAR VOWEL SIGN KAYAH EE	[31D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074, 0x0061 };
    uint32_t const ces[9] = { 0x31D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_258)
{
    // 1074 0041;	
    // (ၴ) MYANMAR VOWEL SIGN KAYAH EE	[31D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1074, 0x0041 };
    uint32_t const ces[9] = { 0x31D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_259)
{
    // 1074 0062;	
    // (ၴ) MYANMAR VOWEL SIGN KAYAH EE	[31D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074, 0x0062 };
    uint32_t const ces[9] = { 0x31D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_260)
{
    // 1030 0021;	
    // (ူ) MYANMAR VOWEL SIGN UU	[31D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030, 0x0021 };
    uint32_t const ces[9] = { 0x31D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_261)
{
    // 1030 003F;	
    // (ူ) MYANMAR VOWEL SIGN UU	[31D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030, 0x003F };
    uint32_t const ces[9] = { 0x31D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_262)
{
    // 1030 0061;	
    // (ူ) MYANMAR VOWEL SIGN UU	[31D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030, 0x0061 };
    uint32_t const ces[9] = { 0x31D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_263)
{
    // 1030 0041;	
    // (ူ) MYANMAR VOWEL SIGN UU	[31D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1030, 0x0041 };
    uint32_t const ces[9] = { 0x31D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_264)
{
    // 1030 0062;	
    // (ူ) MYANMAR VOWEL SIGN UU	[31D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1030, 0x0062 };
    uint32_t const ces[9] = { 0x31D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_265)
{
    // 1056 0021;	
    // (ၖ) MYANMAR VOWEL SIGN VOCALIC R	[31D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1056, 0x0021 };
    uint32_t const ces[9] = { 0x31D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_266)
{
    // 1056 003F;	
    // (ၖ) MYANMAR VOWEL SIGN VOCALIC R	[31D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1056, 0x003F };
    uint32_t const ces[9] = { 0x31D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_267)
{
    // 1056 0061;	
    // (ၖ) MYANMAR VOWEL SIGN VOCALIC R	[31D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1056, 0x0061 };
    uint32_t const ces[9] = { 0x31D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_268)
{
    // 1056 0041;	
    // (ၖ) MYANMAR VOWEL SIGN VOCALIC R	[31D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1056, 0x0041 };
    uint32_t const ces[9] = { 0x31D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_269)
{
    // 1056 0062;	
    // (ၖ) MYANMAR VOWEL SIGN VOCALIC R	[31D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1056, 0x0062 };
    uint32_t const ces[9] = { 0x31D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_270)
{
    // 1057 0021;	
    // (ၗ) MYANMAR VOWEL SIGN VOCALIC RR	[31D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1057, 0x0021 };
    uint32_t const ces[9] = { 0x31D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_271)
{
    // 1057 003F;	
    // (ၗ) MYANMAR VOWEL SIGN VOCALIC RR	[31D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1057, 0x003F };
    uint32_t const ces[9] = { 0x31D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_272)
{
    // 1057 0061;	
    // (ၗ) MYANMAR VOWEL SIGN VOCALIC RR	[31D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1057, 0x0061 };
    uint32_t const ces[9] = { 0x31D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_273)
{
    // 1057 0041;	
    // (ၗ) MYANMAR VOWEL SIGN VOCALIC RR	[31D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1057, 0x0041 };
    uint32_t const ces[9] = { 0x31D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_274)
{
    // 1057 0062;	
    // (ၗ) MYANMAR VOWEL SIGN VOCALIC RR	[31D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1057, 0x0062 };
    uint32_t const ces[9] = { 0x31D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_275)
{
    // 1058 0021;	
    // (ၘ) MYANMAR VOWEL SIGN VOCALIC L	[31D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1058, 0x0021 };
    uint32_t const ces[9] = { 0x31D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_276)
{
    // 1058 003F;	
    // (ၘ) MYANMAR VOWEL SIGN VOCALIC L	[31D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1058, 0x003F };
    uint32_t const ces[9] = { 0x31D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_277)
{
    // 1058 0061;	
    // (ၘ) MYANMAR VOWEL SIGN VOCALIC L	[31D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1058, 0x0061 };
    uint32_t const ces[9] = { 0x31D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_278)
{
    // 1058 0041;	
    // (ၘ) MYANMAR VOWEL SIGN VOCALIC L	[31D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1058, 0x0041 };
    uint32_t const ces[9] = { 0x31D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_279)
{
    // 1058 0062;	
    // (ၘ) MYANMAR VOWEL SIGN VOCALIC L	[31D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1058, 0x0062 };
    uint32_t const ces[9] = { 0x31D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_280)
{
    // 1059 0021;	
    // (ၙ) MYANMAR VOWEL SIGN VOCALIC LL	[31D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1059, 0x0021 };
    uint32_t const ces[9] = { 0x31D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_281)
{
    // 1059 003F;	
    // (ၙ) MYANMAR VOWEL SIGN VOCALIC LL	[31D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1059, 0x003F };
    uint32_t const ces[9] = { 0x31D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_282)
{
    // 1059 0061;	
    // (ၙ) MYANMAR VOWEL SIGN VOCALIC LL	[31D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1059, 0x0061 };
    uint32_t const ces[9] = { 0x31D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_283)
{
    // 1059 0041;	
    // (ၙ) MYANMAR VOWEL SIGN VOCALIC LL	[31D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1059, 0x0041 };
    uint32_t const ces[9] = { 0x31D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_284)
{
    // 1059 0062;	
    // (ၙ) MYANMAR VOWEL SIGN VOCALIC LL	[31D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1059, 0x0062 };
    uint32_t const ces[9] = { 0x31D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_285)
{
    // 1031 0021;	
    // (ေ) MYANMAR VOWEL SIGN E	[31D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031, 0x0021 };
    uint32_t const ces[9] = { 0x31D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_286)
{
    // 1031 003F;	
    // (ေ) MYANMAR VOWEL SIGN E	[31D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031, 0x003F };
    uint32_t const ces[9] = { 0x31D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_287)
{
    // 1031 0061;	
    // (ေ) MYANMAR VOWEL SIGN E	[31D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031, 0x0061 };
    uint32_t const ces[9] = { 0x31D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_288)
{
    // 1031 0041;	
    // (ေ) MYANMAR VOWEL SIGN E	[31D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1031, 0x0041 };
    uint32_t const ces[9] = { 0x31D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_289)
{
    // 1031 0062;	
    // (ေ) MYANMAR VOWEL SIGN E	[31D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1031, 0x0062 };
    uint32_t const ces[9] = { 0x31D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_290)
{
    // 1084 0021;	
    // (ႄ) MYANMAR VOWEL SIGN SHAN E	[31D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1084, 0x0021 };
    uint32_t const ces[9] = { 0x31D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_291)
{
    // 1084 003F;	
    // (ႄ) MYANMAR VOWEL SIGN SHAN E	[31D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1084, 0x003F };
    uint32_t const ces[9] = { 0x31D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_292)
{
    // 1084 0061;	
    // (ႄ) MYANMAR VOWEL SIGN SHAN E	[31D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1084, 0x0061 };
    uint32_t const ces[9] = { 0x31D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_293)
{
    // 1084 0041;	
    // (ႄ) MYANMAR VOWEL SIGN SHAN E	[31D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1084, 0x0041 };
    uint32_t const ces[9] = { 0x31D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_294)
{
    // 1084 0062;	
    // (ႄ) MYANMAR VOWEL SIGN SHAN E	[31D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1084, 0x0062 };
    uint32_t const ces[9] = { 0x31D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_295)
{
    // 1035 0021;	
    // (ဵ) MYANMAR VOWEL SIGN E ABOVE	[31D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1035, 0x0021 };
    uint32_t const ces[9] = { 0x31D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_296)
{
    // 1035 003F;	
    // (ဵ) MYANMAR VOWEL SIGN E ABOVE	[31D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1035, 0x003F };
    uint32_t const ces[9] = { 0x31D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_297)
{
    // 1035 0061;	
    // (ဵ) MYANMAR VOWEL SIGN E ABOVE	[31D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1035, 0x0061 };
    uint32_t const ces[9] = { 0x31D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_298)
{
    // 1035 0041;	
    // (ဵ) MYANMAR VOWEL SIGN E ABOVE	[31D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1035, 0x0041 };
    uint32_t const ces[9] = { 0x31D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_299)
{
    // 1035 0062;	
    // (ဵ) MYANMAR VOWEL SIGN E ABOVE	[31D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1035, 0x0062 };
    uint32_t const ces[9] = { 0x31D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_300)
{
    // 1085 0021;	
    // (ႅ) MYANMAR VOWEL SIGN SHAN E ABOVE	[31D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1085, 0x0021 };
    uint32_t const ces[9] = { 0x31D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_301)
{
    // 1085 003F;	
    // (ႅ) MYANMAR VOWEL SIGN SHAN E ABOVE	[31D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1085, 0x003F };
    uint32_t const ces[9] = { 0x31D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_302)
{
    // 1085 0061;	
    // (ႅ) MYANMAR VOWEL SIGN SHAN E ABOVE	[31D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1085, 0x0061 };
    uint32_t const ces[9] = { 0x31D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_303)
{
    // 1085 0041;	
    // (ႅ) MYANMAR VOWEL SIGN SHAN E ABOVE	[31D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1085, 0x0041 };
    uint32_t const ces[9] = { 0x31D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_304)
{
    // 1085 0062;	
    // (ႅ) MYANMAR VOWEL SIGN SHAN E ABOVE	[31D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1085, 0x0062 };
    uint32_t const ces[9] = { 0x31D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_305)
{
    // 1032 0021;	
    // (ဲ) MYANMAR VOWEL SIGN AI	[31DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1032, 0x0021 };
    uint32_t const ces[9] = { 0x31DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_306)
{
    // 1032 003F;	
    // (ဲ) MYANMAR VOWEL SIGN AI	[31DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1032, 0x003F };
    uint32_t const ces[9] = { 0x31DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_307)
{
    // 1032 0061;	
    // (ဲ) MYANMAR VOWEL SIGN AI	[31DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1032, 0x0061 };
    uint32_t const ces[9] = { 0x31DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_308)
{
    // 1032 0041;	
    // (ဲ) MYANMAR VOWEL SIGN AI	[31DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1032, 0x0041 };
    uint32_t const ces[9] = { 0x31DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_309)
{
    // 1032 0062;	
    // (ဲ) MYANMAR VOWEL SIGN AI	[31DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1032, 0x0062 };
    uint32_t const ces[9] = { 0x31DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_310)
{
    // 109D 0021;	
    // (ႝ) MYANMAR VOWEL SIGN AITON AI	[31DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D, 0x0021 };
    uint32_t const ces[9] = { 0x31DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_311)
{
    // 109D 003F;	
    // (ႝ) MYANMAR VOWEL SIGN AITON AI	[31DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D, 0x003F };
    uint32_t const ces[9] = { 0x31DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_312)
{
    // 109D 0061;	
    // (ႝ) MYANMAR VOWEL SIGN AITON AI	[31DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D, 0x0061 };
    uint32_t const ces[9] = { 0x31DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_313)
{
    // 109D 0041;	
    // (ႝ) MYANMAR VOWEL SIGN AITON AI	[31DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109D, 0x0041 };
    uint32_t const ces[9] = { 0x31DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_314)
{
    // 109D 0062;	
    // (ႝ) MYANMAR VOWEL SIGN AITON AI	[31DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109D, 0x0062 };
    uint32_t const ces[9] = { 0x31DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_315)
{
    // 1034 0021;	
    // (ဴ) MYANMAR VOWEL SIGN MON O	[31DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1034, 0x0021 };
    uint32_t const ces[9] = { 0x31DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_316)
{
    // 1034 003F;	
    // (ဴ) MYANMAR VOWEL SIGN MON O	[31DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1034, 0x003F };
    uint32_t const ces[9] = { 0x31DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_317)
{
    // 1034 0061;	
    // (ဴ) MYANMAR VOWEL SIGN MON O	[31DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1034, 0x0061 };
    uint32_t const ces[9] = { 0x31DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_318)
{
    // 1034 0041;	
    // (ဴ) MYANMAR VOWEL SIGN MON O	[31DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1034, 0x0041 };
    uint32_t const ces[9] = { 0x31DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_319)
{
    // 1034 0062;	
    // (ဴ) MYANMAR VOWEL SIGN MON O	[31DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1034, 0x0062 };
    uint32_t const ces[9] = { 0x31DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_320)
{
    // 1062 0021;	
    // (ၢ) MYANMAR VOWEL SIGN SGAW KAREN EU	[31DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062, 0x0021 };
    uint32_t const ces[9] = { 0x31DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_321)
{
    // 1062 003F;	
    // (ၢ) MYANMAR VOWEL SIGN SGAW KAREN EU	[31DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062, 0x003F };
    uint32_t const ces[9] = { 0x31DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_322)
{
    // 1062 0061;	
    // (ၢ) MYANMAR VOWEL SIGN SGAW KAREN EU	[31DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062, 0x0061 };
    uint32_t const ces[9] = { 0x31DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_323)
{
    // 1062 0041;	
    // (ၢ) MYANMAR VOWEL SIGN SGAW KAREN EU	[31DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1062, 0x0041 };
    uint32_t const ces[9] = { 0x31DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_324)
{
    // 1062 0062;	
    // (ၢ) MYANMAR VOWEL SIGN SGAW KAREN EU	[31DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1062, 0x0062 };
    uint32_t const ces[9] = { 0x31DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_325)
{
    // 1067 0021;	
    // (ၧ) MYANMAR VOWEL SIGN WESTERN PWO KAREN EU	[31DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067, 0x0021 };
    uint32_t const ces[9] = { 0x31DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_326)
{
    // 1067 003F;	
    // (ၧ) MYANMAR VOWEL SIGN WESTERN PWO KAREN EU	[31DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067, 0x003F };
    uint32_t const ces[9] = { 0x31DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_327)
{
    // 1067 0061;	
    // (ၧ) MYANMAR VOWEL SIGN WESTERN PWO KAREN EU	[31DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067, 0x0061 };
    uint32_t const ces[9] = { 0x31DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_328)
{
    // 1067 0041;	
    // (ၧ) MYANMAR VOWEL SIGN WESTERN PWO KAREN EU	[31DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1067, 0x0041 };
    uint32_t const ces[9] = { 0x31DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_329)
{
    // 1067 0062;	
    // (ၧ) MYANMAR VOWEL SIGN WESTERN PWO KAREN EU	[31DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1067, 0x0062 };
    uint32_t const ces[9] = { 0x31DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_330)
{
    // 1068 0021;	
    // (ၨ) MYANMAR VOWEL SIGN WESTERN PWO KAREN UE	[31DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068, 0x0021 };
    uint32_t const ces[9] = { 0x31DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_331)
{
    // 1068 003F;	
    // (ၨ) MYANMAR VOWEL SIGN WESTERN PWO KAREN UE	[31DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068, 0x003F };
    uint32_t const ces[9] = { 0x31DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_332)
{
    // 1068 0061;	
    // (ၨ) MYANMAR VOWEL SIGN WESTERN PWO KAREN UE	[31DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068, 0x0061 };
    uint32_t const ces[9] = { 0x31DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_333)
{
    // 1068 0041;	
    // (ၨ) MYANMAR VOWEL SIGN WESTERN PWO KAREN UE	[31DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1068, 0x0041 };
    uint32_t const ces[9] = { 0x31DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_334)
{
    // 1068 0062;	
    // (ၨ) MYANMAR VOWEL SIGN WESTERN PWO KAREN UE	[31DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1068, 0x0062 };
    uint32_t const ces[9] = { 0x31DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_335)
{
    // A9E5 0021;	
    // (ꧥ) MYANMAR SIGN SHAN SAW	[31E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9E5, 0x0021 };
    uint32_t const ces[9] = { 0x31E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_336)
{
    // A9E5 003F;	
    // (ꧥ) MYANMAR SIGN SHAN SAW	[31E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9E5, 0x003F };
    uint32_t const ces[9] = { 0x31E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_337)
{
    // A9E5 0061;	
    // (ꧥ) MYANMAR SIGN SHAN SAW	[31E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9E5, 0x0061 };
    uint32_t const ces[9] = { 0x31E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_338)
{
    // A9E5 0041;	
    // (ꧥ) MYANMAR SIGN SHAN SAW	[31E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA9E5, 0x0041 };
    uint32_t const ces[9] = { 0x31E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_339)
{
    // A9E5 0062;	
    // (ꧥ) MYANMAR SIGN SHAN SAW	[31E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9E5, 0x0062 };
    uint32_t const ces[9] = { 0x31E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_340)
{
    // 1086 0021;	
    // (ႆ) MYANMAR VOWEL SIGN SHAN FINAL Y	[31E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086, 0x0021 };
    uint32_t const ces[9] = { 0x31E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_341)
{
    // 1086 003F;	
    // (ႆ) MYANMAR VOWEL SIGN SHAN FINAL Y	[31E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086, 0x003F };
    uint32_t const ces[9] = { 0x31E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_342)
{
    // 1086 0061;	
    // (ႆ) MYANMAR VOWEL SIGN SHAN FINAL Y	[31E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086, 0x0061 };
    uint32_t const ces[9] = { 0x31E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_343)
{
    // 1086 0041;	
    // (ႆ) MYANMAR VOWEL SIGN SHAN FINAL Y	[31E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1086, 0x0041 };
    uint32_t const ces[9] = { 0x31E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_344)
{
    // 1086 0062;	
    // (ႆ) MYANMAR VOWEL SIGN SHAN FINAL Y	[31E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086, 0x0062 };
    uint32_t const ces[9] = { 0x31E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_345)
{
    // 0334 1039;	
    // (္) MYANMAR SIGN VIRAMA	[31E2 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1039 };
    uint32_t const ces[8] = { 0x31E2, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_346)
{
    // 1039 0334;	
    // (္) MYANMAR SIGN VIRAMA	[31E2 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1039, 0x0334 };
    uint32_t const ces[8] = { 0x31E2, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_347)
{
    // 1039 0021;	
    // (္) MYANMAR SIGN VIRAMA	[31E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1039, 0x0021 };
    uint32_t const ces[9] = { 0x31E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_348)
{
    // 1039 003F;	
    // (္) MYANMAR SIGN VIRAMA	[31E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1039, 0x003F };
    uint32_t const ces[9] = { 0x31E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_349)
{
    // 1039 0061;	
    // (္) MYANMAR SIGN VIRAMA	[31E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1039, 0x0061 };
    uint32_t const ces[9] = { 0x31E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_350)
{
    // 1039 0041;	
    // (္) MYANMAR SIGN VIRAMA	[31E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1039, 0x0041 };
    uint32_t const ces[9] = { 0x31E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_351)
{
    // 1039 0062;	
    // (္) MYANMAR SIGN VIRAMA	[31E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1039, 0x0062 };
    uint32_t const ces[9] = { 0x31E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_352)
{
    // 0334 103A;	
    // (်) MYANMAR SIGN ASAT	[31E3 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x103A };
    uint32_t const ces[8] = { 0x31E3, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_353)
{
    // 103A 0334;	
    // (်) MYANMAR SIGN ASAT	[31E3 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A, 0x0334 };
    uint32_t const ces[8] = { 0x31E3, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_354)
{
    // 103A 0021;	
    // (်) MYANMAR SIGN ASAT	[31E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A, 0x0021 };
    uint32_t const ces[9] = { 0x31E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_355)
{
    // 103A 003F;	
    // (်) MYANMAR SIGN ASAT	[31E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A, 0x003F };
    uint32_t const ces[9] = { 0x31E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_356)
{
    // 103A 0061;	
    // (်) MYANMAR SIGN ASAT	[31E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A, 0x0061 };
    uint32_t const ces[9] = { 0x31E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_357)
{
    // 103A 0041;	
    // (်) MYANMAR SIGN ASAT	[31E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x103A, 0x0041 };
    uint32_t const ces[9] = { 0x31E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_358)
{
    // 103A 0062;	
    // (်) MYANMAR SIGN ASAT	[31E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x103A, 0x0062 };
    uint32_t const ces[9] = { 0x31E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_359)
{
    // 1063 0021;	
    // (ၣ) MYANMAR TONE MARK SGAW KAREN HATHI	[31E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063, 0x0021 };
    uint32_t const ces[9] = { 0x31E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_360)
{
    // 1063 003F;	
    // (ၣ) MYANMAR TONE MARK SGAW KAREN HATHI	[31E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063, 0x003F };
    uint32_t const ces[9] = { 0x31E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_361)
{
    // 1063 0061;	
    // (ၣ) MYANMAR TONE MARK SGAW KAREN HATHI	[31E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063, 0x0061 };
    uint32_t const ces[9] = { 0x31E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_362)
{
    // 1063 0041;	
    // (ၣ) MYANMAR TONE MARK SGAW KAREN HATHI	[31E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1063, 0x0041 };
    uint32_t const ces[9] = { 0x31E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_363)
{
    // 1063 0062;	
    // (ၣ) MYANMAR TONE MARK SGAW KAREN HATHI	[31E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1063, 0x0062 };
    uint32_t const ces[9] = { 0x31E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_364)
{
    // 1064 0021;	
    // (ၤ) MYANMAR TONE MARK SGAW KAREN KE PHO	[31E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064, 0x0021 };
    uint32_t const ces[9] = { 0x31E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_365)
{
    // 1064 003F;	
    // (ၤ) MYANMAR TONE MARK SGAW KAREN KE PHO	[31E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064, 0x003F };
    uint32_t const ces[9] = { 0x31E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_366)
{
    // 1064 0061;	
    // (ၤ) MYANMAR TONE MARK SGAW KAREN KE PHO	[31E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064, 0x0061 };
    uint32_t const ces[9] = { 0x31E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_367)
{
    // 1064 0041;	
    // (ၤ) MYANMAR TONE MARK SGAW KAREN KE PHO	[31E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1064, 0x0041 };
    uint32_t const ces[9] = { 0x31E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_368)
{
    // 1064 0062;	
    // (ၤ) MYANMAR TONE MARK SGAW KAREN KE PHO	[31E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1064, 0x0062 };
    uint32_t const ces[9] = { 0x31E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_369)
{
    // 1069 0021;	
    // (ၩ) MYANMAR SIGN WESTERN PWO KAREN TONE-1	[31E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069, 0x0021 };
    uint32_t const ces[9] = { 0x31E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_370)
{
    // 1069 003F;	
    // (ၩ) MYANMAR SIGN WESTERN PWO KAREN TONE-1	[31E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069, 0x003F };
    uint32_t const ces[9] = { 0x31E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_371)
{
    // 1069 0061;	
    // (ၩ) MYANMAR SIGN WESTERN PWO KAREN TONE-1	[31E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069, 0x0061 };
    uint32_t const ces[9] = { 0x31E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_372)
{
    // 1069 0041;	
    // (ၩ) MYANMAR SIGN WESTERN PWO KAREN TONE-1	[31E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1069, 0x0041 };
    uint32_t const ces[9] = { 0x31E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_373)
{
    // 1069 0062;	
    // (ၩ) MYANMAR SIGN WESTERN PWO KAREN TONE-1	[31E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1069, 0x0062 };
    uint32_t const ces[9] = { 0x31E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_374)
{
    // 106A 0021;	
    // (ၪ) MYANMAR SIGN WESTERN PWO KAREN TONE-2	[31E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A, 0x0021 };
    uint32_t const ces[9] = { 0x31E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_375)
{
    // 106A 003F;	
    // (ၪ) MYANMAR SIGN WESTERN PWO KAREN TONE-2	[31E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A, 0x003F };
    uint32_t const ces[9] = { 0x31E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_376)
{
    // 106A 0061;	
    // (ၪ) MYANMAR SIGN WESTERN PWO KAREN TONE-2	[31E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A, 0x0061 };
    uint32_t const ces[9] = { 0x31E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_377)
{
    // 106A 0041;	
    // (ၪ) MYANMAR SIGN WESTERN PWO KAREN TONE-2	[31E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106A, 0x0041 };
    uint32_t const ces[9] = { 0x31E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_378)
{
    // 106A 0062;	
    // (ၪ) MYANMAR SIGN WESTERN PWO KAREN TONE-2	[31E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106A, 0x0062 };
    uint32_t const ces[9] = { 0x31E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_379)
{
    // 106B 0021;	
    // (ၫ) MYANMAR SIGN WESTERN PWO KAREN TONE-3	[31E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B, 0x0021 };
    uint32_t const ces[9] = { 0x31E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_380)
{
    // 106B 003F;	
    // (ၫ) MYANMAR SIGN WESTERN PWO KAREN TONE-3	[31E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B, 0x003F };
    uint32_t const ces[9] = { 0x31E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_381)
{
    // 106B 0061;	
    // (ၫ) MYANMAR SIGN WESTERN PWO KAREN TONE-3	[31E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B, 0x0061 };
    uint32_t const ces[9] = { 0x31E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_382)
{
    // 106B 0041;	
    // (ၫ) MYANMAR SIGN WESTERN PWO KAREN TONE-3	[31E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106B, 0x0041 };
    uint32_t const ces[9] = { 0x31E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_383)
{
    // 106B 0062;	
    // (ၫ) MYANMAR SIGN WESTERN PWO KAREN TONE-3	[31E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106B, 0x0062 };
    uint32_t const ces[9] = { 0x31E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_384)
{
    // 106C 0021;	
    // (ၬ) MYANMAR SIGN WESTERN PWO KAREN TONE-4	[31E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C, 0x0021 };
    uint32_t const ces[9] = { 0x31E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_385)
{
    // 106C 003F;	
    // (ၬ) MYANMAR SIGN WESTERN PWO KAREN TONE-4	[31E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C, 0x003F };
    uint32_t const ces[9] = { 0x31E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_386)
{
    // 106C 0061;	
    // (ၬ) MYANMAR SIGN WESTERN PWO KAREN TONE-4	[31E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C, 0x0061 };
    uint32_t const ces[9] = { 0x31E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_387)
{
    // 106C 0041;	
    // (ၬ) MYANMAR SIGN WESTERN PWO KAREN TONE-4	[31E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106C, 0x0041 };
    uint32_t const ces[9] = { 0x31E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_388)
{
    // 106C 0062;	
    // (ၬ) MYANMAR SIGN WESTERN PWO KAREN TONE-4	[31E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106C, 0x0062 };
    uint32_t const ces[9] = { 0x31E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_389)
{
    // 106D 0021;	
    // (ၭ) MYANMAR SIGN WESTERN PWO KAREN TONE-5	[31EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D, 0x0021 };
    uint32_t const ces[9] = { 0x31EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_390)
{
    // 106D 003F;	
    // (ၭ) MYANMAR SIGN WESTERN PWO KAREN TONE-5	[31EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D, 0x003F };
    uint32_t const ces[9] = { 0x31EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_391)
{
    // 106D 0061;	
    // (ၭ) MYANMAR SIGN WESTERN PWO KAREN TONE-5	[31EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D, 0x0061 };
    uint32_t const ces[9] = { 0x31EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_392)
{
    // 106D 0041;	
    // (ၭ) MYANMAR SIGN WESTERN PWO KAREN TONE-5	[31EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106D, 0x0041 };
    uint32_t const ces[9] = { 0x31EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_393)
{
    // 106D 0062;	
    // (ၭ) MYANMAR SIGN WESTERN PWO KAREN TONE-5	[31EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106D, 0x0062 };
    uint32_t const ces[9] = { 0x31EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_394)
{
    // 1087 0021;	
    // (ႇ) MYANMAR SIGN SHAN TONE-2	[31EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1087, 0x0021 };
    uint32_t const ces[9] = { 0x31EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_395)
{
    // 1087 003F;	
    // (ႇ) MYANMAR SIGN SHAN TONE-2	[31EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1087, 0x003F };
    uint32_t const ces[9] = { 0x31EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_396)
{
    // 1087 0061;	
    // (ႇ) MYANMAR SIGN SHAN TONE-2	[31EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1087, 0x0061 };
    uint32_t const ces[9] = { 0x31EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_397)
{
    // 1087 0041;	
    // (ႇ) MYANMAR SIGN SHAN TONE-2	[31EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1087, 0x0041 };
    uint32_t const ces[9] = { 0x31EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_398)
{
    // 1087 0062;	
    // (ႇ) MYANMAR SIGN SHAN TONE-2	[31EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1087, 0x0062 };
    uint32_t const ces[9] = { 0x31EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_399)
{
    // 108B 0021;	
    // (ႋ) MYANMAR SIGN SHAN COUNCIL TONE-2	[31EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108B, 0x0021 };
    uint32_t const ces[9] = { 0x31EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_400)
{
    // 108B 003F;	
    // (ႋ) MYANMAR SIGN SHAN COUNCIL TONE-2	[31EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108B, 0x003F };
    uint32_t const ces[9] = { 0x31EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_401)
{
    // 108B 0061;	
    // (ႋ) MYANMAR SIGN SHAN COUNCIL TONE-2	[31EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108B, 0x0061 };
    uint32_t const ces[9] = { 0x31EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_402)
{
    // 108B 0041;	
    // (ႋ) MYANMAR SIGN SHAN COUNCIL TONE-2	[31EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x108B, 0x0041 };
    uint32_t const ces[9] = { 0x31EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_403)
{
    // 108B 0062;	
    // (ႋ) MYANMAR SIGN SHAN COUNCIL TONE-2	[31EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108B, 0x0062 };
    uint32_t const ces[9] = { 0x31EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_404)
{
    // 1088 0021;	
    // (ႈ) MYANMAR SIGN SHAN TONE-3	[31ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1088, 0x0021 };
    uint32_t const ces[9] = { 0x31ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_405)
{
    // 1088 003F;	
    // (ႈ) MYANMAR SIGN SHAN TONE-3	[31ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1088, 0x003F };
    uint32_t const ces[9] = { 0x31ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_406)
{
    // 1088 0061;	
    // (ႈ) MYANMAR SIGN SHAN TONE-3	[31ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1088, 0x0061 };
    uint32_t const ces[9] = { 0x31ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_407)
{
    // 1088 0041;	
    // (ႈ) MYANMAR SIGN SHAN TONE-3	[31ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1088, 0x0041 };
    uint32_t const ces[9] = { 0x31ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_408)
{
    // 1088 0062;	
    // (ႈ) MYANMAR SIGN SHAN TONE-3	[31ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1088, 0x0062 };
    uint32_t const ces[9] = { 0x31ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_409)
{
    // 108C 0021;	
    // (ႌ) MYANMAR SIGN SHAN COUNCIL TONE-3	[31EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108C, 0x0021 };
    uint32_t const ces[9] = { 0x31EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_410)
{
    // 108C 003F;	
    // (ႌ) MYANMAR SIGN SHAN COUNCIL TONE-3	[31EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108C, 0x003F };
    uint32_t const ces[9] = { 0x31EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_411)
{
    // 108C 0061;	
    // (ႌ) MYANMAR SIGN SHAN COUNCIL TONE-3	[31EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108C, 0x0061 };
    uint32_t const ces[9] = { 0x31EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_412)
{
    // 108C 0041;	
    // (ႌ) MYANMAR SIGN SHAN COUNCIL TONE-3	[31EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x108C, 0x0041 };
    uint32_t const ces[9] = { 0x31EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_413)
{
    // 108C 0062;	
    // (ႌ) MYANMAR SIGN SHAN COUNCIL TONE-3	[31EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108C, 0x0062 };
    uint32_t const ces[9] = { 0x31EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_414)
{
    // 0334 108D;	
    // (ႍ) MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE	[31EF | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x108D };
    uint32_t const ces[8] = { 0x31EF, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_415)
{
    // 108D 0334;	
    // (ႍ) MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE	[31EF | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108D, 0x0334 };
    uint32_t const ces[8] = { 0x31EF, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_416)
{
    // 108D 0021;	
    // (ႍ) MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE	[31EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108D, 0x0021 };
    uint32_t const ces[9] = { 0x31EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_417)
{
    // 108D 003F;	
    // (ႍ) MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE	[31EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108D, 0x003F };
    uint32_t const ces[9] = { 0x31EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_418)
{
    // 108D 0061;	
    // (ႍ) MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE	[31EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108D, 0x0061 };
    uint32_t const ces[9] = { 0x31EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_419)
{
    // 108D 0041;	
    // (ႍ) MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE	[31EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x108D, 0x0041 };
    uint32_t const ces[9] = { 0x31EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_420)
{
    // 108D 0062;	
    // (ႍ) MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE	[31EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108D, 0x0062 };
    uint32_t const ces[9] = { 0x31EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_421)
{
    // 1089 0021;	
    // (ႉ) MYANMAR SIGN SHAN TONE-5	[31F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1089, 0x0021 };
    uint32_t const ces[9] = { 0x31F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_422)
{
    // 1089 003F;	
    // (ႉ) MYANMAR SIGN SHAN TONE-5	[31F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1089, 0x003F };
    uint32_t const ces[9] = { 0x31F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_423)
{
    // 1089 0061;	
    // (ႉ) MYANMAR SIGN SHAN TONE-5	[31F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1089, 0x0061 };
    uint32_t const ces[9] = { 0x31F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_424)
{
    // 1089 0041;	
    // (ႉ) MYANMAR SIGN SHAN TONE-5	[31F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1089, 0x0041 };
    uint32_t const ces[9] = { 0x31F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_425)
{
    // 1089 0062;	
    // (ႉ) MYANMAR SIGN SHAN TONE-5	[31F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1089, 0x0062 };
    uint32_t const ces[9] = { 0x31F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_426)
{
    // 108A 0021;	
    // (ႊ) MYANMAR SIGN SHAN TONE-6	[31F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108A, 0x0021 };
    uint32_t const ces[9] = { 0x31F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_427)
{
    // 108A 003F;	
    // (ႊ) MYANMAR SIGN SHAN TONE-6	[31F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108A, 0x003F };
    uint32_t const ces[9] = { 0x31F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_428)
{
    // 108A 0061;	
    // (ႊ) MYANMAR SIGN SHAN TONE-6	[31F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108A, 0x0061 };
    uint32_t const ces[9] = { 0x31F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_429)
{
    // 108A 0041;	
    // (ႊ) MYANMAR SIGN SHAN TONE-6	[31F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x108A, 0x0041 };
    uint32_t const ces[9] = { 0x31F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_430)
{
    // 108A 0062;	
    // (ႊ) MYANMAR SIGN SHAN TONE-6	[31F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108A, 0x0062 };
    uint32_t const ces[9] = { 0x31F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_431)
{
    // 108F 0021;	
    // (ႏ) MYANMAR SIGN RUMAI PALAUNG TONE-5	[31F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108F, 0x0021 };
    uint32_t const ces[9] = { 0x31F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_432)
{
    // 108F 003F;	
    // (ႏ) MYANMAR SIGN RUMAI PALAUNG TONE-5	[31F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108F, 0x003F };
    uint32_t const ces[9] = { 0x31F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_433)
{
    // 108F 0061;	
    // (ႏ) MYANMAR SIGN RUMAI PALAUNG TONE-5	[31F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108F, 0x0061 };
    uint32_t const ces[9] = { 0x31F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_434)
{
    // 108F 0041;	
    // (ႏ) MYANMAR SIGN RUMAI PALAUNG TONE-5	[31F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x108F, 0x0041 };
    uint32_t const ces[9] = { 0x31F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_435)
{
    // 108F 0062;	
    // (ႏ) MYANMAR SIGN RUMAI PALAUNG TONE-5	[31F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x108F, 0x0062 };
    uint32_t const ces[9] = { 0x31F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_436)
{
    // 109A 0021;	
    // (ႚ) MYANMAR SIGN KHAMTI TONE-1	[31F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A, 0x0021 };
    uint32_t const ces[9] = { 0x31F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_437)
{
    // 109A 003F;	
    // (ႚ) MYANMAR SIGN KHAMTI TONE-1	[31F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A, 0x003F };
    uint32_t const ces[9] = { 0x31F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_438)
{
    // 109A 0061;	
    // (ႚ) MYANMAR SIGN KHAMTI TONE-1	[31F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A, 0x0061 };
    uint32_t const ces[9] = { 0x31F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_439)
{
    // 109A 0041;	
    // (ႚ) MYANMAR SIGN KHAMTI TONE-1	[31F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109A, 0x0041 };
    uint32_t const ces[9] = { 0x31F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_440)
{
    // 109A 0062;	
    // (ႚ) MYANMAR SIGN KHAMTI TONE-1	[31F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109A, 0x0062 };
    uint32_t const ces[9] = { 0x31F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_441)
{
    // 109B 0021;	
    // (ႛ) MYANMAR SIGN KHAMTI TONE-3	[31F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B, 0x0021 };
    uint32_t const ces[9] = { 0x31F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_442)
{
    // 109B 003F;	
    // (ႛ) MYANMAR SIGN KHAMTI TONE-3	[31F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B, 0x003F };
    uint32_t const ces[9] = { 0x31F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_443)
{
    // 109B 0061;	
    // (ႛ) MYANMAR SIGN KHAMTI TONE-3	[31F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B, 0x0061 };
    uint32_t const ces[9] = { 0x31F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_444)
{
    // 109B 0041;	
    // (ႛ) MYANMAR SIGN KHAMTI TONE-3	[31F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x109B, 0x0041 };
    uint32_t const ces[9] = { 0x31F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_445)
{
    // 109B 0062;	
    // (ႛ) MYANMAR SIGN KHAMTI TONE-3	[31F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x109B, 0x0062 };
    uint32_t const ces[9] = { 0x31F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_446)
{
    // AA7B 0021;	
    // (ꩻ) MYANMAR SIGN PAO KAREN TONE	[31F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA7B, 0x0021 };
    uint32_t const ces[9] = { 0x31F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_447)
{
    // AA7B 003F;	
    // (ꩻ) MYANMAR SIGN PAO KAREN TONE	[31F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA7B, 0x003F };
    uint32_t const ces[9] = { 0x31F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_448)
{
    // AA7B 0061;	
    // (ꩻ) MYANMAR SIGN PAO KAREN TONE	[31F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA7B, 0x0061 };
    uint32_t const ces[9] = { 0x31F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_449)
{
    // AA7B 0041;	
    // (ꩻ) MYANMAR SIGN PAO KAREN TONE	[31F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA7B, 0x0041 };
    uint32_t const ces[9] = { 0x31F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_450)
{
    // AA7B 0062;	
    // (ꩻ) MYANMAR SIGN PAO KAREN TONE	[31F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA7B, 0x0062 };
    uint32_t const ces[9] = { 0x31F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_451)
{
    // AA7C 0021;	
    // (ꩼ) MYANMAR SIGN TAI LAING TONE-2	[31F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA7C, 0x0021 };
    uint32_t const ces[9] = { 0x31F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_452)
{
    // AA7C 003F;	
    // (ꩼ) MYANMAR SIGN TAI LAING TONE-2	[31F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA7C, 0x003F };
    uint32_t const ces[9] = { 0x31F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_453)
{
    // AA7C 0061;	
    // (ꩼ) MYANMAR SIGN TAI LAING TONE-2	[31F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA7C, 0x0061 };
    uint32_t const ces[9] = { 0x31F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_454)
{
    // AA7C 0041;	
    // (ꩼ) MYANMAR SIGN TAI LAING TONE-2	[31F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA7C, 0x0041 };
    uint32_t const ces[9] = { 0x31F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_455)
{
    // AA7C 0062;	
    // (ꩼ) MYANMAR SIGN TAI LAING TONE-2	[31F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA7C, 0x0062 };
    uint32_t const ces[9] = { 0x31F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_456)
{
    // AA7D 0021;	
    // (ꩽ) MYANMAR SIGN TAI LAING TONE-5	[31F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA7D, 0x0021 };
    uint32_t const ces[9] = { 0x31F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_457)
{
    // AA7D 003F;	
    // (ꩽ) MYANMAR SIGN TAI LAING TONE-5	[31F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA7D, 0x003F };
    uint32_t const ces[9] = { 0x31F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_458)
{
    // AA7D 0061;	
    // (ꩽ) MYANMAR SIGN TAI LAING TONE-5	[31F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA7D, 0x0061 };
    uint32_t const ces[9] = { 0x31F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_459)
{
    // AA7D 0041;	
    // (ꩽ) MYANMAR SIGN TAI LAING TONE-5	[31F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA7D, 0x0041 };
    uint32_t const ces[9] = { 0x31F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_460)
{
    // AA7D 0062;	
    // (ꩽ) MYANMAR SIGN TAI LAING TONE-5	[31F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA7D, 0x0062 };
    uint32_t const ces[9] = { 0x31F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_461)
{
    // AA74 0021;	
    // (ꩴ) MYANMAR LOGOGRAM KHAMTI OAY	[31F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA74, 0x0021 };
    uint32_t const ces[9] = { 0x31F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_462)
{
    // AA74 003F;	
    // (ꩴ) MYANMAR LOGOGRAM KHAMTI OAY	[31F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA74, 0x003F };
    uint32_t const ces[9] = { 0x31F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_463)
{
    // AA74 0061;	
    // (ꩴ) MYANMAR LOGOGRAM KHAMTI OAY	[31F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA74, 0x0061 };
    uint32_t const ces[9] = { 0x31F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_464)
{
    // AA74 0041;	
    // (ꩴ) MYANMAR LOGOGRAM KHAMTI OAY	[31F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA74, 0x0041 };
    uint32_t const ces[9] = { 0x31F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_465)
{
    // AA74 0062;	
    // (ꩴ) MYANMAR LOGOGRAM KHAMTI OAY	[31F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA74, 0x0062 };
    uint32_t const ces[9] = { 0x31F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_466)
{
    // AA75 0021;	
    // (ꩵ) MYANMAR LOGOGRAM KHAMTI QN	[31F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA75, 0x0021 };
    uint32_t const ces[9] = { 0x31F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_467)
{
    // AA75 003F;	
    // (ꩵ) MYANMAR LOGOGRAM KHAMTI QN	[31F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA75, 0x003F };
    uint32_t const ces[9] = { 0x31F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_468)
{
    // AA75 0061;	
    // (ꩵ) MYANMAR LOGOGRAM KHAMTI QN	[31F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA75, 0x0061 };
    uint32_t const ces[9] = { 0x31F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_469)
{
    // AA75 0041;	
    // (ꩵ) MYANMAR LOGOGRAM KHAMTI QN	[31F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA75, 0x0041 };
    uint32_t const ces[9] = { 0x31F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_470)
{
    // AA75 0062;	
    // (ꩵ) MYANMAR LOGOGRAM KHAMTI QN	[31F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA75, 0x0062 };
    uint32_t const ces[9] = { 0x31F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_471)
{
    // AA76 0021;	
    // (ꩶ) MYANMAR LOGOGRAM KHAMTI HM	[31FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA76, 0x0021 };
    uint32_t const ces[9] = { 0x31FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_472)
{
    // AA76 003F;	
    // (ꩶ) MYANMAR LOGOGRAM KHAMTI HM	[31FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA76, 0x003F };
    uint32_t const ces[9] = { 0x31FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_473)
{
    // AA76 0061;	
    // (ꩶ) MYANMAR LOGOGRAM KHAMTI HM	[31FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA76, 0x0061 };
    uint32_t const ces[9] = { 0x31FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_474)
{
    // AA76 0041;	
    // (ꩶ) MYANMAR LOGOGRAM KHAMTI HM	[31FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA76, 0x0041 };
    uint32_t const ces[9] = { 0x31FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_475)
{
    // AA76 0062;	
    // (ꩶ) MYANMAR LOGOGRAM KHAMTI HM	[31FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA76, 0x0062 };
    uint32_t const ces[9] = { 0x31FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_476)
{
    // 11103 0021;	
    // (𑄃) CHAKMA LETTER AA	[31FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11103, 0x0021 };
    uint32_t const ces[9] = { 0x31FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_477)
{
    // 11103 003F;	
    // (𑄃) CHAKMA LETTER AA	[31FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11103, 0x003F };
    uint32_t const ces[9] = { 0x31FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_478)
{
    // 11103 0061;	
    // (𑄃) CHAKMA LETTER AA	[31FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11103, 0x0061 };
    uint32_t const ces[9] = { 0x31FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_479)
{
    // 11103 0041;	
    // (𑄃) CHAKMA LETTER AA	[31FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11103, 0x0041 };
    uint32_t const ces[9] = { 0x31FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_480)
{
    // 11103 0062;	
    // (𑄃) CHAKMA LETTER AA	[31FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11103, 0x0062 };
    uint32_t const ces[9] = { 0x31FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_481)
{
    // 11104 0021;	
    // (𑄄) CHAKMA LETTER I	[31FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11104, 0x0021 };
    uint32_t const ces[9] = { 0x31FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_482)
{
    // 11104 003F;	
    // (𑄄) CHAKMA LETTER I	[31FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11104, 0x003F };
    uint32_t const ces[9] = { 0x31FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_483)
{
    // 11104 0061;	
    // (𑄄) CHAKMA LETTER I	[31FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11104, 0x0061 };
    uint32_t const ces[9] = { 0x31FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_484)
{
    // 11104 0041;	
    // (𑄄) CHAKMA LETTER I	[31FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11104, 0x0041 };
    uint32_t const ces[9] = { 0x31FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_485)
{
    // 11104 0062;	
    // (𑄄) CHAKMA LETTER I	[31FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11104, 0x0062 };
    uint32_t const ces[9] = { 0x31FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_486)
{
    // 11105 0021;	
    // (𑄅) CHAKMA LETTER U	[31FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11105, 0x0021 };
    uint32_t const ces[9] = { 0x31FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_487)
{
    // 11105 003F;	
    // (𑄅) CHAKMA LETTER U	[31FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11105, 0x003F };
    uint32_t const ces[9] = { 0x31FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_488)
{
    // 11105 0061;	
    // (𑄅) CHAKMA LETTER U	[31FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11105, 0x0061 };
    uint32_t const ces[9] = { 0x31FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_489)
{
    // 11105 0041;	
    // (𑄅) CHAKMA LETTER U	[31FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11105, 0x0041 };
    uint32_t const ces[9] = { 0x31FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_490)
{
    // 11105 0062;	
    // (𑄅) CHAKMA LETTER U	[31FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11105, 0x0062 };
    uint32_t const ces[9] = { 0x31FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_491)
{
    // 11106 0021;	
    // (𑄆) CHAKMA LETTER E	[31FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11106, 0x0021 };
    uint32_t const ces[9] = { 0x31FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_492)
{
    // 11106 003F;	
    // (𑄆) CHAKMA LETTER E	[31FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11106, 0x003F };
    uint32_t const ces[9] = { 0x31FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_493)
{
    // 11106 0061;	
    // (𑄆) CHAKMA LETTER E	[31FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11106, 0x0061 };
    uint32_t const ces[9] = { 0x31FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_494)
{
    // 11106 0041;	
    // (𑄆) CHAKMA LETTER E	[31FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11106, 0x0041 };
    uint32_t const ces[9] = { 0x31FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_495)
{
    // 11106 0062;	
    // (𑄆) CHAKMA LETTER E	[31FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11106, 0x0062 };
    uint32_t const ces[9] = { 0x31FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_496)
{
    // 11107 0021;	
    // (𑄇) CHAKMA LETTER KAA	[31FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11107, 0x0021 };
    uint32_t const ces[9] = { 0x31FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_497)
{
    // 11107 003F;	
    // (𑄇) CHAKMA LETTER KAA	[31FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11107, 0x003F };
    uint32_t const ces[9] = { 0x31FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_498)
{
    // 11107 0061;	
    // (𑄇) CHAKMA LETTER KAA	[31FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11107, 0x0061 };
    uint32_t const ces[9] = { 0x31FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_205_499)
{
    // 11107 0041;	
    // (𑄇) CHAKMA LETTER KAA	[31FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11107, 0x0041 };
    uint32_t const ces[9] = { 0x31FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

