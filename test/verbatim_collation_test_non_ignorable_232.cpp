// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_232_000)
{
    // 16812 0041;	
    // (𖠒) BAMUM LETTER PHASE-A NTOQPEN	[39E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16812, 0x0041 };
    uint32_t const ces[9] = { 0x39E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_001)
{
    // 16812 0062;	
    // (𖠒) BAMUM LETTER PHASE-A NTOQPEN	[39E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16812, 0x0062 };
    uint32_t const ces[9] = { 0x39E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_002)
{
    // 16813 0021;	
    // (𖠓) BAMUM LETTER PHASE-A KEUKEUTNDA	[39E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16813, 0x0021 };
    uint32_t const ces[9] = { 0x39E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_003)
{
    // 16813 003F;	
    // (𖠓) BAMUM LETTER PHASE-A KEUKEUTNDA	[39E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16813, 0x003F };
    uint32_t const ces[9] = { 0x39E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_004)
{
    // 16813 0061;	
    // (𖠓) BAMUM LETTER PHASE-A KEUKEUTNDA	[39E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16813, 0x0061 };
    uint32_t const ces[9] = { 0x39E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_005)
{
    // 16813 0041;	
    // (𖠓) BAMUM LETTER PHASE-A KEUKEUTNDA	[39E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16813, 0x0041 };
    uint32_t const ces[9] = { 0x39E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_006)
{
    // 16813 0062;	
    // (𖠓) BAMUM LETTER PHASE-A KEUKEUTNDA	[39E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16813, 0x0062 };
    uint32_t const ces[9] = { 0x39E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_007)
{
    // 16814 0021;	
    // (𖠔) BAMUM LETTER PHASE-A NKINDI	[39E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16814, 0x0021 };
    uint32_t const ces[9] = { 0x39E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_008)
{
    // 16814 003F;	
    // (𖠔) BAMUM LETTER PHASE-A NKINDI	[39E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16814, 0x003F };
    uint32_t const ces[9] = { 0x39E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_009)
{
    // 16814 0061;	
    // (𖠔) BAMUM LETTER PHASE-A NKINDI	[39E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16814, 0x0061 };
    uint32_t const ces[9] = { 0x39E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_010)
{
    // 16814 0041;	
    // (𖠔) BAMUM LETTER PHASE-A NKINDI	[39E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16814, 0x0041 };
    uint32_t const ces[9] = { 0x39E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_011)
{
    // 16814 0062;	
    // (𖠔) BAMUM LETTER PHASE-A NKINDI	[39E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16814, 0x0062 };
    uint32_t const ces[9] = { 0x39E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_012)
{
    // 16815 0021;	
    // (𖠕) BAMUM LETTER PHASE-A SUU	[39E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16815, 0x0021 };
    uint32_t const ces[9] = { 0x39E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_013)
{
    // 16815 003F;	
    // (𖠕) BAMUM LETTER PHASE-A SUU	[39E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16815, 0x003F };
    uint32_t const ces[9] = { 0x39E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_014)
{
    // 16815 0061;	
    // (𖠕) BAMUM LETTER PHASE-A SUU	[39E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16815, 0x0061 };
    uint32_t const ces[9] = { 0x39E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_015)
{
    // 16815 0041;	
    // (𖠕) BAMUM LETTER PHASE-A SUU	[39E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16815, 0x0041 };
    uint32_t const ces[9] = { 0x39E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_016)
{
    // 16815 0062;	
    // (𖠕) BAMUM LETTER PHASE-A SUU	[39E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16815, 0x0062 };
    uint32_t const ces[9] = { 0x39E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_017)
{
    // 16816 0021;	
    // (𖠖) BAMUM LETTER PHASE-A NGKUENZEUM	[39E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16816, 0x0021 };
    uint32_t const ces[9] = { 0x39E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_018)
{
    // 16816 003F;	
    // (𖠖) BAMUM LETTER PHASE-A NGKUENZEUM	[39E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16816, 0x003F };
    uint32_t const ces[9] = { 0x39E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_019)
{
    // 16816 0061;	
    // (𖠖) BAMUM LETTER PHASE-A NGKUENZEUM	[39E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16816, 0x0061 };
    uint32_t const ces[9] = { 0x39E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_020)
{
    // 16816 0041;	
    // (𖠖) BAMUM LETTER PHASE-A NGKUENZEUM	[39E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16816, 0x0041 };
    uint32_t const ces[9] = { 0x39E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_021)
{
    // 16816 0062;	
    // (𖠖) BAMUM LETTER PHASE-A NGKUENZEUM	[39E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16816, 0x0062 };
    uint32_t const ces[9] = { 0x39E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_022)
{
    // 16817 0021;	
    // (𖠗) BAMUM LETTER PHASE-A LAPAQ	[39E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16817, 0x0021 };
    uint32_t const ces[9] = { 0x39E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_023)
{
    // 16817 003F;	
    // (𖠗) BAMUM LETTER PHASE-A LAPAQ	[39E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16817, 0x003F };
    uint32_t const ces[9] = { 0x39E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_024)
{
    // 16817 0061;	
    // (𖠗) BAMUM LETTER PHASE-A LAPAQ	[39E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16817, 0x0061 };
    uint32_t const ces[9] = { 0x39E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_025)
{
    // 16817 0041;	
    // (𖠗) BAMUM LETTER PHASE-A LAPAQ	[39E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16817, 0x0041 };
    uint32_t const ces[9] = { 0x39E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_026)
{
    // 16817 0062;	
    // (𖠗) BAMUM LETTER PHASE-A LAPAQ	[39E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16817, 0x0062 };
    uint32_t const ces[9] = { 0x39E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_027)
{
    // 16818 0021;	
    // (𖠘) BAMUM LETTER PHASE-A LET KUT	[39E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16818, 0x0021 };
    uint32_t const ces[9] = { 0x39E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_028)
{
    // 16818 003F;	
    // (𖠘) BAMUM LETTER PHASE-A LET KUT	[39E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16818, 0x003F };
    uint32_t const ces[9] = { 0x39E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_029)
{
    // 16818 0061;	
    // (𖠘) BAMUM LETTER PHASE-A LET KUT	[39E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16818, 0x0061 };
    uint32_t const ces[9] = { 0x39E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_030)
{
    // 16818 0041;	
    // (𖠘) BAMUM LETTER PHASE-A LET KUT	[39E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16818, 0x0041 };
    uint32_t const ces[9] = { 0x39E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_031)
{
    // 16818 0062;	
    // (𖠘) BAMUM LETTER PHASE-A LET KUT	[39E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16818, 0x0062 };
    uint32_t const ces[9] = { 0x39E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_032)
{
    // 16819 0021;	
    // (𖠙) BAMUM LETTER PHASE-A NTAP MFAA	[39E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16819, 0x0021 };
    uint32_t const ces[9] = { 0x39E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_033)
{
    // 16819 003F;	
    // (𖠙) BAMUM LETTER PHASE-A NTAP MFAA	[39E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16819, 0x003F };
    uint32_t const ces[9] = { 0x39E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_034)
{
    // 16819 0061;	
    // (𖠙) BAMUM LETTER PHASE-A NTAP MFAA	[39E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16819, 0x0061 };
    uint32_t const ces[9] = { 0x39E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_035)
{
    // 16819 0041;	
    // (𖠙) BAMUM LETTER PHASE-A NTAP MFAA	[39E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16819, 0x0041 };
    uint32_t const ces[9] = { 0x39E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_036)
{
    // 16819 0062;	
    // (𖠙) BAMUM LETTER PHASE-A NTAP MFAA	[39E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16819, 0x0062 };
    uint32_t const ces[9] = { 0x39E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_037)
{
    // 1681A 0021;	
    // (𖠚) BAMUM LETTER PHASE-A MAEKEUP	[39E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681A, 0x0021 };
    uint32_t const ces[9] = { 0x39E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_038)
{
    // 1681A 003F;	
    // (𖠚) BAMUM LETTER PHASE-A MAEKEUP	[39E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681A, 0x003F };
    uint32_t const ces[9] = { 0x39E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_039)
{
    // 1681A 0061;	
    // (𖠚) BAMUM LETTER PHASE-A MAEKEUP	[39E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681A, 0x0061 };
    uint32_t const ces[9] = { 0x39E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_040)
{
    // 1681A 0041;	
    // (𖠚) BAMUM LETTER PHASE-A MAEKEUP	[39E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1681A, 0x0041 };
    uint32_t const ces[9] = { 0x39E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_041)
{
    // 1681A 0062;	
    // (𖠚) BAMUM LETTER PHASE-A MAEKEUP	[39E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681A, 0x0062 };
    uint32_t const ces[9] = { 0x39E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_042)
{
    // 1681B 0021;	
    // (𖠛) BAMUM LETTER PHASE-A PASHAE	[39E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681B, 0x0021 };
    uint32_t const ces[9] = { 0x39E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_043)
{
    // 1681B 003F;	
    // (𖠛) BAMUM LETTER PHASE-A PASHAE	[39E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681B, 0x003F };
    uint32_t const ces[9] = { 0x39E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_044)
{
    // 1681B 0061;	
    // (𖠛) BAMUM LETTER PHASE-A PASHAE	[39E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681B, 0x0061 };
    uint32_t const ces[9] = { 0x39E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_045)
{
    // 1681B 0041;	
    // (𖠛) BAMUM LETTER PHASE-A PASHAE	[39E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1681B, 0x0041 };
    uint32_t const ces[9] = { 0x39E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_046)
{
    // 1681B 0062;	
    // (𖠛) BAMUM LETTER PHASE-A PASHAE	[39E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681B, 0x0062 };
    uint32_t const ces[9] = { 0x39E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_047)
{
    // 1681C 0021;	
    // (𖠜) BAMUM LETTER PHASE-A GHEUAERAE	[39EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681C, 0x0021 };
    uint32_t const ces[9] = { 0x39EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_048)
{
    // 1681C 003F;	
    // (𖠜) BAMUM LETTER PHASE-A GHEUAERAE	[39EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681C, 0x003F };
    uint32_t const ces[9] = { 0x39EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_049)
{
    // 1681C 0061;	
    // (𖠜) BAMUM LETTER PHASE-A GHEUAERAE	[39EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681C, 0x0061 };
    uint32_t const ces[9] = { 0x39EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_050)
{
    // 1681C 0041;	
    // (𖠜) BAMUM LETTER PHASE-A GHEUAERAE	[39EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1681C, 0x0041 };
    uint32_t const ces[9] = { 0x39EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_051)
{
    // 1681C 0062;	
    // (𖠜) BAMUM LETTER PHASE-A GHEUAERAE	[39EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681C, 0x0062 };
    uint32_t const ces[9] = { 0x39EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_052)
{
    // 1681D 0021;	
    // (𖠝) BAMUM LETTER PHASE-A PAMSHAE	[39EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681D, 0x0021 };
    uint32_t const ces[9] = { 0x39EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_053)
{
    // 1681D 003F;	
    // (𖠝) BAMUM LETTER PHASE-A PAMSHAE	[39EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681D, 0x003F };
    uint32_t const ces[9] = { 0x39EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_054)
{
    // 1681D 0061;	
    // (𖠝) BAMUM LETTER PHASE-A PAMSHAE	[39EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681D, 0x0061 };
    uint32_t const ces[9] = { 0x39EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_055)
{
    // 1681D 0041;	
    // (𖠝) BAMUM LETTER PHASE-A PAMSHAE	[39EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1681D, 0x0041 };
    uint32_t const ces[9] = { 0x39EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_056)
{
    // 1681D 0062;	
    // (𖠝) BAMUM LETTER PHASE-A PAMSHAE	[39EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681D, 0x0062 };
    uint32_t const ces[9] = { 0x39EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_057)
{
    // 1681E 0021;	
    // (𖠞) BAMUM LETTER PHASE-A MON NGGEUAET	[39EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681E, 0x0021 };
    uint32_t const ces[9] = { 0x39EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_058)
{
    // 1681E 003F;	
    // (𖠞) BAMUM LETTER PHASE-A MON NGGEUAET	[39EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681E, 0x003F };
    uint32_t const ces[9] = { 0x39EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_059)
{
    // 1681E 0061;	
    // (𖠞) BAMUM LETTER PHASE-A MON NGGEUAET	[39EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681E, 0x0061 };
    uint32_t const ces[9] = { 0x39EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_060)
{
    // 1681E 0041;	
    // (𖠞) BAMUM LETTER PHASE-A MON NGGEUAET	[39EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1681E, 0x0041 };
    uint32_t const ces[9] = { 0x39EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_061)
{
    // 1681E 0062;	
    // (𖠞) BAMUM LETTER PHASE-A MON NGGEUAET	[39EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681E, 0x0062 };
    uint32_t const ces[9] = { 0x39EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_062)
{
    // 1681F 0021;	
    // (𖠟) BAMUM LETTER PHASE-A NZUN MEUT	[39ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681F, 0x0021 };
    uint32_t const ces[9] = { 0x39ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_063)
{
    // 1681F 003F;	
    // (𖠟) BAMUM LETTER PHASE-A NZUN MEUT	[39ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681F, 0x003F };
    uint32_t const ces[9] = { 0x39ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_064)
{
    // 1681F 0061;	
    // (𖠟) BAMUM LETTER PHASE-A NZUN MEUT	[39ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681F, 0x0061 };
    uint32_t const ces[9] = { 0x39ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_065)
{
    // 1681F 0041;	
    // (𖠟) BAMUM LETTER PHASE-A NZUN MEUT	[39ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1681F, 0x0041 };
    uint32_t const ces[9] = { 0x39ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_066)
{
    // 1681F 0062;	
    // (𖠟) BAMUM LETTER PHASE-A NZUN MEUT	[39ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1681F, 0x0062 };
    uint32_t const ces[9] = { 0x39ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_067)
{
    // 16820 0021;	
    // (𖠠) BAMUM LETTER PHASE-A U YUQ NAE	[39EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16820, 0x0021 };
    uint32_t const ces[9] = { 0x39EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_068)
{
    // 16820 003F;	
    // (𖠠) BAMUM LETTER PHASE-A U YUQ NAE	[39EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16820, 0x003F };
    uint32_t const ces[9] = { 0x39EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_069)
{
    // 16820 0061;	
    // (𖠠) BAMUM LETTER PHASE-A U YUQ NAE	[39EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16820, 0x0061 };
    uint32_t const ces[9] = { 0x39EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_070)
{
    // 16820 0041;	
    // (𖠠) BAMUM LETTER PHASE-A U YUQ NAE	[39EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16820, 0x0041 };
    uint32_t const ces[9] = { 0x39EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_071)
{
    // 16820 0062;	
    // (𖠠) BAMUM LETTER PHASE-A U YUQ NAE	[39EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16820, 0x0062 };
    uint32_t const ces[9] = { 0x39EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_072)
{
    // 16821 0021;	
    // (𖠡) BAMUM LETTER PHASE-A GHEUAEGHEUAE	[39EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16821, 0x0021 };
    uint32_t const ces[9] = { 0x39EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_073)
{
    // 16821 003F;	
    // (𖠡) BAMUM LETTER PHASE-A GHEUAEGHEUAE	[39EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16821, 0x003F };
    uint32_t const ces[9] = { 0x39EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_074)
{
    // 16821 0061;	
    // (𖠡) BAMUM LETTER PHASE-A GHEUAEGHEUAE	[39EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16821, 0x0061 };
    uint32_t const ces[9] = { 0x39EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_075)
{
    // 16821 0041;	
    // (𖠡) BAMUM LETTER PHASE-A GHEUAEGHEUAE	[39EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16821, 0x0041 };
    uint32_t const ces[9] = { 0x39EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_076)
{
    // 16821 0062;	
    // (𖠡) BAMUM LETTER PHASE-A GHEUAEGHEUAE	[39EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16821, 0x0062 };
    uint32_t const ces[9] = { 0x39EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_077)
{
    // 16822 0021;	
    // (𖠢) BAMUM LETTER PHASE-A NTAP NTAA	[39F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16822, 0x0021 };
    uint32_t const ces[9] = { 0x39F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_078)
{
    // 16822 003F;	
    // (𖠢) BAMUM LETTER PHASE-A NTAP NTAA	[39F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16822, 0x003F };
    uint32_t const ces[9] = { 0x39F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_079)
{
    // 16822 0061;	
    // (𖠢) BAMUM LETTER PHASE-A NTAP NTAA	[39F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16822, 0x0061 };
    uint32_t const ces[9] = { 0x39F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_080)
{
    // 16822 0041;	
    // (𖠢) BAMUM LETTER PHASE-A NTAP NTAA	[39F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16822, 0x0041 };
    uint32_t const ces[9] = { 0x39F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_081)
{
    // 16822 0062;	
    // (𖠢) BAMUM LETTER PHASE-A NTAP NTAA	[39F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16822, 0x0062 };
    uint32_t const ces[9] = { 0x39F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_082)
{
    // 16823 0021;	
    // (𖠣) BAMUM LETTER PHASE-A SISA	[39F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16823, 0x0021 };
    uint32_t const ces[9] = { 0x39F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_083)
{
    // 16823 003F;	
    // (𖠣) BAMUM LETTER PHASE-A SISA	[39F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16823, 0x003F };
    uint32_t const ces[9] = { 0x39F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_084)
{
    // 16823 0061;	
    // (𖠣) BAMUM LETTER PHASE-A SISA	[39F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16823, 0x0061 };
    uint32_t const ces[9] = { 0x39F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_085)
{
    // 16823 0041;	
    // (𖠣) BAMUM LETTER PHASE-A SISA	[39F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16823, 0x0041 };
    uint32_t const ces[9] = { 0x39F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_086)
{
    // 16823 0062;	
    // (𖠣) BAMUM LETTER PHASE-A SISA	[39F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16823, 0x0062 };
    uint32_t const ces[9] = { 0x39F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_087)
{
    // 16824 0021;	
    // (𖠤) BAMUM LETTER PHASE-A MGBASA	[39F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16824, 0x0021 };
    uint32_t const ces[9] = { 0x39F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_088)
{
    // 16824 003F;	
    // (𖠤) BAMUM LETTER PHASE-A MGBASA	[39F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16824, 0x003F };
    uint32_t const ces[9] = { 0x39F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_089)
{
    // 16824 0061;	
    // (𖠤) BAMUM LETTER PHASE-A MGBASA	[39F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16824, 0x0061 };
    uint32_t const ces[9] = { 0x39F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_090)
{
    // 16824 0041;	
    // (𖠤) BAMUM LETTER PHASE-A MGBASA	[39F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16824, 0x0041 };
    uint32_t const ces[9] = { 0x39F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_091)
{
    // 16824 0062;	
    // (𖠤) BAMUM LETTER PHASE-A MGBASA	[39F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16824, 0x0062 };
    uint32_t const ces[9] = { 0x39F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_092)
{
    // 16825 0021;	
    // (𖠥) BAMUM LETTER PHASE-A MEUNJOMNDEUQ	[39F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16825, 0x0021 };
    uint32_t const ces[9] = { 0x39F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_093)
{
    // 16825 003F;	
    // (𖠥) BAMUM LETTER PHASE-A MEUNJOMNDEUQ	[39F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16825, 0x003F };
    uint32_t const ces[9] = { 0x39F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_094)
{
    // 16825 0061;	
    // (𖠥) BAMUM LETTER PHASE-A MEUNJOMNDEUQ	[39F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16825, 0x0061 };
    uint32_t const ces[9] = { 0x39F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_095)
{
    // 16825 0041;	
    // (𖠥) BAMUM LETTER PHASE-A MEUNJOMNDEUQ	[39F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16825, 0x0041 };
    uint32_t const ces[9] = { 0x39F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_096)
{
    // 16825 0062;	
    // (𖠥) BAMUM LETTER PHASE-A MEUNJOMNDEUQ	[39F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16825, 0x0062 };
    uint32_t const ces[9] = { 0x39F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_097)
{
    // 16826 0021;	
    // (𖠦) BAMUM LETTER PHASE-A MOOMPUQ	[39F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16826, 0x0021 };
    uint32_t const ces[9] = { 0x39F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_098)
{
    // 16826 003F;	
    // (𖠦) BAMUM LETTER PHASE-A MOOMPUQ	[39F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16826, 0x003F };
    uint32_t const ces[9] = { 0x39F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_099)
{
    // 16826 0061;	
    // (𖠦) BAMUM LETTER PHASE-A MOOMPUQ	[39F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16826, 0x0061 };
    uint32_t const ces[9] = { 0x39F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_100)
{
    // 16826 0041;	
    // (𖠦) BAMUM LETTER PHASE-A MOOMPUQ	[39F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16826, 0x0041 };
    uint32_t const ces[9] = { 0x39F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_101)
{
    // 16826 0062;	
    // (𖠦) BAMUM LETTER PHASE-A MOOMPUQ	[39F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16826, 0x0062 };
    uint32_t const ces[9] = { 0x39F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_102)
{
    // 16827 0021;	
    // (𖠧) BAMUM LETTER PHASE-A KAFA	[39F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16827, 0x0021 };
    uint32_t const ces[9] = { 0x39F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_103)
{
    // 16827 003F;	
    // (𖠧) BAMUM LETTER PHASE-A KAFA	[39F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16827, 0x003F };
    uint32_t const ces[9] = { 0x39F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_104)
{
    // 16827 0061;	
    // (𖠧) BAMUM LETTER PHASE-A KAFA	[39F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16827, 0x0061 };
    uint32_t const ces[9] = { 0x39F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_105)
{
    // 16827 0041;	
    // (𖠧) BAMUM LETTER PHASE-A KAFA	[39F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16827, 0x0041 };
    uint32_t const ces[9] = { 0x39F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_106)
{
    // 16827 0062;	
    // (𖠧) BAMUM LETTER PHASE-A KAFA	[39F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16827, 0x0062 };
    uint32_t const ces[9] = { 0x39F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_107)
{
    // 16828 0021;	
    // (𖠨) BAMUM LETTER PHASE-A PA LEERAEWA	[39F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16828, 0x0021 };
    uint32_t const ces[9] = { 0x39F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_108)
{
    // 16828 003F;	
    // (𖠨) BAMUM LETTER PHASE-A PA LEERAEWA	[39F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16828, 0x003F };
    uint32_t const ces[9] = { 0x39F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_109)
{
    // 16828 0061;	
    // (𖠨) BAMUM LETTER PHASE-A PA LEERAEWA	[39F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16828, 0x0061 };
    uint32_t const ces[9] = { 0x39F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_110)
{
    // 16828 0041;	
    // (𖠨) BAMUM LETTER PHASE-A PA LEERAEWA	[39F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16828, 0x0041 };
    uint32_t const ces[9] = { 0x39F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_111)
{
    // 16828 0062;	
    // (𖠨) BAMUM LETTER PHASE-A PA LEERAEWA	[39F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16828, 0x0062 };
    uint32_t const ces[9] = { 0x39F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_112)
{
    // 16829 0021;	
    // (𖠩) BAMUM LETTER PHASE-A NDA LEERAEWA	[39F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16829, 0x0021 };
    uint32_t const ces[9] = { 0x39F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_113)
{
    // 16829 003F;	
    // (𖠩) BAMUM LETTER PHASE-A NDA LEERAEWA	[39F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16829, 0x003F };
    uint32_t const ces[9] = { 0x39F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_114)
{
    // 16829 0061;	
    // (𖠩) BAMUM LETTER PHASE-A NDA LEERAEWA	[39F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16829, 0x0061 };
    uint32_t const ces[9] = { 0x39F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_115)
{
    // 16829 0041;	
    // (𖠩) BAMUM LETTER PHASE-A NDA LEERAEWA	[39F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16829, 0x0041 };
    uint32_t const ces[9] = { 0x39F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_116)
{
    // 16829 0062;	
    // (𖠩) BAMUM LETTER PHASE-A NDA LEERAEWA	[39F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16829, 0x0062 };
    uint32_t const ces[9] = { 0x39F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_117)
{
    // 1682A 0021;	
    // (𖠪) BAMUM LETTER PHASE-A PET	[39F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682A, 0x0021 };
    uint32_t const ces[9] = { 0x39F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_118)
{
    // 1682A 003F;	
    // (𖠪) BAMUM LETTER PHASE-A PET	[39F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682A, 0x003F };
    uint32_t const ces[9] = { 0x39F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_119)
{
    // 1682A 0061;	
    // (𖠪) BAMUM LETTER PHASE-A PET	[39F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682A, 0x0061 };
    uint32_t const ces[9] = { 0x39F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_120)
{
    // 1682A 0041;	
    // (𖠪) BAMUM LETTER PHASE-A PET	[39F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1682A, 0x0041 };
    uint32_t const ces[9] = { 0x39F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_121)
{
    // 1682A 0062;	
    // (𖠪) BAMUM LETTER PHASE-A PET	[39F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682A, 0x0062 };
    uint32_t const ces[9] = { 0x39F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_122)
{
    // 1682B 0021;	
    // (𖠫) BAMUM LETTER PHASE-A MAEMKPEN	[39F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682B, 0x0021 };
    uint32_t const ces[9] = { 0x39F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_123)
{
    // 1682B 003F;	
    // (𖠫) BAMUM LETTER PHASE-A MAEMKPEN	[39F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682B, 0x003F };
    uint32_t const ces[9] = { 0x39F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_124)
{
    // 1682B 0061;	
    // (𖠫) BAMUM LETTER PHASE-A MAEMKPEN	[39F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682B, 0x0061 };
    uint32_t const ces[9] = { 0x39F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_125)
{
    // 1682B 0041;	
    // (𖠫) BAMUM LETTER PHASE-A MAEMKPEN	[39F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1682B, 0x0041 };
    uint32_t const ces[9] = { 0x39F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_126)
{
    // 1682B 0062;	
    // (𖠫) BAMUM LETTER PHASE-A MAEMKPEN	[39F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682B, 0x0062 };
    uint32_t const ces[9] = { 0x39F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_127)
{
    // 1682C 0021;	
    // (𖠬) BAMUM LETTER PHASE-A NIKA	[39FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682C, 0x0021 };
    uint32_t const ces[9] = { 0x39FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_128)
{
    // 1682C 003F;	
    // (𖠬) BAMUM LETTER PHASE-A NIKA	[39FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682C, 0x003F };
    uint32_t const ces[9] = { 0x39FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_129)
{
    // 1682C 0061;	
    // (𖠬) BAMUM LETTER PHASE-A NIKA	[39FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682C, 0x0061 };
    uint32_t const ces[9] = { 0x39FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_130)
{
    // 1682C 0041;	
    // (𖠬) BAMUM LETTER PHASE-A NIKA	[39FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1682C, 0x0041 };
    uint32_t const ces[9] = { 0x39FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_131)
{
    // 1682C 0062;	
    // (𖠬) BAMUM LETTER PHASE-A NIKA	[39FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682C, 0x0062 };
    uint32_t const ces[9] = { 0x39FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_132)
{
    // 1682D 0021;	
    // (𖠭) BAMUM LETTER PHASE-A PUP	[39FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682D, 0x0021 };
    uint32_t const ces[9] = { 0x39FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_133)
{
    // 1682D 003F;	
    // (𖠭) BAMUM LETTER PHASE-A PUP	[39FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682D, 0x003F };
    uint32_t const ces[9] = { 0x39FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_134)
{
    // 1682D 0061;	
    // (𖠭) BAMUM LETTER PHASE-A PUP	[39FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682D, 0x0061 };
    uint32_t const ces[9] = { 0x39FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_135)
{
    // 1682D 0041;	
    // (𖠭) BAMUM LETTER PHASE-A PUP	[39FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1682D, 0x0041 };
    uint32_t const ces[9] = { 0x39FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_136)
{
    // 1682D 0062;	
    // (𖠭) BAMUM LETTER PHASE-A PUP	[39FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682D, 0x0062 };
    uint32_t const ces[9] = { 0x39FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_137)
{
    // 1682E 0021;	
    // (𖠮) BAMUM LETTER PHASE-A TUAEP	[39FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682E, 0x0021 };
    uint32_t const ces[9] = { 0x39FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_138)
{
    // 1682E 003F;	
    // (𖠮) BAMUM LETTER PHASE-A TUAEP	[39FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682E, 0x003F };
    uint32_t const ces[9] = { 0x39FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_139)
{
    // 1682E 0061;	
    // (𖠮) BAMUM LETTER PHASE-A TUAEP	[39FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682E, 0x0061 };
    uint32_t const ces[9] = { 0x39FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_140)
{
    // 1682E 0041;	
    // (𖠮) BAMUM LETTER PHASE-A TUAEP	[39FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1682E, 0x0041 };
    uint32_t const ces[9] = { 0x39FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_141)
{
    // 1682E 0062;	
    // (𖠮) BAMUM LETTER PHASE-A TUAEP	[39FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682E, 0x0062 };
    uint32_t const ces[9] = { 0x39FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_142)
{
    // 1682F 0021;	
    // (𖠯) BAMUM LETTER PHASE-A LUAEP	[39FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682F, 0x0021 };
    uint32_t const ces[9] = { 0x39FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_143)
{
    // 1682F 003F;	
    // (𖠯) BAMUM LETTER PHASE-A LUAEP	[39FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682F, 0x003F };
    uint32_t const ces[9] = { 0x39FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_144)
{
    // 1682F 0061;	
    // (𖠯) BAMUM LETTER PHASE-A LUAEP	[39FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682F, 0x0061 };
    uint32_t const ces[9] = { 0x39FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_145)
{
    // 1682F 0041;	
    // (𖠯) BAMUM LETTER PHASE-A LUAEP	[39FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1682F, 0x0041 };
    uint32_t const ces[9] = { 0x39FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_146)
{
    // 1682F 0062;	
    // (𖠯) BAMUM LETTER PHASE-A LUAEP	[39FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1682F, 0x0062 };
    uint32_t const ces[9] = { 0x39FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_147)
{
    // 16830 0021;	
    // (𖠰) BAMUM LETTER PHASE-A SONJAM	[39FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16830, 0x0021 };
    uint32_t const ces[9] = { 0x39FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_148)
{
    // 16830 003F;	
    // (𖠰) BAMUM LETTER PHASE-A SONJAM	[39FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16830, 0x003F };
    uint32_t const ces[9] = { 0x39FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_149)
{
    // 16830 0061;	
    // (𖠰) BAMUM LETTER PHASE-A SONJAM	[39FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16830, 0x0061 };
    uint32_t const ces[9] = { 0x39FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_150)
{
    // 16830 0041;	
    // (𖠰) BAMUM LETTER PHASE-A SONJAM	[39FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16830, 0x0041 };
    uint32_t const ces[9] = { 0x39FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_151)
{
    // 16830 0062;	
    // (𖠰) BAMUM LETTER PHASE-A SONJAM	[39FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16830, 0x0062 };
    uint32_t const ces[9] = { 0x39FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_152)
{
    // 16831 0021;	
    // (𖠱) BAMUM LETTER PHASE-A TEUTEUWEN	[39FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16831, 0x0021 };
    uint32_t const ces[9] = { 0x39FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_153)
{
    // 16831 003F;	
    // (𖠱) BAMUM LETTER PHASE-A TEUTEUWEN	[39FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16831, 0x003F };
    uint32_t const ces[9] = { 0x39FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_154)
{
    // 16831 0061;	
    // (𖠱) BAMUM LETTER PHASE-A TEUTEUWEN	[39FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16831, 0x0061 };
    uint32_t const ces[9] = { 0x39FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_155)
{
    // 16831 0041;	
    // (𖠱) BAMUM LETTER PHASE-A TEUTEUWEN	[39FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16831, 0x0041 };
    uint32_t const ces[9] = { 0x39FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_156)
{
    // 16831 0062;	
    // (𖠱) BAMUM LETTER PHASE-A TEUTEUWEN	[39FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16831, 0x0062 };
    uint32_t const ces[9] = { 0x39FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_157)
{
    // 16832 0021;	
    // (𖠲) BAMUM LETTER PHASE-A MAENYI	[3A00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16832, 0x0021 };
    uint32_t const ces[9] = { 0x3A00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_158)
{
    // 16832 003F;	
    // (𖠲) BAMUM LETTER PHASE-A MAENYI	[3A00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16832, 0x003F };
    uint32_t const ces[9] = { 0x3A00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_159)
{
    // 16832 0061;	
    // (𖠲) BAMUM LETTER PHASE-A MAENYI	[3A00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16832, 0x0061 };
    uint32_t const ces[9] = { 0x3A00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_160)
{
    // 16832 0041;	
    // (𖠲) BAMUM LETTER PHASE-A MAENYI	[3A00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16832, 0x0041 };
    uint32_t const ces[9] = { 0x3A00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_161)
{
    // 16832 0062;	
    // (𖠲) BAMUM LETTER PHASE-A MAENYI	[3A00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16832, 0x0062 };
    uint32_t const ces[9] = { 0x3A00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_162)
{
    // 16833 0021;	
    // (𖠳) BAMUM LETTER PHASE-A KET	[3A01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16833, 0x0021 };
    uint32_t const ces[9] = { 0x3A01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_163)
{
    // 16833 003F;	
    // (𖠳) BAMUM LETTER PHASE-A KET	[3A01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16833, 0x003F };
    uint32_t const ces[9] = { 0x3A01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_164)
{
    // 16833 0061;	
    // (𖠳) BAMUM LETTER PHASE-A KET	[3A01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16833, 0x0061 };
    uint32_t const ces[9] = { 0x3A01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_165)
{
    // 16833 0041;	
    // (𖠳) BAMUM LETTER PHASE-A KET	[3A01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16833, 0x0041 };
    uint32_t const ces[9] = { 0x3A01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_166)
{
    // 16833 0062;	
    // (𖠳) BAMUM LETTER PHASE-A KET	[3A01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16833, 0x0062 };
    uint32_t const ces[9] = { 0x3A01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_167)
{
    // 16834 0021;	
    // (𖠴) BAMUM LETTER PHASE-A NDAANGGEUAET	[3A02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16834, 0x0021 };
    uint32_t const ces[9] = { 0x3A02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_168)
{
    // 16834 003F;	
    // (𖠴) BAMUM LETTER PHASE-A NDAANGGEUAET	[3A02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16834, 0x003F };
    uint32_t const ces[9] = { 0x3A02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_169)
{
    // 16834 0061;	
    // (𖠴) BAMUM LETTER PHASE-A NDAANGGEUAET	[3A02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16834, 0x0061 };
    uint32_t const ces[9] = { 0x3A02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_170)
{
    // 16834 0041;	
    // (𖠴) BAMUM LETTER PHASE-A NDAANGGEUAET	[3A02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16834, 0x0041 };
    uint32_t const ces[9] = { 0x3A02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_171)
{
    // 16834 0062;	
    // (𖠴) BAMUM LETTER PHASE-A NDAANGGEUAET	[3A02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16834, 0x0062 };
    uint32_t const ces[9] = { 0x3A02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_172)
{
    // 16835 0021;	
    // (𖠵) BAMUM LETTER PHASE-A KUOQ	[3A03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16835, 0x0021 };
    uint32_t const ces[9] = { 0x3A03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_173)
{
    // 16835 003F;	
    // (𖠵) BAMUM LETTER PHASE-A KUOQ	[3A03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16835, 0x003F };
    uint32_t const ces[9] = { 0x3A03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_174)
{
    // 16835 0061;	
    // (𖠵) BAMUM LETTER PHASE-A KUOQ	[3A03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16835, 0x0061 };
    uint32_t const ces[9] = { 0x3A03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_175)
{
    // 16835 0041;	
    // (𖠵) BAMUM LETTER PHASE-A KUOQ	[3A03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16835, 0x0041 };
    uint32_t const ces[9] = { 0x3A03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_176)
{
    // 16835 0062;	
    // (𖠵) BAMUM LETTER PHASE-A KUOQ	[3A03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16835, 0x0062 };
    uint32_t const ces[9] = { 0x3A03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_177)
{
    // 16836 0021;	
    // (𖠶) BAMUM LETTER PHASE-A MOOMEUT	[3A04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16836, 0x0021 };
    uint32_t const ces[9] = { 0x3A04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_178)
{
    // 16836 003F;	
    // (𖠶) BAMUM LETTER PHASE-A MOOMEUT	[3A04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16836, 0x003F };
    uint32_t const ces[9] = { 0x3A04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_179)
{
    // 16836 0061;	
    // (𖠶) BAMUM LETTER PHASE-A MOOMEUT	[3A04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16836, 0x0061 };
    uint32_t const ces[9] = { 0x3A04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_180)
{
    // 16836 0041;	
    // (𖠶) BAMUM LETTER PHASE-A MOOMEUT	[3A04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16836, 0x0041 };
    uint32_t const ces[9] = { 0x3A04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_181)
{
    // 16836 0062;	
    // (𖠶) BAMUM LETTER PHASE-A MOOMEUT	[3A04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16836, 0x0062 };
    uint32_t const ces[9] = { 0x3A04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_182)
{
    // 16837 0021;	
    // (𖠷) BAMUM LETTER PHASE-A SHUM	[3A05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16837, 0x0021 };
    uint32_t const ces[9] = { 0x3A05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_183)
{
    // 16837 003F;	
    // (𖠷) BAMUM LETTER PHASE-A SHUM	[3A05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16837, 0x003F };
    uint32_t const ces[9] = { 0x3A05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_184)
{
    // 16837 0061;	
    // (𖠷) BAMUM LETTER PHASE-A SHUM	[3A05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16837, 0x0061 };
    uint32_t const ces[9] = { 0x3A05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_185)
{
    // 16837 0041;	
    // (𖠷) BAMUM LETTER PHASE-A SHUM	[3A05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16837, 0x0041 };
    uint32_t const ces[9] = { 0x3A05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_186)
{
    // 16837 0062;	
    // (𖠷) BAMUM LETTER PHASE-A SHUM	[3A05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16837, 0x0062 };
    uint32_t const ces[9] = { 0x3A05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_187)
{
    // 16838 0021;	
    // (𖠸) BAMUM LETTER PHASE-A LOMMAE	[3A06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16838, 0x0021 };
    uint32_t const ces[9] = { 0x3A06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_188)
{
    // 16838 003F;	
    // (𖠸) BAMUM LETTER PHASE-A LOMMAE	[3A06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16838, 0x003F };
    uint32_t const ces[9] = { 0x3A06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_189)
{
    // 16838 0061;	
    // (𖠸) BAMUM LETTER PHASE-A LOMMAE	[3A06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16838, 0x0061 };
    uint32_t const ces[9] = { 0x3A06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_190)
{
    // 16838 0041;	
    // (𖠸) BAMUM LETTER PHASE-A LOMMAE	[3A06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16838, 0x0041 };
    uint32_t const ces[9] = { 0x3A06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_191)
{
    // 16838 0062;	
    // (𖠸) BAMUM LETTER PHASE-A LOMMAE	[3A06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16838, 0x0062 };
    uint32_t const ces[9] = { 0x3A06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_192)
{
    // 16839 0021;	
    // (𖠹) BAMUM LETTER PHASE-A FIRI	[3A07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16839, 0x0021 };
    uint32_t const ces[9] = { 0x3A07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_193)
{
    // 16839 003F;	
    // (𖠹) BAMUM LETTER PHASE-A FIRI	[3A07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16839, 0x003F };
    uint32_t const ces[9] = { 0x3A07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_194)
{
    // 16839 0061;	
    // (𖠹) BAMUM LETTER PHASE-A FIRI	[3A07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16839, 0x0061 };
    uint32_t const ces[9] = { 0x3A07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_195)
{
    // 16839 0041;	
    // (𖠹) BAMUM LETTER PHASE-A FIRI	[3A07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16839, 0x0041 };
    uint32_t const ces[9] = { 0x3A07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_196)
{
    // 16839 0062;	
    // (𖠹) BAMUM LETTER PHASE-A FIRI	[3A07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16839, 0x0062 };
    uint32_t const ces[9] = { 0x3A07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_197)
{
    // 1683A 0021;	
    // (𖠺) BAMUM LETTER PHASE-A ROM	[3A08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683A, 0x0021 };
    uint32_t const ces[9] = { 0x3A08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_198)
{
    // 1683A 003F;	
    // (𖠺) BAMUM LETTER PHASE-A ROM	[3A08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683A, 0x003F };
    uint32_t const ces[9] = { 0x3A08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_199)
{
    // 1683A 0061;	
    // (𖠺) BAMUM LETTER PHASE-A ROM	[3A08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683A, 0x0061 };
    uint32_t const ces[9] = { 0x3A08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_200)
{
    // 1683A 0041;	
    // (𖠺) BAMUM LETTER PHASE-A ROM	[3A08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1683A, 0x0041 };
    uint32_t const ces[9] = { 0x3A08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_201)
{
    // 1683A 0062;	
    // (𖠺) BAMUM LETTER PHASE-A ROM	[3A08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683A, 0x0062 };
    uint32_t const ces[9] = { 0x3A08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_202)
{
    // 1683B 0021;	
    // (𖠻) BAMUM LETTER PHASE-A KPOQ	[3A09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683B, 0x0021 };
    uint32_t const ces[9] = { 0x3A09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_203)
{
    // 1683B 003F;	
    // (𖠻) BAMUM LETTER PHASE-A KPOQ	[3A09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683B, 0x003F };
    uint32_t const ces[9] = { 0x3A09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_204)
{
    // 1683B 0061;	
    // (𖠻) BAMUM LETTER PHASE-A KPOQ	[3A09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683B, 0x0061 };
    uint32_t const ces[9] = { 0x3A09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_205)
{
    // 1683B 0041;	
    // (𖠻) BAMUM LETTER PHASE-A KPOQ	[3A09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1683B, 0x0041 };
    uint32_t const ces[9] = { 0x3A09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_206)
{
    // 1683B 0062;	
    // (𖠻) BAMUM LETTER PHASE-A KPOQ	[3A09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683B, 0x0062 };
    uint32_t const ces[9] = { 0x3A09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_207)
{
    // 1683C 0021;	
    // (𖠼) BAMUM LETTER PHASE-A SOQ	[3A0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683C, 0x0021 };
    uint32_t const ces[9] = { 0x3A0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_208)
{
    // 1683C 003F;	
    // (𖠼) BAMUM LETTER PHASE-A SOQ	[3A0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683C, 0x003F };
    uint32_t const ces[9] = { 0x3A0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_209)
{
    // 1683C 0061;	
    // (𖠼) BAMUM LETTER PHASE-A SOQ	[3A0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683C, 0x0061 };
    uint32_t const ces[9] = { 0x3A0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_210)
{
    // 1683C 0041;	
    // (𖠼) BAMUM LETTER PHASE-A SOQ	[3A0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1683C, 0x0041 };
    uint32_t const ces[9] = { 0x3A0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_211)
{
    // 1683C 0062;	
    // (𖠼) BAMUM LETTER PHASE-A SOQ	[3A0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683C, 0x0062 };
    uint32_t const ces[9] = { 0x3A0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_212)
{
    // 1683D 0021;	
    // (𖠽) BAMUM LETTER PHASE-A MAP PIEET	[3A0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683D, 0x0021 };
    uint32_t const ces[9] = { 0x3A0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_213)
{
    // 1683D 003F;	
    // (𖠽) BAMUM LETTER PHASE-A MAP PIEET	[3A0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683D, 0x003F };
    uint32_t const ces[9] = { 0x3A0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_214)
{
    // 1683D 0061;	
    // (𖠽) BAMUM LETTER PHASE-A MAP PIEET	[3A0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683D, 0x0061 };
    uint32_t const ces[9] = { 0x3A0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_215)
{
    // 1683D 0041;	
    // (𖠽) BAMUM LETTER PHASE-A MAP PIEET	[3A0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1683D, 0x0041 };
    uint32_t const ces[9] = { 0x3A0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_216)
{
    // 1683D 0062;	
    // (𖠽) BAMUM LETTER PHASE-A MAP PIEET	[3A0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683D, 0x0062 };
    uint32_t const ces[9] = { 0x3A0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_217)
{
    // 1683E 0021;	
    // (𖠾) BAMUM LETTER PHASE-A SHIRAE	[3A0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683E, 0x0021 };
    uint32_t const ces[9] = { 0x3A0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_218)
{
    // 1683E 003F;	
    // (𖠾) BAMUM LETTER PHASE-A SHIRAE	[3A0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683E, 0x003F };
    uint32_t const ces[9] = { 0x3A0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_219)
{
    // 1683E 0061;	
    // (𖠾) BAMUM LETTER PHASE-A SHIRAE	[3A0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683E, 0x0061 };
    uint32_t const ces[9] = { 0x3A0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_220)
{
    // 1683E 0041;	
    // (𖠾) BAMUM LETTER PHASE-A SHIRAE	[3A0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1683E, 0x0041 };
    uint32_t const ces[9] = { 0x3A0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_221)
{
    // 1683E 0062;	
    // (𖠾) BAMUM LETTER PHASE-A SHIRAE	[3A0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683E, 0x0062 };
    uint32_t const ces[9] = { 0x3A0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_222)
{
    // 1683F 0021;	
    // (𖠿) BAMUM LETTER PHASE-A NTAP	[3A0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683F, 0x0021 };
    uint32_t const ces[9] = { 0x3A0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_223)
{
    // 1683F 003F;	
    // (𖠿) BAMUM LETTER PHASE-A NTAP	[3A0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683F, 0x003F };
    uint32_t const ces[9] = { 0x3A0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_224)
{
    // 1683F 0061;	
    // (𖠿) BAMUM LETTER PHASE-A NTAP	[3A0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683F, 0x0061 };
    uint32_t const ces[9] = { 0x3A0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_225)
{
    // 1683F 0041;	
    // (𖠿) BAMUM LETTER PHASE-A NTAP	[3A0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1683F, 0x0041 };
    uint32_t const ces[9] = { 0x3A0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_226)
{
    // 1683F 0062;	
    // (𖠿) BAMUM LETTER PHASE-A NTAP	[3A0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1683F, 0x0062 };
    uint32_t const ces[9] = { 0x3A0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_227)
{
    // 16840 0021;	
    // (𖡀) BAMUM LETTER PHASE-A SHOQ NSHUT YUM	[3A0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16840, 0x0021 };
    uint32_t const ces[9] = { 0x3A0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_228)
{
    // 16840 003F;	
    // (𖡀) BAMUM LETTER PHASE-A SHOQ NSHUT YUM	[3A0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16840, 0x003F };
    uint32_t const ces[9] = { 0x3A0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_229)
{
    // 16840 0061;	
    // (𖡀) BAMUM LETTER PHASE-A SHOQ NSHUT YUM	[3A0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16840, 0x0061 };
    uint32_t const ces[9] = { 0x3A0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_230)
{
    // 16840 0041;	
    // (𖡀) BAMUM LETTER PHASE-A SHOQ NSHUT YUM	[3A0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16840, 0x0041 };
    uint32_t const ces[9] = { 0x3A0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_231)
{
    // 16840 0062;	
    // (𖡀) BAMUM LETTER PHASE-A SHOQ NSHUT YUM	[3A0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16840, 0x0062 };
    uint32_t const ces[9] = { 0x3A0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_232)
{
    // 16841 0021;	
    // (𖡁) BAMUM LETTER PHASE-A NYIT MONGKEUAEQ	[3A0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16841, 0x0021 };
    uint32_t const ces[9] = { 0x3A0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_233)
{
    // 16841 003F;	
    // (𖡁) BAMUM LETTER PHASE-A NYIT MONGKEUAEQ	[3A0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16841, 0x003F };
    uint32_t const ces[9] = { 0x3A0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_234)
{
    // 16841 0061;	
    // (𖡁) BAMUM LETTER PHASE-A NYIT MONGKEUAEQ	[3A0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16841, 0x0061 };
    uint32_t const ces[9] = { 0x3A0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_235)
{
    // 16841 0041;	
    // (𖡁) BAMUM LETTER PHASE-A NYIT MONGKEUAEQ	[3A0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16841, 0x0041 };
    uint32_t const ces[9] = { 0x3A0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_236)
{
    // 16841 0062;	
    // (𖡁) BAMUM LETTER PHASE-A NYIT MONGKEUAEQ	[3A0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16841, 0x0062 };
    uint32_t const ces[9] = { 0x3A0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_237)
{
    // 16842 0021;	
    // (𖡂) BAMUM LETTER PHASE-A PAARAE	[3A10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16842, 0x0021 };
    uint32_t const ces[9] = { 0x3A10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_238)
{
    // 16842 003F;	
    // (𖡂) BAMUM LETTER PHASE-A PAARAE	[3A10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16842, 0x003F };
    uint32_t const ces[9] = { 0x3A10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_239)
{
    // 16842 0061;	
    // (𖡂) BAMUM LETTER PHASE-A PAARAE	[3A10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16842, 0x0061 };
    uint32_t const ces[9] = { 0x3A10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_240)
{
    // 16842 0041;	
    // (𖡂) BAMUM LETTER PHASE-A PAARAE	[3A10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16842, 0x0041 };
    uint32_t const ces[9] = { 0x3A10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_241)
{
    // 16842 0062;	
    // (𖡂) BAMUM LETTER PHASE-A PAARAE	[3A10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16842, 0x0062 };
    uint32_t const ces[9] = { 0x3A10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_242)
{
    // 16843 0021;	
    // (𖡃) BAMUM LETTER PHASE-A NKAARAE	[3A11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16843, 0x0021 };
    uint32_t const ces[9] = { 0x3A11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_243)
{
    // 16843 003F;	
    // (𖡃) BAMUM LETTER PHASE-A NKAARAE	[3A11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16843, 0x003F };
    uint32_t const ces[9] = { 0x3A11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_244)
{
    // 16843 0061;	
    // (𖡃) BAMUM LETTER PHASE-A NKAARAE	[3A11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16843, 0x0061 };
    uint32_t const ces[9] = { 0x3A11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_245)
{
    // 16843 0041;	
    // (𖡃) BAMUM LETTER PHASE-A NKAARAE	[3A11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16843, 0x0041 };
    uint32_t const ces[9] = { 0x3A11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_246)
{
    // 16843 0062;	
    // (𖡃) BAMUM LETTER PHASE-A NKAARAE	[3A11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16843, 0x0062 };
    uint32_t const ces[9] = { 0x3A11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_247)
{
    // 16844 0021;	
    // (𖡄) BAMUM LETTER PHASE-A UNKNOWN	[3A12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16844, 0x0021 };
    uint32_t const ces[9] = { 0x3A12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_248)
{
    // 16844 003F;	
    // (𖡄) BAMUM LETTER PHASE-A UNKNOWN	[3A12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16844, 0x003F };
    uint32_t const ces[9] = { 0x3A12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_249)
{
    // 16844 0061;	
    // (𖡄) BAMUM LETTER PHASE-A UNKNOWN	[3A12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16844, 0x0061 };
    uint32_t const ces[9] = { 0x3A12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_250)
{
    // 16844 0041;	
    // (𖡄) BAMUM LETTER PHASE-A UNKNOWN	[3A12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16844, 0x0041 };
    uint32_t const ces[9] = { 0x3A12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_251)
{
    // 16844 0062;	
    // (𖡄) BAMUM LETTER PHASE-A UNKNOWN	[3A12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16844, 0x0062 };
    uint32_t const ces[9] = { 0x3A12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_252)
{
    // 16845 0021;	
    // (𖡅) BAMUM LETTER PHASE-A NGGEN	[3A13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16845, 0x0021 };
    uint32_t const ces[9] = { 0x3A13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_253)
{
    // 16845 003F;	
    // (𖡅) BAMUM LETTER PHASE-A NGGEN	[3A13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16845, 0x003F };
    uint32_t const ces[9] = { 0x3A13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_254)
{
    // 16845 0061;	
    // (𖡅) BAMUM LETTER PHASE-A NGGEN	[3A13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16845, 0x0061 };
    uint32_t const ces[9] = { 0x3A13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_255)
{
    // 16845 0041;	
    // (𖡅) BAMUM LETTER PHASE-A NGGEN	[3A13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16845, 0x0041 };
    uint32_t const ces[9] = { 0x3A13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_256)
{
    // 16845 0062;	
    // (𖡅) BAMUM LETTER PHASE-A NGGEN	[3A13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16845, 0x0062 };
    uint32_t const ces[9] = { 0x3A13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_257)
{
    // 16846 0021;	
    // (𖡆) BAMUM LETTER PHASE-A MAESI	[3A14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16846, 0x0021 };
    uint32_t const ces[9] = { 0x3A14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_258)
{
    // 16846 003F;	
    // (𖡆) BAMUM LETTER PHASE-A MAESI	[3A14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16846, 0x003F };
    uint32_t const ces[9] = { 0x3A14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_259)
{
    // 16846 0061;	
    // (𖡆) BAMUM LETTER PHASE-A MAESI	[3A14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16846, 0x0061 };
    uint32_t const ces[9] = { 0x3A14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_260)
{
    // 16846 0041;	
    // (𖡆) BAMUM LETTER PHASE-A MAESI	[3A14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16846, 0x0041 };
    uint32_t const ces[9] = { 0x3A14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_261)
{
    // 16846 0062;	
    // (𖡆) BAMUM LETTER PHASE-A MAESI	[3A14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16846, 0x0062 };
    uint32_t const ces[9] = { 0x3A14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_262)
{
    // 16847 0021;	
    // (𖡇) BAMUM LETTER PHASE-A NJAM	[3A15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16847, 0x0021 };
    uint32_t const ces[9] = { 0x3A15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_263)
{
    // 16847 003F;	
    // (𖡇) BAMUM LETTER PHASE-A NJAM	[3A15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16847, 0x003F };
    uint32_t const ces[9] = { 0x3A15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_264)
{
    // 16847 0061;	
    // (𖡇) BAMUM LETTER PHASE-A NJAM	[3A15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16847, 0x0061 };
    uint32_t const ces[9] = { 0x3A15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_265)
{
    // 16847 0041;	
    // (𖡇) BAMUM LETTER PHASE-A NJAM	[3A15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16847, 0x0041 };
    uint32_t const ces[9] = { 0x3A15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_266)
{
    // 16847 0062;	
    // (𖡇) BAMUM LETTER PHASE-A NJAM	[3A15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16847, 0x0062 };
    uint32_t const ces[9] = { 0x3A15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_267)
{
    // 16848 0021;	
    // (𖡈) BAMUM LETTER PHASE-A MBANYI	[3A16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16848, 0x0021 };
    uint32_t const ces[9] = { 0x3A16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_268)
{
    // 16848 003F;	
    // (𖡈) BAMUM LETTER PHASE-A MBANYI	[3A16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16848, 0x003F };
    uint32_t const ces[9] = { 0x3A16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_269)
{
    // 16848 0061;	
    // (𖡈) BAMUM LETTER PHASE-A MBANYI	[3A16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16848, 0x0061 };
    uint32_t const ces[9] = { 0x3A16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_270)
{
    // 16848 0041;	
    // (𖡈) BAMUM LETTER PHASE-A MBANYI	[3A16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16848, 0x0041 };
    uint32_t const ces[9] = { 0x3A16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_271)
{
    // 16848 0062;	
    // (𖡈) BAMUM LETTER PHASE-A MBANYI	[3A16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16848, 0x0062 };
    uint32_t const ces[9] = { 0x3A16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_272)
{
    // 16849 0021;	
    // (𖡉) BAMUM LETTER PHASE-A NYET	[3A17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16849, 0x0021 };
    uint32_t const ces[9] = { 0x3A17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_273)
{
    // 16849 003F;	
    // (𖡉) BAMUM LETTER PHASE-A NYET	[3A17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16849, 0x003F };
    uint32_t const ces[9] = { 0x3A17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_274)
{
    // 16849 0061;	
    // (𖡉) BAMUM LETTER PHASE-A NYET	[3A17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16849, 0x0061 };
    uint32_t const ces[9] = { 0x3A17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_275)
{
    // 16849 0041;	
    // (𖡉) BAMUM LETTER PHASE-A NYET	[3A17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16849, 0x0041 };
    uint32_t const ces[9] = { 0x3A17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_276)
{
    // 16849 0062;	
    // (𖡉) BAMUM LETTER PHASE-A NYET	[3A17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16849, 0x0062 };
    uint32_t const ces[9] = { 0x3A17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_277)
{
    // 1684A 0021;	
    // (𖡊) BAMUM LETTER PHASE-A TEUAEN	[3A18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684A, 0x0021 };
    uint32_t const ces[9] = { 0x3A18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_278)
{
    // 1684A 003F;	
    // (𖡊) BAMUM LETTER PHASE-A TEUAEN	[3A18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684A, 0x003F };
    uint32_t const ces[9] = { 0x3A18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_279)
{
    // 1684A 0061;	
    // (𖡊) BAMUM LETTER PHASE-A TEUAEN	[3A18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684A, 0x0061 };
    uint32_t const ces[9] = { 0x3A18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_280)
{
    // 1684A 0041;	
    // (𖡊) BAMUM LETTER PHASE-A TEUAEN	[3A18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1684A, 0x0041 };
    uint32_t const ces[9] = { 0x3A18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_281)
{
    // 1684A 0062;	
    // (𖡊) BAMUM LETTER PHASE-A TEUAEN	[3A18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684A, 0x0062 };
    uint32_t const ces[9] = { 0x3A18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_282)
{
    // 1684B 0021;	
    // (𖡋) BAMUM LETTER PHASE-A SOT	[3A19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684B, 0x0021 };
    uint32_t const ces[9] = { 0x3A19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_283)
{
    // 1684B 003F;	
    // (𖡋) BAMUM LETTER PHASE-A SOT	[3A19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684B, 0x003F };
    uint32_t const ces[9] = { 0x3A19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_284)
{
    // 1684B 0061;	
    // (𖡋) BAMUM LETTER PHASE-A SOT	[3A19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684B, 0x0061 };
    uint32_t const ces[9] = { 0x3A19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_285)
{
    // 1684B 0041;	
    // (𖡋) BAMUM LETTER PHASE-A SOT	[3A19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1684B, 0x0041 };
    uint32_t const ces[9] = { 0x3A19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_286)
{
    // 1684B 0062;	
    // (𖡋) BAMUM LETTER PHASE-A SOT	[3A19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684B, 0x0062 };
    uint32_t const ces[9] = { 0x3A19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_287)
{
    // 1684C 0021;	
    // (𖡌) BAMUM LETTER PHASE-A PAAM	[3A1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684C, 0x0021 };
    uint32_t const ces[9] = { 0x3A1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_288)
{
    // 1684C 003F;	
    // (𖡌) BAMUM LETTER PHASE-A PAAM	[3A1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684C, 0x003F };
    uint32_t const ces[9] = { 0x3A1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_289)
{
    // 1684C 0061;	
    // (𖡌) BAMUM LETTER PHASE-A PAAM	[3A1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684C, 0x0061 };
    uint32_t const ces[9] = { 0x3A1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_290)
{
    // 1684C 0041;	
    // (𖡌) BAMUM LETTER PHASE-A PAAM	[3A1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1684C, 0x0041 };
    uint32_t const ces[9] = { 0x3A1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_291)
{
    // 1684C 0062;	
    // (𖡌) BAMUM LETTER PHASE-A PAAM	[3A1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684C, 0x0062 };
    uint32_t const ces[9] = { 0x3A1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_292)
{
    // 1684D 0021;	
    // (𖡍) BAMUM LETTER PHASE-A NSHIEE	[3A1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684D, 0x0021 };
    uint32_t const ces[9] = { 0x3A1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_293)
{
    // 1684D 003F;	
    // (𖡍) BAMUM LETTER PHASE-A NSHIEE	[3A1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684D, 0x003F };
    uint32_t const ces[9] = { 0x3A1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_294)
{
    // 1684D 0061;	
    // (𖡍) BAMUM LETTER PHASE-A NSHIEE	[3A1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684D, 0x0061 };
    uint32_t const ces[9] = { 0x3A1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_295)
{
    // 1684D 0041;	
    // (𖡍) BAMUM LETTER PHASE-A NSHIEE	[3A1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1684D, 0x0041 };
    uint32_t const ces[9] = { 0x3A1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_296)
{
    // 1684D 0062;	
    // (𖡍) BAMUM LETTER PHASE-A NSHIEE	[3A1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684D, 0x0062 };
    uint32_t const ces[9] = { 0x3A1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_297)
{
    // 1684E 0021;	
    // (𖡎) BAMUM LETTER PHASE-A MAEM	[3A1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684E, 0x0021 };
    uint32_t const ces[9] = { 0x3A1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_298)
{
    // 1684E 003F;	
    // (𖡎) BAMUM LETTER PHASE-A MAEM	[3A1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684E, 0x003F };
    uint32_t const ces[9] = { 0x3A1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_299)
{
    // 1684E 0061;	
    // (𖡎) BAMUM LETTER PHASE-A MAEM	[3A1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684E, 0x0061 };
    uint32_t const ces[9] = { 0x3A1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_300)
{
    // 1684E 0041;	
    // (𖡎) BAMUM LETTER PHASE-A MAEM	[3A1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1684E, 0x0041 };
    uint32_t const ces[9] = { 0x3A1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_301)
{
    // 1684E 0062;	
    // (𖡎) BAMUM LETTER PHASE-A MAEM	[3A1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684E, 0x0062 };
    uint32_t const ces[9] = { 0x3A1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_302)
{
    // 1684F 0021;	
    // (𖡏) BAMUM LETTER PHASE-A NYI	[3A1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684F, 0x0021 };
    uint32_t const ces[9] = { 0x3A1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_303)
{
    // 1684F 003F;	
    // (𖡏) BAMUM LETTER PHASE-A NYI	[3A1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684F, 0x003F };
    uint32_t const ces[9] = { 0x3A1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_304)
{
    // 1684F 0061;	
    // (𖡏) BAMUM LETTER PHASE-A NYI	[3A1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684F, 0x0061 };
    uint32_t const ces[9] = { 0x3A1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_305)
{
    // 1684F 0041;	
    // (𖡏) BAMUM LETTER PHASE-A NYI	[3A1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1684F, 0x0041 };
    uint32_t const ces[9] = { 0x3A1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_306)
{
    // 1684F 0062;	
    // (𖡏) BAMUM LETTER PHASE-A NYI	[3A1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1684F, 0x0062 };
    uint32_t const ces[9] = { 0x3A1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_307)
{
    // 16850 0021;	
    // (𖡐) BAMUM LETTER PHASE-A KAQ	[3A1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16850, 0x0021 };
    uint32_t const ces[9] = { 0x3A1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_308)
{
    // 16850 003F;	
    // (𖡐) BAMUM LETTER PHASE-A KAQ	[3A1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16850, 0x003F };
    uint32_t const ces[9] = { 0x3A1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_309)
{
    // 16850 0061;	
    // (𖡐) BAMUM LETTER PHASE-A KAQ	[3A1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16850, 0x0061 };
    uint32_t const ces[9] = { 0x3A1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_310)
{
    // 16850 0041;	
    // (𖡐) BAMUM LETTER PHASE-A KAQ	[3A1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16850, 0x0041 };
    uint32_t const ces[9] = { 0x3A1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_311)
{
    // 16850 0062;	
    // (𖡐) BAMUM LETTER PHASE-A KAQ	[3A1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16850, 0x0062 };
    uint32_t const ces[9] = { 0x3A1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_312)
{
    // 16851 0021;	
    // (𖡑) BAMUM LETTER PHASE-A NSHA	[3A1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16851, 0x0021 };
    uint32_t const ces[9] = { 0x3A1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_313)
{
    // 16851 003F;	
    // (𖡑) BAMUM LETTER PHASE-A NSHA	[3A1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16851, 0x003F };
    uint32_t const ces[9] = { 0x3A1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_314)
{
    // 16851 0061;	
    // (𖡑) BAMUM LETTER PHASE-A NSHA	[3A1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16851, 0x0061 };
    uint32_t const ces[9] = { 0x3A1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_315)
{
    // 16851 0041;	
    // (𖡑) BAMUM LETTER PHASE-A NSHA	[3A1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16851, 0x0041 };
    uint32_t const ces[9] = { 0x3A1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_316)
{
    // 16851 0062;	
    // (𖡑) BAMUM LETTER PHASE-A NSHA	[3A1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16851, 0x0062 };
    uint32_t const ces[9] = { 0x3A1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_317)
{
    // 16852 0021;	
    // (𖡒) BAMUM LETTER PHASE-A VEE	[3A20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16852, 0x0021 };
    uint32_t const ces[9] = { 0x3A20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_318)
{
    // 16852 003F;	
    // (𖡒) BAMUM LETTER PHASE-A VEE	[3A20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16852, 0x003F };
    uint32_t const ces[9] = { 0x3A20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_319)
{
    // 16852 0061;	
    // (𖡒) BAMUM LETTER PHASE-A VEE	[3A20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16852, 0x0061 };
    uint32_t const ces[9] = { 0x3A20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_320)
{
    // 16852 0041;	
    // (𖡒) BAMUM LETTER PHASE-A VEE	[3A20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16852, 0x0041 };
    uint32_t const ces[9] = { 0x3A20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_321)
{
    // 16852 0062;	
    // (𖡒) BAMUM LETTER PHASE-A VEE	[3A20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16852, 0x0062 };
    uint32_t const ces[9] = { 0x3A20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_322)
{
    // 16853 0021;	
    // (𖡓) BAMUM LETTER PHASE-A LU	[3A21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16853, 0x0021 };
    uint32_t const ces[9] = { 0x3A21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_323)
{
    // 16853 003F;	
    // (𖡓) BAMUM LETTER PHASE-A LU	[3A21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16853, 0x003F };
    uint32_t const ces[9] = { 0x3A21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_324)
{
    // 16853 0061;	
    // (𖡓) BAMUM LETTER PHASE-A LU	[3A21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16853, 0x0061 };
    uint32_t const ces[9] = { 0x3A21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_325)
{
    // 16853 0041;	
    // (𖡓) BAMUM LETTER PHASE-A LU	[3A21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16853, 0x0041 };
    uint32_t const ces[9] = { 0x3A21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_326)
{
    // 16853 0062;	
    // (𖡓) BAMUM LETTER PHASE-A LU	[3A21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16853, 0x0062 };
    uint32_t const ces[9] = { 0x3A21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_327)
{
    // 16854 0021;	
    // (𖡔) BAMUM LETTER PHASE-A NEN	[3A22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16854, 0x0021 };
    uint32_t const ces[9] = { 0x3A22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_328)
{
    // 16854 003F;	
    // (𖡔) BAMUM LETTER PHASE-A NEN	[3A22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16854, 0x003F };
    uint32_t const ces[9] = { 0x3A22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_329)
{
    // 16854 0061;	
    // (𖡔) BAMUM LETTER PHASE-A NEN	[3A22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16854, 0x0061 };
    uint32_t const ces[9] = { 0x3A22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_330)
{
    // 16854 0041;	
    // (𖡔) BAMUM LETTER PHASE-A NEN	[3A22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16854, 0x0041 };
    uint32_t const ces[9] = { 0x3A22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_331)
{
    // 16854 0062;	
    // (𖡔) BAMUM LETTER PHASE-A NEN	[3A22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16854, 0x0062 };
    uint32_t const ces[9] = { 0x3A22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_332)
{
    // 16855 0021;	
    // (𖡕) BAMUM LETTER PHASE-A NAQ	[3A23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16855, 0x0021 };
    uint32_t const ces[9] = { 0x3A23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_333)
{
    // 16855 003F;	
    // (𖡕) BAMUM LETTER PHASE-A NAQ	[3A23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16855, 0x003F };
    uint32_t const ces[9] = { 0x3A23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_334)
{
    // 16855 0061;	
    // (𖡕) BAMUM LETTER PHASE-A NAQ	[3A23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16855, 0x0061 };
    uint32_t const ces[9] = { 0x3A23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_335)
{
    // 16855 0041;	
    // (𖡕) BAMUM LETTER PHASE-A NAQ	[3A23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16855, 0x0041 };
    uint32_t const ces[9] = { 0x3A23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_336)
{
    // 16855 0062;	
    // (𖡕) BAMUM LETTER PHASE-A NAQ	[3A23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16855, 0x0062 };
    uint32_t const ces[9] = { 0x3A23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_337)
{
    // 16856 0021;	
    // (𖡖) BAMUM LETTER PHASE-A MBAQ	[3A24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16856, 0x0021 };
    uint32_t const ces[9] = { 0x3A24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_338)
{
    // 16856 003F;	
    // (𖡖) BAMUM LETTER PHASE-A MBAQ	[3A24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16856, 0x003F };
    uint32_t const ces[9] = { 0x3A24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_339)
{
    // 16856 0061;	
    // (𖡖) BAMUM LETTER PHASE-A MBAQ	[3A24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16856, 0x0061 };
    uint32_t const ces[9] = { 0x3A24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_340)
{
    // 16856 0041;	
    // (𖡖) BAMUM LETTER PHASE-A MBAQ	[3A24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16856, 0x0041 };
    uint32_t const ces[9] = { 0x3A24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_341)
{
    // 16856 0062;	
    // (𖡖) BAMUM LETTER PHASE-A MBAQ	[3A24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16856, 0x0062 };
    uint32_t const ces[9] = { 0x3A24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_342)
{
    // 16857 0021;	
    // (𖡗) BAMUM LETTER PHASE-B NSHUET	[3A25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16857, 0x0021 };
    uint32_t const ces[9] = { 0x3A25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_343)
{
    // 16857 003F;	
    // (𖡗) BAMUM LETTER PHASE-B NSHUET	[3A25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16857, 0x003F };
    uint32_t const ces[9] = { 0x3A25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_344)
{
    // 16857 0061;	
    // (𖡗) BAMUM LETTER PHASE-B NSHUET	[3A25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16857, 0x0061 };
    uint32_t const ces[9] = { 0x3A25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_345)
{
    // 16857 0041;	
    // (𖡗) BAMUM LETTER PHASE-B NSHUET	[3A25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16857, 0x0041 };
    uint32_t const ces[9] = { 0x3A25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_346)
{
    // 16857 0062;	
    // (𖡗) BAMUM LETTER PHASE-B NSHUET	[3A25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16857, 0x0062 };
    uint32_t const ces[9] = { 0x3A25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_347)
{
    // 16858 0021;	
    // (𖡘) BAMUM LETTER PHASE-B TU MAEMGBIEE	[3A26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16858, 0x0021 };
    uint32_t const ces[9] = { 0x3A26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_348)
{
    // 16858 003F;	
    // (𖡘) BAMUM LETTER PHASE-B TU MAEMGBIEE	[3A26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16858, 0x003F };
    uint32_t const ces[9] = { 0x3A26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_349)
{
    // 16858 0061;	
    // (𖡘) BAMUM LETTER PHASE-B TU MAEMGBIEE	[3A26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16858, 0x0061 };
    uint32_t const ces[9] = { 0x3A26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_350)
{
    // 16858 0041;	
    // (𖡘) BAMUM LETTER PHASE-B TU MAEMGBIEE	[3A26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16858, 0x0041 };
    uint32_t const ces[9] = { 0x3A26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_351)
{
    // 16858 0062;	
    // (𖡘) BAMUM LETTER PHASE-B TU MAEMGBIEE	[3A26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16858, 0x0062 };
    uint32_t const ces[9] = { 0x3A26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_352)
{
    // 16859 0021;	
    // (𖡙) BAMUM LETTER PHASE-B SIEE	[3A27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16859, 0x0021 };
    uint32_t const ces[9] = { 0x3A27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_353)
{
    // 16859 003F;	
    // (𖡙) BAMUM LETTER PHASE-B SIEE	[3A27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16859, 0x003F };
    uint32_t const ces[9] = { 0x3A27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_354)
{
    // 16859 0061;	
    // (𖡙) BAMUM LETTER PHASE-B SIEE	[3A27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16859, 0x0061 };
    uint32_t const ces[9] = { 0x3A27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_355)
{
    // 16859 0041;	
    // (𖡙) BAMUM LETTER PHASE-B SIEE	[3A27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16859, 0x0041 };
    uint32_t const ces[9] = { 0x3A27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_356)
{
    // 16859 0062;	
    // (𖡙) BAMUM LETTER PHASE-B SIEE	[3A27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16859, 0x0062 };
    uint32_t const ces[9] = { 0x3A27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_357)
{
    // 1685A 0021;	
    // (𖡚) BAMUM LETTER PHASE-B SET TU	[3A28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685A, 0x0021 };
    uint32_t const ces[9] = { 0x3A28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_358)
{
    // 1685A 003F;	
    // (𖡚) BAMUM LETTER PHASE-B SET TU	[3A28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685A, 0x003F };
    uint32_t const ces[9] = { 0x3A28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_359)
{
    // 1685A 0061;	
    // (𖡚) BAMUM LETTER PHASE-B SET TU	[3A28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685A, 0x0061 };
    uint32_t const ces[9] = { 0x3A28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_360)
{
    // 1685A 0041;	
    // (𖡚) BAMUM LETTER PHASE-B SET TU	[3A28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1685A, 0x0041 };
    uint32_t const ces[9] = { 0x3A28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_361)
{
    // 1685A 0062;	
    // (𖡚) BAMUM LETTER PHASE-B SET TU	[3A28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685A, 0x0062 };
    uint32_t const ces[9] = { 0x3A28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_362)
{
    // 1685B 0021;	
    // (𖡛) BAMUM LETTER PHASE-B LOM NTEUM	[3A29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685B, 0x0021 };
    uint32_t const ces[9] = { 0x3A29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_363)
{
    // 1685B 003F;	
    // (𖡛) BAMUM LETTER PHASE-B LOM NTEUM	[3A29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685B, 0x003F };
    uint32_t const ces[9] = { 0x3A29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_364)
{
    // 1685B 0061;	
    // (𖡛) BAMUM LETTER PHASE-B LOM NTEUM	[3A29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685B, 0x0061 };
    uint32_t const ces[9] = { 0x3A29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_365)
{
    // 1685B 0041;	
    // (𖡛) BAMUM LETTER PHASE-B LOM NTEUM	[3A29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1685B, 0x0041 };
    uint32_t const ces[9] = { 0x3A29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_366)
{
    // 1685B 0062;	
    // (𖡛) BAMUM LETTER PHASE-B LOM NTEUM	[3A29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685B, 0x0062 };
    uint32_t const ces[9] = { 0x3A29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_367)
{
    // 1685C 0021;	
    // (𖡜) BAMUM LETTER PHASE-B MBA MAELEE	[3A2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685C, 0x0021 };
    uint32_t const ces[9] = { 0x3A2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_368)
{
    // 1685C 003F;	
    // (𖡜) BAMUM LETTER PHASE-B MBA MAELEE	[3A2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685C, 0x003F };
    uint32_t const ces[9] = { 0x3A2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_369)
{
    // 1685C 0061;	
    // (𖡜) BAMUM LETTER PHASE-B MBA MAELEE	[3A2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685C, 0x0061 };
    uint32_t const ces[9] = { 0x3A2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_370)
{
    // 1685C 0041;	
    // (𖡜) BAMUM LETTER PHASE-B MBA MAELEE	[3A2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1685C, 0x0041 };
    uint32_t const ces[9] = { 0x3A2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_371)
{
    // 1685C 0062;	
    // (𖡜) BAMUM LETTER PHASE-B MBA MAELEE	[3A2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685C, 0x0062 };
    uint32_t const ces[9] = { 0x3A2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_372)
{
    // 1685D 0021;	
    // (𖡝) BAMUM LETTER PHASE-B KIEEM	[3A2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685D, 0x0021 };
    uint32_t const ces[9] = { 0x3A2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_373)
{
    // 1685D 003F;	
    // (𖡝) BAMUM LETTER PHASE-B KIEEM	[3A2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685D, 0x003F };
    uint32_t const ces[9] = { 0x3A2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_374)
{
    // 1685D 0061;	
    // (𖡝) BAMUM LETTER PHASE-B KIEEM	[3A2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685D, 0x0061 };
    uint32_t const ces[9] = { 0x3A2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_375)
{
    // 1685D 0041;	
    // (𖡝) BAMUM LETTER PHASE-B KIEEM	[3A2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1685D, 0x0041 };
    uint32_t const ces[9] = { 0x3A2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_376)
{
    // 1685D 0062;	
    // (𖡝) BAMUM LETTER PHASE-B KIEEM	[3A2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685D, 0x0062 };
    uint32_t const ces[9] = { 0x3A2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_377)
{
    // 1685E 0021;	
    // (𖡞) BAMUM LETTER PHASE-B YEURAE	[3A2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685E, 0x0021 };
    uint32_t const ces[9] = { 0x3A2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_378)
{
    // 1685E 003F;	
    // (𖡞) BAMUM LETTER PHASE-B YEURAE	[3A2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685E, 0x003F };
    uint32_t const ces[9] = { 0x3A2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_379)
{
    // 1685E 0061;	
    // (𖡞) BAMUM LETTER PHASE-B YEURAE	[3A2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685E, 0x0061 };
    uint32_t const ces[9] = { 0x3A2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_380)
{
    // 1685E 0041;	
    // (𖡞) BAMUM LETTER PHASE-B YEURAE	[3A2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1685E, 0x0041 };
    uint32_t const ces[9] = { 0x3A2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_381)
{
    // 1685E 0062;	
    // (𖡞) BAMUM LETTER PHASE-B YEURAE	[3A2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685E, 0x0062 };
    uint32_t const ces[9] = { 0x3A2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_382)
{
    // 1685F 0021;	
    // (𖡟) BAMUM LETTER PHASE-B MBAARAE	[3A2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685F, 0x0021 };
    uint32_t const ces[9] = { 0x3A2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_383)
{
    // 1685F 003F;	
    // (𖡟) BAMUM LETTER PHASE-B MBAARAE	[3A2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685F, 0x003F };
    uint32_t const ces[9] = { 0x3A2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_384)
{
    // 1685F 0061;	
    // (𖡟) BAMUM LETTER PHASE-B MBAARAE	[3A2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685F, 0x0061 };
    uint32_t const ces[9] = { 0x3A2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_385)
{
    // 1685F 0041;	
    // (𖡟) BAMUM LETTER PHASE-B MBAARAE	[3A2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1685F, 0x0041 };
    uint32_t const ces[9] = { 0x3A2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_386)
{
    // 1685F 0062;	
    // (𖡟) BAMUM LETTER PHASE-B MBAARAE	[3A2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1685F, 0x0062 };
    uint32_t const ces[9] = { 0x3A2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_387)
{
    // 16860 0021;	
    // (𖡠) BAMUM LETTER PHASE-B KAM	[3A2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16860, 0x0021 };
    uint32_t const ces[9] = { 0x3A2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_388)
{
    // 16860 003F;	
    // (𖡠) BAMUM LETTER PHASE-B KAM	[3A2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16860, 0x003F };
    uint32_t const ces[9] = { 0x3A2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_389)
{
    // 16860 0061;	
    // (𖡠) BAMUM LETTER PHASE-B KAM	[3A2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16860, 0x0061 };
    uint32_t const ces[9] = { 0x3A2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_390)
{
    // 16860 0041;	
    // (𖡠) BAMUM LETTER PHASE-B KAM	[3A2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16860, 0x0041 };
    uint32_t const ces[9] = { 0x3A2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_391)
{
    // 16860 0062;	
    // (𖡠) BAMUM LETTER PHASE-B KAM	[3A2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16860, 0x0062 };
    uint32_t const ces[9] = { 0x3A2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_392)
{
    // 16861 0021;	
    // (𖡡) BAMUM LETTER PHASE-B PEESHI	[3A2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16861, 0x0021 };
    uint32_t const ces[9] = { 0x3A2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_393)
{
    // 16861 003F;	
    // (𖡡) BAMUM LETTER PHASE-B PEESHI	[3A2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16861, 0x003F };
    uint32_t const ces[9] = { 0x3A2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_394)
{
    // 16861 0061;	
    // (𖡡) BAMUM LETTER PHASE-B PEESHI	[3A2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16861, 0x0061 };
    uint32_t const ces[9] = { 0x3A2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_395)
{
    // 16861 0041;	
    // (𖡡) BAMUM LETTER PHASE-B PEESHI	[3A2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16861, 0x0041 };
    uint32_t const ces[9] = { 0x3A2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_396)
{
    // 16861 0062;	
    // (𖡡) BAMUM LETTER PHASE-B PEESHI	[3A2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16861, 0x0062 };
    uint32_t const ces[9] = { 0x3A2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_397)
{
    // 16862 0021;	
    // (𖡢) BAMUM LETTER PHASE-B YAFU LEERAEWA	[3A30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16862, 0x0021 };
    uint32_t const ces[9] = { 0x3A30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_398)
{
    // 16862 003F;	
    // (𖡢) BAMUM LETTER PHASE-B YAFU LEERAEWA	[3A30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16862, 0x003F };
    uint32_t const ces[9] = { 0x3A30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_399)
{
    // 16862 0061;	
    // (𖡢) BAMUM LETTER PHASE-B YAFU LEERAEWA	[3A30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16862, 0x0061 };
    uint32_t const ces[9] = { 0x3A30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_400)
{
    // 16862 0041;	
    // (𖡢) BAMUM LETTER PHASE-B YAFU LEERAEWA	[3A30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16862, 0x0041 };
    uint32_t const ces[9] = { 0x3A30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_401)
{
    // 16862 0062;	
    // (𖡢) BAMUM LETTER PHASE-B YAFU LEERAEWA	[3A30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16862, 0x0062 };
    uint32_t const ces[9] = { 0x3A30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_402)
{
    // 16863 0021;	
    // (𖡣) BAMUM LETTER PHASE-B LAM NSHUT NYAM	[3A31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16863, 0x0021 };
    uint32_t const ces[9] = { 0x3A31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_403)
{
    // 16863 003F;	
    // (𖡣) BAMUM LETTER PHASE-B LAM NSHUT NYAM	[3A31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16863, 0x003F };
    uint32_t const ces[9] = { 0x3A31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_404)
{
    // 16863 0061;	
    // (𖡣) BAMUM LETTER PHASE-B LAM NSHUT NYAM	[3A31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16863, 0x0061 };
    uint32_t const ces[9] = { 0x3A31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_405)
{
    // 16863 0041;	
    // (𖡣) BAMUM LETTER PHASE-B LAM NSHUT NYAM	[3A31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16863, 0x0041 };
    uint32_t const ces[9] = { 0x3A31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_406)
{
    // 16863 0062;	
    // (𖡣) BAMUM LETTER PHASE-B LAM NSHUT NYAM	[3A31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16863, 0x0062 };
    uint32_t const ces[9] = { 0x3A31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_407)
{
    // 16864 0021;	
    // (𖡤) BAMUM LETTER PHASE-B NTIEE SHEUOQ	[3A32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16864, 0x0021 };
    uint32_t const ces[9] = { 0x3A32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_408)
{
    // 16864 003F;	
    // (𖡤) BAMUM LETTER PHASE-B NTIEE SHEUOQ	[3A32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16864, 0x003F };
    uint32_t const ces[9] = { 0x3A32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_409)
{
    // 16864 0061;	
    // (𖡤) BAMUM LETTER PHASE-B NTIEE SHEUOQ	[3A32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16864, 0x0061 };
    uint32_t const ces[9] = { 0x3A32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_410)
{
    // 16864 0041;	
    // (𖡤) BAMUM LETTER PHASE-B NTIEE SHEUOQ	[3A32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16864, 0x0041 };
    uint32_t const ces[9] = { 0x3A32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_411)
{
    // 16864 0062;	
    // (𖡤) BAMUM LETTER PHASE-B NTIEE SHEUOQ	[3A32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16864, 0x0062 };
    uint32_t const ces[9] = { 0x3A32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_412)
{
    // 16865 0021;	
    // (𖡥) BAMUM LETTER PHASE-B NDU NJAA	[3A33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16865, 0x0021 };
    uint32_t const ces[9] = { 0x3A33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_413)
{
    // 16865 003F;	
    // (𖡥) BAMUM LETTER PHASE-B NDU NJAA	[3A33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16865, 0x003F };
    uint32_t const ces[9] = { 0x3A33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_414)
{
    // 16865 0061;	
    // (𖡥) BAMUM LETTER PHASE-B NDU NJAA	[3A33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16865, 0x0061 };
    uint32_t const ces[9] = { 0x3A33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_415)
{
    // 16865 0041;	
    // (𖡥) BAMUM LETTER PHASE-B NDU NJAA	[3A33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16865, 0x0041 };
    uint32_t const ces[9] = { 0x3A33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_416)
{
    // 16865 0062;	
    // (𖡥) BAMUM LETTER PHASE-B NDU NJAA	[3A33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16865, 0x0062 };
    uint32_t const ces[9] = { 0x3A33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_417)
{
    // 16866 0021;	
    // (𖡦) BAMUM LETTER PHASE-B GHEUGHEUAEM	[3A34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16866, 0x0021 };
    uint32_t const ces[9] = { 0x3A34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_418)
{
    // 16866 003F;	
    // (𖡦) BAMUM LETTER PHASE-B GHEUGHEUAEM	[3A34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16866, 0x003F };
    uint32_t const ces[9] = { 0x3A34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_419)
{
    // 16866 0061;	
    // (𖡦) BAMUM LETTER PHASE-B GHEUGHEUAEM	[3A34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16866, 0x0061 };
    uint32_t const ces[9] = { 0x3A34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_420)
{
    // 16866 0041;	
    // (𖡦) BAMUM LETTER PHASE-B GHEUGHEUAEM	[3A34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16866, 0x0041 };
    uint32_t const ces[9] = { 0x3A34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_421)
{
    // 16866 0062;	
    // (𖡦) BAMUM LETTER PHASE-B GHEUGHEUAEM	[3A34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16866, 0x0062 };
    uint32_t const ces[9] = { 0x3A34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_422)
{
    // 16867 0021;	
    // (𖡧) BAMUM LETTER PHASE-B PIT	[3A35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16867, 0x0021 };
    uint32_t const ces[9] = { 0x3A35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_423)
{
    // 16867 003F;	
    // (𖡧) BAMUM LETTER PHASE-B PIT	[3A35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16867, 0x003F };
    uint32_t const ces[9] = { 0x3A35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_424)
{
    // 16867 0061;	
    // (𖡧) BAMUM LETTER PHASE-B PIT	[3A35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16867, 0x0061 };
    uint32_t const ces[9] = { 0x3A35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_425)
{
    // 16867 0041;	
    // (𖡧) BAMUM LETTER PHASE-B PIT	[3A35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16867, 0x0041 };
    uint32_t const ces[9] = { 0x3A35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_426)
{
    // 16867 0062;	
    // (𖡧) BAMUM LETTER PHASE-B PIT	[3A35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16867, 0x0062 };
    uint32_t const ces[9] = { 0x3A35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_427)
{
    // 16868 0021;	
    // (𖡨) BAMUM LETTER PHASE-B TU NSIEE	[3A36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16868, 0x0021 };
    uint32_t const ces[9] = { 0x3A36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_428)
{
    // 16868 003F;	
    // (𖡨) BAMUM LETTER PHASE-B TU NSIEE	[3A36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16868, 0x003F };
    uint32_t const ces[9] = { 0x3A36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_429)
{
    // 16868 0061;	
    // (𖡨) BAMUM LETTER PHASE-B TU NSIEE	[3A36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16868, 0x0061 };
    uint32_t const ces[9] = { 0x3A36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_430)
{
    // 16868 0041;	
    // (𖡨) BAMUM LETTER PHASE-B TU NSIEE	[3A36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16868, 0x0041 };
    uint32_t const ces[9] = { 0x3A36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_431)
{
    // 16868 0062;	
    // (𖡨) BAMUM LETTER PHASE-B TU NSIEE	[3A36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16868, 0x0062 };
    uint32_t const ces[9] = { 0x3A36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_432)
{
    // 16869 0021;	
    // (𖡩) BAMUM LETTER PHASE-B SHET NJAQ	[3A37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16869, 0x0021 };
    uint32_t const ces[9] = { 0x3A37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_433)
{
    // 16869 003F;	
    // (𖡩) BAMUM LETTER PHASE-B SHET NJAQ	[3A37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16869, 0x003F };
    uint32_t const ces[9] = { 0x3A37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_434)
{
    // 16869 0061;	
    // (𖡩) BAMUM LETTER PHASE-B SHET NJAQ	[3A37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16869, 0x0061 };
    uint32_t const ces[9] = { 0x3A37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_435)
{
    // 16869 0041;	
    // (𖡩) BAMUM LETTER PHASE-B SHET NJAQ	[3A37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16869, 0x0041 };
    uint32_t const ces[9] = { 0x3A37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_436)
{
    // 16869 0062;	
    // (𖡩) BAMUM LETTER PHASE-B SHET NJAQ	[3A37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16869, 0x0062 };
    uint32_t const ces[9] = { 0x3A37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_437)
{
    // 1686A 0021;	
    // (𖡪) BAMUM LETTER PHASE-B SHEUAEQTU	[3A38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686A, 0x0021 };
    uint32_t const ces[9] = { 0x3A38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_438)
{
    // 1686A 003F;	
    // (𖡪) BAMUM LETTER PHASE-B SHEUAEQTU	[3A38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686A, 0x003F };
    uint32_t const ces[9] = { 0x3A38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_439)
{
    // 1686A 0061;	
    // (𖡪) BAMUM LETTER PHASE-B SHEUAEQTU	[3A38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686A, 0x0061 };
    uint32_t const ces[9] = { 0x3A38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_440)
{
    // 1686A 0041;	
    // (𖡪) BAMUM LETTER PHASE-B SHEUAEQTU	[3A38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1686A, 0x0041 };
    uint32_t const ces[9] = { 0x3A38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_441)
{
    // 1686A 0062;	
    // (𖡪) BAMUM LETTER PHASE-B SHEUAEQTU	[3A38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686A, 0x0062 };
    uint32_t const ces[9] = { 0x3A38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_442)
{
    // 1686B 0021;	
    // (𖡫) BAMUM LETTER PHASE-B MFON TEUAEQ	[3A39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686B, 0x0021 };
    uint32_t const ces[9] = { 0x3A39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_443)
{
    // 1686B 003F;	
    // (𖡫) BAMUM LETTER PHASE-B MFON TEUAEQ	[3A39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686B, 0x003F };
    uint32_t const ces[9] = { 0x3A39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_444)
{
    // 1686B 0061;	
    // (𖡫) BAMUM LETTER PHASE-B MFON TEUAEQ	[3A39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686B, 0x0061 };
    uint32_t const ces[9] = { 0x3A39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_445)
{
    // 1686B 0041;	
    // (𖡫) BAMUM LETTER PHASE-B MFON TEUAEQ	[3A39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1686B, 0x0041 };
    uint32_t const ces[9] = { 0x3A39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_446)
{
    // 1686B 0062;	
    // (𖡫) BAMUM LETTER PHASE-B MFON TEUAEQ	[3A39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686B, 0x0062 };
    uint32_t const ces[9] = { 0x3A39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_447)
{
    // 1686C 0021;	
    // (𖡬) BAMUM LETTER PHASE-B MBIT MBAAKET	[3A3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686C, 0x0021 };
    uint32_t const ces[9] = { 0x3A3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_448)
{
    // 1686C 003F;	
    // (𖡬) BAMUM LETTER PHASE-B MBIT MBAAKET	[3A3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686C, 0x003F };
    uint32_t const ces[9] = { 0x3A3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_449)
{
    // 1686C 0061;	
    // (𖡬) BAMUM LETTER PHASE-B MBIT MBAAKET	[3A3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686C, 0x0061 };
    uint32_t const ces[9] = { 0x3A3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_450)
{
    // 1686C 0041;	
    // (𖡬) BAMUM LETTER PHASE-B MBIT MBAAKET	[3A3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1686C, 0x0041 };
    uint32_t const ces[9] = { 0x3A3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_451)
{
    // 1686C 0062;	
    // (𖡬) BAMUM LETTER PHASE-B MBIT MBAAKET	[3A3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686C, 0x0062 };
    uint32_t const ces[9] = { 0x3A3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_452)
{
    // 1686D 0021;	
    // (𖡭) BAMUM LETTER PHASE-B NYI NTEUM	[3A3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686D, 0x0021 };
    uint32_t const ces[9] = { 0x3A3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_453)
{
    // 1686D 003F;	
    // (𖡭) BAMUM LETTER PHASE-B NYI NTEUM	[3A3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686D, 0x003F };
    uint32_t const ces[9] = { 0x3A3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_454)
{
    // 1686D 0061;	
    // (𖡭) BAMUM LETTER PHASE-B NYI NTEUM	[3A3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686D, 0x0061 };
    uint32_t const ces[9] = { 0x3A3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_455)
{
    // 1686D 0041;	
    // (𖡭) BAMUM LETTER PHASE-B NYI NTEUM	[3A3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1686D, 0x0041 };
    uint32_t const ces[9] = { 0x3A3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_456)
{
    // 1686D 0062;	
    // (𖡭) BAMUM LETTER PHASE-B NYI NTEUM	[3A3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686D, 0x0062 };
    uint32_t const ces[9] = { 0x3A3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_457)
{
    // 1686E 0021;	
    // (𖡮) BAMUM LETTER PHASE-B KEUPUQ	[3A3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686E, 0x0021 };
    uint32_t const ces[9] = { 0x3A3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_458)
{
    // 1686E 003F;	
    // (𖡮) BAMUM LETTER PHASE-B KEUPUQ	[3A3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686E, 0x003F };
    uint32_t const ces[9] = { 0x3A3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_459)
{
    // 1686E 0061;	
    // (𖡮) BAMUM LETTER PHASE-B KEUPUQ	[3A3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686E, 0x0061 };
    uint32_t const ces[9] = { 0x3A3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_460)
{
    // 1686E 0041;	
    // (𖡮) BAMUM LETTER PHASE-B KEUPUQ	[3A3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1686E, 0x0041 };
    uint32_t const ces[9] = { 0x3A3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_461)
{
    // 1686E 0062;	
    // (𖡮) BAMUM LETTER PHASE-B KEUPUQ	[3A3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686E, 0x0062 };
    uint32_t const ces[9] = { 0x3A3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_462)
{
    // 1686F 0021;	
    // (𖡯) BAMUM LETTER PHASE-B GHEUGHEN	[3A3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686F, 0x0021 };
    uint32_t const ces[9] = { 0x3A3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_463)
{
    // 1686F 003F;	
    // (𖡯) BAMUM LETTER PHASE-B GHEUGHEN	[3A3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686F, 0x003F };
    uint32_t const ces[9] = { 0x3A3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_464)
{
    // 1686F 0061;	
    // (𖡯) BAMUM LETTER PHASE-B GHEUGHEN	[3A3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686F, 0x0061 };
    uint32_t const ces[9] = { 0x3A3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_465)
{
    // 1686F 0041;	
    // (𖡯) BAMUM LETTER PHASE-B GHEUGHEN	[3A3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1686F, 0x0041 };
    uint32_t const ces[9] = { 0x3A3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_466)
{
    // 1686F 0062;	
    // (𖡯) BAMUM LETTER PHASE-B GHEUGHEN	[3A3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1686F, 0x0062 };
    uint32_t const ces[9] = { 0x3A3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_467)
{
    // 16870 0021;	
    // (𖡰) BAMUM LETTER PHASE-B KEUYEUX	[3A3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16870, 0x0021 };
    uint32_t const ces[9] = { 0x3A3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_468)
{
    // 16870 003F;	
    // (𖡰) BAMUM LETTER PHASE-B KEUYEUX	[3A3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16870, 0x003F };
    uint32_t const ces[9] = { 0x3A3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_469)
{
    // 16870 0061;	
    // (𖡰) BAMUM LETTER PHASE-B KEUYEUX	[3A3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16870, 0x0061 };
    uint32_t const ces[9] = { 0x3A3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_470)
{
    // 16870 0041;	
    // (𖡰) BAMUM LETTER PHASE-B KEUYEUX	[3A3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16870, 0x0041 };
    uint32_t const ces[9] = { 0x3A3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_471)
{
    // 16870 0062;	
    // (𖡰) BAMUM LETTER PHASE-B KEUYEUX	[3A3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16870, 0x0062 };
    uint32_t const ces[9] = { 0x3A3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_472)
{
    // 16871 0021;	
    // (𖡱) BAMUM LETTER PHASE-B LAANAE	[3A3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16871, 0x0021 };
    uint32_t const ces[9] = { 0x3A3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_473)
{
    // 16871 003F;	
    // (𖡱) BAMUM LETTER PHASE-B LAANAE	[3A3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16871, 0x003F };
    uint32_t const ces[9] = { 0x3A3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_474)
{
    // 16871 0061;	
    // (𖡱) BAMUM LETTER PHASE-B LAANAE	[3A3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16871, 0x0061 };
    uint32_t const ces[9] = { 0x3A3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_475)
{
    // 16871 0041;	
    // (𖡱) BAMUM LETTER PHASE-B LAANAE	[3A3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16871, 0x0041 };
    uint32_t const ces[9] = { 0x3A3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_476)
{
    // 16871 0062;	
    // (𖡱) BAMUM LETTER PHASE-B LAANAE	[3A3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16871, 0x0062 };
    uint32_t const ces[9] = { 0x3A3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_477)
{
    // 16872 0021;	
    // (𖡲) BAMUM LETTER PHASE-B PARUM	[3A40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16872, 0x0021 };
    uint32_t const ces[9] = { 0x3A40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_478)
{
    // 16872 003F;	
    // (𖡲) BAMUM LETTER PHASE-B PARUM	[3A40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16872, 0x003F };
    uint32_t const ces[9] = { 0x3A40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_479)
{
    // 16872 0061;	
    // (𖡲) BAMUM LETTER PHASE-B PARUM	[3A40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16872, 0x0061 };
    uint32_t const ces[9] = { 0x3A40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_480)
{
    // 16872 0041;	
    // (𖡲) BAMUM LETTER PHASE-B PARUM	[3A40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16872, 0x0041 };
    uint32_t const ces[9] = { 0x3A40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_481)
{
    // 16872 0062;	
    // (𖡲) BAMUM LETTER PHASE-B PARUM	[3A40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16872, 0x0062 };
    uint32_t const ces[9] = { 0x3A40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_482)
{
    // 16873 0021;	
    // (𖡳) BAMUM LETTER PHASE-B VEUM	[3A41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16873, 0x0021 };
    uint32_t const ces[9] = { 0x3A41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_483)
{
    // 16873 003F;	
    // (𖡳) BAMUM LETTER PHASE-B VEUM	[3A41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16873, 0x003F };
    uint32_t const ces[9] = { 0x3A41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_484)
{
    // 16873 0061;	
    // (𖡳) BAMUM LETTER PHASE-B VEUM	[3A41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16873, 0x0061 };
    uint32_t const ces[9] = { 0x3A41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_485)
{
    // 16873 0041;	
    // (𖡳) BAMUM LETTER PHASE-B VEUM	[3A41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16873, 0x0041 };
    uint32_t const ces[9] = { 0x3A41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_486)
{
    // 16873 0062;	
    // (𖡳) BAMUM LETTER PHASE-B VEUM	[3A41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16873, 0x0062 };
    uint32_t const ces[9] = { 0x3A41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_487)
{
    // 16874 0021;	
    // (𖡴) BAMUM LETTER PHASE-B NGKINDI MVOP	[3A42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16874, 0x0021 };
    uint32_t const ces[9] = { 0x3A42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_488)
{
    // 16874 003F;	
    // (𖡴) BAMUM LETTER PHASE-B NGKINDI MVOP	[3A42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16874, 0x003F };
    uint32_t const ces[9] = { 0x3A42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_489)
{
    // 16874 0061;	
    // (𖡴) BAMUM LETTER PHASE-B NGKINDI MVOP	[3A42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16874, 0x0061 };
    uint32_t const ces[9] = { 0x3A42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_490)
{
    // 16874 0041;	
    // (𖡴) BAMUM LETTER PHASE-B NGKINDI MVOP	[3A42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16874, 0x0041 };
    uint32_t const ces[9] = { 0x3A42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_491)
{
    // 16874 0062;	
    // (𖡴) BAMUM LETTER PHASE-B NGKINDI MVOP	[3A42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16874, 0x0062 };
    uint32_t const ces[9] = { 0x3A42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_492)
{
    // 16875 0021;	
    // (𖡵) BAMUM LETTER PHASE-B NGGEU MBU	[3A43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16875, 0x0021 };
    uint32_t const ces[9] = { 0x3A43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_493)
{
    // 16875 003F;	
    // (𖡵) BAMUM LETTER PHASE-B NGGEU MBU	[3A43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16875, 0x003F };
    uint32_t const ces[9] = { 0x3A43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_494)
{
    // 16875 0061;	
    // (𖡵) BAMUM LETTER PHASE-B NGGEU MBU	[3A43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16875, 0x0061 };
    uint32_t const ces[9] = { 0x3A43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_495)
{
    // 16875 0041;	
    // (𖡵) BAMUM LETTER PHASE-B NGGEU MBU	[3A43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16875, 0x0041 };
    uint32_t const ces[9] = { 0x3A43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_496)
{
    // 16875 0062;	
    // (𖡵) BAMUM LETTER PHASE-B NGGEU MBU	[3A43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16875, 0x0062 };
    uint32_t const ces[9] = { 0x3A43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_497)
{
    // 16876 0021;	
    // (𖡶) BAMUM LETTER PHASE-B WUAET	[3A44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16876, 0x0021 };
    uint32_t const ces[9] = { 0x3A44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_498)
{
    // 16876 003F;	
    // (𖡶) BAMUM LETTER PHASE-B WUAET	[3A44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16876, 0x003F };
    uint32_t const ces[9] = { 0x3A44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_232_499)
{
    // 16876 0061;	
    // (𖡶) BAMUM LETTER PHASE-B WUAET	[3A44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16876, 0x0061 };
    uint32_t const ces[9] = { 0x3A44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

