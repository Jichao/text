// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_181_000)
{
    // 11627 0061;	
    // (𑘧) MODI LETTER YA	[2C96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11627, 0x0061 };
    uint32_t const ces[9] = { 0x2C96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_001)
{
    // 11627 0041;	
    // (𑘧) MODI LETTER YA	[2C96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11627, 0x0041 };
    uint32_t const ces[9] = { 0x2C96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_002)
{
    // 11627 0062;	
    // (𑘧) MODI LETTER YA	[2C96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11627, 0x0062 };
    uint32_t const ces[9] = { 0x2C96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_003)
{
    // 11628 0021;	
    // (𑘨) MODI LETTER RA	[2C97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11628, 0x0021 };
    uint32_t const ces[9] = { 0x2C97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_004)
{
    // 11628 003F;	
    // (𑘨) MODI LETTER RA	[2C97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11628, 0x003F };
    uint32_t const ces[9] = { 0x2C97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_005)
{
    // 11628 0061;	
    // (𑘨) MODI LETTER RA	[2C97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11628, 0x0061 };
    uint32_t const ces[9] = { 0x2C97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_006)
{
    // 11628 0041;	
    // (𑘨) MODI LETTER RA	[2C97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11628, 0x0041 };
    uint32_t const ces[9] = { 0x2C97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_007)
{
    // 11628 0062;	
    // (𑘨) MODI LETTER RA	[2C97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11628, 0x0062 };
    uint32_t const ces[9] = { 0x2C97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_008)
{
    // 11629 0021;	
    // (𑘩) MODI LETTER LA	[2C98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11629, 0x0021 };
    uint32_t const ces[9] = { 0x2C98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_009)
{
    // 11629 003F;	
    // (𑘩) MODI LETTER LA	[2C98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11629, 0x003F };
    uint32_t const ces[9] = { 0x2C98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_010)
{
    // 11629 0061;	
    // (𑘩) MODI LETTER LA	[2C98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11629, 0x0061 };
    uint32_t const ces[9] = { 0x2C98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_011)
{
    // 11629 0041;	
    // (𑘩) MODI LETTER LA	[2C98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11629, 0x0041 };
    uint32_t const ces[9] = { 0x2C98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_012)
{
    // 11629 0062;	
    // (𑘩) MODI LETTER LA	[2C98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11629, 0x0062 };
    uint32_t const ces[9] = { 0x2C98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_013)
{
    // 1162A 0021;	
    // (𑘪) MODI LETTER VA	[2C99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162A, 0x0021 };
    uint32_t const ces[9] = { 0x2C99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_014)
{
    // 1162A 003F;	
    // (𑘪) MODI LETTER VA	[2C99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162A, 0x003F };
    uint32_t const ces[9] = { 0x2C99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_015)
{
    // 1162A 0061;	
    // (𑘪) MODI LETTER VA	[2C99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162A, 0x0061 };
    uint32_t const ces[9] = { 0x2C99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_016)
{
    // 1162A 0041;	
    // (𑘪) MODI LETTER VA	[2C99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1162A, 0x0041 };
    uint32_t const ces[9] = { 0x2C99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_017)
{
    // 1162A 0062;	
    // (𑘪) MODI LETTER VA	[2C99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162A, 0x0062 };
    uint32_t const ces[9] = { 0x2C99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_018)
{
    // 1162B 0021;	
    // (𑘫) MODI LETTER SHA	[2C9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162B, 0x0021 };
    uint32_t const ces[9] = { 0x2C9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_019)
{
    // 1162B 003F;	
    // (𑘫) MODI LETTER SHA	[2C9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162B, 0x003F };
    uint32_t const ces[9] = { 0x2C9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_020)
{
    // 1162B 0061;	
    // (𑘫) MODI LETTER SHA	[2C9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162B, 0x0061 };
    uint32_t const ces[9] = { 0x2C9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_021)
{
    // 1162B 0041;	
    // (𑘫) MODI LETTER SHA	[2C9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1162B, 0x0041 };
    uint32_t const ces[9] = { 0x2C9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_022)
{
    // 1162B 0062;	
    // (𑘫) MODI LETTER SHA	[2C9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162B, 0x0062 };
    uint32_t const ces[9] = { 0x2C9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_023)
{
    // 1162C 0021;	
    // (𑘬) MODI LETTER SSA	[2C9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162C, 0x0021 };
    uint32_t const ces[9] = { 0x2C9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_024)
{
    // 1162C 003F;	
    // (𑘬) MODI LETTER SSA	[2C9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162C, 0x003F };
    uint32_t const ces[9] = { 0x2C9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_025)
{
    // 1162C 0061;	
    // (𑘬) MODI LETTER SSA	[2C9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162C, 0x0061 };
    uint32_t const ces[9] = { 0x2C9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_026)
{
    // 1162C 0041;	
    // (𑘬) MODI LETTER SSA	[2C9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1162C, 0x0041 };
    uint32_t const ces[9] = { 0x2C9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_027)
{
    // 1162C 0062;	
    // (𑘬) MODI LETTER SSA	[2C9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162C, 0x0062 };
    uint32_t const ces[9] = { 0x2C9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_028)
{
    // 1162D 0021;	
    // (𑘭) MODI LETTER SA	[2C9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162D, 0x0021 };
    uint32_t const ces[9] = { 0x2C9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_029)
{
    // 1162D 003F;	
    // (𑘭) MODI LETTER SA	[2C9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162D, 0x003F };
    uint32_t const ces[9] = { 0x2C9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_030)
{
    // 1162D 0061;	
    // (𑘭) MODI LETTER SA	[2C9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162D, 0x0061 };
    uint32_t const ces[9] = { 0x2C9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_031)
{
    // 1162D 0041;	
    // (𑘭) MODI LETTER SA	[2C9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1162D, 0x0041 };
    uint32_t const ces[9] = { 0x2C9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_032)
{
    // 1162D 0062;	
    // (𑘭) MODI LETTER SA	[2C9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162D, 0x0062 };
    uint32_t const ces[9] = { 0x2C9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_033)
{
    // 1162E 0021;	
    // (𑘮) MODI LETTER HA	[2C9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162E, 0x0021 };
    uint32_t const ces[9] = { 0x2C9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_034)
{
    // 1162E 003F;	
    // (𑘮) MODI LETTER HA	[2C9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162E, 0x003F };
    uint32_t const ces[9] = { 0x2C9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_035)
{
    // 1162E 0061;	
    // (𑘮) MODI LETTER HA	[2C9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162E, 0x0061 };
    uint32_t const ces[9] = { 0x2C9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_036)
{
    // 1162E 0041;	
    // (𑘮) MODI LETTER HA	[2C9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1162E, 0x0041 };
    uint32_t const ces[9] = { 0x2C9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_037)
{
    // 1162E 0062;	
    // (𑘮) MODI LETTER HA	[2C9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162E, 0x0062 };
    uint32_t const ces[9] = { 0x2C9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_038)
{
    // 1162F 0021;	
    // (𑘯) MODI LETTER LLA	[2C9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162F, 0x0021 };
    uint32_t const ces[9] = { 0x2C9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_039)
{
    // 1162F 003F;	
    // (𑘯) MODI LETTER LLA	[2C9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162F, 0x003F };
    uint32_t const ces[9] = { 0x2C9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_040)
{
    // 1162F 0061;	
    // (𑘯) MODI LETTER LLA	[2C9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162F, 0x0061 };
    uint32_t const ces[9] = { 0x2C9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_041)
{
    // 1162F 0041;	
    // (𑘯) MODI LETTER LLA	[2C9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1162F, 0x0041 };
    uint32_t const ces[9] = { 0x2C9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_042)
{
    // 1162F 0062;	
    // (𑘯) MODI LETTER LLA	[2C9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1162F, 0x0062 };
    uint32_t const ces[9] = { 0x2C9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_043)
{
    // 11630 0021;	
    // (𑘰) MODI VOWEL SIGN AA	[2C9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11630, 0x0021 };
    uint32_t const ces[9] = { 0x2C9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_044)
{
    // 11630 003F;	
    // (𑘰) MODI VOWEL SIGN AA	[2C9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11630, 0x003F };
    uint32_t const ces[9] = { 0x2C9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_045)
{
    // 11630 0061;	
    // (𑘰) MODI VOWEL SIGN AA	[2C9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11630, 0x0061 };
    uint32_t const ces[9] = { 0x2C9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_046)
{
    // 11630 0041;	
    // (𑘰) MODI VOWEL SIGN AA	[2C9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11630, 0x0041 };
    uint32_t const ces[9] = { 0x2C9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_047)
{
    // 11630 0062;	
    // (𑘰) MODI VOWEL SIGN AA	[2C9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11630, 0x0062 };
    uint32_t const ces[9] = { 0x2C9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_048)
{
    // 11631 0021;	
    // (𑘱) MODI VOWEL SIGN I	[2CA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11631, 0x0021 };
    uint32_t const ces[9] = { 0x2CA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_049)
{
    // 11631 003F;	
    // (𑘱) MODI VOWEL SIGN I	[2CA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11631, 0x003F };
    uint32_t const ces[9] = { 0x2CA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_050)
{
    // 11631 0061;	
    // (𑘱) MODI VOWEL SIGN I	[2CA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11631, 0x0061 };
    uint32_t const ces[9] = { 0x2CA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_051)
{
    // 11631 0041;	
    // (𑘱) MODI VOWEL SIGN I	[2CA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11631, 0x0041 };
    uint32_t const ces[9] = { 0x2CA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_052)
{
    // 11631 0062;	
    // (𑘱) MODI VOWEL SIGN I	[2CA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11631, 0x0062 };
    uint32_t const ces[9] = { 0x2CA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_053)
{
    // 11632 0021;	
    // (𑘲) MODI VOWEL SIGN II	[2CA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11632, 0x0021 };
    uint32_t const ces[9] = { 0x2CA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_054)
{
    // 11632 003F;	
    // (𑘲) MODI VOWEL SIGN II	[2CA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11632, 0x003F };
    uint32_t const ces[9] = { 0x2CA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_055)
{
    // 11632 0061;	
    // (𑘲) MODI VOWEL SIGN II	[2CA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11632, 0x0061 };
    uint32_t const ces[9] = { 0x2CA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_056)
{
    // 11632 0041;	
    // (𑘲) MODI VOWEL SIGN II	[2CA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11632, 0x0041 };
    uint32_t const ces[9] = { 0x2CA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_057)
{
    // 11632 0062;	
    // (𑘲) MODI VOWEL SIGN II	[2CA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11632, 0x0062 };
    uint32_t const ces[9] = { 0x2CA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_058)
{
    // 11633 0021;	
    // (𑘳) MODI VOWEL SIGN U	[2CA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11633, 0x0021 };
    uint32_t const ces[9] = { 0x2CA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_059)
{
    // 11633 003F;	
    // (𑘳) MODI VOWEL SIGN U	[2CA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11633, 0x003F };
    uint32_t const ces[9] = { 0x2CA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_060)
{
    // 11633 0061;	
    // (𑘳) MODI VOWEL SIGN U	[2CA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11633, 0x0061 };
    uint32_t const ces[9] = { 0x2CA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_061)
{
    // 11633 0041;	
    // (𑘳) MODI VOWEL SIGN U	[2CA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11633, 0x0041 };
    uint32_t const ces[9] = { 0x2CA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_062)
{
    // 11633 0062;	
    // (𑘳) MODI VOWEL SIGN U	[2CA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11633, 0x0062 };
    uint32_t const ces[9] = { 0x2CA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_063)
{
    // 11634 0021;	
    // (𑘴) MODI VOWEL SIGN UU	[2CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11634, 0x0021 };
    uint32_t const ces[9] = { 0x2CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_064)
{
    // 11634 003F;	
    // (𑘴) MODI VOWEL SIGN UU	[2CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11634, 0x003F };
    uint32_t const ces[9] = { 0x2CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_065)
{
    // 11634 0061;	
    // (𑘴) MODI VOWEL SIGN UU	[2CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11634, 0x0061 };
    uint32_t const ces[9] = { 0x2CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_066)
{
    // 11634 0041;	
    // (𑘴) MODI VOWEL SIGN UU	[2CA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11634, 0x0041 };
    uint32_t const ces[9] = { 0x2CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_067)
{
    // 11634 0062;	
    // (𑘴) MODI VOWEL SIGN UU	[2CA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11634, 0x0062 };
    uint32_t const ces[9] = { 0x2CA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_068)
{
    // 11635 0021;	
    // (𑘵) MODI VOWEL SIGN VOCALIC R	[2CA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11635, 0x0021 };
    uint32_t const ces[9] = { 0x2CA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_069)
{
    // 11635 003F;	
    // (𑘵) MODI VOWEL SIGN VOCALIC R	[2CA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11635, 0x003F };
    uint32_t const ces[9] = { 0x2CA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_070)
{
    // 11635 0061;	
    // (𑘵) MODI VOWEL SIGN VOCALIC R	[2CA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11635, 0x0061 };
    uint32_t const ces[9] = { 0x2CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_071)
{
    // 11635 0041;	
    // (𑘵) MODI VOWEL SIGN VOCALIC R	[2CA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11635, 0x0041 };
    uint32_t const ces[9] = { 0x2CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_072)
{
    // 11635 0062;	
    // (𑘵) MODI VOWEL SIGN VOCALIC R	[2CA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11635, 0x0062 };
    uint32_t const ces[9] = { 0x2CA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_073)
{
    // 11636 0021;	
    // (𑘶) MODI VOWEL SIGN VOCALIC RR	[2CA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11636, 0x0021 };
    uint32_t const ces[9] = { 0x2CA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_074)
{
    // 11636 003F;	
    // (𑘶) MODI VOWEL SIGN VOCALIC RR	[2CA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11636, 0x003F };
    uint32_t const ces[9] = { 0x2CA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_075)
{
    // 11636 0061;	
    // (𑘶) MODI VOWEL SIGN VOCALIC RR	[2CA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11636, 0x0061 };
    uint32_t const ces[9] = { 0x2CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_076)
{
    // 11636 0041;	
    // (𑘶) MODI VOWEL SIGN VOCALIC RR	[2CA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11636, 0x0041 };
    uint32_t const ces[9] = { 0x2CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_077)
{
    // 11636 0062;	
    // (𑘶) MODI VOWEL SIGN VOCALIC RR	[2CA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11636, 0x0062 };
    uint32_t const ces[9] = { 0x2CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_078)
{
    // 11637 0021;	
    // (𑘷) MODI VOWEL SIGN VOCALIC L	[2CA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11637, 0x0021 };
    uint32_t const ces[9] = { 0x2CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_079)
{
    // 11637 003F;	
    // (𑘷) MODI VOWEL SIGN VOCALIC L	[2CA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11637, 0x003F };
    uint32_t const ces[9] = { 0x2CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_080)
{
    // 11637 0061;	
    // (𑘷) MODI VOWEL SIGN VOCALIC L	[2CA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11637, 0x0061 };
    uint32_t const ces[9] = { 0x2CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_081)
{
    // 11637 0041;	
    // (𑘷) MODI VOWEL SIGN VOCALIC L	[2CA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11637, 0x0041 };
    uint32_t const ces[9] = { 0x2CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_082)
{
    // 11637 0062;	
    // (𑘷) MODI VOWEL SIGN VOCALIC L	[2CA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11637, 0x0062 };
    uint32_t const ces[9] = { 0x2CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_083)
{
    // 11638 0021;	
    // (𑘸) MODI VOWEL SIGN VOCALIC LL	[2CA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11638, 0x0021 };
    uint32_t const ces[9] = { 0x2CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_084)
{
    // 11638 003F;	
    // (𑘸) MODI VOWEL SIGN VOCALIC LL	[2CA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11638, 0x003F };
    uint32_t const ces[9] = { 0x2CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_085)
{
    // 11638 0061;	
    // (𑘸) MODI VOWEL SIGN VOCALIC LL	[2CA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11638, 0x0061 };
    uint32_t const ces[9] = { 0x2CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_086)
{
    // 11638 0041;	
    // (𑘸) MODI VOWEL SIGN VOCALIC LL	[2CA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11638, 0x0041 };
    uint32_t const ces[9] = { 0x2CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_087)
{
    // 11638 0062;	
    // (𑘸) MODI VOWEL SIGN VOCALIC LL	[2CA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11638, 0x0062 };
    uint32_t const ces[9] = { 0x2CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_088)
{
    // 11639 0021;	
    // (𑘹) MODI VOWEL SIGN E	[2CA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11639, 0x0021 };
    uint32_t const ces[9] = { 0x2CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_089)
{
    // 11639 003F;	
    // (𑘹) MODI VOWEL SIGN E	[2CA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11639, 0x003F };
    uint32_t const ces[9] = { 0x2CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_090)
{
    // 11639 0061;	
    // (𑘹) MODI VOWEL SIGN E	[2CA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11639, 0x0061 };
    uint32_t const ces[9] = { 0x2CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_091)
{
    // 11639 0041;	
    // (𑘹) MODI VOWEL SIGN E	[2CA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11639, 0x0041 };
    uint32_t const ces[9] = { 0x2CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_092)
{
    // 11639 0062;	
    // (𑘹) MODI VOWEL SIGN E	[2CA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11639, 0x0062 };
    uint32_t const ces[9] = { 0x2CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_093)
{
    // 1163A 0021;	
    // (𑘺) MODI VOWEL SIGN AI	[2CA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1163A, 0x0021 };
    uint32_t const ces[9] = { 0x2CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_094)
{
    // 1163A 003F;	
    // (𑘺) MODI VOWEL SIGN AI	[2CA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1163A, 0x003F };
    uint32_t const ces[9] = { 0x2CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_095)
{
    // 1163A 0061;	
    // (𑘺) MODI VOWEL SIGN AI	[2CA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1163A, 0x0061 };
    uint32_t const ces[9] = { 0x2CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_096)
{
    // 1163A 0041;	
    // (𑘺) MODI VOWEL SIGN AI	[2CA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1163A, 0x0041 };
    uint32_t const ces[9] = { 0x2CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_097)
{
    // 1163A 0062;	
    // (𑘺) MODI VOWEL SIGN AI	[2CA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1163A, 0x0062 };
    uint32_t const ces[9] = { 0x2CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_098)
{
    // 1163B 0021;	
    // (𑘻) MODI VOWEL SIGN O	[2CAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1163B, 0x0021 };
    uint32_t const ces[9] = { 0x2CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_099)
{
    // 1163B 003F;	
    // (𑘻) MODI VOWEL SIGN O	[2CAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1163B, 0x003F };
    uint32_t const ces[9] = { 0x2CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_100)
{
    // 1163B 0061;	
    // (𑘻) MODI VOWEL SIGN O	[2CAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1163B, 0x0061 };
    uint32_t const ces[9] = { 0x2CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_101)
{
    // 1163B 0041;	
    // (𑘻) MODI VOWEL SIGN O	[2CAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1163B, 0x0041 };
    uint32_t const ces[9] = { 0x2CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_102)
{
    // 1163B 0062;	
    // (𑘻) MODI VOWEL SIGN O	[2CAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1163B, 0x0062 };
    uint32_t const ces[9] = { 0x2CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_103)
{
    // 1163C 0021;	
    // (𑘼) MODI VOWEL SIGN AU	[2CAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1163C, 0x0021 };
    uint32_t const ces[9] = { 0x2CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_104)
{
    // 1163C 003F;	
    // (𑘼) MODI VOWEL SIGN AU	[2CAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1163C, 0x003F };
    uint32_t const ces[9] = { 0x2CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_105)
{
    // 1163C 0061;	
    // (𑘼) MODI VOWEL SIGN AU	[2CAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1163C, 0x0061 };
    uint32_t const ces[9] = { 0x2CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_106)
{
    // 1163C 0041;	
    // (𑘼) MODI VOWEL SIGN AU	[2CAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1163C, 0x0041 };
    uint32_t const ces[9] = { 0x2CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_107)
{
    // 1163C 0062;	
    // (𑘼) MODI VOWEL SIGN AU	[2CAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1163C, 0x0062 };
    uint32_t const ces[9] = { 0x2CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_108)
{
    // 0334 1163F;	
    // (𑘿) MODI SIGN VIRAMA	[2CAC | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1163F };
    uint32_t const ces[8] = { 0x2CAC, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_109)
{
    // 1163F 0334;	
    // (𑘿) MODI SIGN VIRAMA	[2CAC | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1163F, 0x0334 };
    uint32_t const ces[8] = { 0x2CAC, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_110)
{
    // 1163F 0021;	
    // (𑘿) MODI SIGN VIRAMA	[2CAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1163F, 0x0021 };
    uint32_t const ces[9] = { 0x2CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_111)
{
    // 1163F 003F;	
    // (𑘿) MODI SIGN VIRAMA	[2CAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1163F, 0x003F };
    uint32_t const ces[9] = { 0x2CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_112)
{
    // 1163F 0061;	
    // (𑘿) MODI SIGN VIRAMA	[2CAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1163F, 0x0061 };
    uint32_t const ces[9] = { 0x2CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_113)
{
    // 1163F 0041;	
    // (𑘿) MODI SIGN VIRAMA	[2CAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1163F, 0x0041 };
    uint32_t const ces[9] = { 0x2CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_114)
{
    // 1163F 0062;	
    // (𑘿) MODI SIGN VIRAMA	[2CAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1163F, 0x0062 };
    uint32_t const ces[9] = { 0x2CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_115)
{
    // 11644 0021;	
    // (𑙄) MODI SIGN HUVA	[2CAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11644, 0x0021 };
    uint32_t const ces[9] = { 0x2CAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_116)
{
    // 11644 003F;	
    // (𑙄) MODI SIGN HUVA	[2CAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11644, 0x003F };
    uint32_t const ces[9] = { 0x2CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_117)
{
    // 11644 0061;	
    // (𑙄) MODI SIGN HUVA	[2CAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11644, 0x0061 };
    uint32_t const ces[9] = { 0x2CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_118)
{
    // 11644 0041;	
    // (𑙄) MODI SIGN HUVA	[2CAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11644, 0x0041 };
    uint32_t const ces[9] = { 0x2CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_119)
{
    // 11644 0062;	
    // (𑙄) MODI SIGN HUVA	[2CAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11644, 0x0062 };
    uint32_t const ces[9] = { 0x2CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_120)
{
    // 11680 0021;	
    // (𑚀) TAKRI LETTER A	[2CAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11680, 0x0021 };
    uint32_t const ces[9] = { 0x2CAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_121)
{
    // 11680 003F;	
    // (𑚀) TAKRI LETTER A	[2CAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11680, 0x003F };
    uint32_t const ces[9] = { 0x2CAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_122)
{
    // 11680 0061;	
    // (𑚀) TAKRI LETTER A	[2CAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11680, 0x0061 };
    uint32_t const ces[9] = { 0x2CAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_123)
{
    // 11680 0041;	
    // (𑚀) TAKRI LETTER A	[2CAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11680, 0x0041 };
    uint32_t const ces[9] = { 0x2CAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_124)
{
    // 11680 0062;	
    // (𑚀) TAKRI LETTER A	[2CAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11680, 0x0062 };
    uint32_t const ces[9] = { 0x2CAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_125)
{
    // 11681 0021;	
    // (𑚁) TAKRI LETTER AA	[2CAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11681, 0x0021 };
    uint32_t const ces[9] = { 0x2CAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_126)
{
    // 11681 003F;	
    // (𑚁) TAKRI LETTER AA	[2CAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11681, 0x003F };
    uint32_t const ces[9] = { 0x2CAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_127)
{
    // 11681 0061;	
    // (𑚁) TAKRI LETTER AA	[2CAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11681, 0x0061 };
    uint32_t const ces[9] = { 0x2CAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_128)
{
    // 11681 0041;	
    // (𑚁) TAKRI LETTER AA	[2CAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11681, 0x0041 };
    uint32_t const ces[9] = { 0x2CAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_129)
{
    // 11681 0062;	
    // (𑚁) TAKRI LETTER AA	[2CAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11681, 0x0062 };
    uint32_t const ces[9] = { 0x2CAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_130)
{
    // 11682 0021;	
    // (𑚂) TAKRI LETTER I	[2CB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11682, 0x0021 };
    uint32_t const ces[9] = { 0x2CB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_131)
{
    // 11682 003F;	
    // (𑚂) TAKRI LETTER I	[2CB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11682, 0x003F };
    uint32_t const ces[9] = { 0x2CB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_132)
{
    // 11682 0061;	
    // (𑚂) TAKRI LETTER I	[2CB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11682, 0x0061 };
    uint32_t const ces[9] = { 0x2CB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_133)
{
    // 11682 0041;	
    // (𑚂) TAKRI LETTER I	[2CB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11682, 0x0041 };
    uint32_t const ces[9] = { 0x2CB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_134)
{
    // 11682 0062;	
    // (𑚂) TAKRI LETTER I	[2CB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11682, 0x0062 };
    uint32_t const ces[9] = { 0x2CB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_135)
{
    // 11683 0021;	
    // (𑚃) TAKRI LETTER II	[2CB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11683, 0x0021 };
    uint32_t const ces[9] = { 0x2CB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_136)
{
    // 11683 003F;	
    // (𑚃) TAKRI LETTER II	[2CB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11683, 0x003F };
    uint32_t const ces[9] = { 0x2CB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_137)
{
    // 11683 0061;	
    // (𑚃) TAKRI LETTER II	[2CB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11683, 0x0061 };
    uint32_t const ces[9] = { 0x2CB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_138)
{
    // 11683 0041;	
    // (𑚃) TAKRI LETTER II	[2CB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11683, 0x0041 };
    uint32_t const ces[9] = { 0x2CB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_139)
{
    // 11683 0062;	
    // (𑚃) TAKRI LETTER II	[2CB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11683, 0x0062 };
    uint32_t const ces[9] = { 0x2CB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_140)
{
    // 11684 0021;	
    // (𑚄) TAKRI LETTER U	[2CB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11684, 0x0021 };
    uint32_t const ces[9] = { 0x2CB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_141)
{
    // 11684 003F;	
    // (𑚄) TAKRI LETTER U	[2CB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11684, 0x003F };
    uint32_t const ces[9] = { 0x2CB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_142)
{
    // 11684 0061;	
    // (𑚄) TAKRI LETTER U	[2CB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11684, 0x0061 };
    uint32_t const ces[9] = { 0x2CB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_143)
{
    // 11684 0041;	
    // (𑚄) TAKRI LETTER U	[2CB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11684, 0x0041 };
    uint32_t const ces[9] = { 0x2CB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_144)
{
    // 11684 0062;	
    // (𑚄) TAKRI LETTER U	[2CB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11684, 0x0062 };
    uint32_t const ces[9] = { 0x2CB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_145)
{
    // 11685 0021;	
    // (𑚅) TAKRI LETTER UU	[2CB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11685, 0x0021 };
    uint32_t const ces[9] = { 0x2CB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_146)
{
    // 11685 003F;	
    // (𑚅) TAKRI LETTER UU	[2CB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11685, 0x003F };
    uint32_t const ces[9] = { 0x2CB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_147)
{
    // 11685 0061;	
    // (𑚅) TAKRI LETTER UU	[2CB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11685, 0x0061 };
    uint32_t const ces[9] = { 0x2CB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_148)
{
    // 11685 0041;	
    // (𑚅) TAKRI LETTER UU	[2CB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11685, 0x0041 };
    uint32_t const ces[9] = { 0x2CB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_149)
{
    // 11685 0062;	
    // (𑚅) TAKRI LETTER UU	[2CB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11685, 0x0062 };
    uint32_t const ces[9] = { 0x2CB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_150)
{
    // 11686 0021;	
    // (𑚆) TAKRI LETTER E	[2CB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11686, 0x0021 };
    uint32_t const ces[9] = { 0x2CB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_151)
{
    // 11686 003F;	
    // (𑚆) TAKRI LETTER E	[2CB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11686, 0x003F };
    uint32_t const ces[9] = { 0x2CB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_152)
{
    // 11686 0061;	
    // (𑚆) TAKRI LETTER E	[2CB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11686, 0x0061 };
    uint32_t const ces[9] = { 0x2CB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_153)
{
    // 11686 0041;	
    // (𑚆) TAKRI LETTER E	[2CB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11686, 0x0041 };
    uint32_t const ces[9] = { 0x2CB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_154)
{
    // 11686 0062;	
    // (𑚆) TAKRI LETTER E	[2CB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11686, 0x0062 };
    uint32_t const ces[9] = { 0x2CB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_155)
{
    // 11687 0021;	
    // (𑚇) TAKRI LETTER AI	[2CB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11687, 0x0021 };
    uint32_t const ces[9] = { 0x2CB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_156)
{
    // 11687 003F;	
    // (𑚇) TAKRI LETTER AI	[2CB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11687, 0x003F };
    uint32_t const ces[9] = { 0x2CB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_157)
{
    // 11687 0061;	
    // (𑚇) TAKRI LETTER AI	[2CB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11687, 0x0061 };
    uint32_t const ces[9] = { 0x2CB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_158)
{
    // 11687 0041;	
    // (𑚇) TAKRI LETTER AI	[2CB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11687, 0x0041 };
    uint32_t const ces[9] = { 0x2CB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_159)
{
    // 11687 0062;	
    // (𑚇) TAKRI LETTER AI	[2CB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11687, 0x0062 };
    uint32_t const ces[9] = { 0x2CB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_160)
{
    // 11688 0021;	
    // (𑚈) TAKRI LETTER O	[2CB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11688, 0x0021 };
    uint32_t const ces[9] = { 0x2CB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_161)
{
    // 11688 003F;	
    // (𑚈) TAKRI LETTER O	[2CB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11688, 0x003F };
    uint32_t const ces[9] = { 0x2CB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_162)
{
    // 11688 0061;	
    // (𑚈) TAKRI LETTER O	[2CB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11688, 0x0061 };
    uint32_t const ces[9] = { 0x2CB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_163)
{
    // 11688 0041;	
    // (𑚈) TAKRI LETTER O	[2CB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11688, 0x0041 };
    uint32_t const ces[9] = { 0x2CB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_164)
{
    // 11688 0062;	
    // (𑚈) TAKRI LETTER O	[2CB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11688, 0x0062 };
    uint32_t const ces[9] = { 0x2CB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_165)
{
    // 11689 0021;	
    // (𑚉) TAKRI LETTER AU	[2CB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11689, 0x0021 };
    uint32_t const ces[9] = { 0x2CB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_166)
{
    // 11689 003F;	
    // (𑚉) TAKRI LETTER AU	[2CB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11689, 0x003F };
    uint32_t const ces[9] = { 0x2CB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_167)
{
    // 11689 0061;	
    // (𑚉) TAKRI LETTER AU	[2CB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11689, 0x0061 };
    uint32_t const ces[9] = { 0x2CB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_168)
{
    // 11689 0041;	
    // (𑚉) TAKRI LETTER AU	[2CB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11689, 0x0041 };
    uint32_t const ces[9] = { 0x2CB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_169)
{
    // 11689 0062;	
    // (𑚉) TAKRI LETTER AU	[2CB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11689, 0x0062 };
    uint32_t const ces[9] = { 0x2CB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_170)
{
    // 116A8 0021;	
    // (𑚨) TAKRI LETTER SA	[2CB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A8, 0x0021 };
    uint32_t const ces[9] = { 0x2CB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_171)
{
    // 116A8 003F;	
    // (𑚨) TAKRI LETTER SA	[2CB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A8, 0x003F };
    uint32_t const ces[9] = { 0x2CB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_172)
{
    // 116A8 0061;	
    // (𑚨) TAKRI LETTER SA	[2CB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A8, 0x0061 };
    uint32_t const ces[9] = { 0x2CB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_173)
{
    // 116A8 0041;	
    // (𑚨) TAKRI LETTER SA	[2CB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116A8, 0x0041 };
    uint32_t const ces[9] = { 0x2CB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_174)
{
    // 116A8 0062;	
    // (𑚨) TAKRI LETTER SA	[2CB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A8, 0x0062 };
    uint32_t const ces[9] = { 0x2CB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_175)
{
    // 116A7 0021;	
    // (𑚧) TAKRI LETTER SHA	[2CB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A7, 0x0021 };
    uint32_t const ces[9] = { 0x2CB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_176)
{
    // 116A7 003F;	
    // (𑚧) TAKRI LETTER SHA	[2CB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A7, 0x003F };
    uint32_t const ces[9] = { 0x2CB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_177)
{
    // 116A7 0061;	
    // (𑚧) TAKRI LETTER SHA	[2CB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A7, 0x0061 };
    uint32_t const ces[9] = { 0x2CB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_178)
{
    // 116A7 0041;	
    // (𑚧) TAKRI LETTER SHA	[2CB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116A7, 0x0041 };
    uint32_t const ces[9] = { 0x2CB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_179)
{
    // 116A7 0062;	
    // (𑚧) TAKRI LETTER SHA	[2CB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A7, 0x0062 };
    uint32_t const ces[9] = { 0x2CB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_180)
{
    // 116A9 0021;	
    // (𑚩) TAKRI LETTER HA	[2CBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A9, 0x0021 };
    uint32_t const ces[9] = { 0x2CBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_181)
{
    // 116A9 003F;	
    // (𑚩) TAKRI LETTER HA	[2CBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A9, 0x003F };
    uint32_t const ces[9] = { 0x2CBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_182)
{
    // 116A9 0061;	
    // (𑚩) TAKRI LETTER HA	[2CBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A9, 0x0061 };
    uint32_t const ces[9] = { 0x2CBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_183)
{
    // 116A9 0041;	
    // (𑚩) TAKRI LETTER HA	[2CBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116A9, 0x0041 };
    uint32_t const ces[9] = { 0x2CBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_184)
{
    // 116A9 0062;	
    // (𑚩) TAKRI LETTER HA	[2CBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A9, 0x0062 };
    uint32_t const ces[9] = { 0x2CBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_185)
{
    // 1168A 0021;	
    // (𑚊) TAKRI LETTER KA	[2CBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168A, 0x0021 };
    uint32_t const ces[9] = { 0x2CBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_186)
{
    // 1168A 003F;	
    // (𑚊) TAKRI LETTER KA	[2CBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168A, 0x003F };
    uint32_t const ces[9] = { 0x2CBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_187)
{
    // 1168A 0061;	
    // (𑚊) TAKRI LETTER KA	[2CBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168A, 0x0061 };
    uint32_t const ces[9] = { 0x2CBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_188)
{
    // 1168A 0041;	
    // (𑚊) TAKRI LETTER KA	[2CBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1168A, 0x0041 };
    uint32_t const ces[9] = { 0x2CBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_189)
{
    // 1168A 0062;	
    // (𑚊) TAKRI LETTER KA	[2CBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168A, 0x0062 };
    uint32_t const ces[9] = { 0x2CBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_190)
{
    // 1168B 0021;	
    // (𑚋) TAKRI LETTER KHA	[2CBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168B, 0x0021 };
    uint32_t const ces[9] = { 0x2CBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_191)
{
    // 1168B 003F;	
    // (𑚋) TAKRI LETTER KHA	[2CBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168B, 0x003F };
    uint32_t const ces[9] = { 0x2CBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_192)
{
    // 1168B 0061;	
    // (𑚋) TAKRI LETTER KHA	[2CBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168B, 0x0061 };
    uint32_t const ces[9] = { 0x2CBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_193)
{
    // 1168B 0041;	
    // (𑚋) TAKRI LETTER KHA	[2CBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1168B, 0x0041 };
    uint32_t const ces[9] = { 0x2CBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_194)
{
    // 1168B 0062;	
    // (𑚋) TAKRI LETTER KHA	[2CBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168B, 0x0062 };
    uint32_t const ces[9] = { 0x2CBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_195)
{
    // 1168C 0021;	
    // (𑚌) TAKRI LETTER GA	[2CBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168C, 0x0021 };
    uint32_t const ces[9] = { 0x2CBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_196)
{
    // 1168C 003F;	
    // (𑚌) TAKRI LETTER GA	[2CBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168C, 0x003F };
    uint32_t const ces[9] = { 0x2CBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_197)
{
    // 1168C 0061;	
    // (𑚌) TAKRI LETTER GA	[2CBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168C, 0x0061 };
    uint32_t const ces[9] = { 0x2CBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_198)
{
    // 1168C 0041;	
    // (𑚌) TAKRI LETTER GA	[2CBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1168C, 0x0041 };
    uint32_t const ces[9] = { 0x2CBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_199)
{
    // 1168C 0062;	
    // (𑚌) TAKRI LETTER GA	[2CBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168C, 0x0062 };
    uint32_t const ces[9] = { 0x2CBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_200)
{
    // 1168D 0021;	
    // (𑚍) TAKRI LETTER GHA	[2CBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168D, 0x0021 };
    uint32_t const ces[9] = { 0x2CBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_201)
{
    // 1168D 003F;	
    // (𑚍) TAKRI LETTER GHA	[2CBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168D, 0x003F };
    uint32_t const ces[9] = { 0x2CBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_202)
{
    // 1168D 0061;	
    // (𑚍) TAKRI LETTER GHA	[2CBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168D, 0x0061 };
    uint32_t const ces[9] = { 0x2CBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_203)
{
    // 1168D 0041;	
    // (𑚍) TAKRI LETTER GHA	[2CBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1168D, 0x0041 };
    uint32_t const ces[9] = { 0x2CBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_204)
{
    // 1168D 0062;	
    // (𑚍) TAKRI LETTER GHA	[2CBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168D, 0x0062 };
    uint32_t const ces[9] = { 0x2CBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_205)
{
    // 1168E 0021;	
    // (𑚎) TAKRI LETTER NGA	[2CBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168E, 0x0021 };
    uint32_t const ces[9] = { 0x2CBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_206)
{
    // 1168E 003F;	
    // (𑚎) TAKRI LETTER NGA	[2CBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168E, 0x003F };
    uint32_t const ces[9] = { 0x2CBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_207)
{
    // 1168E 0061;	
    // (𑚎) TAKRI LETTER NGA	[2CBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168E, 0x0061 };
    uint32_t const ces[9] = { 0x2CBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_208)
{
    // 1168E 0041;	
    // (𑚎) TAKRI LETTER NGA	[2CBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1168E, 0x0041 };
    uint32_t const ces[9] = { 0x2CBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_209)
{
    // 1168E 0062;	
    // (𑚎) TAKRI LETTER NGA	[2CBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168E, 0x0062 };
    uint32_t const ces[9] = { 0x2CBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_210)
{
    // 1168F 0021;	
    // (𑚏) TAKRI LETTER CA	[2CC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168F, 0x0021 };
    uint32_t const ces[9] = { 0x2CC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_211)
{
    // 1168F 003F;	
    // (𑚏) TAKRI LETTER CA	[2CC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168F, 0x003F };
    uint32_t const ces[9] = { 0x2CC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_212)
{
    // 1168F 0061;	
    // (𑚏) TAKRI LETTER CA	[2CC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168F, 0x0061 };
    uint32_t const ces[9] = { 0x2CC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_213)
{
    // 1168F 0041;	
    // (𑚏) TAKRI LETTER CA	[2CC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1168F, 0x0041 };
    uint32_t const ces[9] = { 0x2CC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_214)
{
    // 1168F 0062;	
    // (𑚏) TAKRI LETTER CA	[2CC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1168F, 0x0062 };
    uint32_t const ces[9] = { 0x2CC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_215)
{
    // 11690 0021;	
    // (𑚐) TAKRI LETTER CHA	[2CC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11690, 0x0021 };
    uint32_t const ces[9] = { 0x2CC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_216)
{
    // 11690 003F;	
    // (𑚐) TAKRI LETTER CHA	[2CC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11690, 0x003F };
    uint32_t const ces[9] = { 0x2CC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_217)
{
    // 11690 0061;	
    // (𑚐) TAKRI LETTER CHA	[2CC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11690, 0x0061 };
    uint32_t const ces[9] = { 0x2CC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_218)
{
    // 11690 0041;	
    // (𑚐) TAKRI LETTER CHA	[2CC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11690, 0x0041 };
    uint32_t const ces[9] = { 0x2CC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_219)
{
    // 11690 0062;	
    // (𑚐) TAKRI LETTER CHA	[2CC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11690, 0x0062 };
    uint32_t const ces[9] = { 0x2CC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_220)
{
    // 11691 0021;	
    // (𑚑) TAKRI LETTER JA	[2CC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11691, 0x0021 };
    uint32_t const ces[9] = { 0x2CC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_221)
{
    // 11691 003F;	
    // (𑚑) TAKRI LETTER JA	[2CC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11691, 0x003F };
    uint32_t const ces[9] = { 0x2CC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_222)
{
    // 11691 0061;	
    // (𑚑) TAKRI LETTER JA	[2CC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11691, 0x0061 };
    uint32_t const ces[9] = { 0x2CC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_223)
{
    // 11691 0041;	
    // (𑚑) TAKRI LETTER JA	[2CC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11691, 0x0041 };
    uint32_t const ces[9] = { 0x2CC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_224)
{
    // 11691 0062;	
    // (𑚑) TAKRI LETTER JA	[2CC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11691, 0x0062 };
    uint32_t const ces[9] = { 0x2CC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_225)
{
    // 11692 0021;	
    // (𑚒) TAKRI LETTER JHA	[2CC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11692, 0x0021 };
    uint32_t const ces[9] = { 0x2CC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_226)
{
    // 11692 003F;	
    // (𑚒) TAKRI LETTER JHA	[2CC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11692, 0x003F };
    uint32_t const ces[9] = { 0x2CC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_227)
{
    // 11692 0061;	
    // (𑚒) TAKRI LETTER JHA	[2CC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11692, 0x0061 };
    uint32_t const ces[9] = { 0x2CC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_228)
{
    // 11692 0041;	
    // (𑚒) TAKRI LETTER JHA	[2CC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11692, 0x0041 };
    uint32_t const ces[9] = { 0x2CC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_229)
{
    // 11692 0062;	
    // (𑚒) TAKRI LETTER JHA	[2CC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11692, 0x0062 };
    uint32_t const ces[9] = { 0x2CC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_230)
{
    // 11693 0021;	
    // (𑚓) TAKRI LETTER NYA	[2CC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11693, 0x0021 };
    uint32_t const ces[9] = { 0x2CC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_231)
{
    // 11693 003F;	
    // (𑚓) TAKRI LETTER NYA	[2CC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11693, 0x003F };
    uint32_t const ces[9] = { 0x2CC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_232)
{
    // 11693 0061;	
    // (𑚓) TAKRI LETTER NYA	[2CC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11693, 0x0061 };
    uint32_t const ces[9] = { 0x2CC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_233)
{
    // 11693 0041;	
    // (𑚓) TAKRI LETTER NYA	[2CC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11693, 0x0041 };
    uint32_t const ces[9] = { 0x2CC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_234)
{
    // 11693 0062;	
    // (𑚓) TAKRI LETTER NYA	[2CC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11693, 0x0062 };
    uint32_t const ces[9] = { 0x2CC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_235)
{
    // 11694 0021;	
    // (𑚔) TAKRI LETTER TTA	[2CC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11694, 0x0021 };
    uint32_t const ces[9] = { 0x2CC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_236)
{
    // 11694 003F;	
    // (𑚔) TAKRI LETTER TTA	[2CC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11694, 0x003F };
    uint32_t const ces[9] = { 0x2CC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_237)
{
    // 11694 0061;	
    // (𑚔) TAKRI LETTER TTA	[2CC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11694, 0x0061 };
    uint32_t const ces[9] = { 0x2CC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_238)
{
    // 11694 0041;	
    // (𑚔) TAKRI LETTER TTA	[2CC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11694, 0x0041 };
    uint32_t const ces[9] = { 0x2CC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_239)
{
    // 11694 0062;	
    // (𑚔) TAKRI LETTER TTA	[2CC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11694, 0x0062 };
    uint32_t const ces[9] = { 0x2CC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_240)
{
    // 11695 0021;	
    // (𑚕) TAKRI LETTER TTHA	[2CC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11695, 0x0021 };
    uint32_t const ces[9] = { 0x2CC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_241)
{
    // 11695 003F;	
    // (𑚕) TAKRI LETTER TTHA	[2CC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11695, 0x003F };
    uint32_t const ces[9] = { 0x2CC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_242)
{
    // 11695 0061;	
    // (𑚕) TAKRI LETTER TTHA	[2CC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11695, 0x0061 };
    uint32_t const ces[9] = { 0x2CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_243)
{
    // 11695 0041;	
    // (𑚕) TAKRI LETTER TTHA	[2CC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11695, 0x0041 };
    uint32_t const ces[9] = { 0x2CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_244)
{
    // 11695 0062;	
    // (𑚕) TAKRI LETTER TTHA	[2CC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11695, 0x0062 };
    uint32_t const ces[9] = { 0x2CC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_245)
{
    // 11696 0021;	
    // (𑚖) TAKRI LETTER DDA	[2CC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11696, 0x0021 };
    uint32_t const ces[9] = { 0x2CC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_246)
{
    // 11696 003F;	
    // (𑚖) TAKRI LETTER DDA	[2CC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11696, 0x003F };
    uint32_t const ces[9] = { 0x2CC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_247)
{
    // 11696 0061;	
    // (𑚖) TAKRI LETTER DDA	[2CC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11696, 0x0061 };
    uint32_t const ces[9] = { 0x2CC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_248)
{
    // 11696 0041;	
    // (𑚖) TAKRI LETTER DDA	[2CC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11696, 0x0041 };
    uint32_t const ces[9] = { 0x2CC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_249)
{
    // 11696 0062;	
    // (𑚖) TAKRI LETTER DDA	[2CC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11696, 0x0062 };
    uint32_t const ces[9] = { 0x2CC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_250)
{
    // 11697 0021;	
    // (𑚗) TAKRI LETTER DDHA	[2CC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11697, 0x0021 };
    uint32_t const ces[9] = { 0x2CC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_251)
{
    // 11697 003F;	
    // (𑚗) TAKRI LETTER DDHA	[2CC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11697, 0x003F };
    uint32_t const ces[9] = { 0x2CC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_252)
{
    // 11697 0061;	
    // (𑚗) TAKRI LETTER DDHA	[2CC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11697, 0x0061 };
    uint32_t const ces[9] = { 0x2CC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_253)
{
    // 11697 0041;	
    // (𑚗) TAKRI LETTER DDHA	[2CC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11697, 0x0041 };
    uint32_t const ces[9] = { 0x2CC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_254)
{
    // 11697 0062;	
    // (𑚗) TAKRI LETTER DDHA	[2CC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11697, 0x0062 };
    uint32_t const ces[9] = { 0x2CC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_255)
{
    // 11698 0021;	
    // (𑚘) TAKRI LETTER NNA	[2CC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11698, 0x0021 };
    uint32_t const ces[9] = { 0x2CC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_256)
{
    // 11698 003F;	
    // (𑚘) TAKRI LETTER NNA	[2CC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11698, 0x003F };
    uint32_t const ces[9] = { 0x2CC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_257)
{
    // 11698 0061;	
    // (𑚘) TAKRI LETTER NNA	[2CC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11698, 0x0061 };
    uint32_t const ces[9] = { 0x2CC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_258)
{
    // 11698 0041;	
    // (𑚘) TAKRI LETTER NNA	[2CC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11698, 0x0041 };
    uint32_t const ces[9] = { 0x2CC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_259)
{
    // 11698 0062;	
    // (𑚘) TAKRI LETTER NNA	[2CC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11698, 0x0062 };
    uint32_t const ces[9] = { 0x2CC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_260)
{
    // 11699 0021;	
    // (𑚙) TAKRI LETTER TA	[2CCA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11699, 0x0021 };
    uint32_t const ces[9] = { 0x2CCA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_261)
{
    // 11699 003F;	
    // (𑚙) TAKRI LETTER TA	[2CCA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11699, 0x003F };
    uint32_t const ces[9] = { 0x2CCA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_262)
{
    // 11699 0061;	
    // (𑚙) TAKRI LETTER TA	[2CCA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11699, 0x0061 };
    uint32_t const ces[9] = { 0x2CCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_263)
{
    // 11699 0041;	
    // (𑚙) TAKRI LETTER TA	[2CCA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11699, 0x0041 };
    uint32_t const ces[9] = { 0x2CCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_264)
{
    // 11699 0062;	
    // (𑚙) TAKRI LETTER TA	[2CCA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11699, 0x0062 };
    uint32_t const ces[9] = { 0x2CCA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_265)
{
    // 1169A 0021;	
    // (𑚚) TAKRI LETTER THA	[2CCB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169A, 0x0021 };
    uint32_t const ces[9] = { 0x2CCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_266)
{
    // 1169A 003F;	
    // (𑚚) TAKRI LETTER THA	[2CCB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169A, 0x003F };
    uint32_t const ces[9] = { 0x2CCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_267)
{
    // 1169A 0061;	
    // (𑚚) TAKRI LETTER THA	[2CCB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169A, 0x0061 };
    uint32_t const ces[9] = { 0x2CCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_268)
{
    // 1169A 0041;	
    // (𑚚) TAKRI LETTER THA	[2CCB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1169A, 0x0041 };
    uint32_t const ces[9] = { 0x2CCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_269)
{
    // 1169A 0062;	
    // (𑚚) TAKRI LETTER THA	[2CCB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169A, 0x0062 };
    uint32_t const ces[9] = { 0x2CCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_270)
{
    // 1169B 0021;	
    // (𑚛) TAKRI LETTER DA	[2CCC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169B, 0x0021 };
    uint32_t const ces[9] = { 0x2CCC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_271)
{
    // 1169B 003F;	
    // (𑚛) TAKRI LETTER DA	[2CCC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169B, 0x003F };
    uint32_t const ces[9] = { 0x2CCC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_272)
{
    // 1169B 0061;	
    // (𑚛) TAKRI LETTER DA	[2CCC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169B, 0x0061 };
    uint32_t const ces[9] = { 0x2CCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_273)
{
    // 1169B 0041;	
    // (𑚛) TAKRI LETTER DA	[2CCC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1169B, 0x0041 };
    uint32_t const ces[9] = { 0x2CCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_274)
{
    // 1169B 0062;	
    // (𑚛) TAKRI LETTER DA	[2CCC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169B, 0x0062 };
    uint32_t const ces[9] = { 0x2CCC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_275)
{
    // 1169C 0021;	
    // (𑚜) TAKRI LETTER DHA	[2CCD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169C, 0x0021 };
    uint32_t const ces[9] = { 0x2CCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_276)
{
    // 1169C 003F;	
    // (𑚜) TAKRI LETTER DHA	[2CCD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169C, 0x003F };
    uint32_t const ces[9] = { 0x2CCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_277)
{
    // 1169C 0061;	
    // (𑚜) TAKRI LETTER DHA	[2CCD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169C, 0x0061 };
    uint32_t const ces[9] = { 0x2CCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_278)
{
    // 1169C 0041;	
    // (𑚜) TAKRI LETTER DHA	[2CCD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1169C, 0x0041 };
    uint32_t const ces[9] = { 0x2CCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_279)
{
    // 1169C 0062;	
    // (𑚜) TAKRI LETTER DHA	[2CCD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169C, 0x0062 };
    uint32_t const ces[9] = { 0x2CCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_280)
{
    // 1169D 0021;	
    // (𑚝) TAKRI LETTER NA	[2CCE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169D, 0x0021 };
    uint32_t const ces[9] = { 0x2CCE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_281)
{
    // 1169D 003F;	
    // (𑚝) TAKRI LETTER NA	[2CCE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169D, 0x003F };
    uint32_t const ces[9] = { 0x2CCE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_282)
{
    // 1169D 0061;	
    // (𑚝) TAKRI LETTER NA	[2CCE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169D, 0x0061 };
    uint32_t const ces[9] = { 0x2CCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_283)
{
    // 1169D 0041;	
    // (𑚝) TAKRI LETTER NA	[2CCE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1169D, 0x0041 };
    uint32_t const ces[9] = { 0x2CCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_284)
{
    // 1169D 0062;	
    // (𑚝) TAKRI LETTER NA	[2CCE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169D, 0x0062 };
    uint32_t const ces[9] = { 0x2CCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_285)
{
    // 1169E 0021;	
    // (𑚞) TAKRI LETTER PA	[2CCF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169E, 0x0021 };
    uint32_t const ces[9] = { 0x2CCF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_286)
{
    // 1169E 003F;	
    // (𑚞) TAKRI LETTER PA	[2CCF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169E, 0x003F };
    uint32_t const ces[9] = { 0x2CCF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_287)
{
    // 1169E 0061;	
    // (𑚞) TAKRI LETTER PA	[2CCF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169E, 0x0061 };
    uint32_t const ces[9] = { 0x2CCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_288)
{
    // 1169E 0041;	
    // (𑚞) TAKRI LETTER PA	[2CCF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1169E, 0x0041 };
    uint32_t const ces[9] = { 0x2CCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_289)
{
    // 1169E 0062;	
    // (𑚞) TAKRI LETTER PA	[2CCF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169E, 0x0062 };
    uint32_t const ces[9] = { 0x2CCF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_290)
{
    // 1169F 0021;	
    // (𑚟) TAKRI LETTER PHA	[2CD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169F, 0x0021 };
    uint32_t const ces[9] = { 0x2CD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_291)
{
    // 1169F 003F;	
    // (𑚟) TAKRI LETTER PHA	[2CD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169F, 0x003F };
    uint32_t const ces[9] = { 0x2CD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_292)
{
    // 1169F 0061;	
    // (𑚟) TAKRI LETTER PHA	[2CD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169F, 0x0061 };
    uint32_t const ces[9] = { 0x2CD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_293)
{
    // 1169F 0041;	
    // (𑚟) TAKRI LETTER PHA	[2CD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1169F, 0x0041 };
    uint32_t const ces[9] = { 0x2CD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_294)
{
    // 1169F 0062;	
    // (𑚟) TAKRI LETTER PHA	[2CD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1169F, 0x0062 };
    uint32_t const ces[9] = { 0x2CD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_295)
{
    // 116A0 0021;	
    // (𑚠) TAKRI LETTER BA	[2CD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A0, 0x0021 };
    uint32_t const ces[9] = { 0x2CD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_296)
{
    // 116A0 003F;	
    // (𑚠) TAKRI LETTER BA	[2CD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A0, 0x003F };
    uint32_t const ces[9] = { 0x2CD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_297)
{
    // 116A0 0061;	
    // (𑚠) TAKRI LETTER BA	[2CD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A0, 0x0061 };
    uint32_t const ces[9] = { 0x2CD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_298)
{
    // 116A0 0041;	
    // (𑚠) TAKRI LETTER BA	[2CD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116A0, 0x0041 };
    uint32_t const ces[9] = { 0x2CD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_299)
{
    // 116A0 0062;	
    // (𑚠) TAKRI LETTER BA	[2CD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A0, 0x0062 };
    uint32_t const ces[9] = { 0x2CD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_300)
{
    // 116A1 0021;	
    // (𑚡) TAKRI LETTER BHA	[2CD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A1, 0x0021 };
    uint32_t const ces[9] = { 0x2CD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_301)
{
    // 116A1 003F;	
    // (𑚡) TAKRI LETTER BHA	[2CD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A1, 0x003F };
    uint32_t const ces[9] = { 0x2CD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_302)
{
    // 116A1 0061;	
    // (𑚡) TAKRI LETTER BHA	[2CD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A1, 0x0061 };
    uint32_t const ces[9] = { 0x2CD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_303)
{
    // 116A1 0041;	
    // (𑚡) TAKRI LETTER BHA	[2CD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116A1, 0x0041 };
    uint32_t const ces[9] = { 0x2CD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_304)
{
    // 116A1 0062;	
    // (𑚡) TAKRI LETTER BHA	[2CD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A1, 0x0062 };
    uint32_t const ces[9] = { 0x2CD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_305)
{
    // 116A2 0021;	
    // (𑚢) TAKRI LETTER MA	[2CD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A2, 0x0021 };
    uint32_t const ces[9] = { 0x2CD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_306)
{
    // 116A2 003F;	
    // (𑚢) TAKRI LETTER MA	[2CD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A2, 0x003F };
    uint32_t const ces[9] = { 0x2CD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_307)
{
    // 116A2 0061;	
    // (𑚢) TAKRI LETTER MA	[2CD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A2, 0x0061 };
    uint32_t const ces[9] = { 0x2CD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_308)
{
    // 116A2 0041;	
    // (𑚢) TAKRI LETTER MA	[2CD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116A2, 0x0041 };
    uint32_t const ces[9] = { 0x2CD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_309)
{
    // 116A2 0062;	
    // (𑚢) TAKRI LETTER MA	[2CD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A2, 0x0062 };
    uint32_t const ces[9] = { 0x2CD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_310)
{
    // 116A3 0021;	
    // (𑚣) TAKRI LETTER YA	[2CD4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A3, 0x0021 };
    uint32_t const ces[9] = { 0x2CD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_311)
{
    // 116A3 003F;	
    // (𑚣) TAKRI LETTER YA	[2CD4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A3, 0x003F };
    uint32_t const ces[9] = { 0x2CD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_312)
{
    // 116A3 0061;	
    // (𑚣) TAKRI LETTER YA	[2CD4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A3, 0x0061 };
    uint32_t const ces[9] = { 0x2CD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_313)
{
    // 116A3 0041;	
    // (𑚣) TAKRI LETTER YA	[2CD4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116A3, 0x0041 };
    uint32_t const ces[9] = { 0x2CD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_314)
{
    // 116A3 0062;	
    // (𑚣) TAKRI LETTER YA	[2CD4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A3, 0x0062 };
    uint32_t const ces[9] = { 0x2CD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_315)
{
    // 116A4 0021;	
    // (𑚤) TAKRI LETTER RA	[2CD5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A4, 0x0021 };
    uint32_t const ces[9] = { 0x2CD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_316)
{
    // 116A4 003F;	
    // (𑚤) TAKRI LETTER RA	[2CD5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A4, 0x003F };
    uint32_t const ces[9] = { 0x2CD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_317)
{
    // 116A4 0061;	
    // (𑚤) TAKRI LETTER RA	[2CD5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A4, 0x0061 };
    uint32_t const ces[9] = { 0x2CD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_318)
{
    // 116A4 0041;	
    // (𑚤) TAKRI LETTER RA	[2CD5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116A4, 0x0041 };
    uint32_t const ces[9] = { 0x2CD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_319)
{
    // 116A4 0062;	
    // (𑚤) TAKRI LETTER RA	[2CD5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A4, 0x0062 };
    uint32_t const ces[9] = { 0x2CD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_320)
{
    // 116A5 0021;	
    // (𑚥) TAKRI LETTER LA	[2CD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A5, 0x0021 };
    uint32_t const ces[9] = { 0x2CD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_321)
{
    // 116A5 003F;	
    // (𑚥) TAKRI LETTER LA	[2CD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A5, 0x003F };
    uint32_t const ces[9] = { 0x2CD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_322)
{
    // 116A5 0061;	
    // (𑚥) TAKRI LETTER LA	[2CD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A5, 0x0061 };
    uint32_t const ces[9] = { 0x2CD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_323)
{
    // 116A5 0041;	
    // (𑚥) TAKRI LETTER LA	[2CD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116A5, 0x0041 };
    uint32_t const ces[9] = { 0x2CD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_324)
{
    // 116A5 0062;	
    // (𑚥) TAKRI LETTER LA	[2CD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A5, 0x0062 };
    uint32_t const ces[9] = { 0x2CD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_325)
{
    // 116A6 0021;	
    // (𑚦) TAKRI LETTER VA	[2CD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A6, 0x0021 };
    uint32_t const ces[9] = { 0x2CD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_326)
{
    // 116A6 003F;	
    // (𑚦) TAKRI LETTER VA	[2CD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A6, 0x003F };
    uint32_t const ces[9] = { 0x2CD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_327)
{
    // 116A6 0061;	
    // (𑚦) TAKRI LETTER VA	[2CD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A6, 0x0061 };
    uint32_t const ces[9] = { 0x2CD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_328)
{
    // 116A6 0041;	
    // (𑚦) TAKRI LETTER VA	[2CD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116A6, 0x0041 };
    uint32_t const ces[9] = { 0x2CD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_329)
{
    // 116A6 0062;	
    // (𑚦) TAKRI LETTER VA	[2CD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116A6, 0x0062 };
    uint32_t const ces[9] = { 0x2CD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_330)
{
    // 116AA 0021;	
    // (𑚪) TAKRI LETTER RRA	[2CD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116AA, 0x0021 };
    uint32_t const ces[9] = { 0x2CD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_331)
{
    // 116AA 003F;	
    // (𑚪) TAKRI LETTER RRA	[2CD8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116AA, 0x003F };
    uint32_t const ces[9] = { 0x2CD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_332)
{
    // 116AA 0061;	
    // (𑚪) TAKRI LETTER RRA	[2CD8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116AA, 0x0061 };
    uint32_t const ces[9] = { 0x2CD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_333)
{
    // 116AA 0041;	
    // (𑚪) TAKRI LETTER RRA	[2CD8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116AA, 0x0041 };
    uint32_t const ces[9] = { 0x2CD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_334)
{
    // 116AA 0062;	
    // (𑚪) TAKRI LETTER RRA	[2CD8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116AA, 0x0062 };
    uint32_t const ces[9] = { 0x2CD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_335)
{
    // 116AD 0021;	
    // (𑚭) TAKRI VOWEL SIGN AA	[2CD9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116AD, 0x0021 };
    uint32_t const ces[9] = { 0x2CD9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_336)
{
    // 116AD 003F;	
    // (𑚭) TAKRI VOWEL SIGN AA	[2CD9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116AD, 0x003F };
    uint32_t const ces[9] = { 0x2CD9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_337)
{
    // 116AD 0061;	
    // (𑚭) TAKRI VOWEL SIGN AA	[2CD9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116AD, 0x0061 };
    uint32_t const ces[9] = { 0x2CD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_338)
{
    // 116AD 0041;	
    // (𑚭) TAKRI VOWEL SIGN AA	[2CD9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116AD, 0x0041 };
    uint32_t const ces[9] = { 0x2CD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_339)
{
    // 116AD 0062;	
    // (𑚭) TAKRI VOWEL SIGN AA	[2CD9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116AD, 0x0062 };
    uint32_t const ces[9] = { 0x2CD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_340)
{
    // 116AE 0021;	
    // (𑚮) TAKRI VOWEL SIGN I	[2CDA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116AE, 0x0021 };
    uint32_t const ces[9] = { 0x2CDA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_341)
{
    // 116AE 003F;	
    // (𑚮) TAKRI VOWEL SIGN I	[2CDA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116AE, 0x003F };
    uint32_t const ces[9] = { 0x2CDA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_342)
{
    // 116AE 0061;	
    // (𑚮) TAKRI VOWEL SIGN I	[2CDA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116AE, 0x0061 };
    uint32_t const ces[9] = { 0x2CDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_343)
{
    // 116AE 0041;	
    // (𑚮) TAKRI VOWEL SIGN I	[2CDA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116AE, 0x0041 };
    uint32_t const ces[9] = { 0x2CDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_344)
{
    // 116AE 0062;	
    // (𑚮) TAKRI VOWEL SIGN I	[2CDA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116AE, 0x0062 };
    uint32_t const ces[9] = { 0x2CDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_345)
{
    // 116AF 0021;	
    // (𑚯) TAKRI VOWEL SIGN II	[2CDB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116AF, 0x0021 };
    uint32_t const ces[9] = { 0x2CDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_346)
{
    // 116AF 003F;	
    // (𑚯) TAKRI VOWEL SIGN II	[2CDB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116AF, 0x003F };
    uint32_t const ces[9] = { 0x2CDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_347)
{
    // 116AF 0061;	
    // (𑚯) TAKRI VOWEL SIGN II	[2CDB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116AF, 0x0061 };
    uint32_t const ces[9] = { 0x2CDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_348)
{
    // 116AF 0041;	
    // (𑚯) TAKRI VOWEL SIGN II	[2CDB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116AF, 0x0041 };
    uint32_t const ces[9] = { 0x2CDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_349)
{
    // 116AF 0062;	
    // (𑚯) TAKRI VOWEL SIGN II	[2CDB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116AF, 0x0062 };
    uint32_t const ces[9] = { 0x2CDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_350)
{
    // 116B0 0021;	
    // (𑚰) TAKRI VOWEL SIGN U	[2CDC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B0, 0x0021 };
    uint32_t const ces[9] = { 0x2CDC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_351)
{
    // 116B0 003F;	
    // (𑚰) TAKRI VOWEL SIGN U	[2CDC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B0, 0x003F };
    uint32_t const ces[9] = { 0x2CDC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_352)
{
    // 116B0 0061;	
    // (𑚰) TAKRI VOWEL SIGN U	[2CDC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B0, 0x0061 };
    uint32_t const ces[9] = { 0x2CDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_353)
{
    // 116B0 0041;	
    // (𑚰) TAKRI VOWEL SIGN U	[2CDC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116B0, 0x0041 };
    uint32_t const ces[9] = { 0x2CDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_354)
{
    // 116B0 0062;	
    // (𑚰) TAKRI VOWEL SIGN U	[2CDC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B0, 0x0062 };
    uint32_t const ces[9] = { 0x2CDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_355)
{
    // 116B1 0021;	
    // (𑚱) TAKRI VOWEL SIGN UU	[2CDD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B1, 0x0021 };
    uint32_t const ces[9] = { 0x2CDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_356)
{
    // 116B1 003F;	
    // (𑚱) TAKRI VOWEL SIGN UU	[2CDD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B1, 0x003F };
    uint32_t const ces[9] = { 0x2CDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_357)
{
    // 116B1 0061;	
    // (𑚱) TAKRI VOWEL SIGN UU	[2CDD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B1, 0x0061 };
    uint32_t const ces[9] = { 0x2CDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_358)
{
    // 116B1 0041;	
    // (𑚱) TAKRI VOWEL SIGN UU	[2CDD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116B1, 0x0041 };
    uint32_t const ces[9] = { 0x2CDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_359)
{
    // 116B1 0062;	
    // (𑚱) TAKRI VOWEL SIGN UU	[2CDD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B1, 0x0062 };
    uint32_t const ces[9] = { 0x2CDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_360)
{
    // 116B2 0021;	
    // (𑚲) TAKRI VOWEL SIGN E	[2CDE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B2, 0x0021 };
    uint32_t const ces[9] = { 0x2CDE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_361)
{
    // 116B2 003F;	
    // (𑚲) TAKRI VOWEL SIGN E	[2CDE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B2, 0x003F };
    uint32_t const ces[9] = { 0x2CDE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_362)
{
    // 116B2 0061;	
    // (𑚲) TAKRI VOWEL SIGN E	[2CDE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B2, 0x0061 };
    uint32_t const ces[9] = { 0x2CDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_363)
{
    // 116B2 0041;	
    // (𑚲) TAKRI VOWEL SIGN E	[2CDE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116B2, 0x0041 };
    uint32_t const ces[9] = { 0x2CDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_364)
{
    // 116B2 0062;	
    // (𑚲) TAKRI VOWEL SIGN E	[2CDE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B2, 0x0062 };
    uint32_t const ces[9] = { 0x2CDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_365)
{
    // 116B3 0021;	
    // (𑚳) TAKRI VOWEL SIGN AI	[2CDF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B3, 0x0021 };
    uint32_t const ces[9] = { 0x2CDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_366)
{
    // 116B3 003F;	
    // (𑚳) TAKRI VOWEL SIGN AI	[2CDF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B3, 0x003F };
    uint32_t const ces[9] = { 0x2CDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_367)
{
    // 116B3 0061;	
    // (𑚳) TAKRI VOWEL SIGN AI	[2CDF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B3, 0x0061 };
    uint32_t const ces[9] = { 0x2CDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_368)
{
    // 116B3 0041;	
    // (𑚳) TAKRI VOWEL SIGN AI	[2CDF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116B3, 0x0041 };
    uint32_t const ces[9] = { 0x2CDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_369)
{
    // 116B3 0062;	
    // (𑚳) TAKRI VOWEL SIGN AI	[2CDF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B3, 0x0062 };
    uint32_t const ces[9] = { 0x2CDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_370)
{
    // 116B4 0021;	
    // (𑚴) TAKRI VOWEL SIGN O	[2CE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B4, 0x0021 };
    uint32_t const ces[9] = { 0x2CE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_371)
{
    // 116B4 003F;	
    // (𑚴) TAKRI VOWEL SIGN O	[2CE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B4, 0x003F };
    uint32_t const ces[9] = { 0x2CE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_372)
{
    // 116B4 0061;	
    // (𑚴) TAKRI VOWEL SIGN O	[2CE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B4, 0x0061 };
    uint32_t const ces[9] = { 0x2CE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_373)
{
    // 116B4 0041;	
    // (𑚴) TAKRI VOWEL SIGN O	[2CE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116B4, 0x0041 };
    uint32_t const ces[9] = { 0x2CE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_374)
{
    // 116B4 0062;	
    // (𑚴) TAKRI VOWEL SIGN O	[2CE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B4, 0x0062 };
    uint32_t const ces[9] = { 0x2CE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_375)
{
    // 116B5 0021;	
    // (𑚵) TAKRI VOWEL SIGN AU	[2CE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B5, 0x0021 };
    uint32_t const ces[9] = { 0x2CE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_376)
{
    // 116B5 003F;	
    // (𑚵) TAKRI VOWEL SIGN AU	[2CE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B5, 0x003F };
    uint32_t const ces[9] = { 0x2CE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_377)
{
    // 116B5 0061;	
    // (𑚵) TAKRI VOWEL SIGN AU	[2CE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B5, 0x0061 };
    uint32_t const ces[9] = { 0x2CE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_378)
{
    // 116B5 0041;	
    // (𑚵) TAKRI VOWEL SIGN AU	[2CE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116B5, 0x0041 };
    uint32_t const ces[9] = { 0x2CE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_379)
{
    // 116B5 0062;	
    // (𑚵) TAKRI VOWEL SIGN AU	[2CE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B5, 0x0062 };
    uint32_t const ces[9] = { 0x2CE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_380)
{
    // 0334 116B6;	
    // (𑚶) TAKRI SIGN VIRAMA	[2CE2 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x116B6 };
    uint32_t const ces[8] = { 0x2CE2, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_381)
{
    // 116B6 0334;	
    // (𑚶) TAKRI SIGN VIRAMA	[2CE2 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B6, 0x0334 };
    uint32_t const ces[8] = { 0x2CE2, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_382)
{
    // 116B6 0021;	
    // (𑚶) TAKRI SIGN VIRAMA	[2CE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B6, 0x0021 };
    uint32_t const ces[9] = { 0x2CE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_383)
{
    // 116B6 003F;	
    // (𑚶) TAKRI SIGN VIRAMA	[2CE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B6, 0x003F };
    uint32_t const ces[9] = { 0x2CE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_384)
{
    // 116B6 0061;	
    // (𑚶) TAKRI SIGN VIRAMA	[2CE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B6, 0x0061 };
    uint32_t const ces[9] = { 0x2CE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_385)
{
    // 116B6 0041;	
    // (𑚶) TAKRI SIGN VIRAMA	[2CE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x116B6, 0x0041 };
    uint32_t const ces[9] = { 0x2CE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_386)
{
    // 116B6 0062;	
    // (𑚶) TAKRI SIGN VIRAMA	[2CE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B6, 0x0062 };
    uint32_t const ces[9] = { 0x2CE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_387)
{
    // 11700 0021;	
    // (𑜀) AHOM LETTER KA	[2CE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11700, 0x0021 };
    uint32_t const ces[9] = { 0x2CE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_388)
{
    // 11700 003F;	
    // (𑜀) AHOM LETTER KA	[2CE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11700, 0x003F };
    uint32_t const ces[9] = { 0x2CE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_389)
{
    // 11700 0061;	
    // (𑜀) AHOM LETTER KA	[2CE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11700, 0x0061 };
    uint32_t const ces[9] = { 0x2CE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_390)
{
    // 11700 0041;	
    // (𑜀) AHOM LETTER KA	[2CE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11700, 0x0041 };
    uint32_t const ces[9] = { 0x2CE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_391)
{
    // 11700 0062;	
    // (𑜀) AHOM LETTER KA	[2CE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11700, 0x0062 };
    uint32_t const ces[9] = { 0x2CE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_392)
{
    // 11701 0021;	
    // (𑜁) AHOM LETTER KHA	[2CE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11701, 0x0021 };
    uint32_t const ces[9] = { 0x2CE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_393)
{
    // 11701 003F;	
    // (𑜁) AHOM LETTER KHA	[2CE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11701, 0x003F };
    uint32_t const ces[9] = { 0x2CE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_394)
{
    // 11701 0061;	
    // (𑜁) AHOM LETTER KHA	[2CE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11701, 0x0061 };
    uint32_t const ces[9] = { 0x2CE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_395)
{
    // 11701 0041;	
    // (𑜁) AHOM LETTER KHA	[2CE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11701, 0x0041 };
    uint32_t const ces[9] = { 0x2CE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_396)
{
    // 11701 0062;	
    // (𑜁) AHOM LETTER KHA	[2CE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11701, 0x0062 };
    uint32_t const ces[9] = { 0x2CE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_397)
{
    // 11702 0021;	
    // (𑜂) AHOM LETTER NGA	[2CE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11702, 0x0021 };
    uint32_t const ces[9] = { 0x2CE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_398)
{
    // 11702 003F;	
    // (𑜂) AHOM LETTER NGA	[2CE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11702, 0x003F };
    uint32_t const ces[9] = { 0x2CE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_399)
{
    // 11702 0061;	
    // (𑜂) AHOM LETTER NGA	[2CE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11702, 0x0061 };
    uint32_t const ces[9] = { 0x2CE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_400)
{
    // 11702 0041;	
    // (𑜂) AHOM LETTER NGA	[2CE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11702, 0x0041 };
    uint32_t const ces[9] = { 0x2CE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_401)
{
    // 11702 0062;	
    // (𑜂) AHOM LETTER NGA	[2CE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11702, 0x0062 };
    uint32_t const ces[9] = { 0x2CE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_402)
{
    // 11703 0021;	
    // (𑜃) AHOM LETTER NA	[2CE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11703, 0x0021 };
    uint32_t const ces[9] = { 0x2CE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_403)
{
    // 11703 003F;	
    // (𑜃) AHOM LETTER NA	[2CE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11703, 0x003F };
    uint32_t const ces[9] = { 0x2CE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_404)
{
    // 11703 0061;	
    // (𑜃) AHOM LETTER NA	[2CE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11703, 0x0061 };
    uint32_t const ces[9] = { 0x2CE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_405)
{
    // 11703 0041;	
    // (𑜃) AHOM LETTER NA	[2CE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11703, 0x0041 };
    uint32_t const ces[9] = { 0x2CE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_406)
{
    // 11703 0062;	
    // (𑜃) AHOM LETTER NA	[2CE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11703, 0x0062 };
    uint32_t const ces[9] = { 0x2CE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_407)
{
    // 11704 0021;	
    // (𑜄) AHOM LETTER TA	[2CE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11704, 0x0021 };
    uint32_t const ces[9] = { 0x2CE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_408)
{
    // 11705 0021;	
    // (𑜅) AHOM LETTER ALTERNATE TA	[2CE7 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x11705, 0x0021 };
    uint32_t const ces[11] = { 0x2CE7, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_409)
{
    // 11704 003F;	
    // (𑜄) AHOM LETTER TA	[2CE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11704, 0x003F };
    uint32_t const ces[9] = { 0x2CE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_410)
{
    // 11705 003F;	
    // (𑜅) AHOM LETTER ALTERNATE TA	[2CE7 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x11705, 0x003F };
    uint32_t const ces[11] = { 0x2CE7, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_411)
{
    // 11704 0061;	
    // (𑜄) AHOM LETTER TA	[2CE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11704, 0x0061 };
    uint32_t const ces[9] = { 0x2CE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_412)
{
    // 11704 0041;	
    // (𑜄) AHOM LETTER TA	[2CE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11704, 0x0041 };
    uint32_t const ces[9] = { 0x2CE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_413)
{
    // 11705 0061;	
    // (𑜅) AHOM LETTER ALTERNATE TA	[2CE7 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x11705, 0x0061 };
    uint32_t const ces[11] = { 0x2CE7, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_414)
{
    // 11705 0041;	
    // (𑜅) AHOM LETTER ALTERNATE TA	[2CE7 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x11705, 0x0041 };
    uint32_t const ces[11] = { 0x2CE7, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_415)
{
    // 11704 0062;	
    // (𑜄) AHOM LETTER TA	[2CE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11704, 0x0062 };
    uint32_t const ces[9] = { 0x2CE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_416)
{
    // 11705 0062;	
    // (𑜅) AHOM LETTER ALTERNATE TA	[2CE7 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x11705, 0x0062 };
    uint32_t const ces[11] = { 0x2CE7, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_417)
{
    // 11706 0021;	
    // (𑜆) AHOM LETTER PA	[2CE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11706, 0x0021 };
    uint32_t const ces[9] = { 0x2CE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_418)
{
    // 11706 003F;	
    // (𑜆) AHOM LETTER PA	[2CE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11706, 0x003F };
    uint32_t const ces[9] = { 0x2CE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_419)
{
    // 11706 0061;	
    // (𑜆) AHOM LETTER PA	[2CE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11706, 0x0061 };
    uint32_t const ces[9] = { 0x2CE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_420)
{
    // 11706 0041;	
    // (𑜆) AHOM LETTER PA	[2CE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11706, 0x0041 };
    uint32_t const ces[9] = { 0x2CE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_421)
{
    // 11706 0062;	
    // (𑜆) AHOM LETTER PA	[2CE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11706, 0x0062 };
    uint32_t const ces[9] = { 0x2CE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_422)
{
    // 11707 0021;	
    // (𑜇) AHOM LETTER PHA	[2CE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11707, 0x0021 };
    uint32_t const ces[9] = { 0x2CE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_423)
{
    // 11707 003F;	
    // (𑜇) AHOM LETTER PHA	[2CE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11707, 0x003F };
    uint32_t const ces[9] = { 0x2CE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_424)
{
    // 11707 0061;	
    // (𑜇) AHOM LETTER PHA	[2CE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11707, 0x0061 };
    uint32_t const ces[9] = { 0x2CE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_425)
{
    // 11707 0041;	
    // (𑜇) AHOM LETTER PHA	[2CE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11707, 0x0041 };
    uint32_t const ces[9] = { 0x2CE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_426)
{
    // 11707 0062;	
    // (𑜇) AHOM LETTER PHA	[2CE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11707, 0x0062 };
    uint32_t const ces[9] = { 0x2CE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_427)
{
    // 11708 0021;	
    // (𑜈) AHOM LETTER BA	[2CEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11708, 0x0021 };
    uint32_t const ces[9] = { 0x2CEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_428)
{
    // 11708 003F;	
    // (𑜈) AHOM LETTER BA	[2CEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11708, 0x003F };
    uint32_t const ces[9] = { 0x2CEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_429)
{
    // 11708 0061;	
    // (𑜈) AHOM LETTER BA	[2CEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11708, 0x0061 };
    uint32_t const ces[9] = { 0x2CEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_430)
{
    // 11708 0041;	
    // (𑜈) AHOM LETTER BA	[2CEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11708, 0x0041 };
    uint32_t const ces[9] = { 0x2CEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_431)
{
    // 11708 0062;	
    // (𑜈) AHOM LETTER BA	[2CEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11708, 0x0062 };
    uint32_t const ces[9] = { 0x2CEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_432)
{
    // 11709 0021;	
    // (𑜉) AHOM LETTER MA	[2CEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11709, 0x0021 };
    uint32_t const ces[9] = { 0x2CEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_433)
{
    // 11709 003F;	
    // (𑜉) AHOM LETTER MA	[2CEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11709, 0x003F };
    uint32_t const ces[9] = { 0x2CEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_434)
{
    // 11709 0061;	
    // (𑜉) AHOM LETTER MA	[2CEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11709, 0x0061 };
    uint32_t const ces[9] = { 0x2CEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_435)
{
    // 11709 0041;	
    // (𑜉) AHOM LETTER MA	[2CEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11709, 0x0041 };
    uint32_t const ces[9] = { 0x2CEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_436)
{
    // 11709 0062;	
    // (𑜉) AHOM LETTER MA	[2CEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11709, 0x0062 };
    uint32_t const ces[9] = { 0x2CEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_437)
{
    // 1170A 0021;	
    // (𑜊) AHOM LETTER JA	[2CEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170A, 0x0021 };
    uint32_t const ces[9] = { 0x2CEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_438)
{
    // 1170A 003F;	
    // (𑜊) AHOM LETTER JA	[2CEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170A, 0x003F };
    uint32_t const ces[9] = { 0x2CEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_439)
{
    // 1170A 0061;	
    // (𑜊) AHOM LETTER JA	[2CEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170A, 0x0061 };
    uint32_t const ces[9] = { 0x2CEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_440)
{
    // 1170A 0041;	
    // (𑜊) AHOM LETTER JA	[2CEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1170A, 0x0041 };
    uint32_t const ces[9] = { 0x2CEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_441)
{
    // 1170A 0062;	
    // (𑜊) AHOM LETTER JA	[2CEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170A, 0x0062 };
    uint32_t const ces[9] = { 0x2CEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_442)
{
    // 1170B 0021;	
    // (𑜋) AHOM LETTER CHA	[2CED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170B, 0x0021 };
    uint32_t const ces[9] = { 0x2CED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_443)
{
    // 1170B 003F;	
    // (𑜋) AHOM LETTER CHA	[2CED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170B, 0x003F };
    uint32_t const ces[9] = { 0x2CED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_444)
{
    // 1170B 0061;	
    // (𑜋) AHOM LETTER CHA	[2CED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170B, 0x0061 };
    uint32_t const ces[9] = { 0x2CED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_445)
{
    // 1170B 0041;	
    // (𑜋) AHOM LETTER CHA	[2CED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1170B, 0x0041 };
    uint32_t const ces[9] = { 0x2CED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_446)
{
    // 1170B 0062;	
    // (𑜋) AHOM LETTER CHA	[2CED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170B, 0x0062 };
    uint32_t const ces[9] = { 0x2CED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_447)
{
    // 1170C 0021;	
    // (𑜌) AHOM LETTER THA	[2CEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170C, 0x0021 };
    uint32_t const ces[9] = { 0x2CEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_448)
{
    // 1170C 003F;	
    // (𑜌) AHOM LETTER THA	[2CEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170C, 0x003F };
    uint32_t const ces[9] = { 0x2CEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_449)
{
    // 1170C 0061;	
    // (𑜌) AHOM LETTER THA	[2CEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170C, 0x0061 };
    uint32_t const ces[9] = { 0x2CEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_450)
{
    // 1170C 0041;	
    // (𑜌) AHOM LETTER THA	[2CEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1170C, 0x0041 };
    uint32_t const ces[9] = { 0x2CEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_451)
{
    // 1170C 0062;	
    // (𑜌) AHOM LETTER THA	[2CEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170C, 0x0062 };
    uint32_t const ces[9] = { 0x2CEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_452)
{
    // 1170D 0021;	
    // (𑜍) AHOM LETTER RA	[2CEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170D, 0x0021 };
    uint32_t const ces[9] = { 0x2CEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_453)
{
    // 1170D 003F;	
    // (𑜍) AHOM LETTER RA	[2CEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170D, 0x003F };
    uint32_t const ces[9] = { 0x2CEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_454)
{
    // 1170D 0061;	
    // (𑜍) AHOM LETTER RA	[2CEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170D, 0x0061 };
    uint32_t const ces[9] = { 0x2CEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_455)
{
    // 1170D 0041;	
    // (𑜍) AHOM LETTER RA	[2CEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1170D, 0x0041 };
    uint32_t const ces[9] = { 0x2CEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_456)
{
    // 1170D 0062;	
    // (𑜍) AHOM LETTER RA	[2CEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170D, 0x0062 };
    uint32_t const ces[9] = { 0x2CEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_457)
{
    // 1170E 0021;	
    // (𑜎) AHOM LETTER LA	[2CF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170E, 0x0021 };
    uint32_t const ces[9] = { 0x2CF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_458)
{
    // 1170E 003F;	
    // (𑜎) AHOM LETTER LA	[2CF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170E, 0x003F };
    uint32_t const ces[9] = { 0x2CF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_459)
{
    // 1170E 0061;	
    // (𑜎) AHOM LETTER LA	[2CF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170E, 0x0061 };
    uint32_t const ces[9] = { 0x2CF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_460)
{
    // 1170E 0041;	
    // (𑜎) AHOM LETTER LA	[2CF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1170E, 0x0041 };
    uint32_t const ces[9] = { 0x2CF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_461)
{
    // 1170E 0062;	
    // (𑜎) AHOM LETTER LA	[2CF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170E, 0x0062 };
    uint32_t const ces[9] = { 0x2CF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_462)
{
    // 1170F 0021;	
    // (𑜏) AHOM LETTER SA	[2CF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170F, 0x0021 };
    uint32_t const ces[9] = { 0x2CF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_463)
{
    // 1170F 003F;	
    // (𑜏) AHOM LETTER SA	[2CF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170F, 0x003F };
    uint32_t const ces[9] = { 0x2CF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_464)
{
    // 1170F 0061;	
    // (𑜏) AHOM LETTER SA	[2CF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170F, 0x0061 };
    uint32_t const ces[9] = { 0x2CF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_465)
{
    // 1170F 0041;	
    // (𑜏) AHOM LETTER SA	[2CF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1170F, 0x0041 };
    uint32_t const ces[9] = { 0x2CF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_466)
{
    // 1170F 0062;	
    // (𑜏) AHOM LETTER SA	[2CF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1170F, 0x0062 };
    uint32_t const ces[9] = { 0x2CF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_467)
{
    // 11710 0021;	
    // (𑜐) AHOM LETTER NYA	[2CF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11710, 0x0021 };
    uint32_t const ces[9] = { 0x2CF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_468)
{
    // 11710 003F;	
    // (𑜐) AHOM LETTER NYA	[2CF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11710, 0x003F };
    uint32_t const ces[9] = { 0x2CF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_469)
{
    // 11710 0061;	
    // (𑜐) AHOM LETTER NYA	[2CF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11710, 0x0061 };
    uint32_t const ces[9] = { 0x2CF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_470)
{
    // 11710 0041;	
    // (𑜐) AHOM LETTER NYA	[2CF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11710, 0x0041 };
    uint32_t const ces[9] = { 0x2CF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_471)
{
    // 11710 0062;	
    // (𑜐) AHOM LETTER NYA	[2CF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11710, 0x0062 };
    uint32_t const ces[9] = { 0x2CF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_472)
{
    // 11711 0021;	
    // (𑜑) AHOM LETTER HA	[2CF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11711, 0x0021 };
    uint32_t const ces[9] = { 0x2CF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_473)
{
    // 11711 003F;	
    // (𑜑) AHOM LETTER HA	[2CF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11711, 0x003F };
    uint32_t const ces[9] = { 0x2CF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_474)
{
    // 11711 0061;	
    // (𑜑) AHOM LETTER HA	[2CF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11711, 0x0061 };
    uint32_t const ces[9] = { 0x2CF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_475)
{
    // 11711 0041;	
    // (𑜑) AHOM LETTER HA	[2CF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11711, 0x0041 };
    uint32_t const ces[9] = { 0x2CF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_476)
{
    // 11711 0062;	
    // (𑜑) AHOM LETTER HA	[2CF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11711, 0x0062 };
    uint32_t const ces[9] = { 0x2CF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_477)
{
    // 11712 0021;	
    // (𑜒) AHOM LETTER A	[2CF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11712, 0x0021 };
    uint32_t const ces[9] = { 0x2CF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_478)
{
    // 11712 003F;	
    // (𑜒) AHOM LETTER A	[2CF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11712, 0x003F };
    uint32_t const ces[9] = { 0x2CF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_479)
{
    // 11712 0061;	
    // (𑜒) AHOM LETTER A	[2CF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11712, 0x0061 };
    uint32_t const ces[9] = { 0x2CF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_480)
{
    // 11712 0041;	
    // (𑜒) AHOM LETTER A	[2CF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11712, 0x0041 };
    uint32_t const ces[9] = { 0x2CF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_481)
{
    // 11712 0062;	
    // (𑜒) AHOM LETTER A	[2CF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11712, 0x0062 };
    uint32_t const ces[9] = { 0x2CF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_482)
{
    // 11713 0021;	
    // (𑜓) AHOM LETTER DA	[2CF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11713, 0x0021 };
    uint32_t const ces[9] = { 0x2CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_483)
{
    // 11713 003F;	
    // (𑜓) AHOM LETTER DA	[2CF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11713, 0x003F };
    uint32_t const ces[9] = { 0x2CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_484)
{
    // 11713 0061;	
    // (𑜓) AHOM LETTER DA	[2CF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11713, 0x0061 };
    uint32_t const ces[9] = { 0x2CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_485)
{
    // 11713 0041;	
    // (𑜓) AHOM LETTER DA	[2CF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11713, 0x0041 };
    uint32_t const ces[9] = { 0x2CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_486)
{
    // 11713 0062;	
    // (𑜓) AHOM LETTER DA	[2CF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11713, 0x0062 };
    uint32_t const ces[9] = { 0x2CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_487)
{
    // 11714 0021;	
    // (𑜔) AHOM LETTER DHA	[2CF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11714, 0x0021 };
    uint32_t const ces[9] = { 0x2CF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_488)
{
    // 11714 003F;	
    // (𑜔) AHOM LETTER DHA	[2CF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11714, 0x003F };
    uint32_t const ces[9] = { 0x2CF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_489)
{
    // 11714 0061;	
    // (𑜔) AHOM LETTER DHA	[2CF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11714, 0x0061 };
    uint32_t const ces[9] = { 0x2CF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_490)
{
    // 11714 0041;	
    // (𑜔) AHOM LETTER DHA	[2CF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11714, 0x0041 };
    uint32_t const ces[9] = { 0x2CF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_491)
{
    // 11714 0062;	
    // (𑜔) AHOM LETTER DHA	[2CF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11714, 0x0062 };
    uint32_t const ces[9] = { 0x2CF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_492)
{
    // 11715 0021;	
    // (𑜕) AHOM LETTER GA	[2CF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11715, 0x0021 };
    uint32_t const ces[9] = { 0x2CF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_493)
{
    // 11716 0021;	
    // (𑜖) AHOM LETTER ALTERNATE GA	[2CF7 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x11716, 0x0021 };
    uint32_t const ces[11] = { 0x2CF7, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_494)
{
    // 11715 003F;	
    // (𑜕) AHOM LETTER GA	[2CF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11715, 0x003F };
    uint32_t const ces[9] = { 0x2CF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_495)
{
    // 11716 003F;	
    // (𑜖) AHOM LETTER ALTERNATE GA	[2CF7 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x11716, 0x003F };
    uint32_t const ces[11] = { 0x2CF7, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_496)
{
    // 11715 0061;	
    // (𑜕) AHOM LETTER GA	[2CF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11715, 0x0061 };
    uint32_t const ces[9] = { 0x2CF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_497)
{
    // 11715 0041;	
    // (𑜕) AHOM LETTER GA	[2CF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11715, 0x0041 };
    uint32_t const ces[9] = { 0x2CF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_498)
{
    // 11716 0061;	
    // (𑜖) AHOM LETTER ALTERNATE GA	[2CF7 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x11716, 0x0061 };
    uint32_t const ces[11] = { 0x2CF7, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_181_499)
{
    // 11716 0041;	
    // (𑜖) AHOM LETTER ALTERNATE GA	[2CF7 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x11716, 0x0041 };
    uint32_t const ces[11] = { 0x2CF7, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

