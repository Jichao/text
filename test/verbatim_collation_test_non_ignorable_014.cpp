// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_014_000)
{
    // FE3D 0062;	
    // (︽) PRESENTATION FORM FOR VERTICAL LEFT DOUBLE ANGLE BRACKET	[0372 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3D, 0x0062 };
    uint32_t const ces[9] = { 0x0372, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_001)
{
    // 300B 0021;	
    // (》) RIGHT DOUBLE ANGLE BRACKET	[0373 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300B, 0x0021 };
    uint32_t const ces[9] = { 0x0373, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_002)
{
    // FE3E 0021;	
    // (︾) PRESENTATION FORM FOR VERTICAL RIGHT DOUBLE ANGLE BRACKET	[0373 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3E, 0x0021 };
    uint32_t const ces[9] = { 0x0373, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_003)
{
    // 300B 003F;	
    // (》) RIGHT DOUBLE ANGLE BRACKET	[0373 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300B, 0x003F };
    uint32_t const ces[9] = { 0x0373, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_004)
{
    // FE3E 003F;	
    // (︾) PRESENTATION FORM FOR VERTICAL RIGHT DOUBLE ANGLE BRACKET	[0373 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3E, 0x003F };
    uint32_t const ces[9] = { 0x0373, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_005)
{
    // 300B 0061;	
    // (》) RIGHT DOUBLE ANGLE BRACKET	[0373 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300B, 0x0061 };
    uint32_t const ces[9] = { 0x0373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_006)
{
    // 300B 0041;	
    // (》) RIGHT DOUBLE ANGLE BRACKET	[0373 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x300B, 0x0041 };
    uint32_t const ces[9] = { 0x0373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_007)
{
    // FE3E 0061;	
    // (︾) PRESENTATION FORM FOR VERTICAL RIGHT DOUBLE ANGLE BRACKET	[0373 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3E, 0x0061 };
    uint32_t const ces[9] = { 0x0373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_008)
{
    // FE3E 0041;	
    // (︾) PRESENTATION FORM FOR VERTICAL RIGHT DOUBLE ANGLE BRACKET	[0373 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE3E, 0x0041 };
    uint32_t const ces[9] = { 0x0373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_009)
{
    // 300B 0062;	
    // (》) RIGHT DOUBLE ANGLE BRACKET	[0373 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300B, 0x0062 };
    uint32_t const ces[9] = { 0x0373, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_010)
{
    // FE3E 0062;	
    // (︾) PRESENTATION FORM FOR VERTICAL RIGHT DOUBLE ANGLE BRACKET	[0373 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3E, 0x0062 };
    uint32_t const ces[9] = { 0x0373, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_011)
{
    // 300C 0021;	
    // (「) LEFT CORNER BRACKET	[0374 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300C, 0x0021 };
    uint32_t const ces[9] = { 0x0374, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_012)
{
    // FF62 0021;	
    // (｢) HALFWIDTH LEFT CORNER BRACKET	[0374 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF62, 0x0021 };
    uint32_t const ces[9] = { 0x0374, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_013)
{
    // FE41 0021;	
    // (﹁) PRESENTATION FORM FOR VERTICAL LEFT CORNER BRACKET	[0374 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE41, 0x0021 };
    uint32_t const ces[9] = { 0x0374, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_014)
{
    // 300C 003F;	
    // (「) LEFT CORNER BRACKET	[0374 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300C, 0x003F };
    uint32_t const ces[9] = { 0x0374, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_015)
{
    // FF62 003F;	
    // (｢) HALFWIDTH LEFT CORNER BRACKET	[0374 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF62, 0x003F };
    uint32_t const ces[9] = { 0x0374, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_016)
{
    // FE41 003F;	
    // (﹁) PRESENTATION FORM FOR VERTICAL LEFT CORNER BRACKET	[0374 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE41, 0x003F };
    uint32_t const ces[9] = { 0x0374, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_017)
{
    // 300C 0061;	
    // (「) LEFT CORNER BRACKET	[0374 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300C, 0x0061 };
    uint32_t const ces[9] = { 0x0374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_018)
{
    // 300C 0041;	
    // (「) LEFT CORNER BRACKET	[0374 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x300C, 0x0041 };
    uint32_t const ces[9] = { 0x0374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_019)
{
    // FF62 0061;	
    // (｢) HALFWIDTH LEFT CORNER BRACKET	[0374 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF62, 0x0061 };
    uint32_t const ces[9] = { 0x0374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_020)
{
    // FF62 0041;	
    // (｢) HALFWIDTH LEFT CORNER BRACKET	[0374 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF62, 0x0041 };
    uint32_t const ces[9] = { 0x0374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_021)
{
    // FE41 0061;	
    // (﹁) PRESENTATION FORM FOR VERTICAL LEFT CORNER BRACKET	[0374 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE41, 0x0061 };
    uint32_t const ces[9] = { 0x0374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_022)
{
    // FE41 0041;	
    // (﹁) PRESENTATION FORM FOR VERTICAL LEFT CORNER BRACKET	[0374 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE41, 0x0041 };
    uint32_t const ces[9] = { 0x0374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_023)
{
    // 300C 0062;	
    // (「) LEFT CORNER BRACKET	[0374 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300C, 0x0062 };
    uint32_t const ces[9] = { 0x0374, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_024)
{
    // FF62 0062;	
    // (｢) HALFWIDTH LEFT CORNER BRACKET	[0374 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF62, 0x0062 };
    uint32_t const ces[9] = { 0x0374, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_025)
{
    // FE41 0062;	
    // (﹁) PRESENTATION FORM FOR VERTICAL LEFT CORNER BRACKET	[0374 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE41, 0x0062 };
    uint32_t const ces[9] = { 0x0374, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_026)
{
    // 300D 0021;	
    // (」) RIGHT CORNER BRACKET	[0375 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300D, 0x0021 };
    uint32_t const ces[9] = { 0x0375, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_027)
{
    // FF63 0021;	
    // (｣) HALFWIDTH RIGHT CORNER BRACKET	[0375 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF63, 0x0021 };
    uint32_t const ces[9] = { 0x0375, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_028)
{
    // FE42 0021;	
    // (﹂) PRESENTATION FORM FOR VERTICAL RIGHT CORNER BRACKET	[0375 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE42, 0x0021 };
    uint32_t const ces[9] = { 0x0375, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_029)
{
    // 300D 003F;	
    // (」) RIGHT CORNER BRACKET	[0375 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300D, 0x003F };
    uint32_t const ces[9] = { 0x0375, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_030)
{
    // FF63 003F;	
    // (｣) HALFWIDTH RIGHT CORNER BRACKET	[0375 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF63, 0x003F };
    uint32_t const ces[9] = { 0x0375, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_031)
{
    // FE42 003F;	
    // (﹂) PRESENTATION FORM FOR VERTICAL RIGHT CORNER BRACKET	[0375 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE42, 0x003F };
    uint32_t const ces[9] = { 0x0375, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_032)
{
    // 300D 0061;	
    // (」) RIGHT CORNER BRACKET	[0375 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300D, 0x0061 };
    uint32_t const ces[9] = { 0x0375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_033)
{
    // 300D 0041;	
    // (」) RIGHT CORNER BRACKET	[0375 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x300D, 0x0041 };
    uint32_t const ces[9] = { 0x0375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_034)
{
    // FF63 0061;	
    // (｣) HALFWIDTH RIGHT CORNER BRACKET	[0375 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF63, 0x0061 };
    uint32_t const ces[9] = { 0x0375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_035)
{
    // FF63 0041;	
    // (｣) HALFWIDTH RIGHT CORNER BRACKET	[0375 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF63, 0x0041 };
    uint32_t const ces[9] = { 0x0375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_036)
{
    // FE42 0061;	
    // (﹂) PRESENTATION FORM FOR VERTICAL RIGHT CORNER BRACKET	[0375 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE42, 0x0061 };
    uint32_t const ces[9] = { 0x0375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_037)
{
    // FE42 0041;	
    // (﹂) PRESENTATION FORM FOR VERTICAL RIGHT CORNER BRACKET	[0375 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE42, 0x0041 };
    uint32_t const ces[9] = { 0x0375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_038)
{
    // 300D 0062;	
    // (」) RIGHT CORNER BRACKET	[0375 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300D, 0x0062 };
    uint32_t const ces[9] = { 0x0375, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_039)
{
    // FF63 0062;	
    // (｣) HALFWIDTH RIGHT CORNER BRACKET	[0375 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF63, 0x0062 };
    uint32_t const ces[9] = { 0x0375, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_040)
{
    // FE42 0062;	
    // (﹂) PRESENTATION FORM FOR VERTICAL RIGHT CORNER BRACKET	[0375 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE42, 0x0062 };
    uint32_t const ces[9] = { 0x0375, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_041)
{
    // 300E 0021;	
    // (『) LEFT WHITE CORNER BRACKET	[0376 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300E, 0x0021 };
    uint32_t const ces[9] = { 0x0376, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_042)
{
    // FE43 0021;	
    // (﹃) PRESENTATION FORM FOR VERTICAL LEFT WHITE CORNER BRACKET	[0376 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE43, 0x0021 };
    uint32_t const ces[9] = { 0x0376, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_043)
{
    // 300E 003F;	
    // (『) LEFT WHITE CORNER BRACKET	[0376 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300E, 0x003F };
    uint32_t const ces[9] = { 0x0376, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_044)
{
    // FE43 003F;	
    // (﹃) PRESENTATION FORM FOR VERTICAL LEFT WHITE CORNER BRACKET	[0376 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE43, 0x003F };
    uint32_t const ces[9] = { 0x0376, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_045)
{
    // 300E 0061;	
    // (『) LEFT WHITE CORNER BRACKET	[0376 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300E, 0x0061 };
    uint32_t const ces[9] = { 0x0376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_046)
{
    // 300E 0041;	
    // (『) LEFT WHITE CORNER BRACKET	[0376 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x300E, 0x0041 };
    uint32_t const ces[9] = { 0x0376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_047)
{
    // FE43 0061;	
    // (﹃) PRESENTATION FORM FOR VERTICAL LEFT WHITE CORNER BRACKET	[0376 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE43, 0x0061 };
    uint32_t const ces[9] = { 0x0376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_048)
{
    // FE43 0041;	
    // (﹃) PRESENTATION FORM FOR VERTICAL LEFT WHITE CORNER BRACKET	[0376 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE43, 0x0041 };
    uint32_t const ces[9] = { 0x0376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_049)
{
    // 300E 0062;	
    // (『) LEFT WHITE CORNER BRACKET	[0376 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300E, 0x0062 };
    uint32_t const ces[9] = { 0x0376, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_050)
{
    // FE43 0062;	
    // (﹃) PRESENTATION FORM FOR VERTICAL LEFT WHITE CORNER BRACKET	[0376 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE43, 0x0062 };
    uint32_t const ces[9] = { 0x0376, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_051)
{
    // 300F 0021;	
    // (』) RIGHT WHITE CORNER BRACKET	[0377 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300F, 0x0021 };
    uint32_t const ces[9] = { 0x0377, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_052)
{
    // FE44 0021;	
    // (﹄) PRESENTATION FORM FOR VERTICAL RIGHT WHITE CORNER BRACKET	[0377 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE44, 0x0021 };
    uint32_t const ces[9] = { 0x0377, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_053)
{
    // 300F 003F;	
    // (』) RIGHT WHITE CORNER BRACKET	[0377 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300F, 0x003F };
    uint32_t const ces[9] = { 0x0377, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_054)
{
    // FE44 003F;	
    // (﹄) PRESENTATION FORM FOR VERTICAL RIGHT WHITE CORNER BRACKET	[0377 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE44, 0x003F };
    uint32_t const ces[9] = { 0x0377, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_055)
{
    // 300F 0061;	
    // (』) RIGHT WHITE CORNER BRACKET	[0377 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300F, 0x0061 };
    uint32_t const ces[9] = { 0x0377, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_056)
{
    // 300F 0041;	
    // (』) RIGHT WHITE CORNER BRACKET	[0377 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x300F, 0x0041 };
    uint32_t const ces[9] = { 0x0377, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_057)
{
    // FE44 0061;	
    // (﹄) PRESENTATION FORM FOR VERTICAL RIGHT WHITE CORNER BRACKET	[0377 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE44, 0x0061 };
    uint32_t const ces[9] = { 0x0377, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_058)
{
    // FE44 0041;	
    // (﹄) PRESENTATION FORM FOR VERTICAL RIGHT WHITE CORNER BRACKET	[0377 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE44, 0x0041 };
    uint32_t const ces[9] = { 0x0377, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_059)
{
    // 300F 0062;	
    // (』) RIGHT WHITE CORNER BRACKET	[0377 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300F, 0x0062 };
    uint32_t const ces[9] = { 0x0377, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_060)
{
    // FE44 0062;	
    // (﹄) PRESENTATION FORM FOR VERTICAL RIGHT WHITE CORNER BRACKET	[0377 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE44, 0x0062 };
    uint32_t const ces[9] = { 0x0377, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_061)
{
    // 3010 0021;	
    // (【) LEFT BLACK LENTICULAR BRACKET	[0378 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3010, 0x0021 };
    uint32_t const ces[9] = { 0x0378, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_062)
{
    // FE3B 0021;	
    // (︻) PRESENTATION FORM FOR VERTICAL LEFT BLACK LENTICULAR BRACKET	[0378 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3B, 0x0021 };
    uint32_t const ces[9] = { 0x0378, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_063)
{
    // 3010 003F;	
    // (【) LEFT BLACK LENTICULAR BRACKET	[0378 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3010, 0x003F };
    uint32_t const ces[9] = { 0x0378, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_064)
{
    // FE3B 003F;	
    // (︻) PRESENTATION FORM FOR VERTICAL LEFT BLACK LENTICULAR BRACKET	[0378 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3B, 0x003F };
    uint32_t const ces[9] = { 0x0378, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_065)
{
    // 3010 0061;	
    // (【) LEFT BLACK LENTICULAR BRACKET	[0378 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3010, 0x0061 };
    uint32_t const ces[9] = { 0x0378, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_066)
{
    // 3010 0041;	
    // (【) LEFT BLACK LENTICULAR BRACKET	[0378 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3010, 0x0041 };
    uint32_t const ces[9] = { 0x0378, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_067)
{
    // FE3B 0061;	
    // (︻) PRESENTATION FORM FOR VERTICAL LEFT BLACK LENTICULAR BRACKET	[0378 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3B, 0x0061 };
    uint32_t const ces[9] = { 0x0378, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_068)
{
    // FE3B 0041;	
    // (︻) PRESENTATION FORM FOR VERTICAL LEFT BLACK LENTICULAR BRACKET	[0378 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE3B, 0x0041 };
    uint32_t const ces[9] = { 0x0378, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_069)
{
    // 3010 0062;	
    // (【) LEFT BLACK LENTICULAR BRACKET	[0378 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3010, 0x0062 };
    uint32_t const ces[9] = { 0x0378, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_070)
{
    // FE3B 0062;	
    // (︻) PRESENTATION FORM FOR VERTICAL LEFT BLACK LENTICULAR BRACKET	[0378 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3B, 0x0062 };
    uint32_t const ces[9] = { 0x0378, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_071)
{
    // 3011 0021;	
    // (】) RIGHT BLACK LENTICULAR BRACKET	[0379 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3011, 0x0021 };
    uint32_t const ces[9] = { 0x0379, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_072)
{
    // FE3C 0021;	
    // (︼) PRESENTATION FORM FOR VERTICAL RIGHT BLACK LENTICULAR BRACKET	[0379 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3C, 0x0021 };
    uint32_t const ces[9] = { 0x0379, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_073)
{
    // 3011 003F;	
    // (】) RIGHT BLACK LENTICULAR BRACKET	[0379 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3011, 0x003F };
    uint32_t const ces[9] = { 0x0379, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_074)
{
    // FE3C 003F;	
    // (︼) PRESENTATION FORM FOR VERTICAL RIGHT BLACK LENTICULAR BRACKET	[0379 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3C, 0x003F };
    uint32_t const ces[9] = { 0x0379, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_075)
{
    // 3011 0061;	
    // (】) RIGHT BLACK LENTICULAR BRACKET	[0379 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3011, 0x0061 };
    uint32_t const ces[9] = { 0x0379, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_076)
{
    // 3011 0041;	
    // (】) RIGHT BLACK LENTICULAR BRACKET	[0379 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3011, 0x0041 };
    uint32_t const ces[9] = { 0x0379, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_077)
{
    // FE3C 0061;	
    // (︼) PRESENTATION FORM FOR VERTICAL RIGHT BLACK LENTICULAR BRACKET	[0379 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3C, 0x0061 };
    uint32_t const ces[9] = { 0x0379, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_078)
{
    // FE3C 0041;	
    // (︼) PRESENTATION FORM FOR VERTICAL RIGHT BLACK LENTICULAR BRACKET	[0379 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE3C, 0x0041 };
    uint32_t const ces[9] = { 0x0379, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_079)
{
    // 3011 0062;	
    // (】) RIGHT BLACK LENTICULAR BRACKET	[0379 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3011, 0x0062 };
    uint32_t const ces[9] = { 0x0379, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_080)
{
    // FE3C 0062;	
    // (︼) PRESENTATION FORM FOR VERTICAL RIGHT BLACK LENTICULAR BRACKET	[0379 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3C, 0x0062 };
    uint32_t const ces[9] = { 0x0379, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_081)
{
    // 3014 0021;	
    // (〔) LEFT TORTOISE SHELL BRACKET	[037A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3014, 0x0021 };
    uint32_t const ces[9] = { 0x037A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_082)
{
    // FE5D 0021;	
    // (﹝) SMALL LEFT TORTOISE SHELL BRACKET	[037A 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE5D, 0x0021 };
    uint32_t const ces[9] = { 0x037A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_083)
{
    // FE39 0021;	
    // (︹) PRESENTATION FORM FOR VERTICAL LEFT TORTOISE SHELL BRACKET	[037A 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE39, 0x0021 };
    uint32_t const ces[9] = { 0x037A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_084)
{
    // 3014 003F;	
    // (〔) LEFT TORTOISE SHELL BRACKET	[037A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3014, 0x003F };
    uint32_t const ces[9] = { 0x037A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_085)
{
    // FE5D 003F;	
    // (﹝) SMALL LEFT TORTOISE SHELL BRACKET	[037A 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE5D, 0x003F };
    uint32_t const ces[9] = { 0x037A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_086)
{
    // FE39 003F;	
    // (︹) PRESENTATION FORM FOR VERTICAL LEFT TORTOISE SHELL BRACKET	[037A 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE39, 0x003F };
    uint32_t const ces[9] = { 0x037A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_087)
{
    // 3014 0061;	
    // (〔) LEFT TORTOISE SHELL BRACKET	[037A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3014, 0x0061 };
    uint32_t const ces[9] = { 0x037A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_088)
{
    // 3014 0041;	
    // (〔) LEFT TORTOISE SHELL BRACKET	[037A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3014, 0x0041 };
    uint32_t const ces[9] = { 0x037A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_089)
{
    // FE5D 0061;	
    // (﹝) SMALL LEFT TORTOISE SHELL BRACKET	[037A 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE5D, 0x0061 };
    uint32_t const ces[9] = { 0x037A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_090)
{
    // FE5D 0041;	
    // (﹝) SMALL LEFT TORTOISE SHELL BRACKET	[037A 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE5D, 0x0041 };
    uint32_t const ces[9] = { 0x037A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_091)
{
    // FE39 0061;	
    // (︹) PRESENTATION FORM FOR VERTICAL LEFT TORTOISE SHELL BRACKET	[037A 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE39, 0x0061 };
    uint32_t const ces[9] = { 0x037A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_092)
{
    // FE39 0041;	
    // (︹) PRESENTATION FORM FOR VERTICAL LEFT TORTOISE SHELL BRACKET	[037A 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE39, 0x0041 };
    uint32_t const ces[9] = { 0x037A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_093)
{
    // 3014 0062;	
    // (〔) LEFT TORTOISE SHELL BRACKET	[037A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3014, 0x0062 };
    uint32_t const ces[9] = { 0x037A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_094)
{
    // FE5D 0062;	
    // (﹝) SMALL LEFT TORTOISE SHELL BRACKET	[037A 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE5D, 0x0062 };
    uint32_t const ces[9] = { 0x037A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_095)
{
    // FE39 0062;	
    // (︹) PRESENTATION FORM FOR VERTICAL LEFT TORTOISE SHELL BRACKET	[037A 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE39, 0x0062 };
    uint32_t const ces[9] = { 0x037A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_096)
{
    // 1F12A 0021;	
    // (🄪) TORTOISE SHELL BRACKETED LATIN CAPITAL LETTER S	[037A 1ED7 037B 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]

    uint32_t cps[2] = { 0x1F12A, 0x0021 };
    uint32_t const ces[15] = { 0x037A, 0x1ED7, 0x037B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_097)
{
    // 1F12A 003F;	
    // (🄪) TORTOISE SHELL BRACKETED LATIN CAPITAL LETTER S	[037A 1ED7 037B 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]

    uint32_t cps[2] = { 0x1F12A, 0x003F };
    uint32_t const ces[15] = { 0x037A, 0x1ED7, 0x037B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_098)
{
    // 1F12A 0061;	
    // (🄪) TORTOISE SHELL BRACKETED LATIN CAPITAL LETTER S	[037A 1ED7 037B 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]

    uint32_t cps[2] = { 0x1F12A, 0x0061 };
    uint32_t const ces[15] = { 0x037A, 0x1ED7, 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_099)
{
    // 1F12A 0041;	
    // (🄪) TORTOISE SHELL BRACKETED LATIN CAPITAL LETTER S	[037A 1ED7 037B 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]

    uint32_t cps[2] = { 0x1F12A, 0x0041 };
    uint32_t const ces[15] = { 0x037A, 0x1ED7, 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_100)
{
    // 1F12A 0062;	
    // (🄪) TORTOISE SHELL BRACKETED LATIN CAPITAL LETTER S	[037A 1ED7 037B 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]

    uint32_t cps[2] = { 0x1F12A, 0x0062 };
    uint32_t const ces[15] = { 0x037A, 0x1ED7, 0x037B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_101)
{
    // 1F241 0021;	
    // (🉁) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-4E09	[037A FB40 CE09 037B 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F241, 0x0021 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xCE09, 0x037B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_102)
{
    // 1F241 003F;	
    // (🉁) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-4E09	[037A FB40 CE09 037B 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F241, 0x003F };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xCE09, 0x037B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_103)
{
    // 1F241 0061;	
    // (🉁) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-4E09	[037A FB40 CE09 037B 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F241, 0x0061 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xCE09, 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_104)
{
    // 1F241 0041;	
    // (🉁) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-4E09	[037A FB40 CE09 037B 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1F241, 0x0041 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xCE09, 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_105)
{
    // 1F241 0062;	
    // (🉁) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-4E09	[037A FB40 CE09 037B 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F241, 0x0062 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xCE09, 0x037B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_106)
{
    // 1F242 0021;	
    // (🉂) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-4E8C	[037A FB40 CE8C 037B 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F242, 0x0021 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xCE8C, 0x037B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_107)
{
    // 1F242 003F;	
    // (🉂) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-4E8C	[037A FB40 CE8C 037B 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F242, 0x003F };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xCE8C, 0x037B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_108)
{
    // 1F242 0061;	
    // (🉂) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-4E8C	[037A FB40 CE8C 037B 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F242, 0x0061 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xCE8C, 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_109)
{
    // 1F242 0041;	
    // (🉂) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-4E8C	[037A FB40 CE8C 037B 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1F242, 0x0041 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xCE8C, 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_110)
{
    // 1F242 0062;	
    // (🉂) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-4E8C	[037A FB40 CE8C 037B 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F242, 0x0062 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xCE8C, 0x037B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_111)
{
    // 1F247 0021;	
    // (🉇) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-52DD	[037A FB40 D2DD 037B 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F247, 0x0021 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xD2DD, 0x037B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_112)
{
    // 1F247 003F;	
    // (🉇) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-52DD	[037A FB40 D2DD 037B 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F247, 0x003F };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xD2DD, 0x037B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_113)
{
    // 1F247 0061;	
    // (🉇) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-52DD	[037A FB40 D2DD 037B 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F247, 0x0061 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xD2DD, 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_114)
{
    // 1F247 0041;	
    // (🉇) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-52DD	[037A FB40 D2DD 037B 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1F247, 0x0041 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xD2DD, 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_115)
{
    // 1F247 0062;	
    // (🉇) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-52DD	[037A FB40 D2DD 037B 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F247, 0x0062 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xD2DD, 0x037B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_116)
{
    // 1F243 0021;	
    // (🉃) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-5B89	[037A FB40 DB89 037B 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F243, 0x0021 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xDB89, 0x037B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_117)
{
    // 1F243 003F;	
    // (🉃) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-5B89	[037A FB40 DB89 037B 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F243, 0x003F };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xDB89, 0x037B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_118)
{
    // 1F243 0061;	
    // (🉃) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-5B89	[037A FB40 DB89 037B 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F243, 0x0061 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xDB89, 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_119)
{
    // 1F243 0041;	
    // (🉃) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-5B89	[037A FB40 DB89 037B 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1F243, 0x0041 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xDB89, 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_120)
{
    // 1F243 0062;	
    // (🉃) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-5B89	[037A FB40 DB89 037B 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F243, 0x0062 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xDB89, 0x037B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_121)
{
    // 1F245 0021;	
    // (🉅) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-6253	[037A FB40 E253 037B 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F245, 0x0021 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xE253, 0x037B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_122)
{
    // 1F245 003F;	
    // (🉅) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-6253	[037A FB40 E253 037B 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F245, 0x003F };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xE253, 0x037B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_123)
{
    // 1F245 0061;	
    // (🉅) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-6253	[037A FB40 E253 037B 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F245, 0x0061 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xE253, 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_124)
{
    // 1F245 0041;	
    // (🉅) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-6253	[037A FB40 E253 037B 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1F245, 0x0041 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xE253, 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_125)
{
    // 1F245 0062;	
    // (🉅) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-6253	[037A FB40 E253 037B 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F245, 0x0062 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xE253, 0x037B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_126)
{
    // 1F248 0021;	
    // (🉈) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-6557	[037A FB40 E557 037B 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F248, 0x0021 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xE557, 0x037B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_127)
{
    // 1F248 003F;	
    // (🉈) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-6557	[037A FB40 E557 037B 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F248, 0x003F };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xE557, 0x037B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_128)
{
    // 1F248 0061;	
    // (🉈) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-6557	[037A FB40 E557 037B 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F248, 0x0061 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xE557, 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_129)
{
    // 1F248 0041;	
    // (🉈) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-6557	[037A FB40 E557 037B 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1F248, 0x0041 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xE557, 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_130)
{
    // 1F248 0062;	
    // (🉈) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-6557	[037A FB40 E557 037B 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F248, 0x0062 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xE557, 0x037B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_131)
{
    // 1F240 0021;	
    // (🉀) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-672C	[037A FB40 E72C 037B 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F240, 0x0021 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xE72C, 0x037B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_132)
{
    // 1F240 003F;	
    // (🉀) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-672C	[037A FB40 E72C 037B 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F240, 0x003F };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xE72C, 0x037B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_133)
{
    // 1F240 0061;	
    // (🉀) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-672C	[037A FB40 E72C 037B 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F240, 0x0061 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xE72C, 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_134)
{
    // 1F240 0041;	
    // (🉀) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-672C	[037A FB40 E72C 037B 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1F240, 0x0041 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xE72C, 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_135)
{
    // 1F240 0062;	
    // (🉀) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-672C	[037A FB40 E72C 037B 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F240, 0x0062 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xE72C, 0x037B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_136)
{
    // 1F244 0021;	
    // (🉄) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-70B9	[037A FB40 F0B9 037B 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F244, 0x0021 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xF0B9, 0x037B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_137)
{
    // 1F244 003F;	
    // (🉄) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-70B9	[037A FB40 F0B9 037B 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F244, 0x003F };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xF0B9, 0x037B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_138)
{
    // 1F244 0061;	
    // (🉄) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-70B9	[037A FB40 F0B9 037B 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F244, 0x0061 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xF0B9, 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_139)
{
    // 1F244 0041;	
    // (🉄) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-70B9	[037A FB40 F0B9 037B 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1F244, 0x0041 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xF0B9, 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_140)
{
    // 1F244 0062;	
    // (🉄) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-70B9	[037A FB40 F0B9 037B 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F244, 0x0062 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xF0B9, 0x037B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_141)
{
    // 1F246 0021;	
    // (🉆) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-76D7	[037A FB40 F6D7 037B 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F246, 0x0021 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xF6D7, 0x037B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_142)
{
    // 1F246 003F;	
    // (🉆) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-76D7	[037A FB40 F6D7 037B 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F246, 0x003F };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xF6D7, 0x037B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_143)
{
    // 1F246 0061;	
    // (🉆) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-76D7	[037A FB40 F6D7 037B 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F246, 0x0061 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xF6D7, 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_144)
{
    // 1F246 0041;	
    // (🉆) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-76D7	[037A FB40 F6D7 037B 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1F246, 0x0041 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xF6D7, 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_145)
{
    // 1F246 0062;	
    // (🉆) TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-76D7	[037A FB40 F6D7 037B 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F246, 0x0062 };
    uint32_t const ces[16] = { 0x037A, 0xFB40, 0xF6D7, 0x037B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_146)
{
    // 3015 0021;	
    // (〕) RIGHT TORTOISE SHELL BRACKET	[037B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3015, 0x0021 };
    uint32_t const ces[9] = { 0x037B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_147)
{
    // FE5E 0021;	
    // (﹞) SMALL RIGHT TORTOISE SHELL BRACKET	[037B 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE5E, 0x0021 };
    uint32_t const ces[9] = { 0x037B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_148)
{
    // FE3A 0021;	
    // (︺) PRESENTATION FORM FOR VERTICAL RIGHT TORTOISE SHELL BRACKET	[037B 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3A, 0x0021 };
    uint32_t const ces[9] = { 0x037B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_149)
{
    // 3015 003F;	
    // (〕) RIGHT TORTOISE SHELL BRACKET	[037B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3015, 0x003F };
    uint32_t const ces[9] = { 0x037B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_150)
{
    // FE5E 003F;	
    // (﹞) SMALL RIGHT TORTOISE SHELL BRACKET	[037B 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE5E, 0x003F };
    uint32_t const ces[9] = { 0x037B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_151)
{
    // FE3A 003F;	
    // (︺) PRESENTATION FORM FOR VERTICAL RIGHT TORTOISE SHELL BRACKET	[037B 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3A, 0x003F };
    uint32_t const ces[9] = { 0x037B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_152)
{
    // 3015 0061;	
    // (〕) RIGHT TORTOISE SHELL BRACKET	[037B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3015, 0x0061 };
    uint32_t const ces[9] = { 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_153)
{
    // 3015 0041;	
    // (〕) RIGHT TORTOISE SHELL BRACKET	[037B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3015, 0x0041 };
    uint32_t const ces[9] = { 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_154)
{
    // FE5E 0061;	
    // (﹞) SMALL RIGHT TORTOISE SHELL BRACKET	[037B 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE5E, 0x0061 };
    uint32_t const ces[9] = { 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_155)
{
    // FE5E 0041;	
    // (﹞) SMALL RIGHT TORTOISE SHELL BRACKET	[037B 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE5E, 0x0041 };
    uint32_t const ces[9] = { 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_156)
{
    // FE3A 0061;	
    // (︺) PRESENTATION FORM FOR VERTICAL RIGHT TORTOISE SHELL BRACKET	[037B 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3A, 0x0061 };
    uint32_t const ces[9] = { 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_157)
{
    // FE3A 0041;	
    // (︺) PRESENTATION FORM FOR VERTICAL RIGHT TORTOISE SHELL BRACKET	[037B 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE3A, 0x0041 };
    uint32_t const ces[9] = { 0x037B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_158)
{
    // 3015 0062;	
    // (〕) RIGHT TORTOISE SHELL BRACKET	[037B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3015, 0x0062 };
    uint32_t const ces[9] = { 0x037B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_159)
{
    // FE5E 0062;	
    // (﹞) SMALL RIGHT TORTOISE SHELL BRACKET	[037B 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE5E, 0x0062 };
    uint32_t const ces[9] = { 0x037B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_160)
{
    // FE3A 0062;	
    // (︺) PRESENTATION FORM FOR VERTICAL RIGHT TORTOISE SHELL BRACKET	[037B 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3A, 0x0062 };
    uint32_t const ces[9] = { 0x037B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_161)
{
    // 3016 0021;	
    // (〖) LEFT WHITE LENTICULAR BRACKET	[037C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3016, 0x0021 };
    uint32_t const ces[9] = { 0x037C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_162)
{
    // FE17 0021;	
    // (︗) PRESENTATION FORM FOR VERTICAL LEFT WHITE LENTICULAR BRACKET	[037C 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE17, 0x0021 };
    uint32_t const ces[9] = { 0x037C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_163)
{
    // 3016 003F;	
    // (〖) LEFT WHITE LENTICULAR BRACKET	[037C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3016, 0x003F };
    uint32_t const ces[9] = { 0x037C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_164)
{
    // FE17 003F;	
    // (︗) PRESENTATION FORM FOR VERTICAL LEFT WHITE LENTICULAR BRACKET	[037C 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE17, 0x003F };
    uint32_t const ces[9] = { 0x037C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_165)
{
    // 3016 0061;	
    // (〖) LEFT WHITE LENTICULAR BRACKET	[037C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3016, 0x0061 };
    uint32_t const ces[9] = { 0x037C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_166)
{
    // 3016 0041;	
    // (〖) LEFT WHITE LENTICULAR BRACKET	[037C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3016, 0x0041 };
    uint32_t const ces[9] = { 0x037C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_167)
{
    // FE17 0061;	
    // (︗) PRESENTATION FORM FOR VERTICAL LEFT WHITE LENTICULAR BRACKET	[037C 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE17, 0x0061 };
    uint32_t const ces[9] = { 0x037C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_168)
{
    // FE17 0041;	
    // (︗) PRESENTATION FORM FOR VERTICAL LEFT WHITE LENTICULAR BRACKET	[037C 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE17, 0x0041 };
    uint32_t const ces[9] = { 0x037C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_169)
{
    // 3016 0062;	
    // (〖) LEFT WHITE LENTICULAR BRACKET	[037C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3016, 0x0062 };
    uint32_t const ces[9] = { 0x037C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_170)
{
    // FE17 0062;	
    // (︗) PRESENTATION FORM FOR VERTICAL LEFT WHITE LENTICULAR BRACKET	[037C 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE17, 0x0062 };
    uint32_t const ces[9] = { 0x037C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_171)
{
    // 3017 0021;	
    // (〗) RIGHT WHITE LENTICULAR BRACKET	[037D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3017, 0x0021 };
    uint32_t const ces[9] = { 0x037D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_172)
{
    // FE18 0021;	
    // (︘) PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRAKCET	[037D 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE18, 0x0021 };
    uint32_t const ces[9] = { 0x037D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_173)
{
    // 3017 003F;	
    // (〗) RIGHT WHITE LENTICULAR BRACKET	[037D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3017, 0x003F };
    uint32_t const ces[9] = { 0x037D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_174)
{
    // FE18 003F;	
    // (︘) PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRAKCET	[037D 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE18, 0x003F };
    uint32_t const ces[9] = { 0x037D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_175)
{
    // 3017 0061;	
    // (〗) RIGHT WHITE LENTICULAR BRACKET	[037D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3017, 0x0061 };
    uint32_t const ces[9] = { 0x037D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_176)
{
    // 3017 0041;	
    // (〗) RIGHT WHITE LENTICULAR BRACKET	[037D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3017, 0x0041 };
    uint32_t const ces[9] = { 0x037D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_177)
{
    // FE18 0061;	
    // (︘) PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRAKCET	[037D 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE18, 0x0061 };
    uint32_t const ces[9] = { 0x037D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_178)
{
    // FE18 0041;	
    // (︘) PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRAKCET	[037D 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE18, 0x0041 };
    uint32_t const ces[9] = { 0x037D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_179)
{
    // 3017 0062;	
    // (〗) RIGHT WHITE LENTICULAR BRACKET	[037D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3017, 0x0062 };
    uint32_t const ces[9] = { 0x037D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_180)
{
    // FE18 0062;	
    // (︘) PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRAKCET	[037D 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE18, 0x0062 };
    uint32_t const ces[9] = { 0x037D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_181)
{
    // 3018 0021;	
    // (〘) LEFT WHITE TORTOISE SHELL BRACKET	[037E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3018, 0x0021 };
    uint32_t const ces[9] = { 0x037E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_182)
{
    // 3018 003F;	
    // (〘) LEFT WHITE TORTOISE SHELL BRACKET	[037E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3018, 0x003F };
    uint32_t const ces[9] = { 0x037E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_183)
{
    // 3018 0061;	
    // (〘) LEFT WHITE TORTOISE SHELL BRACKET	[037E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3018, 0x0061 };
    uint32_t const ces[9] = { 0x037E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_184)
{
    // 3018 0041;	
    // (〘) LEFT WHITE TORTOISE SHELL BRACKET	[037E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3018, 0x0041 };
    uint32_t const ces[9] = { 0x037E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_185)
{
    // 3018 0062;	
    // (〘) LEFT WHITE TORTOISE SHELL BRACKET	[037E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3018, 0x0062 };
    uint32_t const ces[9] = { 0x037E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_186)
{
    // 3019 0021;	
    // (〙) RIGHT WHITE TORTOISE SHELL BRACKET	[037F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3019, 0x0021 };
    uint32_t const ces[9] = { 0x037F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_187)
{
    // 3019 003F;	
    // (〙) RIGHT WHITE TORTOISE SHELL BRACKET	[037F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3019, 0x003F };
    uint32_t const ces[9] = { 0x037F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_188)
{
    // 3019 0061;	
    // (〙) RIGHT WHITE TORTOISE SHELL BRACKET	[037F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3019, 0x0061 };
    uint32_t const ces[9] = { 0x037F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_189)
{
    // 3019 0041;	
    // (〙) RIGHT WHITE TORTOISE SHELL BRACKET	[037F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3019, 0x0041 };
    uint32_t const ces[9] = { 0x037F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_190)
{
    // 3019 0062;	
    // (〙) RIGHT WHITE TORTOISE SHELL BRACKET	[037F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3019, 0x0062 };
    uint32_t const ces[9] = { 0x037F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_191)
{
    // 301A 0021;	
    // (〚) LEFT WHITE SQUARE BRACKET	[0380 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x301A, 0x0021 };
    uint32_t const ces[9] = { 0x0380, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_192)
{
    // 301A 003F;	
    // (〚) LEFT WHITE SQUARE BRACKET	[0380 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x301A, 0x003F };
    uint32_t const ces[9] = { 0x0380, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_193)
{
    // 301A 0061;	
    // (〚) LEFT WHITE SQUARE BRACKET	[0380 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x301A, 0x0061 };
    uint32_t const ces[9] = { 0x0380, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_194)
{
    // 301A 0041;	
    // (〚) LEFT WHITE SQUARE BRACKET	[0380 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x301A, 0x0041 };
    uint32_t const ces[9] = { 0x0380, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_195)
{
    // 301A 0062;	
    // (〚) LEFT WHITE SQUARE BRACKET	[0380 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x301A, 0x0062 };
    uint32_t const ces[9] = { 0x0380, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_196)
{
    // 301B 0021;	
    // (〛) RIGHT WHITE SQUARE BRACKET	[0381 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x301B, 0x0021 };
    uint32_t const ces[9] = { 0x0381, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_197)
{
    // 301B 003F;	
    // (〛) RIGHT WHITE SQUARE BRACKET	[0381 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x301B, 0x003F };
    uint32_t const ces[9] = { 0x0381, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_198)
{
    // 301B 0061;	
    // (〛) RIGHT WHITE SQUARE BRACKET	[0381 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x301B, 0x0061 };
    uint32_t const ces[9] = { 0x0381, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_199)
{
    // 301B 0041;	
    // (〛) RIGHT WHITE SQUARE BRACKET	[0381 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x301B, 0x0041 };
    uint32_t const ces[9] = { 0x0381, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_200)
{
    // 301B 0062;	
    // (〛) RIGHT WHITE SQUARE BRACKET	[0381 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x301B, 0x0062 };
    uint32_t const ces[9] = { 0x0381, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_201)
{
    // FD3E 0021;	
    // (﴾) ORNATE LEFT PARENTHESIS	[0382 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFD3E, 0x0021 };
    uint32_t const ces[9] = { 0x0382, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_202)
{
    // FD3E 003F;	
    // (﴾) ORNATE LEFT PARENTHESIS	[0382 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFD3E, 0x003F };
    uint32_t const ces[9] = { 0x0382, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_203)
{
    // FD3E 0061;	
    // (﴾) ORNATE LEFT PARENTHESIS	[0382 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFD3E, 0x0061 };
    uint32_t const ces[9] = { 0x0382, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_204)
{
    // FD3E 0041;	
    // (﴾) ORNATE LEFT PARENTHESIS	[0382 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFD3E, 0x0041 };
    uint32_t const ces[9] = { 0x0382, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_205)
{
    // FD3E 0062;	
    // (﴾) ORNATE LEFT PARENTHESIS	[0382 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFD3E, 0x0062 };
    uint32_t const ces[9] = { 0x0382, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_206)
{
    // FD3F 0021;	
    // (﴿) ORNATE RIGHT PARENTHESIS	[0383 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFD3F, 0x0021 };
    uint32_t const ces[9] = { 0x0383, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_207)
{
    // FD3F 003F;	
    // (﴿) ORNATE RIGHT PARENTHESIS	[0383 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFD3F, 0x003F };
    uint32_t const ces[9] = { 0x0383, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_208)
{
    // FD3F 0061;	
    // (﴿) ORNATE RIGHT PARENTHESIS	[0383 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFD3F, 0x0061 };
    uint32_t const ces[9] = { 0x0383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_209)
{
    // FD3F 0041;	
    // (﴿) ORNATE RIGHT PARENTHESIS	[0383 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFD3F, 0x0041 };
    uint32_t const ces[9] = { 0x0383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_210)
{
    // FD3F 0062;	
    // (﴿) ORNATE RIGHT PARENTHESIS	[0383 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFD3F, 0x0062 };
    uint32_t const ces[9] = { 0x0383, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_211)
{
    // 2016 0021;	
    // (‖) DOUBLE VERTICAL LINE	[0384 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2016, 0x0021 };
    uint32_t const ces[9] = { 0x0384, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_212)
{
    // 2016 003F;	
    // (‖) DOUBLE VERTICAL LINE	[0384 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2016, 0x003F };
    uint32_t const ces[9] = { 0x0384, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_213)
{
    // 2016 0061;	
    // (‖) DOUBLE VERTICAL LINE	[0384 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2016, 0x0061 };
    uint32_t const ces[9] = { 0x0384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_214)
{
    // 2016 0041;	
    // (‖) DOUBLE VERTICAL LINE	[0384 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2016, 0x0041 };
    uint32_t const ces[9] = { 0x0384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_215)
{
    // 2016 0062;	
    // (‖) DOUBLE VERTICAL LINE	[0384 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2016, 0x0062 };
    uint32_t const ces[9] = { 0x0384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_216)
{
    // 2E3E 0021;	
    // (⸾) WIGGLY VERTICAL LINE	[0385 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E3E, 0x0021 };
    uint32_t const ces[9] = { 0x0385, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_217)
{
    // 2E3E 003F;	
    // (⸾) WIGGLY VERTICAL LINE	[0385 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E3E, 0x003F };
    uint32_t const ces[9] = { 0x0385, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_218)
{
    // 2E3E 0061;	
    // (⸾) WIGGLY VERTICAL LINE	[0385 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E3E, 0x0061 };
    uint32_t const ces[9] = { 0x0385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_219)
{
    // 2E3E 0041;	
    // (⸾) WIGGLY VERTICAL LINE	[0385 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E3E, 0x0041 };
    uint32_t const ces[9] = { 0x0385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_220)
{
    // 2E3E 0062;	
    // (⸾) WIGGLY VERTICAL LINE	[0385 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E3E, 0x0062 };
    uint32_t const ces[9] = { 0x0385, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_221)
{
    // 29D8 0021;	
    // (⧘) LEFT WIGGLY FENCE	[0386 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D8, 0x0021 };
    uint32_t const ces[9] = { 0x0386, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_222)
{
    // 29D8 003F;	
    // (⧘) LEFT WIGGLY FENCE	[0386 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D8, 0x003F };
    uint32_t const ces[9] = { 0x0386, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_223)
{
    // 29D8 0061;	
    // (⧘) LEFT WIGGLY FENCE	[0386 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D8, 0x0061 };
    uint32_t const ces[9] = { 0x0386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_224)
{
    // 29D8 0041;	
    // (⧘) LEFT WIGGLY FENCE	[0386 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29D8, 0x0041 };
    uint32_t const ces[9] = { 0x0386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_225)
{
    // 29D8 0062;	
    // (⧘) LEFT WIGGLY FENCE	[0386 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D8, 0x0062 };
    uint32_t const ces[9] = { 0x0386, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_226)
{
    // 29D9 0021;	
    // (⧙) RIGHT WIGGLY FENCE	[0387 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D9, 0x0021 };
    uint32_t const ces[9] = { 0x0387, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_227)
{
    // 29D9 003F;	
    // (⧙) RIGHT WIGGLY FENCE	[0387 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D9, 0x003F };
    uint32_t const ces[9] = { 0x0387, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_228)
{
    // 29D9 0061;	
    // (⧙) RIGHT WIGGLY FENCE	[0387 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D9, 0x0061 };
    uint32_t const ces[9] = { 0x0387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_229)
{
    // 29D9 0041;	
    // (⧙) RIGHT WIGGLY FENCE	[0387 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29D9, 0x0041 };
    uint32_t const ces[9] = { 0x0387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_230)
{
    // 29D9 0062;	
    // (⧙) RIGHT WIGGLY FENCE	[0387 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D9, 0x0062 };
    uint32_t const ces[9] = { 0x0387, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_231)
{
    // 29DA 0021;	
    // (⧚) LEFT DOUBLE WIGGLY FENCE	[0388 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DA, 0x0021 };
    uint32_t const ces[9] = { 0x0388, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_232)
{
    // 29DA 003F;	
    // (⧚) LEFT DOUBLE WIGGLY FENCE	[0388 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DA, 0x003F };
    uint32_t const ces[9] = { 0x0388, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_233)
{
    // 29DA 0061;	
    // (⧚) LEFT DOUBLE WIGGLY FENCE	[0388 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DA, 0x0061 };
    uint32_t const ces[9] = { 0x0388, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_234)
{
    // 29DA 0041;	
    // (⧚) LEFT DOUBLE WIGGLY FENCE	[0388 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29DA, 0x0041 };
    uint32_t const ces[9] = { 0x0388, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_235)
{
    // 29DA 0062;	
    // (⧚) LEFT DOUBLE WIGGLY FENCE	[0388 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DA, 0x0062 };
    uint32_t const ces[9] = { 0x0388, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_236)
{
    // 29DB 0021;	
    // (⧛) RIGHT DOUBLE WIGGLY FENCE	[0389 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DB, 0x0021 };
    uint32_t const ces[9] = { 0x0389, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_237)
{
    // 29DB 003F;	
    // (⧛) RIGHT DOUBLE WIGGLY FENCE	[0389 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DB, 0x003F };
    uint32_t const ces[9] = { 0x0389, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_238)
{
    // 29DB 0061;	
    // (⧛) RIGHT DOUBLE WIGGLY FENCE	[0389 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DB, 0x0061 };
    uint32_t const ces[9] = { 0x0389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_239)
{
    // 29DB 0041;	
    // (⧛) RIGHT DOUBLE WIGGLY FENCE	[0389 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29DB, 0x0041 };
    uint32_t const ces[9] = { 0x0389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_240)
{
    // 29DB 0062;	
    // (⧛) RIGHT DOUBLE WIGGLY FENCE	[0389 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DB, 0x0062 };
    uint32_t const ces[9] = { 0x0389, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_241)
{
    // 00A7 0021;	
    // (§) SECTION SIGN	[038A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A7, 0x0021 };
    uint32_t const ces[9] = { 0x038A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_242)
{
    // 00A7 003F;	
    // (§) SECTION SIGN	[038A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A7, 0x003F };
    uint32_t const ces[9] = { 0x038A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_243)
{
    // 00A7 0061;	
    // (§) SECTION SIGN	[038A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A7, 0x0061 };
    uint32_t const ces[9] = { 0x038A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_244)
{
    // 00A7 0041;	
    // (§) SECTION SIGN	[038A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x00A7, 0x0041 };
    uint32_t const ces[9] = { 0x038A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_245)
{
    // 00A7 0062;	
    // (§) SECTION SIGN	[038A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A7, 0x0062 };
    uint32_t const ces[9] = { 0x038A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_246)
{
    // 2E39 0021;	
    // (⸹) TOP HALF SECTION SIGN	[038B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E39, 0x0021 };
    uint32_t const ces[9] = { 0x038B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_247)
{
    // 2E39 003F;	
    // (⸹) TOP HALF SECTION SIGN	[038B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E39, 0x003F };
    uint32_t const ces[9] = { 0x038B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_248)
{
    // 2E39 0061;	
    // (⸹) TOP HALF SECTION SIGN	[038B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E39, 0x0061 };
    uint32_t const ces[9] = { 0x038B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_249)
{
    // 2E39 0041;	
    // (⸹) TOP HALF SECTION SIGN	[038B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E39, 0x0041 };
    uint32_t const ces[9] = { 0x038B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_250)
{
    // 2E39 0062;	
    // (⸹) TOP HALF SECTION SIGN	[038B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E39, 0x0062 };
    uint32_t const ces[9] = { 0x038B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_251)
{
    // 00B6 0021;	
    // (¶) PILCROW SIGN	[038C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00B6, 0x0021 };
    uint32_t const ces[9] = { 0x038C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_252)
{
    // 00B6 003F;	
    // (¶) PILCROW SIGN	[038C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00B6, 0x003F };
    uint32_t const ces[9] = { 0x038C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_253)
{
    // 00B6 0061;	
    // (¶) PILCROW SIGN	[038C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00B6, 0x0061 };
    uint32_t const ces[9] = { 0x038C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_254)
{
    // 00B6 0041;	
    // (¶) PILCROW SIGN	[038C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x00B6, 0x0041 };
    uint32_t const ces[9] = { 0x038C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_255)
{
    // 00B6 0062;	
    // (¶) PILCROW SIGN	[038C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00B6, 0x0062 };
    uint32_t const ces[9] = { 0x038C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_256)
{
    // 204B 0021;	
    // (⁋) REVERSED PILCROW SIGN	[038D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204B, 0x0021 };
    uint32_t const ces[9] = { 0x038D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_257)
{
    // 204B 003F;	
    // (⁋) REVERSED PILCROW SIGN	[038D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204B, 0x003F };
    uint32_t const ces[9] = { 0x038D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_258)
{
    // 204B 0061;	
    // (⁋) REVERSED PILCROW SIGN	[038D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204B, 0x0061 };
    uint32_t const ces[9] = { 0x038D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_259)
{
    // 204B 0041;	
    // (⁋) REVERSED PILCROW SIGN	[038D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x204B, 0x0041 };
    uint32_t const ces[9] = { 0x038D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_260)
{
    // 204B 0062;	
    // (⁋) REVERSED PILCROW SIGN	[038D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204B, 0x0062 };
    uint32_t const ces[9] = { 0x038D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_261)
{
    // 2E3F 0021;	
    // (⸿) CAPITULUM	[038E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E3F, 0x0021 };
    uint32_t const ces[9] = { 0x038E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_262)
{
    // 2E3F 003F;	
    // (⸿) CAPITULUM	[038E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E3F, 0x003F };
    uint32_t const ces[9] = { 0x038E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_263)
{
    // 2E3F 0061;	
    // (⸿) CAPITULUM	[038E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E3F, 0x0061 };
    uint32_t const ces[9] = { 0x038E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_264)
{
    // 2E3F 0041;	
    // (⸿) CAPITULUM	[038E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E3F, 0x0041 };
    uint32_t const ces[9] = { 0x038E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_265)
{
    // 2E3F 0062;	
    // (⸿) CAPITULUM	[038E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E3F, 0x0062 };
    uint32_t const ces[9] = { 0x038E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_266)
{
    // 0040 0021;	
    // ('@') COMMERCIAL AT	[038F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0040, 0x0021 };
    uint32_t const ces[9] = { 0x038F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_267)
{
    // FF20 0021;	
    // (＠) FULLWIDTH COMMERCIAL AT	[038F 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF20, 0x0021 };
    uint32_t const ces[9] = { 0x038F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_268)
{
    // FE6B 0021;	
    // (﹫) SMALL COMMERCIAL AT	[038F 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE6B, 0x0021 };
    uint32_t const ces[9] = { 0x038F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_269)
{
    // 0040 003F;	
    // ('@') COMMERCIAL AT	[038F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0040, 0x003F };
    uint32_t const ces[9] = { 0x038F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_270)
{
    // FF20 003F;	
    // (＠) FULLWIDTH COMMERCIAL AT	[038F 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF20, 0x003F };
    uint32_t const ces[9] = { 0x038F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_271)
{
    // FE6B 003F;	
    // (﹫) SMALL COMMERCIAL AT	[038F 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE6B, 0x003F };
    uint32_t const ces[9] = { 0x038F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_272)
{
    // 0040 0061;	
    // ('@') COMMERCIAL AT	[038F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0040, 0x0061 };
    uint32_t const ces[9] = { 0x038F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_273)
{
    // 0040 0041;	
    // ('@') COMMERCIAL AT	[038F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0040, 0x0041 };
    uint32_t const ces[9] = { 0x038F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_274)
{
    // FF20 0061;	
    // (＠) FULLWIDTH COMMERCIAL AT	[038F 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF20, 0x0061 };
    uint32_t const ces[9] = { 0x038F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_275)
{
    // FF20 0041;	
    // (＠) FULLWIDTH COMMERCIAL AT	[038F 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF20, 0x0041 };
    uint32_t const ces[9] = { 0x038F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_276)
{
    // FE6B 0061;	
    // (﹫) SMALL COMMERCIAL AT	[038F 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE6B, 0x0061 };
    uint32_t const ces[9] = { 0x038F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_277)
{
    // FE6B 0041;	
    // (﹫) SMALL COMMERCIAL AT	[038F 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE6B, 0x0041 };
    uint32_t const ces[9] = { 0x038F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_278)
{
    // 0040 0062;	
    // ('@') COMMERCIAL AT	[038F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0040, 0x0062 };
    uint32_t const ces[9] = { 0x038F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_279)
{
    // FF20 0062;	
    // (＠) FULLWIDTH COMMERCIAL AT	[038F 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF20, 0x0062 };
    uint32_t const ces[9] = { 0x038F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_280)
{
    // FE6B 0062;	
    // (﹫) SMALL COMMERCIAL AT	[038F 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE6B, 0x0062 };
    uint32_t const ces[9] = { 0x038F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_281)
{
    // 002A 0021;	
    // ('*') ASTERISK	[0390 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002A, 0x0021 };
    uint32_t const ces[9] = { 0x0390, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_282)
{
    // FF0A 0021;	
    // (＊) FULLWIDTH ASTERISK	[0390 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0A, 0x0021 };
    uint32_t const ces[9] = { 0x0390, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_283)
{
    // FE61 0021;	
    // (﹡) SMALL ASTERISK	[0390 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE61, 0x0021 };
    uint32_t const ces[9] = { 0x0390, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_284)
{
    // 002A 003F;	
    // ('*') ASTERISK	[0390 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002A, 0x003F };
    uint32_t const ces[9] = { 0x0390, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_285)
{
    // FF0A 003F;	
    // (＊) FULLWIDTH ASTERISK	[0390 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0A, 0x003F };
    uint32_t const ces[9] = { 0x0390, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_286)
{
    // FE61 003F;	
    // (﹡) SMALL ASTERISK	[0390 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE61, 0x003F };
    uint32_t const ces[9] = { 0x0390, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_287)
{
    // 002A 0061;	
    // ('*') ASTERISK	[0390 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002A, 0x0061 };
    uint32_t const ces[9] = { 0x0390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_288)
{
    // 002A 0041;	
    // ('*') ASTERISK	[0390 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x002A, 0x0041 };
    uint32_t const ces[9] = { 0x0390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_289)
{
    // FF0A 0061;	
    // (＊) FULLWIDTH ASTERISK	[0390 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0A, 0x0061 };
    uint32_t const ces[9] = { 0x0390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_290)
{
    // FF0A 0041;	
    // (＊) FULLWIDTH ASTERISK	[0390 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF0A, 0x0041 };
    uint32_t const ces[9] = { 0x0390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_291)
{
    // FE61 0061;	
    // (﹡) SMALL ASTERISK	[0390 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE61, 0x0061 };
    uint32_t const ces[9] = { 0x0390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_292)
{
    // FE61 0041;	
    // (﹡) SMALL ASTERISK	[0390 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE61, 0x0041 };
    uint32_t const ces[9] = { 0x0390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_293)
{
    // 002A 0062;	
    // ('*') ASTERISK	[0390 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002A, 0x0062 };
    uint32_t const ces[9] = { 0x0390, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_294)
{
    // FF0A 0062;	
    // (＊) FULLWIDTH ASTERISK	[0390 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0A, 0x0062 };
    uint32_t const ces[9] = { 0x0390, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_295)
{
    // FE61 0062;	
    // (﹡) SMALL ASTERISK	[0390 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE61, 0x0062 };
    uint32_t const ces[9] = { 0x0390, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_296)
{
    // 204E 0021;	
    // (⁎) LOW ASTERISK	[0391 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204E, 0x0021 };
    uint32_t const ces[9] = { 0x0391, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_297)
{
    // 204E 003F;	
    // (⁎) LOW ASTERISK	[0391 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204E, 0x003F };
    uint32_t const ces[9] = { 0x0391, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_298)
{
    // 204E 0061;	
    // (⁎) LOW ASTERISK	[0391 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204E, 0x0061 };
    uint32_t const ces[9] = { 0x0391, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_299)
{
    // 204E 0041;	
    // (⁎) LOW ASTERISK	[0391 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x204E, 0x0041 };
    uint32_t const ces[9] = { 0x0391, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_300)
{
    // 204E 0062;	
    // (⁎) LOW ASTERISK	[0391 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204E, 0x0062 };
    uint32_t const ces[9] = { 0x0391, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_301)
{
    // 2051 0021;	
    // (⁑) TWO ASTERISKS ALIGNED VERTICALLY	[0392 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2051, 0x0021 };
    uint32_t const ces[9] = { 0x0392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_302)
{
    // 2051 003F;	
    // (⁑) TWO ASTERISKS ALIGNED VERTICALLY	[0392 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2051, 0x003F };
    uint32_t const ces[9] = { 0x0392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_303)
{
    // 2051 0061;	
    // (⁑) TWO ASTERISKS ALIGNED VERTICALLY	[0392 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2051, 0x0061 };
    uint32_t const ces[9] = { 0x0392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_304)
{
    // 2051 0041;	
    // (⁑) TWO ASTERISKS ALIGNED VERTICALLY	[0392 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2051, 0x0041 };
    uint32_t const ces[9] = { 0x0392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_305)
{
    // 2051 0062;	
    // (⁑) TWO ASTERISKS ALIGNED VERTICALLY	[0392 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2051, 0x0062 };
    uint32_t const ces[9] = { 0x0392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_306)
{
    // 066D 0021;	
    // (‎‎٭‎‎) ARABIC FIVE POINTED STAR	[0393 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x066D, 0x0021 };
    uint32_t const ces[9] = { 0x0393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_307)
{
    // 066D 003F;	
    // (‎‎٭‎‎) ARABIC FIVE POINTED STAR	[0393 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x066D, 0x003F };
    uint32_t const ces[9] = { 0x0393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_308)
{
    // 066D 0061;	
    // (‎‎٭‎‎) ARABIC FIVE POINTED STAR	[0393 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x066D, 0x0061 };
    uint32_t const ces[9] = { 0x0393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_309)
{
    // 066D 0041;	
    // (‎‎٭‎‎) ARABIC FIVE POINTED STAR	[0393 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x066D, 0x0041 };
    uint32_t const ces[9] = { 0x0393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_310)
{
    // 066D 0062;	
    // (‎‎٭‎‎) ARABIC FIVE POINTED STAR	[0393 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x066D, 0x0062 };
    uint32_t const ces[9] = { 0x0393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_311)
{
    // A673 0021;	
    // (꙳) SLAVONIC ASTERISK	[0394 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA673, 0x0021 };
    uint32_t const ces[9] = { 0x0394, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_312)
{
    // A673 003F;	
    // (꙳) SLAVONIC ASTERISK	[0394 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA673, 0x003F };
    uint32_t const ces[9] = { 0x0394, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_313)
{
    // A673 0061;	
    // (꙳) SLAVONIC ASTERISK	[0394 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA673, 0x0061 };
    uint32_t const ces[9] = { 0x0394, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_314)
{
    // A673 0041;	
    // (꙳) SLAVONIC ASTERISK	[0394 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA673, 0x0041 };
    uint32_t const ces[9] = { 0x0394, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_315)
{
    // A673 0062;	
    // (꙳) SLAVONIC ASTERISK	[0394 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA673, 0x0062 };
    uint32_t const ces[9] = { 0x0394, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_316)
{
    // 002F 0021;	
    // ('/') SOLIDUS	[0395 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002F, 0x0021 };
    uint32_t const ces[9] = { 0x0395, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_317)
{
    // FF0F 0021;	
    // (／) FULLWIDTH SOLIDUS	[0395 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0F, 0x0021 };
    uint32_t const ces[9] = { 0x0395, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_318)
{
    // 002F 003F;	
    // ('/') SOLIDUS	[0395 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002F, 0x003F };
    uint32_t const ces[9] = { 0x0395, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_319)
{
    // FF0F 003F;	
    // (／) FULLWIDTH SOLIDUS	[0395 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0F, 0x003F };
    uint32_t const ces[9] = { 0x0395, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_320)
{
    // 002F 0061;	
    // ('/') SOLIDUS	[0395 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002F, 0x0061 };
    uint32_t const ces[9] = { 0x0395, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_321)
{
    // 002F 0041;	
    // ('/') SOLIDUS	[0395 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x002F, 0x0041 };
    uint32_t const ces[9] = { 0x0395, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_322)
{
    // FF0F 0061;	
    // (／) FULLWIDTH SOLIDUS	[0395 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0F, 0x0061 };
    uint32_t const ces[9] = { 0x0395, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_323)
{
    // FF0F 0041;	
    // (／) FULLWIDTH SOLIDUS	[0395 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF0F, 0x0041 };
    uint32_t const ces[9] = { 0x0395, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_324)
{
    // 002F 0062;	
    // ('/') SOLIDUS	[0395 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x002F, 0x0062 };
    uint32_t const ces[9] = { 0x0395, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_325)
{
    // FF0F 0062;	
    // (／) FULLWIDTH SOLIDUS	[0395 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF0F, 0x0062 };
    uint32_t const ces[9] = { 0x0395, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_326)
{
    // 005C 0021;	
    // ('\') REVERSE SOLIDUS	[0396 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x005C, 0x0021 };
    uint32_t const ces[9] = { 0x0396, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_327)
{
    // FF3C 0021;	
    // (＼) FULLWIDTH REVERSE SOLIDUS	[0396 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF3C, 0x0021 };
    uint32_t const ces[9] = { 0x0396, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_328)
{
    // FE68 0021;	
    // (﹨) SMALL REVERSE SOLIDUS	[0396 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE68, 0x0021 };
    uint32_t const ces[9] = { 0x0396, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_329)
{
    // 005C 003F;	
    // ('\') REVERSE SOLIDUS	[0396 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x005C, 0x003F };
    uint32_t const ces[9] = { 0x0396, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_330)
{
    // FF3C 003F;	
    // (＼) FULLWIDTH REVERSE SOLIDUS	[0396 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF3C, 0x003F };
    uint32_t const ces[9] = { 0x0396, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_331)
{
    // FE68 003F;	
    // (﹨) SMALL REVERSE SOLIDUS	[0396 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE68, 0x003F };
    uint32_t const ces[9] = { 0x0396, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_332)
{
    // 005C 0061;	
    // ('\') REVERSE SOLIDUS	[0396 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x005C, 0x0061 };
    uint32_t const ces[9] = { 0x0396, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_333)
{
    // 005C 0041;	
    // ('\') REVERSE SOLIDUS	[0396 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x005C, 0x0041 };
    uint32_t const ces[9] = { 0x0396, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_334)
{
    // FF3C 0061;	
    // (＼) FULLWIDTH REVERSE SOLIDUS	[0396 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF3C, 0x0061 };
    uint32_t const ces[9] = { 0x0396, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_335)
{
    // FF3C 0041;	
    // (＼) FULLWIDTH REVERSE SOLIDUS	[0396 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF3C, 0x0041 };
    uint32_t const ces[9] = { 0x0396, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_336)
{
    // FE68 0061;	
    // (﹨) SMALL REVERSE SOLIDUS	[0396 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE68, 0x0061 };
    uint32_t const ces[9] = { 0x0396, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_337)
{
    // FE68 0041;	
    // (﹨) SMALL REVERSE SOLIDUS	[0396 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE68, 0x0041 };
    uint32_t const ces[9] = { 0x0396, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_338)
{
    // 005C 0062;	
    // ('\') REVERSE SOLIDUS	[0396 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x005C, 0x0062 };
    uint32_t const ces[9] = { 0x0396, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_339)
{
    // FF3C 0062;	
    // (＼) FULLWIDTH REVERSE SOLIDUS	[0396 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF3C, 0x0062 };
    uint32_t const ces[9] = { 0x0396, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_340)
{
    // FE68 0062;	
    // (﹨) SMALL REVERSE SOLIDUS	[0396 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE68, 0x0062 };
    uint32_t const ces[9] = { 0x0396, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_341)
{
    // 0026 0021;	
    // ('&') AMPERSAND	[0397 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0026, 0x0021 };
    uint32_t const ces[9] = { 0x0397, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_342)
{
    // FF06 0021;	
    // (＆) FULLWIDTH AMPERSAND	[0397 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF06, 0x0021 };
    uint32_t const ces[9] = { 0x0397, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_343)
{
    // FE60 0021;	
    // (﹠) SMALL AMPERSAND	[0397 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE60, 0x0021 };
    uint32_t const ces[9] = { 0x0397, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_344)
{
    // 0026 003F;	
    // ('&') AMPERSAND	[0397 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0026, 0x003F };
    uint32_t const ces[9] = { 0x0397, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_345)
{
    // FF06 003F;	
    // (＆) FULLWIDTH AMPERSAND	[0397 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF06, 0x003F };
    uint32_t const ces[9] = { 0x0397, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_346)
{
    // FE60 003F;	
    // (﹠) SMALL AMPERSAND	[0397 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE60, 0x003F };
    uint32_t const ces[9] = { 0x0397, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_347)
{
    // 0026 0061;	
    // ('&') AMPERSAND	[0397 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0026, 0x0061 };
    uint32_t const ces[9] = { 0x0397, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_348)
{
    // 0026 0041;	
    // ('&') AMPERSAND	[0397 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0026, 0x0041 };
    uint32_t const ces[9] = { 0x0397, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_349)
{
    // FF06 0061;	
    // (＆) FULLWIDTH AMPERSAND	[0397 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF06, 0x0061 };
    uint32_t const ces[9] = { 0x0397, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_350)
{
    // FF06 0041;	
    // (＆) FULLWIDTH AMPERSAND	[0397 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF06, 0x0041 };
    uint32_t const ces[9] = { 0x0397, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_351)
{
    // FE60 0061;	
    // (﹠) SMALL AMPERSAND	[0397 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE60, 0x0061 };
    uint32_t const ces[9] = { 0x0397, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_352)
{
    // FE60 0041;	
    // (﹠) SMALL AMPERSAND	[0397 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE60, 0x0041 };
    uint32_t const ces[9] = { 0x0397, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_353)
{
    // 0026 0062;	
    // ('&') AMPERSAND	[0397 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0026, 0x0062 };
    uint32_t const ces[9] = { 0x0397, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_354)
{
    // FF06 0062;	
    // (＆) FULLWIDTH AMPERSAND	[0397 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF06, 0x0062 };
    uint32_t const ces[9] = { 0x0397, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_355)
{
    // FE60 0062;	
    // (﹠) SMALL AMPERSAND	[0397 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE60, 0x0062 };
    uint32_t const ces[9] = { 0x0397, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_356)
{
    // 204A 0021;	
    // (⁊) TIRONIAN SIGN ET	[0398 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204A, 0x0021 };
    uint32_t const ces[9] = { 0x0398, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_357)
{
    // 204A 003F;	
    // (⁊) TIRONIAN SIGN ET	[0398 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204A, 0x003F };
    uint32_t const ces[9] = { 0x0398, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_358)
{
    // 204A 0061;	
    // (⁊) TIRONIAN SIGN ET	[0398 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204A, 0x0061 };
    uint32_t const ces[9] = { 0x0398, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_359)
{
    // 204A 0041;	
    // (⁊) TIRONIAN SIGN ET	[0398 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x204A, 0x0041 };
    uint32_t const ces[9] = { 0x0398, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_360)
{
    // 204A 0062;	
    // (⁊) TIRONIAN SIGN ET	[0398 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204A, 0x0062 };
    uint32_t const ces[9] = { 0x0398, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_361)
{
    // 0023 0021;	
    // ('#') NUMBER SIGN	[0399 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0023, 0x0021 };
    uint32_t const ces[9] = { 0x0399, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_362)
{
    // FF03 0021;	
    // (＃) FULLWIDTH NUMBER SIGN	[0399 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF03, 0x0021 };
    uint32_t const ces[9] = { 0x0399, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_363)
{
    // FE5F 0021;	
    // (﹟) SMALL NUMBER SIGN	[0399 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE5F, 0x0021 };
    uint32_t const ces[9] = { 0x0399, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_364)
{
    // 0023 003F;	
    // ('#') NUMBER SIGN	[0399 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0023, 0x003F };
    uint32_t const ces[9] = { 0x0399, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_365)
{
    // FF03 003F;	
    // (＃) FULLWIDTH NUMBER SIGN	[0399 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF03, 0x003F };
    uint32_t const ces[9] = { 0x0399, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_366)
{
    // FE5F 003F;	
    // (﹟) SMALL NUMBER SIGN	[0399 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE5F, 0x003F };
    uint32_t const ces[9] = { 0x0399, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_367)
{
    // 0023 0061;	
    // ('#') NUMBER SIGN	[0399 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0023, 0x0061 };
    uint32_t const ces[9] = { 0x0399, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_368)
{
    // 0023 0041;	
    // ('#') NUMBER SIGN	[0399 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0023, 0x0041 };
    uint32_t const ces[9] = { 0x0399, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_369)
{
    // FF03 0061;	
    // (＃) FULLWIDTH NUMBER SIGN	[0399 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF03, 0x0061 };
    uint32_t const ces[9] = { 0x0399, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_370)
{
    // FF03 0041;	
    // (＃) FULLWIDTH NUMBER SIGN	[0399 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF03, 0x0041 };
    uint32_t const ces[9] = { 0x0399, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_371)
{
    // FE5F 0061;	
    // (﹟) SMALL NUMBER SIGN	[0399 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE5F, 0x0061 };
    uint32_t const ces[9] = { 0x0399, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_372)
{
    // FE5F 0041;	
    // (﹟) SMALL NUMBER SIGN	[0399 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE5F, 0x0041 };
    uint32_t const ces[9] = { 0x0399, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_373)
{
    // 0023 0062;	
    // ('#') NUMBER SIGN	[0399 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0023, 0x0062 };
    uint32_t const ces[9] = { 0x0399, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_374)
{
    // FF03 0062;	
    // (＃) FULLWIDTH NUMBER SIGN	[0399 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF03, 0x0062 };
    uint32_t const ces[9] = { 0x0399, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_375)
{
    // FE5F 0062;	
    // (﹟) SMALL NUMBER SIGN	[0399 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE5F, 0x0062 };
    uint32_t const ces[9] = { 0x0399, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_376)
{
    // 0025 0021;	
    // ('%') PERCENT SIGN	[039A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0025, 0x0021 };
    uint32_t const ces[9] = { 0x039A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_377)
{
    // FF05 0021;	
    // (％) FULLWIDTH PERCENT SIGN	[039A 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF05, 0x0021 };
    uint32_t const ces[9] = { 0x039A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_378)
{
    // FE6A 0021;	
    // (﹪) SMALL PERCENT SIGN	[039A 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE6A, 0x0021 };
    uint32_t const ces[9] = { 0x039A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_379)
{
    // 0025 003F;	
    // ('%') PERCENT SIGN	[039A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0025, 0x003F };
    uint32_t const ces[9] = { 0x039A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_380)
{
    // FF05 003F;	
    // (％) FULLWIDTH PERCENT SIGN	[039A 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF05, 0x003F };
    uint32_t const ces[9] = { 0x039A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_381)
{
    // FE6A 003F;	
    // (﹪) SMALL PERCENT SIGN	[039A 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE6A, 0x003F };
    uint32_t const ces[9] = { 0x039A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_382)
{
    // 0025 0061;	
    // ('%') PERCENT SIGN	[039A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0025, 0x0061 };
    uint32_t const ces[9] = { 0x039A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_383)
{
    // 0025 0041;	
    // ('%') PERCENT SIGN	[039A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0025, 0x0041 };
    uint32_t const ces[9] = { 0x039A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_384)
{
    // FF05 0061;	
    // (％) FULLWIDTH PERCENT SIGN	[039A 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF05, 0x0061 };
    uint32_t const ces[9] = { 0x039A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_385)
{
    // FF05 0041;	
    // (％) FULLWIDTH PERCENT SIGN	[039A 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF05, 0x0041 };
    uint32_t const ces[9] = { 0x039A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_386)
{
    // FE6A 0061;	
    // (﹪) SMALL PERCENT SIGN	[039A 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE6A, 0x0061 };
    uint32_t const ces[9] = { 0x039A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_387)
{
    // FE6A 0041;	
    // (﹪) SMALL PERCENT SIGN	[039A 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE6A, 0x0041 };
    uint32_t const ces[9] = { 0x039A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_388)
{
    // 0025 0062;	
    // ('%') PERCENT SIGN	[039A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0025, 0x0062 };
    uint32_t const ces[9] = { 0x039A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_389)
{
    // FF05 0062;	
    // (％) FULLWIDTH PERCENT SIGN	[039A 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF05, 0x0062 };
    uint32_t const ces[9] = { 0x039A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_390)
{
    // FE6A 0062;	
    // (﹪) SMALL PERCENT SIGN	[039A 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE6A, 0x0062 };
    uint32_t const ces[9] = { 0x039A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_391)
{
    // 066A 0021;	
    // (٪) ARABIC PERCENT SIGN	[039B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x066A, 0x0021 };
    uint32_t const ces[9] = { 0x039B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_392)
{
    // 066A 003F;	
    // (٪) ARABIC PERCENT SIGN	[039B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x066A, 0x003F };
    uint32_t const ces[9] = { 0x039B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_393)
{
    // 066A 0061;	
    // (٪) ARABIC PERCENT SIGN	[039B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x066A, 0x0061 };
    uint32_t const ces[9] = { 0x039B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_394)
{
    // 066A 0041;	
    // (٪) ARABIC PERCENT SIGN	[039B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x066A, 0x0041 };
    uint32_t const ces[9] = { 0x039B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_395)
{
    // 066A 0062;	
    // (٪) ARABIC PERCENT SIGN	[039B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x066A, 0x0062 };
    uint32_t const ces[9] = { 0x039B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_396)
{
    // 2030 0021;	
    // (‰) PER MILLE SIGN	[039C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2030, 0x0021 };
    uint32_t const ces[9] = { 0x039C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_397)
{
    // 2030 003F;	
    // (‰) PER MILLE SIGN	[039C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2030, 0x003F };
    uint32_t const ces[9] = { 0x039C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_398)
{
    // 2030 0061;	
    // (‰) PER MILLE SIGN	[039C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2030, 0x0061 };
    uint32_t const ces[9] = { 0x039C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_399)
{
    // 2030 0041;	
    // (‰) PER MILLE SIGN	[039C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2030, 0x0041 };
    uint32_t const ces[9] = { 0x039C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_400)
{
    // 2030 0062;	
    // (‰) PER MILLE SIGN	[039C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2030, 0x0062 };
    uint32_t const ces[9] = { 0x039C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_401)
{
    // 0609 0021;	
    // (؉) ARABIC-INDIC PER MILLE SIGN	[039D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0609, 0x0021 };
    uint32_t const ces[9] = { 0x039D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_402)
{
    // 0609 003F;	
    // (؉) ARABIC-INDIC PER MILLE SIGN	[039D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0609, 0x003F };
    uint32_t const ces[9] = { 0x039D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_403)
{
    // 0609 0061;	
    // (؉) ARABIC-INDIC PER MILLE SIGN	[039D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0609, 0x0061 };
    uint32_t const ces[9] = { 0x039D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_404)
{
    // 0609 0041;	
    // (؉) ARABIC-INDIC PER MILLE SIGN	[039D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0609, 0x0041 };
    uint32_t const ces[9] = { 0x039D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_405)
{
    // 0609 0062;	
    // (؉) ARABIC-INDIC PER MILLE SIGN	[039D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0609, 0x0062 };
    uint32_t const ces[9] = { 0x039D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_406)
{
    // 2031 0021;	
    // (‱) PER TEN THOUSAND SIGN	[039E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2031, 0x0021 };
    uint32_t const ces[9] = { 0x039E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_407)
{
    // 2031 003F;	
    // (‱) PER TEN THOUSAND SIGN	[039E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2031, 0x003F };
    uint32_t const ces[9] = { 0x039E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_408)
{
    // 2031 0061;	
    // (‱) PER TEN THOUSAND SIGN	[039E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2031, 0x0061 };
    uint32_t const ces[9] = { 0x039E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_409)
{
    // 2031 0041;	
    // (‱) PER TEN THOUSAND SIGN	[039E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2031, 0x0041 };
    uint32_t const ces[9] = { 0x039E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_410)
{
    // 2031 0062;	
    // (‱) PER TEN THOUSAND SIGN	[039E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2031, 0x0062 };
    uint32_t const ces[9] = { 0x039E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_411)
{
    // 060A 0021;	
    // (؊) ARABIC-INDIC PER TEN THOUSAND SIGN	[039F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x060A, 0x0021 };
    uint32_t const ces[9] = { 0x039F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_412)
{
    // 060A 003F;	
    // (؊) ARABIC-INDIC PER TEN THOUSAND SIGN	[039F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x060A, 0x003F };
    uint32_t const ces[9] = { 0x039F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_413)
{
    // 060A 0061;	
    // (؊) ARABIC-INDIC PER TEN THOUSAND SIGN	[039F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x060A, 0x0061 };
    uint32_t const ces[9] = { 0x039F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_414)
{
    // 060A 0041;	
    // (؊) ARABIC-INDIC PER TEN THOUSAND SIGN	[039F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x060A, 0x0041 };
    uint32_t const ces[9] = { 0x039F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_415)
{
    // 060A 0062;	
    // (؊) ARABIC-INDIC PER TEN THOUSAND SIGN	[039F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x060A, 0x0062 };
    uint32_t const ces[9] = { 0x039F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_416)
{
    // 2020 0021;	
    // (†) DAGGER	[03A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2020, 0x0021 };
    uint32_t const ces[9] = { 0x03A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_417)
{
    // 2020 003F;	
    // (†) DAGGER	[03A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2020, 0x003F };
    uint32_t const ces[9] = { 0x03A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_418)
{
    // 2020 0061;	
    // (†) DAGGER	[03A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2020, 0x0061 };
    uint32_t const ces[9] = { 0x03A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_419)
{
    // 2020 0041;	
    // (†) DAGGER	[03A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2020, 0x0041 };
    uint32_t const ces[9] = { 0x03A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_420)
{
    // 2020 0062;	
    // (†) DAGGER	[03A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2020, 0x0062 };
    uint32_t const ces[9] = { 0x03A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_421)
{
    // 2021 0021;	
    // (‡) DOUBLE DAGGER	[03A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2021, 0x0021 };
    uint32_t const ces[9] = { 0x03A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_422)
{
    // 2021 003F;	
    // (‡) DOUBLE DAGGER	[03A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2021, 0x003F };
    uint32_t const ces[9] = { 0x03A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_423)
{
    // 2021 0061;	
    // (‡) DOUBLE DAGGER	[03A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2021, 0x0061 };
    uint32_t const ces[9] = { 0x03A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_424)
{
    // 2021 0041;	
    // (‡) DOUBLE DAGGER	[03A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2021, 0x0041 };
    uint32_t const ces[9] = { 0x03A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_425)
{
    // 2021 0062;	
    // (‡) DOUBLE DAGGER	[03A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2021, 0x0062 };
    uint32_t const ces[9] = { 0x03A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_426)
{
    // 2E36 0021;	
    // (⸶) DAGGER WITH LEFT GUARD	[03A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E36, 0x0021 };
    uint32_t const ces[9] = { 0x03A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_427)
{
    // 2E36 003F;	
    // (⸶) DAGGER WITH LEFT GUARD	[03A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E36, 0x003F };
    uint32_t const ces[9] = { 0x03A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_428)
{
    // 2E36 0061;	
    // (⸶) DAGGER WITH LEFT GUARD	[03A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E36, 0x0061 };
    uint32_t const ces[9] = { 0x03A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_429)
{
    // 2E36 0041;	
    // (⸶) DAGGER WITH LEFT GUARD	[03A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E36, 0x0041 };
    uint32_t const ces[9] = { 0x03A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_430)
{
    // 2E36 0062;	
    // (⸶) DAGGER WITH LEFT GUARD	[03A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E36, 0x0062 };
    uint32_t const ces[9] = { 0x03A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_431)
{
    // 2E37 0021;	
    // (⸷) DAGGER WITH RIGHT GUARD	[03A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E37, 0x0021 };
    uint32_t const ces[9] = { 0x03A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_432)
{
    // 2E37 003F;	
    // (⸷) DAGGER WITH RIGHT GUARD	[03A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E37, 0x003F };
    uint32_t const ces[9] = { 0x03A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_433)
{
    // 2E37 0061;	
    // (⸷) DAGGER WITH RIGHT GUARD	[03A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E37, 0x0061 };
    uint32_t const ces[9] = { 0x03A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_434)
{
    // 2E37 0041;	
    // (⸷) DAGGER WITH RIGHT GUARD	[03A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E37, 0x0041 };
    uint32_t const ces[9] = { 0x03A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_435)
{
    // 2E37 0062;	
    // (⸷) DAGGER WITH RIGHT GUARD	[03A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E37, 0x0062 };
    uint32_t const ces[9] = { 0x03A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_436)
{
    // 2E38 0021;	
    // (⸸) TURNED DAGGER	[03A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E38, 0x0021 };
    uint32_t const ces[9] = { 0x03A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_437)
{
    // 2E38 003F;	
    // (⸸) TURNED DAGGER	[03A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E38, 0x003F };
    uint32_t const ces[9] = { 0x03A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_438)
{
    // 2E38 0061;	
    // (⸸) TURNED DAGGER	[03A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E38, 0x0061 };
    uint32_t const ces[9] = { 0x03A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_439)
{
    // 2E38 0041;	
    // (⸸) TURNED DAGGER	[03A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E38, 0x0041 };
    uint32_t const ces[9] = { 0x03A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_440)
{
    // 2E38 0062;	
    // (⸸) TURNED DAGGER	[03A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E38, 0x0062 };
    uint32_t const ces[9] = { 0x03A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_441)
{
    // 2022 0021;	
    // (•) BULLET	[03A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2022, 0x0021 };
    uint32_t const ces[9] = { 0x03A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_442)
{
    // 2022 003F;	
    // (•) BULLET	[03A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2022, 0x003F };
    uint32_t const ces[9] = { 0x03A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_443)
{
    // 2022 0061;	
    // (•) BULLET	[03A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2022, 0x0061 };
    uint32_t const ces[9] = { 0x03A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_444)
{
    // 2022 0041;	
    // (•) BULLET	[03A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2022, 0x0041 };
    uint32_t const ces[9] = { 0x03A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_445)
{
    // 2022 0062;	
    // (•) BULLET	[03A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2022, 0x0062 };
    uint32_t const ces[9] = { 0x03A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_446)
{
    // 2023 0021;	
    // (‣) TRIANGULAR BULLET	[03A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2023, 0x0021 };
    uint32_t const ces[9] = { 0x03A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_447)
{
    // 2023 003F;	
    // (‣) TRIANGULAR BULLET	[03A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2023, 0x003F };
    uint32_t const ces[9] = { 0x03A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_448)
{
    // 2023 0061;	
    // (‣) TRIANGULAR BULLET	[03A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2023, 0x0061 };
    uint32_t const ces[9] = { 0x03A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_449)
{
    // 2023 0041;	
    // (‣) TRIANGULAR BULLET	[03A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2023, 0x0041 };
    uint32_t const ces[9] = { 0x03A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_450)
{
    // 2023 0062;	
    // (‣) TRIANGULAR BULLET	[03A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2023, 0x0062 };
    uint32_t const ces[9] = { 0x03A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_451)
{
    // 2027 0021;	
    // (‧) HYPHENATION POINT	[03A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2027, 0x0021 };
    uint32_t const ces[9] = { 0x03A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_452)
{
    // 2027 003F;	
    // (‧) HYPHENATION POINT	[03A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2027, 0x003F };
    uint32_t const ces[9] = { 0x03A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_453)
{
    // 2027 0061;	
    // (‧) HYPHENATION POINT	[03A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2027, 0x0061 };
    uint32_t const ces[9] = { 0x03A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_454)
{
    // 2027 0041;	
    // (‧) HYPHENATION POINT	[03A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2027, 0x0041 };
    uint32_t const ces[9] = { 0x03A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_455)
{
    // 2027 0062;	
    // (‧) HYPHENATION POINT	[03A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2027, 0x0062 };
    uint32_t const ces[9] = { 0x03A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_456)
{
    // 2043 0021;	
    // (⁃) HYPHEN BULLET	[03A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2043, 0x0021 };
    uint32_t const ces[9] = { 0x03A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_457)
{
    // 2043 003F;	
    // (⁃) HYPHEN BULLET	[03A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2043, 0x003F };
    uint32_t const ces[9] = { 0x03A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_458)
{
    // 2043 0061;	
    // (⁃) HYPHEN BULLET	[03A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2043, 0x0061 };
    uint32_t const ces[9] = { 0x03A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_459)
{
    // 2043 0041;	
    // (⁃) HYPHEN BULLET	[03A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2043, 0x0041 };
    uint32_t const ces[9] = { 0x03A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_460)
{
    // 2043 0062;	
    // (⁃) HYPHEN BULLET	[03A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2043, 0x0062 };
    uint32_t const ces[9] = { 0x03A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_461)
{
    // 204C 0021;	
    // (⁌) BLACK LEFTWARDS BULLET	[03A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204C, 0x0021 };
    uint32_t const ces[9] = { 0x03A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_462)
{
    // 204C 003F;	
    // (⁌) BLACK LEFTWARDS BULLET	[03A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204C, 0x003F };
    uint32_t const ces[9] = { 0x03A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_463)
{
    // 204C 0061;	
    // (⁌) BLACK LEFTWARDS BULLET	[03A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204C, 0x0061 };
    uint32_t const ces[9] = { 0x03A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_464)
{
    // 204C 0041;	
    // (⁌) BLACK LEFTWARDS BULLET	[03A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x204C, 0x0041 };
    uint32_t const ces[9] = { 0x03A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_465)
{
    // 204C 0062;	
    // (⁌) BLACK LEFTWARDS BULLET	[03A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204C, 0x0062 };
    uint32_t const ces[9] = { 0x03A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_466)
{
    // 204D 0021;	
    // (⁍) BLACK RIGHTWARDS BULLET	[03AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204D, 0x0021 };
    uint32_t const ces[9] = { 0x03AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_467)
{
    // 204D 003F;	
    // (⁍) BLACK RIGHTWARDS BULLET	[03AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204D, 0x003F };
    uint32_t const ces[9] = { 0x03AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_468)
{
    // 204D 0061;	
    // (⁍) BLACK RIGHTWARDS BULLET	[03AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204D, 0x0061 };
    uint32_t const ces[9] = { 0x03AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_469)
{
    // 204D 0041;	
    // (⁍) BLACK RIGHTWARDS BULLET	[03AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x204D, 0x0041 };
    uint32_t const ces[9] = { 0x03AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_470)
{
    // 204D 0062;	
    // (⁍) BLACK RIGHTWARDS BULLET	[03AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x204D, 0x0062 };
    uint32_t const ces[9] = { 0x03AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_471)
{
    // 2032 0021;	
    // (′) PRIME	[03AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2032, 0x0021 };
    uint32_t const ces[9] = { 0x03AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_472)
{
    // 2032 003F;	
    // (′) PRIME	[03AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2032, 0x003F };
    uint32_t const ces[9] = { 0x03AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_473)
{
    // 2033 0021;	
    // (″) DOUBLE PRIME	[03AB 03AB 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2033, 0x0021 };
    uint32_t const ces[12] = { 0x03AB, 0x03AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_474)
{
    // 2033 003F;	
    // (″) DOUBLE PRIME	[03AB 03AB 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2033, 0x003F };
    uint32_t const ces[12] = { 0x03AB, 0x03AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_475)
{
    // 2034 0021;	
    // (‴) TRIPLE PRIME	[03AB 03AB 03AB 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2034, 0x0021 };
    uint32_t const ces[15] = { 0x03AB, 0x03AB, 0x03AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_476)
{
    // 2034 003F;	
    // (‴) TRIPLE PRIME	[03AB 03AB 03AB 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2034, 0x003F };
    uint32_t const ces[15] = { 0x03AB, 0x03AB, 0x03AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_477)
{
    // 2057 0021;	
    // (⁗) QUADRUPLE PRIME	[03AB 03AB 03AB 03AB 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2057, 0x0021 };
    uint32_t const ces[18] = { 0x03AB, 0x03AB, 0x03AB, 0x03AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_478)
{
    // 2057 003F;	
    // (⁗) QUADRUPLE PRIME	[03AB 03AB 03AB 03AB 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2057, 0x003F };
    uint32_t const ces[18] = { 0x03AB, 0x03AB, 0x03AB, 0x03AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_479)
{
    // 2057 0061;	
    // (⁗) QUADRUPLE PRIME	[03AB 03AB 03AB 03AB 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2057, 0x0061 };
    uint32_t const ces[18] = { 0x03AB, 0x03AB, 0x03AB, 0x03AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_480)
{
    // 2057 0041;	
    // (⁗) QUADRUPLE PRIME	[03AB 03AB 03AB 03AB 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2057, 0x0041 };
    uint32_t const ces[18] = { 0x03AB, 0x03AB, 0x03AB, 0x03AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_481)
{
    // 2057 0062;	
    // (⁗) QUADRUPLE PRIME	[03AB 03AB 03AB 03AB 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2057, 0x0062 };
    uint32_t const ces[18] = { 0x03AB, 0x03AB, 0x03AB, 0x03AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_482)
{
    // 2034 0061;	
    // (‴) TRIPLE PRIME	[03AB 03AB 03AB 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2034, 0x0061 };
    uint32_t const ces[15] = { 0x03AB, 0x03AB, 0x03AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_483)
{
    // 2034 0041;	
    // (‴) TRIPLE PRIME	[03AB 03AB 03AB 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2034, 0x0041 };
    uint32_t const ces[15] = { 0x03AB, 0x03AB, 0x03AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_484)
{
    // 2034 0062;	
    // (‴) TRIPLE PRIME	[03AB 03AB 03AB 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2034, 0x0062 };
    uint32_t const ces[15] = { 0x03AB, 0x03AB, 0x03AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_485)
{
    // 2033 0061;	
    // (″) DOUBLE PRIME	[03AB 03AB 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2033, 0x0061 };
    uint32_t const ces[12] = { 0x03AB, 0x03AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_486)
{
    // 2033 0041;	
    // (″) DOUBLE PRIME	[03AB 03AB 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2033, 0x0041 };
    uint32_t const ces[12] = { 0x03AB, 0x03AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_487)
{
    // 2033 0062;	
    // (″) DOUBLE PRIME	[03AB 03AB 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2033, 0x0062 };
    uint32_t const ces[12] = { 0x03AB, 0x03AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_488)
{
    // 2032 0061;	
    // (′) PRIME	[03AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2032, 0x0061 };
    uint32_t const ces[9] = { 0x03AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_489)
{
    // 2032 0041;	
    // (′) PRIME	[03AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2032, 0x0041 };
    uint32_t const ces[9] = { 0x03AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_490)
{
    // 2032 0062;	
    // (′) PRIME	[03AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2032, 0x0062 };
    uint32_t const ces[9] = { 0x03AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_491)
{
    // 2035 0021;	
    // (‵) REVERSED PRIME	[03AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2035, 0x0021 };
    uint32_t const ces[9] = { 0x03AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_492)
{
    // 2035 003F;	
    // (‵) REVERSED PRIME	[03AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2035, 0x003F };
    uint32_t const ces[9] = { 0x03AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_493)
{
    // 2036 0021;	
    // (‶) REVERSED DOUBLE PRIME	[03AC 03AC 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2036, 0x0021 };
    uint32_t const ces[12] = { 0x03AC, 0x03AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_494)
{
    // 2036 003F;	
    // (‶) REVERSED DOUBLE PRIME	[03AC 03AC 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2036, 0x003F };
    uint32_t const ces[12] = { 0x03AC, 0x03AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_495)
{
    // 2037 0021;	
    // (‷) REVERSED TRIPLE PRIME	[03AC 03AC 03AC 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2037, 0x0021 };
    uint32_t const ces[15] = { 0x03AC, 0x03AC, 0x03AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_496)
{
    // 2037 003F;	
    // (‷) REVERSED TRIPLE PRIME	[03AC 03AC 03AC 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2037, 0x003F };
    uint32_t const ces[15] = { 0x03AC, 0x03AC, 0x03AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_497)
{
    // 2037 0061;	
    // (‷) REVERSED TRIPLE PRIME	[03AC 03AC 03AC 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2037, 0x0061 };
    uint32_t const ces[15] = { 0x03AC, 0x03AC, 0x03AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_498)
{
    // 2037 0041;	
    // (‷) REVERSED TRIPLE PRIME	[03AC 03AC 03AC 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2037, 0x0041 };
    uint32_t const ces[15] = { 0x03AC, 0x03AC, 0x03AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_014_499)
{
    // 2037 0062;	
    // (‷) REVERSED TRIPLE PRIME	[03AC 03AC 03AC 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2037, 0x0062 };
    uint32_t const ces[15] = { 0x03AC, 0x03AC, 0x03AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

