// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_365_000)
{
    // 42C8 003F;	
    // (䋈) CJK UNIFIED IDEOGRAPH-42C8	[FB80 C2C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_001)
{
    // 42C8 0061;	
    // (䋈) CJK UNIFIED IDEOGRAPH-42C8	[FB80 C2C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_002)
{
    // 42C8 0041;	
    // (䋈) CJK UNIFIED IDEOGRAPH-42C8	[FB80 C2C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42C8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_003)
{
    // 42C8 0062;	
    // (䋈) CJK UNIFIED IDEOGRAPH-42C8	[FB80 C2C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_004)
{
    // 42C9 0021;	
    // (䋉) CJK UNIFIED IDEOGRAPH-42C9	[FB80 C2C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_005)
{
    // 42C9 003F;	
    // (䋉) CJK UNIFIED IDEOGRAPH-42C9	[FB80 C2C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_006)
{
    // 42C9 0061;	
    // (䋉) CJK UNIFIED IDEOGRAPH-42C9	[FB80 C2C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_007)
{
    // 42C9 0041;	
    // (䋉) CJK UNIFIED IDEOGRAPH-42C9	[FB80 C2C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42C9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_008)
{
    // 42C9 0062;	
    // (䋉) CJK UNIFIED IDEOGRAPH-42C9	[FB80 C2C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_009)
{
    // 42CA 0021;	
    // (䋊) CJK UNIFIED IDEOGRAPH-42CA	[FB80 C2CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_010)
{
    // 42CA 003F;	
    // (䋊) CJK UNIFIED IDEOGRAPH-42CA	[FB80 C2CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_011)
{
    // 42CA 0061;	
    // (䋊) CJK UNIFIED IDEOGRAPH-42CA	[FB80 C2CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_012)
{
    // 42CA 0041;	
    // (䋊) CJK UNIFIED IDEOGRAPH-42CA	[FB80 C2CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42CA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_013)
{
    // 42CA 0062;	
    // (䋊) CJK UNIFIED IDEOGRAPH-42CA	[FB80 C2CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_014)
{
    // 42CB 0021;	
    // (䋋) CJK UNIFIED IDEOGRAPH-42CB	[FB80 C2CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_015)
{
    // 42CB 003F;	
    // (䋋) CJK UNIFIED IDEOGRAPH-42CB	[FB80 C2CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_016)
{
    // 42CB 0061;	
    // (䋋) CJK UNIFIED IDEOGRAPH-42CB	[FB80 C2CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_017)
{
    // 42CB 0041;	
    // (䋋) CJK UNIFIED IDEOGRAPH-42CB	[FB80 C2CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42CB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_018)
{
    // 42CB 0062;	
    // (䋋) CJK UNIFIED IDEOGRAPH-42CB	[FB80 C2CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_019)
{
    // 42CC 0021;	
    // (䋌) CJK UNIFIED IDEOGRAPH-42CC	[FB80 C2CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_020)
{
    // 42CC 003F;	
    // (䋌) CJK UNIFIED IDEOGRAPH-42CC	[FB80 C2CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_021)
{
    // 42CC 0061;	
    // (䋌) CJK UNIFIED IDEOGRAPH-42CC	[FB80 C2CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_022)
{
    // 42CC 0041;	
    // (䋌) CJK UNIFIED IDEOGRAPH-42CC	[FB80 C2CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42CC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_023)
{
    // 42CC 0062;	
    // (䋌) CJK UNIFIED IDEOGRAPH-42CC	[FB80 C2CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_024)
{
    // 42CD 0021;	
    // (䋍) CJK UNIFIED IDEOGRAPH-42CD	[FB80 C2CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_025)
{
    // 42CD 003F;	
    // (䋍) CJK UNIFIED IDEOGRAPH-42CD	[FB80 C2CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_026)
{
    // 42CD 0061;	
    // (䋍) CJK UNIFIED IDEOGRAPH-42CD	[FB80 C2CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_027)
{
    // 42CD 0041;	
    // (䋍) CJK UNIFIED IDEOGRAPH-42CD	[FB80 C2CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42CD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_028)
{
    // 42CD 0062;	
    // (䋍) CJK UNIFIED IDEOGRAPH-42CD	[FB80 C2CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_029)
{
    // 42CE 0021;	
    // (䋎) CJK UNIFIED IDEOGRAPH-42CE	[FB80 C2CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_030)
{
    // 42CE 003F;	
    // (䋎) CJK UNIFIED IDEOGRAPH-42CE	[FB80 C2CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_031)
{
    // 42CE 0061;	
    // (䋎) CJK UNIFIED IDEOGRAPH-42CE	[FB80 C2CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_032)
{
    // 42CE 0041;	
    // (䋎) CJK UNIFIED IDEOGRAPH-42CE	[FB80 C2CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42CE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_033)
{
    // 42CE 0062;	
    // (䋎) CJK UNIFIED IDEOGRAPH-42CE	[FB80 C2CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_034)
{
    // 42CF 0021;	
    // (䋏) CJK UNIFIED IDEOGRAPH-42CF	[FB80 C2CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_035)
{
    // 42CF 003F;	
    // (䋏) CJK UNIFIED IDEOGRAPH-42CF	[FB80 C2CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_036)
{
    // 42CF 0061;	
    // (䋏) CJK UNIFIED IDEOGRAPH-42CF	[FB80 C2CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_037)
{
    // 42CF 0041;	
    // (䋏) CJK UNIFIED IDEOGRAPH-42CF	[FB80 C2CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42CF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_038)
{
    // 42CF 0062;	
    // (䋏) CJK UNIFIED IDEOGRAPH-42CF	[FB80 C2CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42CF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_039)
{
    // 42D0 0021;	
    // (䋐) CJK UNIFIED IDEOGRAPH-42D0	[FB80 C2D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_040)
{
    // 42D0 003F;	
    // (䋐) CJK UNIFIED IDEOGRAPH-42D0	[FB80 C2D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_041)
{
    // 42D0 0061;	
    // (䋐) CJK UNIFIED IDEOGRAPH-42D0	[FB80 C2D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_042)
{
    // 42D0 0041;	
    // (䋐) CJK UNIFIED IDEOGRAPH-42D0	[FB80 C2D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42D0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_043)
{
    // 42D0 0062;	
    // (䋐) CJK UNIFIED IDEOGRAPH-42D0	[FB80 C2D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_044)
{
    // 42D1 0021;	
    // (䋑) CJK UNIFIED IDEOGRAPH-42D1	[FB80 C2D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_045)
{
    // 42D1 003F;	
    // (䋑) CJK UNIFIED IDEOGRAPH-42D1	[FB80 C2D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_046)
{
    // 42D1 0061;	
    // (䋑) CJK UNIFIED IDEOGRAPH-42D1	[FB80 C2D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_047)
{
    // 42D1 0041;	
    // (䋑) CJK UNIFIED IDEOGRAPH-42D1	[FB80 C2D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42D1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_048)
{
    // 42D1 0062;	
    // (䋑) CJK UNIFIED IDEOGRAPH-42D1	[FB80 C2D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_049)
{
    // 42D2 0021;	
    // (䋒) CJK UNIFIED IDEOGRAPH-42D2	[FB80 C2D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_050)
{
    // 42D2 003F;	
    // (䋒) CJK UNIFIED IDEOGRAPH-42D2	[FB80 C2D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_051)
{
    // 42D2 0061;	
    // (䋒) CJK UNIFIED IDEOGRAPH-42D2	[FB80 C2D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_052)
{
    // 42D2 0041;	
    // (䋒) CJK UNIFIED IDEOGRAPH-42D2	[FB80 C2D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42D2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_053)
{
    // 42D2 0062;	
    // (䋒) CJK UNIFIED IDEOGRAPH-42D2	[FB80 C2D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_054)
{
    // 42D3 0021;	
    // (䋓) CJK UNIFIED IDEOGRAPH-42D3	[FB80 C2D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_055)
{
    // 42D3 003F;	
    // (䋓) CJK UNIFIED IDEOGRAPH-42D3	[FB80 C2D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_056)
{
    // 42D3 0061;	
    // (䋓) CJK UNIFIED IDEOGRAPH-42D3	[FB80 C2D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_057)
{
    // 42D3 0041;	
    // (䋓) CJK UNIFIED IDEOGRAPH-42D3	[FB80 C2D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42D3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_058)
{
    // 42D3 0062;	
    // (䋓) CJK UNIFIED IDEOGRAPH-42D3	[FB80 C2D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_059)
{
    // 42D4 0021;	
    // (䋔) CJK UNIFIED IDEOGRAPH-42D4	[FB80 C2D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_060)
{
    // 42D4 003F;	
    // (䋔) CJK UNIFIED IDEOGRAPH-42D4	[FB80 C2D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_061)
{
    // 42D4 0061;	
    // (䋔) CJK UNIFIED IDEOGRAPH-42D4	[FB80 C2D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_062)
{
    // 42D4 0041;	
    // (䋔) CJK UNIFIED IDEOGRAPH-42D4	[FB80 C2D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42D4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_063)
{
    // 42D4 0062;	
    // (䋔) CJK UNIFIED IDEOGRAPH-42D4	[FB80 C2D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_064)
{
    // 42D5 0021;	
    // (䋕) CJK UNIFIED IDEOGRAPH-42D5	[FB80 C2D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_065)
{
    // 42D5 003F;	
    // (䋕) CJK UNIFIED IDEOGRAPH-42D5	[FB80 C2D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_066)
{
    // 42D5 0061;	
    // (䋕) CJK UNIFIED IDEOGRAPH-42D5	[FB80 C2D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_067)
{
    // 42D5 0041;	
    // (䋕) CJK UNIFIED IDEOGRAPH-42D5	[FB80 C2D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42D5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_068)
{
    // 42D5 0062;	
    // (䋕) CJK UNIFIED IDEOGRAPH-42D5	[FB80 C2D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_069)
{
    // 42D6 0021;	
    // (䋖) CJK UNIFIED IDEOGRAPH-42D6	[FB80 C2D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_070)
{
    // 42D6 003F;	
    // (䋖) CJK UNIFIED IDEOGRAPH-42D6	[FB80 C2D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_071)
{
    // 42D6 0061;	
    // (䋖) CJK UNIFIED IDEOGRAPH-42D6	[FB80 C2D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_072)
{
    // 42D6 0041;	
    // (䋖) CJK UNIFIED IDEOGRAPH-42D6	[FB80 C2D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42D6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_073)
{
    // 42D6 0062;	
    // (䋖) CJK UNIFIED IDEOGRAPH-42D6	[FB80 C2D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_074)
{
    // 42D7 0021;	
    // (䋗) CJK UNIFIED IDEOGRAPH-42D7	[FB80 C2D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_075)
{
    // 42D7 003F;	
    // (䋗) CJK UNIFIED IDEOGRAPH-42D7	[FB80 C2D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_076)
{
    // 42D7 0061;	
    // (䋗) CJK UNIFIED IDEOGRAPH-42D7	[FB80 C2D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_077)
{
    // 42D7 0041;	
    // (䋗) CJK UNIFIED IDEOGRAPH-42D7	[FB80 C2D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42D7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_078)
{
    // 42D7 0062;	
    // (䋗) CJK UNIFIED IDEOGRAPH-42D7	[FB80 C2D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_079)
{
    // 42D8 0021;	
    // (䋘) CJK UNIFIED IDEOGRAPH-42D8	[FB80 C2D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_080)
{
    // 42D8 003F;	
    // (䋘) CJK UNIFIED IDEOGRAPH-42D8	[FB80 C2D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_081)
{
    // 42D8 0061;	
    // (䋘) CJK UNIFIED IDEOGRAPH-42D8	[FB80 C2D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_082)
{
    // 42D8 0041;	
    // (䋘) CJK UNIFIED IDEOGRAPH-42D8	[FB80 C2D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42D8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_083)
{
    // 42D8 0062;	
    // (䋘) CJK UNIFIED IDEOGRAPH-42D8	[FB80 C2D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_084)
{
    // 42D9 0021;	
    // (䋙) CJK UNIFIED IDEOGRAPH-42D9	[FB80 C2D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_085)
{
    // 42D9 003F;	
    // (䋙) CJK UNIFIED IDEOGRAPH-42D9	[FB80 C2D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_086)
{
    // 42D9 0061;	
    // (䋙) CJK UNIFIED IDEOGRAPH-42D9	[FB80 C2D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_087)
{
    // 42D9 0041;	
    // (䋙) CJK UNIFIED IDEOGRAPH-42D9	[FB80 C2D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42D9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_088)
{
    // 42D9 0062;	
    // (䋙) CJK UNIFIED IDEOGRAPH-42D9	[FB80 C2D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42D9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_089)
{
    // 42DA 0021;	
    // (䋚) CJK UNIFIED IDEOGRAPH-42DA	[FB80 C2DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_090)
{
    // 42DA 003F;	
    // (䋚) CJK UNIFIED IDEOGRAPH-42DA	[FB80 C2DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_091)
{
    // 42DA 0061;	
    // (䋚) CJK UNIFIED IDEOGRAPH-42DA	[FB80 C2DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_092)
{
    // 42DA 0041;	
    // (䋚) CJK UNIFIED IDEOGRAPH-42DA	[FB80 C2DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42DA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_093)
{
    // 42DA 0062;	
    // (䋚) CJK UNIFIED IDEOGRAPH-42DA	[FB80 C2DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_094)
{
    // 42DB 0021;	
    // (䋛) CJK UNIFIED IDEOGRAPH-42DB	[FB80 C2DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_095)
{
    // 42DB 003F;	
    // (䋛) CJK UNIFIED IDEOGRAPH-42DB	[FB80 C2DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_096)
{
    // 42DB 0061;	
    // (䋛) CJK UNIFIED IDEOGRAPH-42DB	[FB80 C2DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_097)
{
    // 42DB 0041;	
    // (䋛) CJK UNIFIED IDEOGRAPH-42DB	[FB80 C2DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42DB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_098)
{
    // 42DB 0062;	
    // (䋛) CJK UNIFIED IDEOGRAPH-42DB	[FB80 C2DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_099)
{
    // 42DC 0021;	
    // (䋜) CJK UNIFIED IDEOGRAPH-42DC	[FB80 C2DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_100)
{
    // 42DC 003F;	
    // (䋜) CJK UNIFIED IDEOGRAPH-42DC	[FB80 C2DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_101)
{
    // 42DC 0061;	
    // (䋜) CJK UNIFIED IDEOGRAPH-42DC	[FB80 C2DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_102)
{
    // 42DC 0041;	
    // (䋜) CJK UNIFIED IDEOGRAPH-42DC	[FB80 C2DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42DC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_103)
{
    // 42DC 0062;	
    // (䋜) CJK UNIFIED IDEOGRAPH-42DC	[FB80 C2DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_104)
{
    // 42DD 0021;	
    // (䋝) CJK UNIFIED IDEOGRAPH-42DD	[FB80 C2DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_105)
{
    // 42DD 003F;	
    // (䋝) CJK UNIFIED IDEOGRAPH-42DD	[FB80 C2DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_106)
{
    // 42DD 0061;	
    // (䋝) CJK UNIFIED IDEOGRAPH-42DD	[FB80 C2DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_107)
{
    // 42DD 0041;	
    // (䋝) CJK UNIFIED IDEOGRAPH-42DD	[FB80 C2DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42DD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_108)
{
    // 42DD 0062;	
    // (䋝) CJK UNIFIED IDEOGRAPH-42DD	[FB80 C2DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_109)
{
    // 42DE 0021;	
    // (䋞) CJK UNIFIED IDEOGRAPH-42DE	[FB80 C2DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_110)
{
    // 42DE 003F;	
    // (䋞) CJK UNIFIED IDEOGRAPH-42DE	[FB80 C2DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_111)
{
    // 42DE 0061;	
    // (䋞) CJK UNIFIED IDEOGRAPH-42DE	[FB80 C2DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_112)
{
    // 42DE 0041;	
    // (䋞) CJK UNIFIED IDEOGRAPH-42DE	[FB80 C2DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42DE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_113)
{
    // 42DE 0062;	
    // (䋞) CJK UNIFIED IDEOGRAPH-42DE	[FB80 C2DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_114)
{
    // 42DF 0021;	
    // (䋟) CJK UNIFIED IDEOGRAPH-42DF	[FB80 C2DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_115)
{
    // 42DF 003F;	
    // (䋟) CJK UNIFIED IDEOGRAPH-42DF	[FB80 C2DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_116)
{
    // 42DF 0061;	
    // (䋟) CJK UNIFIED IDEOGRAPH-42DF	[FB80 C2DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_117)
{
    // 42DF 0041;	
    // (䋟) CJK UNIFIED IDEOGRAPH-42DF	[FB80 C2DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42DF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_118)
{
    // 42DF 0062;	
    // (䋟) CJK UNIFIED IDEOGRAPH-42DF	[FB80 C2DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42DF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_119)
{
    // 42E0 0021;	
    // (䋠) CJK UNIFIED IDEOGRAPH-42E0	[FB80 C2E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_120)
{
    // 42E0 003F;	
    // (䋠) CJK UNIFIED IDEOGRAPH-42E0	[FB80 C2E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_121)
{
    // 42E0 0061;	
    // (䋠) CJK UNIFIED IDEOGRAPH-42E0	[FB80 C2E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_122)
{
    // 42E0 0041;	
    // (䋠) CJK UNIFIED IDEOGRAPH-42E0	[FB80 C2E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42E0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_123)
{
    // 42E0 0062;	
    // (䋠) CJK UNIFIED IDEOGRAPH-42E0	[FB80 C2E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_124)
{
    // 42E1 0021;	
    // (䋡) CJK UNIFIED IDEOGRAPH-42E1	[FB80 C2E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_125)
{
    // 42E1 003F;	
    // (䋡) CJK UNIFIED IDEOGRAPH-42E1	[FB80 C2E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_126)
{
    // 42E1 0061;	
    // (䋡) CJK UNIFIED IDEOGRAPH-42E1	[FB80 C2E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_127)
{
    // 42E1 0041;	
    // (䋡) CJK UNIFIED IDEOGRAPH-42E1	[FB80 C2E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42E1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_128)
{
    // 42E1 0062;	
    // (䋡) CJK UNIFIED IDEOGRAPH-42E1	[FB80 C2E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_129)
{
    // 42E2 0021;	
    // (䋢) CJK UNIFIED IDEOGRAPH-42E2	[FB80 C2E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_130)
{
    // 42E2 003F;	
    // (䋢) CJK UNIFIED IDEOGRAPH-42E2	[FB80 C2E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_131)
{
    // 42E2 0061;	
    // (䋢) CJK UNIFIED IDEOGRAPH-42E2	[FB80 C2E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_132)
{
    // 42E2 0041;	
    // (䋢) CJK UNIFIED IDEOGRAPH-42E2	[FB80 C2E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42E2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_133)
{
    // 42E2 0062;	
    // (䋢) CJK UNIFIED IDEOGRAPH-42E2	[FB80 C2E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_134)
{
    // 42E3 0021;	
    // (䋣) CJK UNIFIED IDEOGRAPH-42E3	[FB80 C2E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_135)
{
    // 42E3 003F;	
    // (䋣) CJK UNIFIED IDEOGRAPH-42E3	[FB80 C2E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_136)
{
    // 42E3 0061;	
    // (䋣) CJK UNIFIED IDEOGRAPH-42E3	[FB80 C2E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_137)
{
    // 42E3 0041;	
    // (䋣) CJK UNIFIED IDEOGRAPH-42E3	[FB80 C2E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42E3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_138)
{
    // 42E3 0062;	
    // (䋣) CJK UNIFIED IDEOGRAPH-42E3	[FB80 C2E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_139)
{
    // 42E4 0021;	
    // (䋤) CJK UNIFIED IDEOGRAPH-42E4	[FB80 C2E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_140)
{
    // 42E4 003F;	
    // (䋤) CJK UNIFIED IDEOGRAPH-42E4	[FB80 C2E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_141)
{
    // 42E4 0061;	
    // (䋤) CJK UNIFIED IDEOGRAPH-42E4	[FB80 C2E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_142)
{
    // 42E4 0041;	
    // (䋤) CJK UNIFIED IDEOGRAPH-42E4	[FB80 C2E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42E4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_143)
{
    // 42E4 0062;	
    // (䋤) CJK UNIFIED IDEOGRAPH-42E4	[FB80 C2E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_144)
{
    // 42E5 0021;	
    // (䋥) CJK UNIFIED IDEOGRAPH-42E5	[FB80 C2E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_145)
{
    // 42E5 003F;	
    // (䋥) CJK UNIFIED IDEOGRAPH-42E5	[FB80 C2E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_146)
{
    // 42E5 0061;	
    // (䋥) CJK UNIFIED IDEOGRAPH-42E5	[FB80 C2E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_147)
{
    // 42E5 0041;	
    // (䋥) CJK UNIFIED IDEOGRAPH-42E5	[FB80 C2E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42E5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_148)
{
    // 42E5 0062;	
    // (䋥) CJK UNIFIED IDEOGRAPH-42E5	[FB80 C2E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_149)
{
    // 42E6 0021;	
    // (䋦) CJK UNIFIED IDEOGRAPH-42E6	[FB80 C2E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_150)
{
    // 42E6 003F;	
    // (䋦) CJK UNIFIED IDEOGRAPH-42E6	[FB80 C2E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_151)
{
    // 42E6 0061;	
    // (䋦) CJK UNIFIED IDEOGRAPH-42E6	[FB80 C2E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_152)
{
    // 42E6 0041;	
    // (䋦) CJK UNIFIED IDEOGRAPH-42E6	[FB80 C2E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42E6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_153)
{
    // 42E6 0062;	
    // (䋦) CJK UNIFIED IDEOGRAPH-42E6	[FB80 C2E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_154)
{
    // 42E7 0021;	
    // (䋧) CJK UNIFIED IDEOGRAPH-42E7	[FB80 C2E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_155)
{
    // 42E7 003F;	
    // (䋧) CJK UNIFIED IDEOGRAPH-42E7	[FB80 C2E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_156)
{
    // 42E7 0061;	
    // (䋧) CJK UNIFIED IDEOGRAPH-42E7	[FB80 C2E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_157)
{
    // 42E7 0041;	
    // (䋧) CJK UNIFIED IDEOGRAPH-42E7	[FB80 C2E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42E7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_158)
{
    // 42E7 0062;	
    // (䋧) CJK UNIFIED IDEOGRAPH-42E7	[FB80 C2E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_159)
{
    // 42E8 0021;	
    // (䋨) CJK UNIFIED IDEOGRAPH-42E8	[FB80 C2E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_160)
{
    // 42E8 003F;	
    // (䋨) CJK UNIFIED IDEOGRAPH-42E8	[FB80 C2E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_161)
{
    // 42E8 0061;	
    // (䋨) CJK UNIFIED IDEOGRAPH-42E8	[FB80 C2E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_162)
{
    // 42E8 0041;	
    // (䋨) CJK UNIFIED IDEOGRAPH-42E8	[FB80 C2E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42E8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_163)
{
    // 42E8 0062;	
    // (䋨) CJK UNIFIED IDEOGRAPH-42E8	[FB80 C2E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_164)
{
    // 42E9 0021;	
    // (䋩) CJK UNIFIED IDEOGRAPH-42E9	[FB80 C2E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_165)
{
    // 42E9 003F;	
    // (䋩) CJK UNIFIED IDEOGRAPH-42E9	[FB80 C2E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_166)
{
    // 42E9 0061;	
    // (䋩) CJK UNIFIED IDEOGRAPH-42E9	[FB80 C2E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_167)
{
    // 42E9 0041;	
    // (䋩) CJK UNIFIED IDEOGRAPH-42E9	[FB80 C2E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42E9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_168)
{
    // 42E9 0062;	
    // (䋩) CJK UNIFIED IDEOGRAPH-42E9	[FB80 C2E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42E9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_169)
{
    // 42EA 0021;	
    // (䋪) CJK UNIFIED IDEOGRAPH-42EA	[FB80 C2EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42EA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_170)
{
    // 42EA 003F;	
    // (䋪) CJK UNIFIED IDEOGRAPH-42EA	[FB80 C2EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42EA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_171)
{
    // 42EA 0061;	
    // (䋪) CJK UNIFIED IDEOGRAPH-42EA	[FB80 C2EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42EA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_172)
{
    // 42EA 0041;	
    // (䋪) CJK UNIFIED IDEOGRAPH-42EA	[FB80 C2EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42EA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_173)
{
    // 42EA 0062;	
    // (䋪) CJK UNIFIED IDEOGRAPH-42EA	[FB80 C2EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42EA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_174)
{
    // 42EB 0021;	
    // (䋫) CJK UNIFIED IDEOGRAPH-42EB	[FB80 C2EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42EB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_175)
{
    // 42EB 003F;	
    // (䋫) CJK UNIFIED IDEOGRAPH-42EB	[FB80 C2EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42EB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_176)
{
    // 42EB 0061;	
    // (䋫) CJK UNIFIED IDEOGRAPH-42EB	[FB80 C2EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42EB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_177)
{
    // 42EB 0041;	
    // (䋫) CJK UNIFIED IDEOGRAPH-42EB	[FB80 C2EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42EB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_178)
{
    // 42EB 0062;	
    // (䋫) CJK UNIFIED IDEOGRAPH-42EB	[FB80 C2EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42EB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_179)
{
    // 42EC 0021;	
    // (䋬) CJK UNIFIED IDEOGRAPH-42EC	[FB80 C2EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42EC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_180)
{
    // 42EC 003F;	
    // (䋬) CJK UNIFIED IDEOGRAPH-42EC	[FB80 C2EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42EC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_181)
{
    // 42EC 0061;	
    // (䋬) CJK UNIFIED IDEOGRAPH-42EC	[FB80 C2EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42EC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_182)
{
    // 42EC 0041;	
    // (䋬) CJK UNIFIED IDEOGRAPH-42EC	[FB80 C2EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42EC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_183)
{
    // 42EC 0062;	
    // (䋬) CJK UNIFIED IDEOGRAPH-42EC	[FB80 C2EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42EC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_184)
{
    // 42ED 0021;	
    // (䋭) CJK UNIFIED IDEOGRAPH-42ED	[FB80 C2ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42ED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_185)
{
    // 42ED 003F;	
    // (䋭) CJK UNIFIED IDEOGRAPH-42ED	[FB80 C2ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42ED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_186)
{
    // 42ED 0061;	
    // (䋭) CJK UNIFIED IDEOGRAPH-42ED	[FB80 C2ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42ED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_187)
{
    // 42ED 0041;	
    // (䋭) CJK UNIFIED IDEOGRAPH-42ED	[FB80 C2ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42ED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_188)
{
    // 42ED 0062;	
    // (䋭) CJK UNIFIED IDEOGRAPH-42ED	[FB80 C2ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42ED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_189)
{
    // 42EE 0021;	
    // (䋮) CJK UNIFIED IDEOGRAPH-42EE	[FB80 C2EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42EE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_190)
{
    // 42EE 003F;	
    // (䋮) CJK UNIFIED IDEOGRAPH-42EE	[FB80 C2EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42EE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_191)
{
    // 42EE 0061;	
    // (䋮) CJK UNIFIED IDEOGRAPH-42EE	[FB80 C2EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42EE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_192)
{
    // 42EE 0041;	
    // (䋮) CJK UNIFIED IDEOGRAPH-42EE	[FB80 C2EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42EE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_193)
{
    // 42EE 0062;	
    // (䋮) CJK UNIFIED IDEOGRAPH-42EE	[FB80 C2EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42EE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_194)
{
    // 42EF 0021;	
    // (䋯) CJK UNIFIED IDEOGRAPH-42EF	[FB80 C2EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42EF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_195)
{
    // 42EF 003F;	
    // (䋯) CJK UNIFIED IDEOGRAPH-42EF	[FB80 C2EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42EF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_196)
{
    // 42EF 0061;	
    // (䋯) CJK UNIFIED IDEOGRAPH-42EF	[FB80 C2EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42EF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_197)
{
    // 42EF 0041;	
    // (䋯) CJK UNIFIED IDEOGRAPH-42EF	[FB80 C2EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42EF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_198)
{
    // 42EF 0062;	
    // (䋯) CJK UNIFIED IDEOGRAPH-42EF	[FB80 C2EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42EF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_199)
{
    // 42F0 0021;	
    // (䋰) CJK UNIFIED IDEOGRAPH-42F0	[FB80 C2F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_200)
{
    // 42F0 003F;	
    // (䋰) CJK UNIFIED IDEOGRAPH-42F0	[FB80 C2F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_201)
{
    // 42F0 0061;	
    // (䋰) CJK UNIFIED IDEOGRAPH-42F0	[FB80 C2F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_202)
{
    // 42F0 0041;	
    // (䋰) CJK UNIFIED IDEOGRAPH-42F0	[FB80 C2F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42F0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_203)
{
    // 42F0 0062;	
    // (䋰) CJK UNIFIED IDEOGRAPH-42F0	[FB80 C2F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_204)
{
    // 42F1 0021;	
    // (䋱) CJK UNIFIED IDEOGRAPH-42F1	[FB80 C2F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_205)
{
    // 42F1 003F;	
    // (䋱) CJK UNIFIED IDEOGRAPH-42F1	[FB80 C2F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_206)
{
    // 42F1 0061;	
    // (䋱) CJK UNIFIED IDEOGRAPH-42F1	[FB80 C2F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_207)
{
    // 42F1 0041;	
    // (䋱) CJK UNIFIED IDEOGRAPH-42F1	[FB80 C2F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42F1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_208)
{
    // 42F1 0062;	
    // (䋱) CJK UNIFIED IDEOGRAPH-42F1	[FB80 C2F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_209)
{
    // 42F2 0021;	
    // (䋲) CJK UNIFIED IDEOGRAPH-42F2	[FB80 C2F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_210)
{
    // 42F2 003F;	
    // (䋲) CJK UNIFIED IDEOGRAPH-42F2	[FB80 C2F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_211)
{
    // 42F2 0061;	
    // (䋲) CJK UNIFIED IDEOGRAPH-42F2	[FB80 C2F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_212)
{
    // 42F2 0041;	
    // (䋲) CJK UNIFIED IDEOGRAPH-42F2	[FB80 C2F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42F2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_213)
{
    // 42F2 0062;	
    // (䋲) CJK UNIFIED IDEOGRAPH-42F2	[FB80 C2F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_214)
{
    // 42F3 0021;	
    // (䋳) CJK UNIFIED IDEOGRAPH-42F3	[FB80 C2F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_215)
{
    // 42F3 003F;	
    // (䋳) CJK UNIFIED IDEOGRAPH-42F3	[FB80 C2F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_216)
{
    // 42F3 0061;	
    // (䋳) CJK UNIFIED IDEOGRAPH-42F3	[FB80 C2F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_217)
{
    // 42F3 0041;	
    // (䋳) CJK UNIFIED IDEOGRAPH-42F3	[FB80 C2F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42F3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_218)
{
    // 42F3 0062;	
    // (䋳) CJK UNIFIED IDEOGRAPH-42F3	[FB80 C2F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_219)
{
    // 42F4 0021;	
    // (䋴) CJK UNIFIED IDEOGRAPH-42F4	[FB80 C2F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_220)
{
    // 42F4 003F;	
    // (䋴) CJK UNIFIED IDEOGRAPH-42F4	[FB80 C2F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_221)
{
    // 42F4 0061;	
    // (䋴) CJK UNIFIED IDEOGRAPH-42F4	[FB80 C2F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_222)
{
    // 42F4 0041;	
    // (䋴) CJK UNIFIED IDEOGRAPH-42F4	[FB80 C2F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42F4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_223)
{
    // 42F4 0062;	
    // (䋴) CJK UNIFIED IDEOGRAPH-42F4	[FB80 C2F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_224)
{
    // 42F5 0021;	
    // (䋵) CJK UNIFIED IDEOGRAPH-42F5	[FB80 C2F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_225)
{
    // 42F5 003F;	
    // (䋵) CJK UNIFIED IDEOGRAPH-42F5	[FB80 C2F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_226)
{
    // 42F5 0061;	
    // (䋵) CJK UNIFIED IDEOGRAPH-42F5	[FB80 C2F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_227)
{
    // 42F5 0041;	
    // (䋵) CJK UNIFIED IDEOGRAPH-42F5	[FB80 C2F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42F5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_228)
{
    // 42F5 0062;	
    // (䋵) CJK UNIFIED IDEOGRAPH-42F5	[FB80 C2F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_229)
{
    // 42F6 0021;	
    // (䋶) CJK UNIFIED IDEOGRAPH-42F6	[FB80 C2F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_230)
{
    // 42F6 003F;	
    // (䋶) CJK UNIFIED IDEOGRAPH-42F6	[FB80 C2F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_231)
{
    // 42F6 0061;	
    // (䋶) CJK UNIFIED IDEOGRAPH-42F6	[FB80 C2F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_232)
{
    // 42F6 0041;	
    // (䋶) CJK UNIFIED IDEOGRAPH-42F6	[FB80 C2F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42F6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_233)
{
    // 42F6 0062;	
    // (䋶) CJK UNIFIED IDEOGRAPH-42F6	[FB80 C2F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_234)
{
    // 42F7 0021;	
    // (䋷) CJK UNIFIED IDEOGRAPH-42F7	[FB80 C2F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_235)
{
    // 42F7 003F;	
    // (䋷) CJK UNIFIED IDEOGRAPH-42F7	[FB80 C2F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_236)
{
    // 42F7 0061;	
    // (䋷) CJK UNIFIED IDEOGRAPH-42F7	[FB80 C2F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_237)
{
    // 42F7 0041;	
    // (䋷) CJK UNIFIED IDEOGRAPH-42F7	[FB80 C2F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42F7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_238)
{
    // 42F7 0062;	
    // (䋷) CJK UNIFIED IDEOGRAPH-42F7	[FB80 C2F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_239)
{
    // 42F8 0021;	
    // (䋸) CJK UNIFIED IDEOGRAPH-42F8	[FB80 C2F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_240)
{
    // 42F8 003F;	
    // (䋸) CJK UNIFIED IDEOGRAPH-42F8	[FB80 C2F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_241)
{
    // 42F8 0061;	
    // (䋸) CJK UNIFIED IDEOGRAPH-42F8	[FB80 C2F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_242)
{
    // 42F8 0041;	
    // (䋸) CJK UNIFIED IDEOGRAPH-42F8	[FB80 C2F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42F8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_243)
{
    // 42F8 0062;	
    // (䋸) CJK UNIFIED IDEOGRAPH-42F8	[FB80 C2F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_244)
{
    // 42F9 0021;	
    // (䋹) CJK UNIFIED IDEOGRAPH-42F9	[FB80 C2F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_245)
{
    // 42F9 003F;	
    // (䋹) CJK UNIFIED IDEOGRAPH-42F9	[FB80 C2F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_246)
{
    // 42F9 0061;	
    // (䋹) CJK UNIFIED IDEOGRAPH-42F9	[FB80 C2F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_247)
{
    // 42F9 0041;	
    // (䋹) CJK UNIFIED IDEOGRAPH-42F9	[FB80 C2F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42F9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_248)
{
    // 42F9 0062;	
    // (䋹) CJK UNIFIED IDEOGRAPH-42F9	[FB80 C2F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42F9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_249)
{
    // 42FA 0021;	
    // (䋺) CJK UNIFIED IDEOGRAPH-42FA	[FB80 C2FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_250)
{
    // 42FA 003F;	
    // (䋺) CJK UNIFIED IDEOGRAPH-42FA	[FB80 C2FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_251)
{
    // 42FA 0061;	
    // (䋺) CJK UNIFIED IDEOGRAPH-42FA	[FB80 C2FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_252)
{
    // 42FA 0041;	
    // (䋺) CJK UNIFIED IDEOGRAPH-42FA	[FB80 C2FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42FA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_253)
{
    // 42FA 0062;	
    // (䋺) CJK UNIFIED IDEOGRAPH-42FA	[FB80 C2FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_254)
{
    // 42FB 0021;	
    // (䋻) CJK UNIFIED IDEOGRAPH-42FB	[FB80 C2FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_255)
{
    // 42FB 003F;	
    // (䋻) CJK UNIFIED IDEOGRAPH-42FB	[FB80 C2FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_256)
{
    // 42FB 0061;	
    // (䋻) CJK UNIFIED IDEOGRAPH-42FB	[FB80 C2FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_257)
{
    // 42FB 0041;	
    // (䋻) CJK UNIFIED IDEOGRAPH-42FB	[FB80 C2FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42FB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_258)
{
    // 42FB 0062;	
    // (䋻) CJK UNIFIED IDEOGRAPH-42FB	[FB80 C2FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_259)
{
    // 42FC 0021;	
    // (䋼) CJK UNIFIED IDEOGRAPH-42FC	[FB80 C2FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_260)
{
    // 42FC 003F;	
    // (䋼) CJK UNIFIED IDEOGRAPH-42FC	[FB80 C2FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_261)
{
    // 42FC 0061;	
    // (䋼) CJK UNIFIED IDEOGRAPH-42FC	[FB80 C2FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_262)
{
    // 42FC 0041;	
    // (䋼) CJK UNIFIED IDEOGRAPH-42FC	[FB80 C2FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42FC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_263)
{
    // 42FC 0062;	
    // (䋼) CJK UNIFIED IDEOGRAPH-42FC	[FB80 C2FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_264)
{
    // 42FD 0021;	
    // (䋽) CJK UNIFIED IDEOGRAPH-42FD	[FB80 C2FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_265)
{
    // 42FD 003F;	
    // (䋽) CJK UNIFIED IDEOGRAPH-42FD	[FB80 C2FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_266)
{
    // 42FD 0061;	
    // (䋽) CJK UNIFIED IDEOGRAPH-42FD	[FB80 C2FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_267)
{
    // 42FD 0041;	
    // (䋽) CJK UNIFIED IDEOGRAPH-42FD	[FB80 C2FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42FD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_268)
{
    // 42FD 0062;	
    // (䋽) CJK UNIFIED IDEOGRAPH-42FD	[FB80 C2FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_269)
{
    // 42FE 0021;	
    // (䋾) CJK UNIFIED IDEOGRAPH-42FE	[FB80 C2FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_270)
{
    // 42FE 003F;	
    // (䋾) CJK UNIFIED IDEOGRAPH-42FE	[FB80 C2FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_271)
{
    // 42FE 0061;	
    // (䋾) CJK UNIFIED IDEOGRAPH-42FE	[FB80 C2FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_272)
{
    // 42FE 0041;	
    // (䋾) CJK UNIFIED IDEOGRAPH-42FE	[FB80 C2FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42FE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_273)
{
    // 42FE 0062;	
    // (䋾) CJK UNIFIED IDEOGRAPH-42FE	[FB80 C2FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_274)
{
    // 42FF 0021;	
    // (䋿) CJK UNIFIED IDEOGRAPH-42FF	[FB80 C2FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_275)
{
    // 42FF 003F;	
    // (䋿) CJK UNIFIED IDEOGRAPH-42FF	[FB80 C2FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_276)
{
    // 42FF 0061;	
    // (䋿) CJK UNIFIED IDEOGRAPH-42FF	[FB80 C2FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_277)
{
    // 42FF 0041;	
    // (䋿) CJK UNIFIED IDEOGRAPH-42FF	[FB80 C2FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42FF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_278)
{
    // 42FF 0062;	
    // (䋿) CJK UNIFIED IDEOGRAPH-42FF	[FB80 C2FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42FF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_279)
{
    // 4300 0021;	
    // (䌀) CJK UNIFIED IDEOGRAPH-4300	[FB80 C300 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4300, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC300, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_280)
{
    // 4300 003F;	
    // (䌀) CJK UNIFIED IDEOGRAPH-4300	[FB80 C300 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4300, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC300, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_281)
{
    // 4300 0061;	
    // (䌀) CJK UNIFIED IDEOGRAPH-4300	[FB80 C300 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4300, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC300, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_282)
{
    // 4300 0041;	
    // (䌀) CJK UNIFIED IDEOGRAPH-4300	[FB80 C300 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4300, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC300, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_283)
{
    // 4300 0062;	
    // (䌀) CJK UNIFIED IDEOGRAPH-4300	[FB80 C300 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4300, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC300, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_284)
{
    // 4301 0021;	
    // (䌁) CJK UNIFIED IDEOGRAPH-4301	[FB80 C301 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4301, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC301, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_285)
{
    // 2F96D 0021;	
    // (䌁) CJK COMPATIBILITY IDEOGRAPH-2F96D	[FB80 C301 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F96D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC301, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_286)
{
    // 4301 003F;	
    // (䌁) CJK UNIFIED IDEOGRAPH-4301	[FB80 C301 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4301, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC301, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_287)
{
    // 2F96D 003F;	
    // (䌁) CJK COMPATIBILITY IDEOGRAPH-2F96D	[FB80 C301 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F96D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC301, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_288)
{
    // 4301 0061;	
    // (䌁) CJK UNIFIED IDEOGRAPH-4301	[FB80 C301 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4301, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC301, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_289)
{
    // 2F96D 0061;	
    // (䌁) CJK COMPATIBILITY IDEOGRAPH-2F96D	[FB80 C301 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F96D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC301, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_290)
{
    // 4301 0041;	
    // (䌁) CJK UNIFIED IDEOGRAPH-4301	[FB80 C301 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4301, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC301, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_291)
{
    // 2F96D 0041;	
    // (䌁) CJK COMPATIBILITY IDEOGRAPH-2F96D	[FB80 C301 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F96D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC301, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_292)
{
    // 4301 0062;	
    // (䌁) CJK UNIFIED IDEOGRAPH-4301	[FB80 C301 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4301, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC301, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_293)
{
    // 2F96D 0062;	
    // (䌁) CJK COMPATIBILITY IDEOGRAPH-2F96D	[FB80 C301 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F96D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC301, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_294)
{
    // 4302 0021;	
    // (䌂) CJK UNIFIED IDEOGRAPH-4302	[FB80 C302 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4302, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC302, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_295)
{
    // 4302 003F;	
    // (䌂) CJK UNIFIED IDEOGRAPH-4302	[FB80 C302 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4302, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC302, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_296)
{
    // 4302 0061;	
    // (䌂) CJK UNIFIED IDEOGRAPH-4302	[FB80 C302 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4302, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC302, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_297)
{
    // 4302 0041;	
    // (䌂) CJK UNIFIED IDEOGRAPH-4302	[FB80 C302 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4302, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC302, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_298)
{
    // 4302 0062;	
    // (䌂) CJK UNIFIED IDEOGRAPH-4302	[FB80 C302 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4302, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC302, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_299)
{
    // 4303 0021;	
    // (䌃) CJK UNIFIED IDEOGRAPH-4303	[FB80 C303 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4303, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC303, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_300)
{
    // 4303 003F;	
    // (䌃) CJK UNIFIED IDEOGRAPH-4303	[FB80 C303 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4303, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC303, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_301)
{
    // 4303 0061;	
    // (䌃) CJK UNIFIED IDEOGRAPH-4303	[FB80 C303 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4303, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC303, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_302)
{
    // 4303 0041;	
    // (䌃) CJK UNIFIED IDEOGRAPH-4303	[FB80 C303 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4303, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC303, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_303)
{
    // 4303 0062;	
    // (䌃) CJK UNIFIED IDEOGRAPH-4303	[FB80 C303 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4303, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC303, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_304)
{
    // 4304 0021;	
    // (䌄) CJK UNIFIED IDEOGRAPH-4304	[FB80 C304 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4304, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC304, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_305)
{
    // 4304 003F;	
    // (䌄) CJK UNIFIED IDEOGRAPH-4304	[FB80 C304 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4304, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC304, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_306)
{
    // 4304 0061;	
    // (䌄) CJK UNIFIED IDEOGRAPH-4304	[FB80 C304 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4304, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC304, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_307)
{
    // 4304 0041;	
    // (䌄) CJK UNIFIED IDEOGRAPH-4304	[FB80 C304 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4304, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC304, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_308)
{
    // 4304 0062;	
    // (䌄) CJK UNIFIED IDEOGRAPH-4304	[FB80 C304 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4304, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC304, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_309)
{
    // 4305 0021;	
    // (䌅) CJK UNIFIED IDEOGRAPH-4305	[FB80 C305 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4305, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC305, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_310)
{
    // 4305 003F;	
    // (䌅) CJK UNIFIED IDEOGRAPH-4305	[FB80 C305 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4305, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC305, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_311)
{
    // 4305 0061;	
    // (䌅) CJK UNIFIED IDEOGRAPH-4305	[FB80 C305 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4305, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC305, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_312)
{
    // 4305 0041;	
    // (䌅) CJK UNIFIED IDEOGRAPH-4305	[FB80 C305 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4305, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC305, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_313)
{
    // 4305 0062;	
    // (䌅) CJK UNIFIED IDEOGRAPH-4305	[FB80 C305 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4305, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC305, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_314)
{
    // 4306 0021;	
    // (䌆) CJK UNIFIED IDEOGRAPH-4306	[FB80 C306 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4306, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC306, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_315)
{
    // 4306 003F;	
    // (䌆) CJK UNIFIED IDEOGRAPH-4306	[FB80 C306 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4306, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC306, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_316)
{
    // 4306 0061;	
    // (䌆) CJK UNIFIED IDEOGRAPH-4306	[FB80 C306 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4306, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC306, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_317)
{
    // 4306 0041;	
    // (䌆) CJK UNIFIED IDEOGRAPH-4306	[FB80 C306 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4306, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC306, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_318)
{
    // 4306 0062;	
    // (䌆) CJK UNIFIED IDEOGRAPH-4306	[FB80 C306 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4306, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC306, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_319)
{
    // 4307 0021;	
    // (䌇) CJK UNIFIED IDEOGRAPH-4307	[FB80 C307 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4307, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC307, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_320)
{
    // 4307 003F;	
    // (䌇) CJK UNIFIED IDEOGRAPH-4307	[FB80 C307 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4307, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC307, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_321)
{
    // 4307 0061;	
    // (䌇) CJK UNIFIED IDEOGRAPH-4307	[FB80 C307 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4307, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC307, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_322)
{
    // 4307 0041;	
    // (䌇) CJK UNIFIED IDEOGRAPH-4307	[FB80 C307 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4307, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC307, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_323)
{
    // 4307 0062;	
    // (䌇) CJK UNIFIED IDEOGRAPH-4307	[FB80 C307 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4307, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC307, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_324)
{
    // 4308 0021;	
    // (䌈) CJK UNIFIED IDEOGRAPH-4308	[FB80 C308 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4308, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC308, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_325)
{
    // 4308 003F;	
    // (䌈) CJK UNIFIED IDEOGRAPH-4308	[FB80 C308 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4308, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC308, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_326)
{
    // 4308 0061;	
    // (䌈) CJK UNIFIED IDEOGRAPH-4308	[FB80 C308 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4308, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC308, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_327)
{
    // 4308 0041;	
    // (䌈) CJK UNIFIED IDEOGRAPH-4308	[FB80 C308 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4308, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC308, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_328)
{
    // 4308 0062;	
    // (䌈) CJK UNIFIED IDEOGRAPH-4308	[FB80 C308 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4308, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC308, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_329)
{
    // 4309 0021;	
    // (䌉) CJK UNIFIED IDEOGRAPH-4309	[FB80 C309 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4309, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC309, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_330)
{
    // 4309 003F;	
    // (䌉) CJK UNIFIED IDEOGRAPH-4309	[FB80 C309 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4309, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC309, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_331)
{
    // 4309 0061;	
    // (䌉) CJK UNIFIED IDEOGRAPH-4309	[FB80 C309 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4309, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC309, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_332)
{
    // 4309 0041;	
    // (䌉) CJK UNIFIED IDEOGRAPH-4309	[FB80 C309 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4309, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC309, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_333)
{
    // 4309 0062;	
    // (䌉) CJK UNIFIED IDEOGRAPH-4309	[FB80 C309 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4309, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC309, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_334)
{
    // 430A 0021;	
    // (䌊) CJK UNIFIED IDEOGRAPH-430A	[FB80 C30A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC30A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_335)
{
    // 430A 003F;	
    // (䌊) CJK UNIFIED IDEOGRAPH-430A	[FB80 C30A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC30A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_336)
{
    // 430A 0061;	
    // (䌊) CJK UNIFIED IDEOGRAPH-430A	[FB80 C30A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC30A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_337)
{
    // 430A 0041;	
    // (䌊) CJK UNIFIED IDEOGRAPH-430A	[FB80 C30A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x430A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC30A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_338)
{
    // 430A 0062;	
    // (䌊) CJK UNIFIED IDEOGRAPH-430A	[FB80 C30A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC30A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_339)
{
    // 430B 0021;	
    // (䌋) CJK UNIFIED IDEOGRAPH-430B	[FB80 C30B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC30B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_340)
{
    // 430B 003F;	
    // (䌋) CJK UNIFIED IDEOGRAPH-430B	[FB80 C30B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC30B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_341)
{
    // 430B 0061;	
    // (䌋) CJK UNIFIED IDEOGRAPH-430B	[FB80 C30B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC30B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_342)
{
    // 430B 0041;	
    // (䌋) CJK UNIFIED IDEOGRAPH-430B	[FB80 C30B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x430B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC30B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_343)
{
    // 430B 0062;	
    // (䌋) CJK UNIFIED IDEOGRAPH-430B	[FB80 C30B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC30B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_344)
{
    // 430C 0021;	
    // (䌌) CJK UNIFIED IDEOGRAPH-430C	[FB80 C30C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC30C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_345)
{
    // 430C 003F;	
    // (䌌) CJK UNIFIED IDEOGRAPH-430C	[FB80 C30C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC30C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_346)
{
    // 430C 0061;	
    // (䌌) CJK UNIFIED IDEOGRAPH-430C	[FB80 C30C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC30C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_347)
{
    // 430C 0041;	
    // (䌌) CJK UNIFIED IDEOGRAPH-430C	[FB80 C30C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x430C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC30C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_348)
{
    // 430C 0062;	
    // (䌌) CJK UNIFIED IDEOGRAPH-430C	[FB80 C30C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC30C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_349)
{
    // 430D 0021;	
    // (䌍) CJK UNIFIED IDEOGRAPH-430D	[FB80 C30D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC30D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_350)
{
    // 430D 003F;	
    // (䌍) CJK UNIFIED IDEOGRAPH-430D	[FB80 C30D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC30D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_351)
{
    // 430D 0061;	
    // (䌍) CJK UNIFIED IDEOGRAPH-430D	[FB80 C30D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC30D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_352)
{
    // 430D 0041;	
    // (䌍) CJK UNIFIED IDEOGRAPH-430D	[FB80 C30D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x430D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC30D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_353)
{
    // 430D 0062;	
    // (䌍) CJK UNIFIED IDEOGRAPH-430D	[FB80 C30D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC30D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_354)
{
    // 430E 0021;	
    // (䌎) CJK UNIFIED IDEOGRAPH-430E	[FB80 C30E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC30E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_355)
{
    // 430E 003F;	
    // (䌎) CJK UNIFIED IDEOGRAPH-430E	[FB80 C30E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC30E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_356)
{
    // 430E 0061;	
    // (䌎) CJK UNIFIED IDEOGRAPH-430E	[FB80 C30E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC30E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_357)
{
    // 430E 0041;	
    // (䌎) CJK UNIFIED IDEOGRAPH-430E	[FB80 C30E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x430E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC30E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_358)
{
    // 430E 0062;	
    // (䌎) CJK UNIFIED IDEOGRAPH-430E	[FB80 C30E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC30E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_359)
{
    // 430F 0021;	
    // (䌏) CJK UNIFIED IDEOGRAPH-430F	[FB80 C30F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC30F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_360)
{
    // 430F 003F;	
    // (䌏) CJK UNIFIED IDEOGRAPH-430F	[FB80 C30F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC30F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_361)
{
    // 430F 0061;	
    // (䌏) CJK UNIFIED IDEOGRAPH-430F	[FB80 C30F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC30F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_362)
{
    // 430F 0041;	
    // (䌏) CJK UNIFIED IDEOGRAPH-430F	[FB80 C30F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x430F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC30F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_363)
{
    // 430F 0062;	
    // (䌏) CJK UNIFIED IDEOGRAPH-430F	[FB80 C30F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x430F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC30F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_364)
{
    // 4310 0021;	
    // (䌐) CJK UNIFIED IDEOGRAPH-4310	[FB80 C310 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4310, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC310, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_365)
{
    // 4310 003F;	
    // (䌐) CJK UNIFIED IDEOGRAPH-4310	[FB80 C310 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4310, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC310, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_366)
{
    // 4310 0061;	
    // (䌐) CJK UNIFIED IDEOGRAPH-4310	[FB80 C310 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4310, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC310, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_367)
{
    // 4310 0041;	
    // (䌐) CJK UNIFIED IDEOGRAPH-4310	[FB80 C310 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4310, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC310, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_368)
{
    // 4310 0062;	
    // (䌐) CJK UNIFIED IDEOGRAPH-4310	[FB80 C310 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4310, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC310, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_369)
{
    // 4311 0021;	
    // (䌑) CJK UNIFIED IDEOGRAPH-4311	[FB80 C311 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4311, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC311, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_370)
{
    // 4311 003F;	
    // (䌑) CJK UNIFIED IDEOGRAPH-4311	[FB80 C311 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4311, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC311, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_371)
{
    // 4311 0061;	
    // (䌑) CJK UNIFIED IDEOGRAPH-4311	[FB80 C311 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4311, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC311, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_372)
{
    // 4311 0041;	
    // (䌑) CJK UNIFIED IDEOGRAPH-4311	[FB80 C311 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4311, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC311, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_373)
{
    // 4311 0062;	
    // (䌑) CJK UNIFIED IDEOGRAPH-4311	[FB80 C311 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4311, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC311, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_374)
{
    // 4312 0021;	
    // (䌒) CJK UNIFIED IDEOGRAPH-4312	[FB80 C312 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4312, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC312, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_375)
{
    // 4312 003F;	
    // (䌒) CJK UNIFIED IDEOGRAPH-4312	[FB80 C312 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4312, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC312, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_376)
{
    // 4312 0061;	
    // (䌒) CJK UNIFIED IDEOGRAPH-4312	[FB80 C312 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4312, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC312, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_377)
{
    // 4312 0041;	
    // (䌒) CJK UNIFIED IDEOGRAPH-4312	[FB80 C312 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4312, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC312, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_378)
{
    // 4312 0062;	
    // (䌒) CJK UNIFIED IDEOGRAPH-4312	[FB80 C312 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4312, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC312, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_379)
{
    // 4313 0021;	
    // (䌓) CJK UNIFIED IDEOGRAPH-4313	[FB80 C313 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4313, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC313, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_380)
{
    // 4313 003F;	
    // (䌓) CJK UNIFIED IDEOGRAPH-4313	[FB80 C313 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4313, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC313, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_381)
{
    // 4313 0061;	
    // (䌓) CJK UNIFIED IDEOGRAPH-4313	[FB80 C313 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4313, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC313, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_382)
{
    // 4313 0041;	
    // (䌓) CJK UNIFIED IDEOGRAPH-4313	[FB80 C313 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4313, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC313, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_383)
{
    // 4313 0062;	
    // (䌓) CJK UNIFIED IDEOGRAPH-4313	[FB80 C313 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4313, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC313, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_384)
{
    // 4314 0021;	
    // (䌔) CJK UNIFIED IDEOGRAPH-4314	[FB80 C314 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4314, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC314, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_385)
{
    // 4314 003F;	
    // (䌔) CJK UNIFIED IDEOGRAPH-4314	[FB80 C314 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4314, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC314, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_386)
{
    // 4314 0061;	
    // (䌔) CJK UNIFIED IDEOGRAPH-4314	[FB80 C314 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4314, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC314, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_387)
{
    // 4314 0041;	
    // (䌔) CJK UNIFIED IDEOGRAPH-4314	[FB80 C314 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4314, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC314, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_388)
{
    // 4314 0062;	
    // (䌔) CJK UNIFIED IDEOGRAPH-4314	[FB80 C314 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4314, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC314, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_389)
{
    // 4315 0021;	
    // (䌕) CJK UNIFIED IDEOGRAPH-4315	[FB80 C315 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4315, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC315, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_390)
{
    // 4315 003F;	
    // (䌕) CJK UNIFIED IDEOGRAPH-4315	[FB80 C315 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4315, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC315, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_391)
{
    // 4315 0061;	
    // (䌕) CJK UNIFIED IDEOGRAPH-4315	[FB80 C315 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4315, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC315, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_392)
{
    // 4315 0041;	
    // (䌕) CJK UNIFIED IDEOGRAPH-4315	[FB80 C315 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4315, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC315, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_393)
{
    // 4315 0062;	
    // (䌕) CJK UNIFIED IDEOGRAPH-4315	[FB80 C315 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4315, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC315, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_394)
{
    // 4316 0021;	
    // (䌖) CJK UNIFIED IDEOGRAPH-4316	[FB80 C316 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4316, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC316, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_395)
{
    // 4316 003F;	
    // (䌖) CJK UNIFIED IDEOGRAPH-4316	[FB80 C316 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4316, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC316, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_396)
{
    // 4316 0061;	
    // (䌖) CJK UNIFIED IDEOGRAPH-4316	[FB80 C316 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4316, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC316, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_397)
{
    // 4316 0041;	
    // (䌖) CJK UNIFIED IDEOGRAPH-4316	[FB80 C316 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4316, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC316, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_398)
{
    // 4316 0062;	
    // (䌖) CJK UNIFIED IDEOGRAPH-4316	[FB80 C316 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4316, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC316, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_399)
{
    // 4317 0021;	
    // (䌗) CJK UNIFIED IDEOGRAPH-4317	[FB80 C317 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4317, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC317, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_400)
{
    // 4317 003F;	
    // (䌗) CJK UNIFIED IDEOGRAPH-4317	[FB80 C317 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4317, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC317, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_401)
{
    // 4317 0061;	
    // (䌗) CJK UNIFIED IDEOGRAPH-4317	[FB80 C317 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4317, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC317, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_402)
{
    // 4317 0041;	
    // (䌗) CJK UNIFIED IDEOGRAPH-4317	[FB80 C317 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4317, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC317, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_403)
{
    // 4317 0062;	
    // (䌗) CJK UNIFIED IDEOGRAPH-4317	[FB80 C317 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4317, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC317, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_404)
{
    // 4318 0021;	
    // (䌘) CJK UNIFIED IDEOGRAPH-4318	[FB80 C318 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4318, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC318, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_405)
{
    // 4318 003F;	
    // (䌘) CJK UNIFIED IDEOGRAPH-4318	[FB80 C318 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4318, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC318, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_406)
{
    // 4318 0061;	
    // (䌘) CJK UNIFIED IDEOGRAPH-4318	[FB80 C318 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4318, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC318, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_407)
{
    // 4318 0041;	
    // (䌘) CJK UNIFIED IDEOGRAPH-4318	[FB80 C318 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4318, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC318, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_408)
{
    // 4318 0062;	
    // (䌘) CJK UNIFIED IDEOGRAPH-4318	[FB80 C318 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4318, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC318, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_409)
{
    // 4319 0021;	
    // (䌙) CJK UNIFIED IDEOGRAPH-4319	[FB80 C319 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4319, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_410)
{
    // 4319 003F;	
    // (䌙) CJK UNIFIED IDEOGRAPH-4319	[FB80 C319 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4319, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_411)
{
    // 4319 0061;	
    // (䌙) CJK UNIFIED IDEOGRAPH-4319	[FB80 C319 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4319, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_412)
{
    // 4319 0041;	
    // (䌙) CJK UNIFIED IDEOGRAPH-4319	[FB80 C319 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4319, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_413)
{
    // 4319 0062;	
    // (䌙) CJK UNIFIED IDEOGRAPH-4319	[FB80 C319 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4319, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_414)
{
    // 431A 0021;	
    // (䌚) CJK UNIFIED IDEOGRAPH-431A	[FB80 C31A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC31A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_415)
{
    // 431A 003F;	
    // (䌚) CJK UNIFIED IDEOGRAPH-431A	[FB80 C31A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC31A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_416)
{
    // 431A 0061;	
    // (䌚) CJK UNIFIED IDEOGRAPH-431A	[FB80 C31A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC31A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_417)
{
    // 431A 0041;	
    // (䌚) CJK UNIFIED IDEOGRAPH-431A	[FB80 C31A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x431A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC31A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_418)
{
    // 431A 0062;	
    // (䌚) CJK UNIFIED IDEOGRAPH-431A	[FB80 C31A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC31A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_419)
{
    // 431B 0021;	
    // (䌛) CJK UNIFIED IDEOGRAPH-431B	[FB80 C31B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC31B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_420)
{
    // 431B 003F;	
    // (䌛) CJK UNIFIED IDEOGRAPH-431B	[FB80 C31B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC31B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_421)
{
    // 431B 0061;	
    // (䌛) CJK UNIFIED IDEOGRAPH-431B	[FB80 C31B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC31B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_422)
{
    // 431B 0041;	
    // (䌛) CJK UNIFIED IDEOGRAPH-431B	[FB80 C31B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x431B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC31B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_423)
{
    // 431B 0062;	
    // (䌛) CJK UNIFIED IDEOGRAPH-431B	[FB80 C31B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC31B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_424)
{
    // 431C 0021;	
    // (䌜) CJK UNIFIED IDEOGRAPH-431C	[FB80 C31C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC31C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_425)
{
    // 431C 003F;	
    // (䌜) CJK UNIFIED IDEOGRAPH-431C	[FB80 C31C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC31C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_426)
{
    // 431C 0061;	
    // (䌜) CJK UNIFIED IDEOGRAPH-431C	[FB80 C31C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC31C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_427)
{
    // 431C 0041;	
    // (䌜) CJK UNIFIED IDEOGRAPH-431C	[FB80 C31C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x431C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC31C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_428)
{
    // 431C 0062;	
    // (䌜) CJK UNIFIED IDEOGRAPH-431C	[FB80 C31C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC31C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_429)
{
    // 431D 0021;	
    // (䌝) CJK UNIFIED IDEOGRAPH-431D	[FB80 C31D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC31D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_430)
{
    // 431D 003F;	
    // (䌝) CJK UNIFIED IDEOGRAPH-431D	[FB80 C31D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC31D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_431)
{
    // 431D 0061;	
    // (䌝) CJK UNIFIED IDEOGRAPH-431D	[FB80 C31D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC31D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_432)
{
    // 431D 0041;	
    // (䌝) CJK UNIFIED IDEOGRAPH-431D	[FB80 C31D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x431D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC31D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_433)
{
    // 431D 0062;	
    // (䌝) CJK UNIFIED IDEOGRAPH-431D	[FB80 C31D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC31D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_434)
{
    // 431E 0021;	
    // (䌞) CJK UNIFIED IDEOGRAPH-431E	[FB80 C31E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC31E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_435)
{
    // 431E 003F;	
    // (䌞) CJK UNIFIED IDEOGRAPH-431E	[FB80 C31E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC31E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_436)
{
    // 431E 0061;	
    // (䌞) CJK UNIFIED IDEOGRAPH-431E	[FB80 C31E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC31E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_437)
{
    // 431E 0041;	
    // (䌞) CJK UNIFIED IDEOGRAPH-431E	[FB80 C31E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x431E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC31E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_438)
{
    // 431E 0062;	
    // (䌞) CJK UNIFIED IDEOGRAPH-431E	[FB80 C31E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC31E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_439)
{
    // 431F 0021;	
    // (䌟) CJK UNIFIED IDEOGRAPH-431F	[FB80 C31F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC31F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_440)
{
    // 431F 003F;	
    // (䌟) CJK UNIFIED IDEOGRAPH-431F	[FB80 C31F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC31F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_441)
{
    // 431F 0061;	
    // (䌟) CJK UNIFIED IDEOGRAPH-431F	[FB80 C31F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC31F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_442)
{
    // 431F 0041;	
    // (䌟) CJK UNIFIED IDEOGRAPH-431F	[FB80 C31F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x431F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC31F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_443)
{
    // 431F 0062;	
    // (䌟) CJK UNIFIED IDEOGRAPH-431F	[FB80 C31F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x431F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC31F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_444)
{
    // 4320 0021;	
    // (䌠) CJK UNIFIED IDEOGRAPH-4320	[FB80 C320 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4320, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC320, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_445)
{
    // 4320 003F;	
    // (䌠) CJK UNIFIED IDEOGRAPH-4320	[FB80 C320 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4320, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC320, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_446)
{
    // 4320 0061;	
    // (䌠) CJK UNIFIED IDEOGRAPH-4320	[FB80 C320 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4320, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC320, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_447)
{
    // 4320 0041;	
    // (䌠) CJK UNIFIED IDEOGRAPH-4320	[FB80 C320 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4320, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC320, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_448)
{
    // 4320 0062;	
    // (䌠) CJK UNIFIED IDEOGRAPH-4320	[FB80 C320 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4320, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC320, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_449)
{
    // 4321 0021;	
    // (䌡) CJK UNIFIED IDEOGRAPH-4321	[FB80 C321 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4321, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC321, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_450)
{
    // 4321 003F;	
    // (䌡) CJK UNIFIED IDEOGRAPH-4321	[FB80 C321 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4321, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC321, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_451)
{
    // 4321 0061;	
    // (䌡) CJK UNIFIED IDEOGRAPH-4321	[FB80 C321 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4321, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC321, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_452)
{
    // 4321 0041;	
    // (䌡) CJK UNIFIED IDEOGRAPH-4321	[FB80 C321 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4321, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC321, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_453)
{
    // 4321 0062;	
    // (䌡) CJK UNIFIED IDEOGRAPH-4321	[FB80 C321 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4321, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC321, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_454)
{
    // 4322 0021;	
    // (䌢) CJK UNIFIED IDEOGRAPH-4322	[FB80 C322 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4322, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC322, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_455)
{
    // 4322 003F;	
    // (䌢) CJK UNIFIED IDEOGRAPH-4322	[FB80 C322 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4322, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC322, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_456)
{
    // 4322 0061;	
    // (䌢) CJK UNIFIED IDEOGRAPH-4322	[FB80 C322 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4322, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC322, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_457)
{
    // 4322 0041;	
    // (䌢) CJK UNIFIED IDEOGRAPH-4322	[FB80 C322 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4322, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC322, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_458)
{
    // 4322 0062;	
    // (䌢) CJK UNIFIED IDEOGRAPH-4322	[FB80 C322 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4322, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC322, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_459)
{
    // 4323 0021;	
    // (䌣) CJK UNIFIED IDEOGRAPH-4323	[FB80 C323 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4323, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC323, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_460)
{
    // 4323 003F;	
    // (䌣) CJK UNIFIED IDEOGRAPH-4323	[FB80 C323 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4323, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC323, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_461)
{
    // 4323 0061;	
    // (䌣) CJK UNIFIED IDEOGRAPH-4323	[FB80 C323 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4323, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC323, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_462)
{
    // 4323 0041;	
    // (䌣) CJK UNIFIED IDEOGRAPH-4323	[FB80 C323 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4323, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC323, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_463)
{
    // 4323 0062;	
    // (䌣) CJK UNIFIED IDEOGRAPH-4323	[FB80 C323 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4323, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC323, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_464)
{
    // 4324 0021;	
    // (䌤) CJK UNIFIED IDEOGRAPH-4324	[FB80 C324 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4324, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC324, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_465)
{
    // 4324 003F;	
    // (䌤) CJK UNIFIED IDEOGRAPH-4324	[FB80 C324 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4324, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC324, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_466)
{
    // 4324 0061;	
    // (䌤) CJK UNIFIED IDEOGRAPH-4324	[FB80 C324 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4324, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC324, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_467)
{
    // 4324 0041;	
    // (䌤) CJK UNIFIED IDEOGRAPH-4324	[FB80 C324 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4324, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC324, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_468)
{
    // 4324 0062;	
    // (䌤) CJK UNIFIED IDEOGRAPH-4324	[FB80 C324 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4324, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC324, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_469)
{
    // 4325 0021;	
    // (䌥) CJK UNIFIED IDEOGRAPH-4325	[FB80 C325 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4325, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC325, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_470)
{
    // 4325 003F;	
    // (䌥) CJK UNIFIED IDEOGRAPH-4325	[FB80 C325 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4325, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC325, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_471)
{
    // 4325 0061;	
    // (䌥) CJK UNIFIED IDEOGRAPH-4325	[FB80 C325 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4325, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC325, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_472)
{
    // 4325 0041;	
    // (䌥) CJK UNIFIED IDEOGRAPH-4325	[FB80 C325 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4325, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC325, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_473)
{
    // 4325 0062;	
    // (䌥) CJK UNIFIED IDEOGRAPH-4325	[FB80 C325 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4325, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC325, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_474)
{
    // 4326 0021;	
    // (䌦) CJK UNIFIED IDEOGRAPH-4326	[FB80 C326 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4326, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC326, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_475)
{
    // 4326 003F;	
    // (䌦) CJK UNIFIED IDEOGRAPH-4326	[FB80 C326 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4326, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC326, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_476)
{
    // 4326 0061;	
    // (䌦) CJK UNIFIED IDEOGRAPH-4326	[FB80 C326 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4326, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC326, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_477)
{
    // 4326 0041;	
    // (䌦) CJK UNIFIED IDEOGRAPH-4326	[FB80 C326 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4326, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC326, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_478)
{
    // 4326 0062;	
    // (䌦) CJK UNIFIED IDEOGRAPH-4326	[FB80 C326 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4326, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC326, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_479)
{
    // 4327 0021;	
    // (䌧) CJK UNIFIED IDEOGRAPH-4327	[FB80 C327 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4327, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC327, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_480)
{
    // 4327 003F;	
    // (䌧) CJK UNIFIED IDEOGRAPH-4327	[FB80 C327 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4327, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC327, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_481)
{
    // 4327 0061;	
    // (䌧) CJK UNIFIED IDEOGRAPH-4327	[FB80 C327 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4327, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC327, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_482)
{
    // 4327 0041;	
    // (䌧) CJK UNIFIED IDEOGRAPH-4327	[FB80 C327 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4327, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC327, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_483)
{
    // 4327 0062;	
    // (䌧) CJK UNIFIED IDEOGRAPH-4327	[FB80 C327 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4327, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC327, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_484)
{
    // 4328 0021;	
    // (䌨) CJK UNIFIED IDEOGRAPH-4328	[FB80 C328 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4328, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC328, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_485)
{
    // 4328 003F;	
    // (䌨) CJK UNIFIED IDEOGRAPH-4328	[FB80 C328 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4328, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC328, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_486)
{
    // 4328 0061;	
    // (䌨) CJK UNIFIED IDEOGRAPH-4328	[FB80 C328 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4328, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC328, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_487)
{
    // 4328 0041;	
    // (䌨) CJK UNIFIED IDEOGRAPH-4328	[FB80 C328 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4328, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC328, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_488)
{
    // 4328 0062;	
    // (䌨) CJK UNIFIED IDEOGRAPH-4328	[FB80 C328 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4328, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC328, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_489)
{
    // 4329 0021;	
    // (䌩) CJK UNIFIED IDEOGRAPH-4329	[FB80 C329 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4329, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC329, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_490)
{
    // 4329 003F;	
    // (䌩) CJK UNIFIED IDEOGRAPH-4329	[FB80 C329 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4329, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC329, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_491)
{
    // 4329 0061;	
    // (䌩) CJK UNIFIED IDEOGRAPH-4329	[FB80 C329 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4329, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC329, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_492)
{
    // 4329 0041;	
    // (䌩) CJK UNIFIED IDEOGRAPH-4329	[FB80 C329 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4329, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC329, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_493)
{
    // 4329 0062;	
    // (䌩) CJK UNIFIED IDEOGRAPH-4329	[FB80 C329 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4329, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC329, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_494)
{
    // 432A 0021;	
    // (䌪) CJK UNIFIED IDEOGRAPH-432A	[FB80 C32A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC32A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_495)
{
    // 432A 003F;	
    // (䌪) CJK UNIFIED IDEOGRAPH-432A	[FB80 C32A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC32A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_496)
{
    // 432A 0061;	
    // (䌪) CJK UNIFIED IDEOGRAPH-432A	[FB80 C32A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC32A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_497)
{
    // 432A 0041;	
    // (䌪) CJK UNIFIED IDEOGRAPH-432A	[FB80 C32A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x432A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC32A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_498)
{
    // 432A 0062;	
    // (䌪) CJK UNIFIED IDEOGRAPH-432A	[FB80 C32A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC32A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_365_499)
{
    // 432B 0021;	
    // (䌫) CJK UNIFIED IDEOGRAPH-432B	[FB80 C32B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC32B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

