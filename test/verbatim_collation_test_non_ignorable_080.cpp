// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_080_000)
{
    // 3034 003F;	
    // (〴) VERTICAL KANA REPEAT WITH VOICED SOUND MARK UPPER HALF	[1C70 0267 | 0020 0037 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x3034, 0x003F };
    uint32_t const ces[11] = { 0x1C70, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_001)
{
    // 3033 0061;	
    // (〳) VERTICAL KANA REPEAT MARK UPPER HALF	[1C70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3033, 0x0061 };
    uint32_t const ces[9] = { 0x1C70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_002)
{
    // 3033 0041;	
    // (〳) VERTICAL KANA REPEAT MARK UPPER HALF	[1C70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3033, 0x0041 };
    uint32_t const ces[9] = { 0x1C70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_003)
{
    // 3034 0061;	
    // (〴) VERTICAL KANA REPEAT WITH VOICED SOUND MARK UPPER HALF	[1C70 1CAD | 0020 0037 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x3034, 0x0061 };
    uint32_t const ces[11] = { 0x1C70, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_004)
{
    // 3034 0041;	
    // (〴) VERTICAL KANA REPEAT WITH VOICED SOUND MARK UPPER HALF	[1C70 1CAD | 0020 0037 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x3034, 0x0041 };
    uint32_t const ces[11] = { 0x1C70, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_005)
{
    // 3033 0062;	
    // (〳) VERTICAL KANA REPEAT MARK UPPER HALF	[1C70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3033, 0x0062 };
    uint32_t const ces[9] = { 0x1C70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_006)
{
    // 3034 0062;	
    // (〴) VERTICAL KANA REPEAT WITH VOICED SOUND MARK UPPER HALF	[1C70 1CC6 | 0020 0037 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x3034, 0x0062 };
    uint32_t const ces[11] = { 0x1C70, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_007)
{
    // 3035 0021;	
    // (〵) VERTICAL KANA REPEAT MARK LOWER HALF	[1C71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3035, 0x0021 };
    uint32_t const ces[9] = { 0x1C71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_008)
{
    // 3035 003F;	
    // (〵) VERTICAL KANA REPEAT MARK LOWER HALF	[1C71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3035, 0x003F };
    uint32_t const ces[9] = { 0x1C71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_009)
{
    // 3035 0061;	
    // (〵) VERTICAL KANA REPEAT MARK LOWER HALF	[1C71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3035, 0x0061 };
    uint32_t const ces[9] = { 0x1C71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_010)
{
    // 3035 0041;	
    // (〵) VERTICAL KANA REPEAT MARK LOWER HALF	[1C71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3035, 0x0041 };
    uint32_t const ces[9] = { 0x1C71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_011)
{
    // 3035 0062;	
    // (〵) VERTICAL KANA REPEAT MARK LOWER HALF	[1C71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3035, 0x0062 };
    uint32_t const ces[9] = { 0x1C71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_012)
{
    // 309D 0334 3099;	
    // (ゝ̴) HIRAGANA ITERATION MARK, COMBINING TILDE OVERLAY	[1C72 | 0020 004A 0037 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x309D, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x1C72, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_013)
{
    // 309D 3099 0334;	
    // (ゞ) HIRAGANA ITERATION MARK, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[1C72 | 0020 004A 0037 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x309D, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x1C72, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_014)
{
    // 309E 0334;	
    // (ゞ) HIRAGANA VOICED ITERATION MARK	[1C72 | 0020 004A 0037 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x309E, 0x0334 };
    uint32_t const ces[10] = { 0x1C72, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_015)
{
    // 309D 0021;	
    // (ゝ) HIRAGANA ITERATION MARK	[1C72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x309D, 0x0021 };
    uint32_t const ces[9] = { 0x1C72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_016)
{
    // 309E 0021;	
    // (ゞ) HIRAGANA VOICED ITERATION MARK	[1C72 0261 | 0020 0037 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x309E, 0x0021 };
    uint32_t const ces[11] = { 0x1C72, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_017)
{
    // 309D 003F;	
    // (ゝ) HIRAGANA ITERATION MARK	[1C72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x309D, 0x003F };
    uint32_t const ces[9] = { 0x1C72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_018)
{
    // 309E 003F;	
    // (ゞ) HIRAGANA VOICED ITERATION MARK	[1C72 0267 | 0020 0037 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x309E, 0x003F };
    uint32_t const ces[11] = { 0x1C72, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_019)
{
    // 309D 0061;	
    // (ゝ) HIRAGANA ITERATION MARK	[1C72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x309D, 0x0061 };
    uint32_t const ces[9] = { 0x1C72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_020)
{
    // 309D 0041;	
    // (ゝ) HIRAGANA ITERATION MARK	[1C72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x309D, 0x0041 };
    uint32_t const ces[9] = { 0x1C72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_021)
{
    // 309E 0061;	
    // (ゞ) HIRAGANA VOICED ITERATION MARK	[1C72 1CAD | 0020 0037 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x309E, 0x0061 };
    uint32_t const ces[11] = { 0x1C72, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_022)
{
    // 309E 0041;	
    // (ゞ) HIRAGANA VOICED ITERATION MARK	[1C72 1CAD | 0020 0037 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x309E, 0x0041 };
    uint32_t const ces[11] = { 0x1C72, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_023)
{
    // 309D 0062;	
    // (ゝ) HIRAGANA ITERATION MARK	[1C72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x309D, 0x0062 };
    uint32_t const ces[9] = { 0x1C72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_024)
{
    // 309E 0062;	
    // (ゞ) HIRAGANA VOICED ITERATION MARK	[1C72 1CC6 | 0020 0037 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x309E, 0x0062 };
    uint32_t const ces[11] = { 0x1C72, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_025)
{
    // 30FC 0021;	
    // (ー) KATAKANA-HIRAGANA PROLONGED SOUND MARK	[1C73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x30FC, 0x0021 };
    uint32_t const ces[9] = { 0x1C73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_026)
{
    // FF70 0021;	
    // (ｰ) HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK	[1C73 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF70, 0x0021 };
    uint32_t const ces[9] = { 0x1C73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_027)
{
    // 30FC 003F;	
    // (ー) KATAKANA-HIRAGANA PROLONGED SOUND MARK	[1C73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x30FC, 0x003F };
    uint32_t const ces[9] = { 0x1C73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_028)
{
    // FF70 003F;	
    // (ｰ) HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK	[1C73 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF70, 0x003F };
    uint32_t const ces[9] = { 0x1C73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_029)
{
    // 30FC 0061;	
    // (ー) KATAKANA-HIRAGANA PROLONGED SOUND MARK	[1C73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x30FC, 0x0061 };
    uint32_t const ces[9] = { 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_030)
{
    // 30FC 0041;	
    // (ー) KATAKANA-HIRAGANA PROLONGED SOUND MARK	[1C73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x30FC, 0x0041 };
    uint32_t const ces[9] = { 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_031)
{
    // FF70 0061;	
    // (ｰ) HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK	[1C73 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF70, 0x0061 };
    uint32_t const ces[9] = { 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_032)
{
    // FF70 0041;	
    // (ｰ) HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK	[1C73 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF70, 0x0041 };
    uint32_t const ces[9] = { 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_033)
{
    // 30FC 0062;	
    // (ー) KATAKANA-HIRAGANA PROLONGED SOUND MARK	[1C73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x30FC, 0x0062 };
    uint32_t const ces[9] = { 0x1C73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_034)
{
    // FF70 0062;	
    // (ｰ) HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK	[1C73 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF70, 0x0062 };
    uint32_t const ces[9] = { 0x1C73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_035)
{
    // 30FD 0334 3099;	
    // (ヽ̴) KATAKANA ITERATION MARK, COMBINING TILDE OVERLAY	[1C74 | 0020 004A 0037 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x30FD, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x1C74, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_036)
{
    // 30FD 3099 0334;	
    // (ヾ) KATAKANA ITERATION MARK, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[1C74 | 0020 004A 0037 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x30FD, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x1C74, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_037)
{
    // 30FE 0334;	
    // (ヾ) KATAKANA VOICED ITERATION MARK	[1C74 | 0020 004A 0037 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x30FE, 0x0334 };
    uint32_t const ces[10] = { 0x1C74, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_038)
{
    // 30FD 0021;	
    // (ヽ) KATAKANA ITERATION MARK	[1C74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x30FD, 0x0021 };
    uint32_t const ces[9] = { 0x1C74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_039)
{
    // 30FE 0021;	
    // (ヾ) KATAKANA VOICED ITERATION MARK	[1C74 0261 | 0020 0037 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x30FE, 0x0021 };
    uint32_t const ces[11] = { 0x1C74, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_040)
{
    // 30FD 003F;	
    // (ヽ) KATAKANA ITERATION MARK	[1C74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x30FD, 0x003F };
    uint32_t const ces[9] = { 0x1C74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_041)
{
    // 30FE 003F;	
    // (ヾ) KATAKANA VOICED ITERATION MARK	[1C74 0267 | 0020 0037 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x30FE, 0x003F };
    uint32_t const ces[11] = { 0x1C74, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_042)
{
    // 30FD 0061;	
    // (ヽ) KATAKANA ITERATION MARK	[1C74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x30FD, 0x0061 };
    uint32_t const ces[9] = { 0x1C74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_043)
{
    // 30FD 0041;	
    // (ヽ) KATAKANA ITERATION MARK	[1C74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x30FD, 0x0041 };
    uint32_t const ces[9] = { 0x1C74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_044)
{
    // 30FE 0061;	
    // (ヾ) KATAKANA VOICED ITERATION MARK	[1C74 1CAD | 0020 0037 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x30FE, 0x0061 };
    uint32_t const ces[11] = { 0x1C74, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_045)
{
    // 30FE 0041;	
    // (ヾ) KATAKANA VOICED ITERATION MARK	[1C74 1CAD | 0020 0037 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x30FE, 0x0041 };
    uint32_t const ces[11] = { 0x1C74, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_046)
{
    // 30FD 0062;	
    // (ヽ) KATAKANA ITERATION MARK	[1C74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x30FD, 0x0062 };
    uint32_t const ces[9] = { 0x1C74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_047)
{
    // 30FE 0062;	
    // (ヾ) KATAKANA VOICED ITERATION MARK	[1C74 1CC6 | 0020 0037 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x30FE, 0x0062 };
    uint32_t const ces[11] = { 0x1C74, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_048)
{
    // 00A4 0021;	
    // (¤) CURRENCY SIGN	[1C75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A4, 0x0021 };
    uint32_t const ces[9] = { 0x1C75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_049)
{
    // 00A4 003F;	
    // (¤) CURRENCY SIGN	[1C75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A4, 0x003F };
    uint32_t const ces[9] = { 0x1C75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_050)
{
    // 00A4 0061;	
    // (¤) CURRENCY SIGN	[1C75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A4, 0x0061 };
    uint32_t const ces[9] = { 0x1C75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_051)
{
    // 00A4 0041;	
    // (¤) CURRENCY SIGN	[1C75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x00A4, 0x0041 };
    uint32_t const ces[9] = { 0x1C75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_052)
{
    // 00A4 0062;	
    // (¤) CURRENCY SIGN	[1C75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A4, 0x0062 };
    uint32_t const ces[9] = { 0x1C75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_053)
{
    // 00A2 0021;	
    // (¢) CENT SIGN	[1C76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A2, 0x0021 };
    uint32_t const ces[9] = { 0x1C76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_054)
{
    // FFE0 0021;	
    // (￠) FULLWIDTH CENT SIGN	[1C76 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE0, 0x0021 };
    uint32_t const ces[9] = { 0x1C76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_055)
{
    // 00A2 003F;	
    // (¢) CENT SIGN	[1C76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A2, 0x003F };
    uint32_t const ces[9] = { 0x1C76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_056)
{
    // FFE0 003F;	
    // (￠) FULLWIDTH CENT SIGN	[1C76 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE0, 0x003F };
    uint32_t const ces[9] = { 0x1C76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_057)
{
    // 00A2 0061;	
    // (¢) CENT SIGN	[1C76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A2, 0x0061 };
    uint32_t const ces[9] = { 0x1C76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_058)
{
    // 00A2 0041;	
    // (¢) CENT SIGN	[1C76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x00A2, 0x0041 };
    uint32_t const ces[9] = { 0x1C76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_059)
{
    // FFE0 0061;	
    // (￠) FULLWIDTH CENT SIGN	[1C76 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE0, 0x0061 };
    uint32_t const ces[9] = { 0x1C76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_060)
{
    // FFE0 0041;	
    // (￠) FULLWIDTH CENT SIGN	[1C76 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFFE0, 0x0041 };
    uint32_t const ces[9] = { 0x1C76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_061)
{
    // 00A2 0062;	
    // (¢) CENT SIGN	[1C76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A2, 0x0062 };
    uint32_t const ces[9] = { 0x1C76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_062)
{
    // FFE0 0062;	
    // (￠) FULLWIDTH CENT SIGN	[1C76 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE0, 0x0062 };
    uint32_t const ces[9] = { 0x1C76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_063)
{
    // 0024 0021;	
    // ('$') DOLLAR SIGN	[1C77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0024, 0x0021 };
    uint32_t const ces[9] = { 0x1C77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_064)
{
    // FF04 0021;	
    // (＄) FULLWIDTH DOLLAR SIGN	[1C77 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF04, 0x0021 };
    uint32_t const ces[9] = { 0x1C77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_065)
{
    // FE69 0021;	
    // (﹩) SMALL DOLLAR SIGN	[1C77 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE69, 0x0021 };
    uint32_t const ces[9] = { 0x1C77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_066)
{
    // 0024 003F;	
    // ('$') DOLLAR SIGN	[1C77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0024, 0x003F };
    uint32_t const ces[9] = { 0x1C77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_067)
{
    // FF04 003F;	
    // (＄) FULLWIDTH DOLLAR SIGN	[1C77 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF04, 0x003F };
    uint32_t const ces[9] = { 0x1C77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_068)
{
    // FE69 003F;	
    // (﹩) SMALL DOLLAR SIGN	[1C77 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE69, 0x003F };
    uint32_t const ces[9] = { 0x1C77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_069)
{
    // 0024 0061;	
    // ('$') DOLLAR SIGN	[1C77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0024, 0x0061 };
    uint32_t const ces[9] = { 0x1C77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_070)
{
    // 0024 0041;	
    // ('$') DOLLAR SIGN	[1C77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0024, 0x0041 };
    uint32_t const ces[9] = { 0x1C77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_071)
{
    // FF04 0061;	
    // (＄) FULLWIDTH DOLLAR SIGN	[1C77 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF04, 0x0061 };
    uint32_t const ces[9] = { 0x1C77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_072)
{
    // FF04 0041;	
    // (＄) FULLWIDTH DOLLAR SIGN	[1C77 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF04, 0x0041 };
    uint32_t const ces[9] = { 0x1C77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_073)
{
    // FE69 0061;	
    // (﹩) SMALL DOLLAR SIGN	[1C77 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE69, 0x0061 };
    uint32_t const ces[9] = { 0x1C77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_074)
{
    // FE69 0041;	
    // (﹩) SMALL DOLLAR SIGN	[1C77 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE69, 0x0041 };
    uint32_t const ces[9] = { 0x1C77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_075)
{
    // 0024 0062;	
    // ('$') DOLLAR SIGN	[1C77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0024, 0x0062 };
    uint32_t const ces[9] = { 0x1C77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_076)
{
    // FF04 0062;	
    // (＄) FULLWIDTH DOLLAR SIGN	[1C77 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF04, 0x0062 };
    uint32_t const ces[9] = { 0x1C77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_077)
{
    // FE69 0062;	
    // (﹩) SMALL DOLLAR SIGN	[1C77 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE69, 0x0062 };
    uint32_t const ces[9] = { 0x1C77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_078)
{
    // 00A3 0021;	
    // (£) POUND SIGN	[1C78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A3, 0x0021 };
    uint32_t const ces[9] = { 0x1C78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_079)
{
    // FFE1 0021;	
    // (￡) FULLWIDTH POUND SIGN	[1C78 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE1, 0x0021 };
    uint32_t const ces[9] = { 0x1C78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_080)
{
    // 00A3 003F;	
    // (£) POUND SIGN	[1C78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A3, 0x003F };
    uint32_t const ces[9] = { 0x1C78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_081)
{
    // FFE1 003F;	
    // (￡) FULLWIDTH POUND SIGN	[1C78 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE1, 0x003F };
    uint32_t const ces[9] = { 0x1C78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_082)
{
    // 00A3 0061;	
    // (£) POUND SIGN	[1C78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A3, 0x0061 };
    uint32_t const ces[9] = { 0x1C78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_083)
{
    // 00A3 0041;	
    // (£) POUND SIGN	[1C78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x00A3, 0x0041 };
    uint32_t const ces[9] = { 0x1C78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_084)
{
    // FFE1 0061;	
    // (￡) FULLWIDTH POUND SIGN	[1C78 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE1, 0x0061 };
    uint32_t const ces[9] = { 0x1C78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_085)
{
    // FFE1 0041;	
    // (￡) FULLWIDTH POUND SIGN	[1C78 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFFE1, 0x0041 };
    uint32_t const ces[9] = { 0x1C78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_086)
{
    // 00A3 0062;	
    // (£) POUND SIGN	[1C78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A3, 0x0062 };
    uint32_t const ces[9] = { 0x1C78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_087)
{
    // FFE1 0062;	
    // (￡) FULLWIDTH POUND SIGN	[1C78 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE1, 0x0062 };
    uint32_t const ces[9] = { 0x1C78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_088)
{
    // 00A5 0021;	
    // (¥) YEN SIGN	[1C79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A5, 0x0021 };
    uint32_t const ces[9] = { 0x1C79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_089)
{
    // FFE5 0021;	
    // (￥) FULLWIDTH YEN SIGN	[1C79 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE5, 0x0021 };
    uint32_t const ces[9] = { 0x1C79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_090)
{
    // 00A5 003F;	
    // (¥) YEN SIGN	[1C79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A5, 0x003F };
    uint32_t const ces[9] = { 0x1C79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_091)
{
    // FFE5 003F;	
    // (￥) FULLWIDTH YEN SIGN	[1C79 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE5, 0x003F };
    uint32_t const ces[9] = { 0x1C79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_092)
{
    // 00A5 0061;	
    // (¥) YEN SIGN	[1C79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A5, 0x0061 };
    uint32_t const ces[9] = { 0x1C79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_093)
{
    // 00A5 0041;	
    // (¥) YEN SIGN	[1C79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x00A5, 0x0041 };
    uint32_t const ces[9] = { 0x1C79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_094)
{
    // FFE5 0061;	
    // (￥) FULLWIDTH YEN SIGN	[1C79 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE5, 0x0061 };
    uint32_t const ces[9] = { 0x1C79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_095)
{
    // FFE5 0041;	
    // (￥) FULLWIDTH YEN SIGN	[1C79 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFFE5, 0x0041 };
    uint32_t const ces[9] = { 0x1C79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_096)
{
    // 00A5 0062;	
    // (¥) YEN SIGN	[1C79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A5, 0x0062 };
    uint32_t const ces[9] = { 0x1C79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_097)
{
    // FFE5 0062;	
    // (￥) FULLWIDTH YEN SIGN	[1C79 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE5, 0x0062 };
    uint32_t const ces[9] = { 0x1C79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_098)
{
    // 058F 0021;	
    // (֏) ARMENIAN DRAM SIGN	[1C7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x058F, 0x0021 };
    uint32_t const ces[9] = { 0x1C7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_099)
{
    // 058F 003F;	
    // (֏) ARMENIAN DRAM SIGN	[1C7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x058F, 0x003F };
    uint32_t const ces[9] = { 0x1C7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_100)
{
    // 058F 0061;	
    // (֏) ARMENIAN DRAM SIGN	[1C7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x058F, 0x0061 };
    uint32_t const ces[9] = { 0x1C7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_101)
{
    // 058F 0041;	
    // (֏) ARMENIAN DRAM SIGN	[1C7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x058F, 0x0041 };
    uint32_t const ces[9] = { 0x1C7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_102)
{
    // 058F 0062;	
    // (֏) ARMENIAN DRAM SIGN	[1C7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x058F, 0x0062 };
    uint32_t const ces[9] = { 0x1C7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_103)
{
    // 060B 0021;	
    // (‎‎؋‎‎) AFGHANI SIGN	[1C7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x060B, 0x0021 };
    uint32_t const ces[9] = { 0x1C7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_104)
{
    // 060B 003F;	
    // (‎‎؋‎‎) AFGHANI SIGN	[1C7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x060B, 0x003F };
    uint32_t const ces[9] = { 0x1C7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_105)
{
    // 060B 0061;	
    // (‎‎؋‎‎) AFGHANI SIGN	[1C7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x060B, 0x0061 };
    uint32_t const ces[9] = { 0x1C7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_106)
{
    // 060B 0041;	
    // (‎‎؋‎‎) AFGHANI SIGN	[1C7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x060B, 0x0041 };
    uint32_t const ces[9] = { 0x1C7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_107)
{
    // 060B 0062;	
    // (‎‎؋‎‎) AFGHANI SIGN	[1C7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x060B, 0x0062 };
    uint32_t const ces[9] = { 0x1C7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_108)
{
    // 09F2 0021;	
    // (৲) BENGALI RUPEE MARK	[1C7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F2, 0x0021 };
    uint32_t const ces[9] = { 0x1C7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_109)
{
    // 09F2 003F;	
    // (৲) BENGALI RUPEE MARK	[1C7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F2, 0x003F };
    uint32_t const ces[9] = { 0x1C7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_110)
{
    // 09F2 0061;	
    // (৲) BENGALI RUPEE MARK	[1C7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F2, 0x0061 };
    uint32_t const ces[9] = { 0x1C7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_111)
{
    // 09F2 0041;	
    // (৲) BENGALI RUPEE MARK	[1C7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x09F2, 0x0041 };
    uint32_t const ces[9] = { 0x1C7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_112)
{
    // 09F2 0062;	
    // (৲) BENGALI RUPEE MARK	[1C7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F2, 0x0062 };
    uint32_t const ces[9] = { 0x1C7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_113)
{
    // 09F3 0021;	
    // (৳) BENGALI RUPEE SIGN	[1C7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F3, 0x0021 };
    uint32_t const ces[9] = { 0x1C7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_114)
{
    // 09F3 003F;	
    // (৳) BENGALI RUPEE SIGN	[1C7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F3, 0x003F };
    uint32_t const ces[9] = { 0x1C7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_115)
{
    // 09F3 0061;	
    // (৳) BENGALI RUPEE SIGN	[1C7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F3, 0x0061 };
    uint32_t const ces[9] = { 0x1C7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_116)
{
    // 09F3 0041;	
    // (৳) BENGALI RUPEE SIGN	[1C7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x09F3, 0x0041 };
    uint32_t const ces[9] = { 0x1C7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_117)
{
    // 09F3 0062;	
    // (৳) BENGALI RUPEE SIGN	[1C7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09F3, 0x0062 };
    uint32_t const ces[9] = { 0x1C7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_118)
{
    // 09FB 0021;	
    // (৻) BENGALI GANDA MARK	[1C7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09FB, 0x0021 };
    uint32_t const ces[9] = { 0x1C7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_119)
{
    // 09FB 003F;	
    // (৻) BENGALI GANDA MARK	[1C7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09FB, 0x003F };
    uint32_t const ces[9] = { 0x1C7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_120)
{
    // 09FB 0061;	
    // (৻) BENGALI GANDA MARK	[1C7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09FB, 0x0061 };
    uint32_t const ces[9] = { 0x1C7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_121)
{
    // 09FB 0041;	
    // (৻) BENGALI GANDA MARK	[1C7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x09FB, 0x0041 };
    uint32_t const ces[9] = { 0x1C7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_122)
{
    // 09FB 0062;	
    // (৻) BENGALI GANDA MARK	[1C7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09FB, 0x0062 };
    uint32_t const ces[9] = { 0x1C7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_123)
{
    // 0AF1 0021;	
    // (૱) GUJARATI RUPEE SIGN	[1C7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AF1, 0x0021 };
    uint32_t const ces[9] = { 0x1C7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_124)
{
    // 0AF1 003F;	
    // (૱) GUJARATI RUPEE SIGN	[1C7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AF1, 0x003F };
    uint32_t const ces[9] = { 0x1C7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_125)
{
    // 0AF1 0061;	
    // (૱) GUJARATI RUPEE SIGN	[1C7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AF1, 0x0061 };
    uint32_t const ces[9] = { 0x1C7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_126)
{
    // 0AF1 0041;	
    // (૱) GUJARATI RUPEE SIGN	[1C7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0AF1, 0x0041 };
    uint32_t const ces[9] = { 0x1C7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_127)
{
    // 0AF1 0062;	
    // (૱) GUJARATI RUPEE SIGN	[1C7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AF1, 0x0062 };
    uint32_t const ces[9] = { 0x1C7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_128)
{
    // A838 0021;	
    // (꠸) NORTH INDIC RUPEE MARK	[1C80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA838, 0x0021 };
    uint32_t const ces[9] = { 0x1C80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_129)
{
    // A838 003F;	
    // (꠸) NORTH INDIC RUPEE MARK	[1C80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA838, 0x003F };
    uint32_t const ces[9] = { 0x1C80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_130)
{
    // A838 0061;	
    // (꠸) NORTH INDIC RUPEE MARK	[1C80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA838, 0x0061 };
    uint32_t const ces[9] = { 0x1C80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_131)
{
    // A838 0041;	
    // (꠸) NORTH INDIC RUPEE MARK	[1C80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA838, 0x0041 };
    uint32_t const ces[9] = { 0x1C80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_132)
{
    // A838 0062;	
    // (꠸) NORTH INDIC RUPEE MARK	[1C80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA838, 0x0062 };
    uint32_t const ces[9] = { 0x1C80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_133)
{
    // 0BF9 0021;	
    // (௹) TAMIL RUPEE SIGN	[1C81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF9, 0x0021 };
    uint32_t const ces[9] = { 0x1C81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_134)
{
    // 0BF9 003F;	
    // (௹) TAMIL RUPEE SIGN	[1C81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF9, 0x003F };
    uint32_t const ces[9] = { 0x1C81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_135)
{
    // 0BF9 0061;	
    // (௹) TAMIL RUPEE SIGN	[1C81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF9, 0x0061 };
    uint32_t const ces[9] = { 0x1C81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_136)
{
    // 0BF9 0041;	
    // (௹) TAMIL RUPEE SIGN	[1C81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BF9, 0x0041 };
    uint32_t const ces[9] = { 0x1C81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_137)
{
    // 0BF9 0062;	
    // (௹) TAMIL RUPEE SIGN	[1C81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BF9, 0x0062 };
    uint32_t const ces[9] = { 0x1C81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_138)
{
    // 0E3F 0021;	
    // (฿) THAI CURRENCY SYMBOL BAHT	[1C82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E3F, 0x0021 };
    uint32_t const ces[9] = { 0x1C82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_139)
{
    // 0E3F 003F;	
    // (฿) THAI CURRENCY SYMBOL BAHT	[1C82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E3F, 0x003F };
    uint32_t const ces[9] = { 0x1C82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_140)
{
    // 0E3F 0061;	
    // (฿) THAI CURRENCY SYMBOL BAHT	[1C82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E3F, 0x0061 };
    uint32_t const ces[9] = { 0x1C82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_141)
{
    // 0E3F 0041;	
    // (฿) THAI CURRENCY SYMBOL BAHT	[1C82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E3F, 0x0041 };
    uint32_t const ces[9] = { 0x1C82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_142)
{
    // 0E3F 0062;	
    // (฿) THAI CURRENCY SYMBOL BAHT	[1C82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E3F, 0x0062 };
    uint32_t const ces[9] = { 0x1C82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_143)
{
    // 17DB 0021;	
    // (៛) KHMER CURRENCY SYMBOL RIEL	[1C83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17DB, 0x0021 };
    uint32_t const ces[9] = { 0x1C83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_144)
{
    // 17DB 003F;	
    // (៛) KHMER CURRENCY SYMBOL RIEL	[1C83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17DB, 0x003F };
    uint32_t const ces[9] = { 0x1C83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_145)
{
    // 17DB 0061;	
    // (៛) KHMER CURRENCY SYMBOL RIEL	[1C83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17DB, 0x0061 };
    uint32_t const ces[9] = { 0x1C83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_146)
{
    // 17DB 0041;	
    // (៛) KHMER CURRENCY SYMBOL RIEL	[1C83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17DB, 0x0041 };
    uint32_t const ces[9] = { 0x1C83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_147)
{
    // 17DB 0062;	
    // (៛) KHMER CURRENCY SYMBOL RIEL	[1C83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17DB, 0x0062 };
    uint32_t const ces[9] = { 0x1C83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_148)
{
    // 20A0 0021;	
    // (₠) EURO-CURRENCY SIGN	[1C84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A0, 0x0021 };
    uint32_t const ces[9] = { 0x1C84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_149)
{
    // 20A0 003F;	
    // (₠) EURO-CURRENCY SIGN	[1C84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A0, 0x003F };
    uint32_t const ces[9] = { 0x1C84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_150)
{
    // 20A0 0061;	
    // (₠) EURO-CURRENCY SIGN	[1C84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A0, 0x0061 };
    uint32_t const ces[9] = { 0x1C84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_151)
{
    // 20A0 0041;	
    // (₠) EURO-CURRENCY SIGN	[1C84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20A0, 0x0041 };
    uint32_t const ces[9] = { 0x1C84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_152)
{
    // 20A0 0062;	
    // (₠) EURO-CURRENCY SIGN	[1C84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A0, 0x0062 };
    uint32_t const ces[9] = { 0x1C84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_153)
{
    // 20A1 0021;	
    // (₡) COLON SIGN	[1C85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A1, 0x0021 };
    uint32_t const ces[9] = { 0x1C85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_154)
{
    // 20A1 003F;	
    // (₡) COLON SIGN	[1C85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A1, 0x003F };
    uint32_t const ces[9] = { 0x1C85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_155)
{
    // 20A1 0061;	
    // (₡) COLON SIGN	[1C85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A1, 0x0061 };
    uint32_t const ces[9] = { 0x1C85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_156)
{
    // 20A1 0041;	
    // (₡) COLON SIGN	[1C85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20A1, 0x0041 };
    uint32_t const ces[9] = { 0x1C85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_157)
{
    // 20A1 0062;	
    // (₡) COLON SIGN	[1C85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A1, 0x0062 };
    uint32_t const ces[9] = { 0x1C85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_158)
{
    // 20A2 0021;	
    // (₢) CRUZEIRO SIGN	[1C86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A2, 0x0021 };
    uint32_t const ces[9] = { 0x1C86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_159)
{
    // 20A2 003F;	
    // (₢) CRUZEIRO SIGN	[1C86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A2, 0x003F };
    uint32_t const ces[9] = { 0x1C86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_160)
{
    // 20A2 0061;	
    // (₢) CRUZEIRO SIGN	[1C86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A2, 0x0061 };
    uint32_t const ces[9] = { 0x1C86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_161)
{
    // 20A2 0041;	
    // (₢) CRUZEIRO SIGN	[1C86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20A2, 0x0041 };
    uint32_t const ces[9] = { 0x1C86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_162)
{
    // 20A2 0062;	
    // (₢) CRUZEIRO SIGN	[1C86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A2, 0x0062 };
    uint32_t const ces[9] = { 0x1C86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_163)
{
    // 20A3 0021;	
    // (₣) FRENCH FRANC SIGN	[1C87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A3, 0x0021 };
    uint32_t const ces[9] = { 0x1C87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_164)
{
    // 20A3 003F;	
    // (₣) FRENCH FRANC SIGN	[1C87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A3, 0x003F };
    uint32_t const ces[9] = { 0x1C87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_165)
{
    // 20A3 0061;	
    // (₣) FRENCH FRANC SIGN	[1C87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A3, 0x0061 };
    uint32_t const ces[9] = { 0x1C87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_166)
{
    // 20A3 0041;	
    // (₣) FRENCH FRANC SIGN	[1C87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20A3, 0x0041 };
    uint32_t const ces[9] = { 0x1C87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_167)
{
    // 20A3 0062;	
    // (₣) FRENCH FRANC SIGN	[1C87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A3, 0x0062 };
    uint32_t const ces[9] = { 0x1C87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_168)
{
    // 20A4 0021;	
    // (₤) LIRA SIGN	[1C88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A4, 0x0021 };
    uint32_t const ces[9] = { 0x1C88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_169)
{
    // 20A4 003F;	
    // (₤) LIRA SIGN	[1C88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A4, 0x003F };
    uint32_t const ces[9] = { 0x1C88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_170)
{
    // 20A4 0061;	
    // (₤) LIRA SIGN	[1C88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A4, 0x0061 };
    uint32_t const ces[9] = { 0x1C88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_171)
{
    // 20A4 0041;	
    // (₤) LIRA SIGN	[1C88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20A4, 0x0041 };
    uint32_t const ces[9] = { 0x1C88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_172)
{
    // 20A4 0062;	
    // (₤) LIRA SIGN	[1C88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A4, 0x0062 };
    uint32_t const ces[9] = { 0x1C88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_173)
{
    // 20A5 0021;	
    // (₥) MILL SIGN	[1C89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A5, 0x0021 };
    uint32_t const ces[9] = { 0x1C89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_174)
{
    // 20A5 003F;	
    // (₥) MILL SIGN	[1C89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A5, 0x003F };
    uint32_t const ces[9] = { 0x1C89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_175)
{
    // 20A5 0061;	
    // (₥) MILL SIGN	[1C89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A5, 0x0061 };
    uint32_t const ces[9] = { 0x1C89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_176)
{
    // 20A5 0041;	
    // (₥) MILL SIGN	[1C89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20A5, 0x0041 };
    uint32_t const ces[9] = { 0x1C89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_177)
{
    // 20A5 0062;	
    // (₥) MILL SIGN	[1C89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A5, 0x0062 };
    uint32_t const ces[9] = { 0x1C89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_178)
{
    // 20A6 0021;	
    // (₦) NAIRA SIGN	[1C8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A6, 0x0021 };
    uint32_t const ces[9] = { 0x1C8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_179)
{
    // 20A6 003F;	
    // (₦) NAIRA SIGN	[1C8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A6, 0x003F };
    uint32_t const ces[9] = { 0x1C8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_180)
{
    // 20A6 0061;	
    // (₦) NAIRA SIGN	[1C8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A6, 0x0061 };
    uint32_t const ces[9] = { 0x1C8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_181)
{
    // 20A6 0041;	
    // (₦) NAIRA SIGN	[1C8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20A6, 0x0041 };
    uint32_t const ces[9] = { 0x1C8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_182)
{
    // 20A6 0062;	
    // (₦) NAIRA SIGN	[1C8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A6, 0x0062 };
    uint32_t const ces[9] = { 0x1C8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_183)
{
    // 20A7 0021;	
    // (₧) PESETA SIGN	[1C8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A7, 0x0021 };
    uint32_t const ces[9] = { 0x1C8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_184)
{
    // 20A7 003F;	
    // (₧) PESETA SIGN	[1C8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A7, 0x003F };
    uint32_t const ces[9] = { 0x1C8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_185)
{
    // 20A7 0061;	
    // (₧) PESETA SIGN	[1C8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A7, 0x0061 };
    uint32_t const ces[9] = { 0x1C8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_186)
{
    // 20A7 0041;	
    // (₧) PESETA SIGN	[1C8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20A7, 0x0041 };
    uint32_t const ces[9] = { 0x1C8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_187)
{
    // 20A7 0062;	
    // (₧) PESETA SIGN	[1C8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A7, 0x0062 };
    uint32_t const ces[9] = { 0x1C8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_188)
{
    // 20A9 0021;	
    // (₩) WON SIGN	[1C8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A9, 0x0021 };
    uint32_t const ces[9] = { 0x1C8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_189)
{
    // FFE6 0021;	
    // (￦) FULLWIDTH WON SIGN	[1C8C 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE6, 0x0021 };
    uint32_t const ces[9] = { 0x1C8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_190)
{
    // 20A9 003F;	
    // (₩) WON SIGN	[1C8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A9, 0x003F };
    uint32_t const ces[9] = { 0x1C8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_191)
{
    // FFE6 003F;	
    // (￦) FULLWIDTH WON SIGN	[1C8C 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE6, 0x003F };
    uint32_t const ces[9] = { 0x1C8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_192)
{
    // 20A9 0061;	
    // (₩) WON SIGN	[1C8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A9, 0x0061 };
    uint32_t const ces[9] = { 0x1C8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_193)
{
    // 20A9 0041;	
    // (₩) WON SIGN	[1C8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20A9, 0x0041 };
    uint32_t const ces[9] = { 0x1C8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_194)
{
    // FFE6 0061;	
    // (￦) FULLWIDTH WON SIGN	[1C8C 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE6, 0x0061 };
    uint32_t const ces[9] = { 0x1C8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_195)
{
    // FFE6 0041;	
    // (￦) FULLWIDTH WON SIGN	[1C8C 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFFE6, 0x0041 };
    uint32_t const ces[9] = { 0x1C8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_196)
{
    // 20A9 0062;	
    // (₩) WON SIGN	[1C8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20A9, 0x0062 };
    uint32_t const ces[9] = { 0x1C8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_197)
{
    // FFE6 0062;	
    // (￦) FULLWIDTH WON SIGN	[1C8C 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE6, 0x0062 };
    uint32_t const ces[9] = { 0x1C8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_198)
{
    // 20AA 0021;	
    // (₪) NEW SHEQEL SIGN	[1C8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AA, 0x0021 };
    uint32_t const ces[9] = { 0x1C8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_199)
{
    // 20AA 003F;	
    // (₪) NEW SHEQEL SIGN	[1C8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AA, 0x003F };
    uint32_t const ces[9] = { 0x1C8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_200)
{
    // 20AA 0061;	
    // (₪) NEW SHEQEL SIGN	[1C8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AA, 0x0061 };
    uint32_t const ces[9] = { 0x1C8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_201)
{
    // 20AA 0041;	
    // (₪) NEW SHEQEL SIGN	[1C8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20AA, 0x0041 };
    uint32_t const ces[9] = { 0x1C8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_202)
{
    // 20AA 0062;	
    // (₪) NEW SHEQEL SIGN	[1C8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AA, 0x0062 };
    uint32_t const ces[9] = { 0x1C8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_203)
{
    // 20AB 0021;	
    // (₫) DONG SIGN	[1C8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AB, 0x0021 };
    uint32_t const ces[9] = { 0x1C8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_204)
{
    // 20AB 003F;	
    // (₫) DONG SIGN	[1C8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AB, 0x003F };
    uint32_t const ces[9] = { 0x1C8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_205)
{
    // 20AB 0061;	
    // (₫) DONG SIGN	[1C8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AB, 0x0061 };
    uint32_t const ces[9] = { 0x1C8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_206)
{
    // 20AB 0041;	
    // (₫) DONG SIGN	[1C8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20AB, 0x0041 };
    uint32_t const ces[9] = { 0x1C8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_207)
{
    // 20AB 0062;	
    // (₫) DONG SIGN	[1C8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AB, 0x0062 };
    uint32_t const ces[9] = { 0x1C8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_208)
{
    // 20AC 0021;	
    // (€) EURO SIGN	[1C8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AC, 0x0021 };
    uint32_t const ces[9] = { 0x1C8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_209)
{
    // 20AC 003F;	
    // (€) EURO SIGN	[1C8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AC, 0x003F };
    uint32_t const ces[9] = { 0x1C8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_210)
{
    // 20AC 0061;	
    // (€) EURO SIGN	[1C8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AC, 0x0061 };
    uint32_t const ces[9] = { 0x1C8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_211)
{
    // 20AC 0041;	
    // (€) EURO SIGN	[1C8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20AC, 0x0041 };
    uint32_t const ces[9] = { 0x1C8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_212)
{
    // 20AC 0062;	
    // (€) EURO SIGN	[1C8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AC, 0x0062 };
    uint32_t const ces[9] = { 0x1C8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_213)
{
    // 20AD 0021;	
    // (₭) KIP SIGN	[1C90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AD, 0x0021 };
    uint32_t const ces[9] = { 0x1C90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_214)
{
    // 20AD 003F;	
    // (₭) KIP SIGN	[1C90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AD, 0x003F };
    uint32_t const ces[9] = { 0x1C90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_215)
{
    // 20AD 0061;	
    // (₭) KIP SIGN	[1C90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AD, 0x0061 };
    uint32_t const ces[9] = { 0x1C90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_216)
{
    // 20AD 0041;	
    // (₭) KIP SIGN	[1C90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20AD, 0x0041 };
    uint32_t const ces[9] = { 0x1C90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_217)
{
    // 20AD 0062;	
    // (₭) KIP SIGN	[1C90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AD, 0x0062 };
    uint32_t const ces[9] = { 0x1C90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_218)
{
    // 20AE 0021;	
    // (₮) TUGRIK SIGN	[1C91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AE, 0x0021 };
    uint32_t const ces[9] = { 0x1C91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_219)
{
    // 20AE 003F;	
    // (₮) TUGRIK SIGN	[1C91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AE, 0x003F };
    uint32_t const ces[9] = { 0x1C91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_220)
{
    // 20AE 0061;	
    // (₮) TUGRIK SIGN	[1C91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AE, 0x0061 };
    uint32_t const ces[9] = { 0x1C91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_221)
{
    // 20AE 0041;	
    // (₮) TUGRIK SIGN	[1C91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20AE, 0x0041 };
    uint32_t const ces[9] = { 0x1C91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_222)
{
    // 20AE 0062;	
    // (₮) TUGRIK SIGN	[1C91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AE, 0x0062 };
    uint32_t const ces[9] = { 0x1C91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_223)
{
    // 20AF 0021;	
    // (₯) DRACHMA SIGN	[1C92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AF, 0x0021 };
    uint32_t const ces[9] = { 0x1C92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_224)
{
    // 20AF 003F;	
    // (₯) DRACHMA SIGN	[1C92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AF, 0x003F };
    uint32_t const ces[9] = { 0x1C92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_225)
{
    // 20AF 0061;	
    // (₯) DRACHMA SIGN	[1C92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AF, 0x0061 };
    uint32_t const ces[9] = { 0x1C92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_226)
{
    // 20AF 0041;	
    // (₯) DRACHMA SIGN	[1C92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20AF, 0x0041 };
    uint32_t const ces[9] = { 0x1C92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_227)
{
    // 20AF 0062;	
    // (₯) DRACHMA SIGN	[1C92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20AF, 0x0062 };
    uint32_t const ces[9] = { 0x1C92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_228)
{
    // 20B0 0021;	
    // (₰) GERMAN PENNY SIGN	[1C93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B0, 0x0021 };
    uint32_t const ces[9] = { 0x1C93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_229)
{
    // 20B0 003F;	
    // (₰) GERMAN PENNY SIGN	[1C93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B0, 0x003F };
    uint32_t const ces[9] = { 0x1C93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_230)
{
    // 20B0 0061;	
    // (₰) GERMAN PENNY SIGN	[1C93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B0, 0x0061 };
    uint32_t const ces[9] = { 0x1C93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_231)
{
    // 20B0 0041;	
    // (₰) GERMAN PENNY SIGN	[1C93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20B0, 0x0041 };
    uint32_t const ces[9] = { 0x1C93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_232)
{
    // 20B0 0062;	
    // (₰) GERMAN PENNY SIGN	[1C93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B0, 0x0062 };
    uint32_t const ces[9] = { 0x1C93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_233)
{
    // 20B1 0021;	
    // (₱) PESO SIGN	[1C94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B1, 0x0021 };
    uint32_t const ces[9] = { 0x1C94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_234)
{
    // 20B1 003F;	
    // (₱) PESO SIGN	[1C94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B1, 0x003F };
    uint32_t const ces[9] = { 0x1C94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_235)
{
    // 20B1 0061;	
    // (₱) PESO SIGN	[1C94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B1, 0x0061 };
    uint32_t const ces[9] = { 0x1C94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_236)
{
    // 20B1 0041;	
    // (₱) PESO SIGN	[1C94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20B1, 0x0041 };
    uint32_t const ces[9] = { 0x1C94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_237)
{
    // 20B1 0062;	
    // (₱) PESO SIGN	[1C94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B1, 0x0062 };
    uint32_t const ces[9] = { 0x1C94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_238)
{
    // 20B2 0021;	
    // (₲) GUARANI SIGN	[1C95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B2, 0x0021 };
    uint32_t const ces[9] = { 0x1C95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_239)
{
    // 20B2 003F;	
    // (₲) GUARANI SIGN	[1C95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B2, 0x003F };
    uint32_t const ces[9] = { 0x1C95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_240)
{
    // 20B2 0061;	
    // (₲) GUARANI SIGN	[1C95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B2, 0x0061 };
    uint32_t const ces[9] = { 0x1C95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_241)
{
    // 20B2 0041;	
    // (₲) GUARANI SIGN	[1C95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20B2, 0x0041 };
    uint32_t const ces[9] = { 0x1C95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_242)
{
    // 20B2 0062;	
    // (₲) GUARANI SIGN	[1C95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B2, 0x0062 };
    uint32_t const ces[9] = { 0x1C95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_243)
{
    // 20B3 0021;	
    // (₳) AUSTRAL SIGN	[1C96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B3, 0x0021 };
    uint32_t const ces[9] = { 0x1C96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_244)
{
    // 20B3 003F;	
    // (₳) AUSTRAL SIGN	[1C96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B3, 0x003F };
    uint32_t const ces[9] = { 0x1C96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_245)
{
    // 20B3 0061;	
    // (₳) AUSTRAL SIGN	[1C96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B3, 0x0061 };
    uint32_t const ces[9] = { 0x1C96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_246)
{
    // 20B3 0041;	
    // (₳) AUSTRAL SIGN	[1C96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20B3, 0x0041 };
    uint32_t const ces[9] = { 0x1C96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_247)
{
    // 20B3 0062;	
    // (₳) AUSTRAL SIGN	[1C96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B3, 0x0062 };
    uint32_t const ces[9] = { 0x1C96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_248)
{
    // 20B4 0021;	
    // (₴) HRYVNIA SIGN	[1C97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B4, 0x0021 };
    uint32_t const ces[9] = { 0x1C97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_249)
{
    // 20B4 003F;	
    // (₴) HRYVNIA SIGN	[1C97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B4, 0x003F };
    uint32_t const ces[9] = { 0x1C97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_250)
{
    // 20B4 0061;	
    // (₴) HRYVNIA SIGN	[1C97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B4, 0x0061 };
    uint32_t const ces[9] = { 0x1C97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_251)
{
    // 20B4 0041;	
    // (₴) HRYVNIA SIGN	[1C97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20B4, 0x0041 };
    uint32_t const ces[9] = { 0x1C97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_252)
{
    // 20B4 0062;	
    // (₴) HRYVNIA SIGN	[1C97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B4, 0x0062 };
    uint32_t const ces[9] = { 0x1C97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_253)
{
    // 20B5 0021;	
    // (₵) CEDI SIGN	[1C98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B5, 0x0021 };
    uint32_t const ces[9] = { 0x1C98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_254)
{
    // 20B5 003F;	
    // (₵) CEDI SIGN	[1C98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B5, 0x003F };
    uint32_t const ces[9] = { 0x1C98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_255)
{
    // 20B5 0061;	
    // (₵) CEDI SIGN	[1C98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B5, 0x0061 };
    uint32_t const ces[9] = { 0x1C98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_256)
{
    // 20B5 0041;	
    // (₵) CEDI SIGN	[1C98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20B5, 0x0041 };
    uint32_t const ces[9] = { 0x1C98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_257)
{
    // 20B5 0062;	
    // (₵) CEDI SIGN	[1C98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B5, 0x0062 };
    uint32_t const ces[9] = { 0x1C98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_258)
{
    // 20B6 0021;	
    // (₶) LIVRE TOURNOIS SIGN	[1C99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B6, 0x0021 };
    uint32_t const ces[9] = { 0x1C99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_259)
{
    // 20B6 003F;	
    // (₶) LIVRE TOURNOIS SIGN	[1C99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B6, 0x003F };
    uint32_t const ces[9] = { 0x1C99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_260)
{
    // 20B6 0061;	
    // (₶) LIVRE TOURNOIS SIGN	[1C99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B6, 0x0061 };
    uint32_t const ces[9] = { 0x1C99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_261)
{
    // 20B6 0041;	
    // (₶) LIVRE TOURNOIS SIGN	[1C99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20B6, 0x0041 };
    uint32_t const ces[9] = { 0x1C99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_262)
{
    // 20B6 0062;	
    // (₶) LIVRE TOURNOIS SIGN	[1C99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B6, 0x0062 };
    uint32_t const ces[9] = { 0x1C99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_263)
{
    // 20B7 0021;	
    // (₷) SPESMILO SIGN	[1C9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B7, 0x0021 };
    uint32_t const ces[9] = { 0x1C9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_264)
{
    // 20B7 003F;	
    // (₷) SPESMILO SIGN	[1C9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B7, 0x003F };
    uint32_t const ces[9] = { 0x1C9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_265)
{
    // 20B7 0061;	
    // (₷) SPESMILO SIGN	[1C9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B7, 0x0061 };
    uint32_t const ces[9] = { 0x1C9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_266)
{
    // 20B7 0041;	
    // (₷) SPESMILO SIGN	[1C9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20B7, 0x0041 };
    uint32_t const ces[9] = { 0x1C9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_267)
{
    // 20B7 0062;	
    // (₷) SPESMILO SIGN	[1C9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B7, 0x0062 };
    uint32_t const ces[9] = { 0x1C9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_268)
{
    // 20B8 0021;	
    // (₸) TENGE SIGN	[1C9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B8, 0x0021 };
    uint32_t const ces[9] = { 0x1C9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_269)
{
    // 20B8 003F;	
    // (₸) TENGE SIGN	[1C9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B8, 0x003F };
    uint32_t const ces[9] = { 0x1C9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_270)
{
    // 20B8 0061;	
    // (₸) TENGE SIGN	[1C9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B8, 0x0061 };
    uint32_t const ces[9] = { 0x1C9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_271)
{
    // 20B8 0041;	
    // (₸) TENGE SIGN	[1C9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20B8, 0x0041 };
    uint32_t const ces[9] = { 0x1C9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_272)
{
    // 20B8 0062;	
    // (₸) TENGE SIGN	[1C9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B8, 0x0062 };
    uint32_t const ces[9] = { 0x1C9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_273)
{
    // 20B9 0021;	
    // (₹) INDIAN RUPEE SIGN	[1C9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B9, 0x0021 };
    uint32_t const ces[9] = { 0x1C9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_274)
{
    // 20B9 003F;	
    // (₹) INDIAN RUPEE SIGN	[1C9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B9, 0x003F };
    uint32_t const ces[9] = { 0x1C9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_275)
{
    // 20B9 0061;	
    // (₹) INDIAN RUPEE SIGN	[1C9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B9, 0x0061 };
    uint32_t const ces[9] = { 0x1C9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_276)
{
    // 20B9 0041;	
    // (₹) INDIAN RUPEE SIGN	[1C9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20B9, 0x0041 };
    uint32_t const ces[9] = { 0x1C9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_277)
{
    // 20B9 0062;	
    // (₹) INDIAN RUPEE SIGN	[1C9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20B9, 0x0062 };
    uint32_t const ces[9] = { 0x1C9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_278)
{
    // 20BA 0021;	
    // (₺) TURKISH LIRA SIGN	[1C9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BA, 0x0021 };
    uint32_t const ces[9] = { 0x1C9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_279)
{
    // 20BA 003F;	
    // (₺) TURKISH LIRA SIGN	[1C9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BA, 0x003F };
    uint32_t const ces[9] = { 0x1C9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_280)
{
    // 20BA 0061;	
    // (₺) TURKISH LIRA SIGN	[1C9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BA, 0x0061 };
    uint32_t const ces[9] = { 0x1C9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_281)
{
    // 20BA 0041;	
    // (₺) TURKISH LIRA SIGN	[1C9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20BA, 0x0041 };
    uint32_t const ces[9] = { 0x1C9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_282)
{
    // 20BA 0062;	
    // (₺) TURKISH LIRA SIGN	[1C9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BA, 0x0062 };
    uint32_t const ces[9] = { 0x1C9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_283)
{
    // 20BB 0021;	
    // (₻) NORDIC MARK SIGN	[1C9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BB, 0x0021 };
    uint32_t const ces[9] = { 0x1C9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_284)
{
    // 20BB 003F;	
    // (₻) NORDIC MARK SIGN	[1C9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BB, 0x003F };
    uint32_t const ces[9] = { 0x1C9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_285)
{
    // 20BB 0061;	
    // (₻) NORDIC MARK SIGN	[1C9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BB, 0x0061 };
    uint32_t const ces[9] = { 0x1C9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_286)
{
    // 20BB 0041;	
    // (₻) NORDIC MARK SIGN	[1C9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20BB, 0x0041 };
    uint32_t const ces[9] = { 0x1C9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_287)
{
    // 20BB 0062;	
    // (₻) NORDIC MARK SIGN	[1C9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BB, 0x0062 };
    uint32_t const ces[9] = { 0x1C9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_288)
{
    // 20BC 0021;	
    // (₼) MANAT SIGN	[1C9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BC, 0x0021 };
    uint32_t const ces[9] = { 0x1C9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_289)
{
    // 20BC 003F;	
    // (₼) MANAT SIGN	[1C9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BC, 0x003F };
    uint32_t const ces[9] = { 0x1C9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_290)
{
    // 20BC 0061;	
    // (₼) MANAT SIGN	[1C9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BC, 0x0061 };
    uint32_t const ces[9] = { 0x1C9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_291)
{
    // 20BC 0041;	
    // (₼) MANAT SIGN	[1C9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20BC, 0x0041 };
    uint32_t const ces[9] = { 0x1C9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_292)
{
    // 20BC 0062;	
    // (₼) MANAT SIGN	[1C9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BC, 0x0062 };
    uint32_t const ces[9] = { 0x1C9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_293)
{
    // 20BD 0021;	
    // (₽) RUBLE SIGN	[1CA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BD, 0x0021 };
    uint32_t const ces[9] = { 0x1CA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_294)
{
    // 20BD 003F;	
    // (₽) RUBLE SIGN	[1CA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BD, 0x003F };
    uint32_t const ces[9] = { 0x1CA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_295)
{
    // 20BD 0061;	
    // (₽) RUBLE SIGN	[1CA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BD, 0x0061 };
    uint32_t const ces[9] = { 0x1CA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_296)
{
    // 20BD 0041;	
    // (₽) RUBLE SIGN	[1CA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20BD, 0x0041 };
    uint32_t const ces[9] = { 0x1CA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_297)
{
    // 20BD 0062;	
    // (₽) RUBLE SIGN	[1CA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BD, 0x0062 };
    uint32_t const ces[9] = { 0x1CA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_298)
{
    // 20BE 0021;	
    // (₾) LARI SIGN	[1CA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BE, 0x0021 };
    uint32_t const ces[9] = { 0x1CA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_299)
{
    // 20BE 003F;	
    // (₾) LARI SIGN	[1CA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BE, 0x003F };
    uint32_t const ces[9] = { 0x1CA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_300)
{
    // 20BE 0061;	
    // (₾) LARI SIGN	[1CA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BE, 0x0061 };
    uint32_t const ces[9] = { 0x1CA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_301)
{
    // 20BE 0041;	
    // (₾) LARI SIGN	[1CA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20BE, 0x0041 };
    uint32_t const ces[9] = { 0x1CA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_302)
{
    // 20BE 0062;	
    // (₾) LARI SIGN	[1CA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BE, 0x0062 };
    uint32_t const ces[9] = { 0x1CA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_303)
{
    // 20BF 0021;	
    // (₿) BITCOIN SIGN	[1CA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BF, 0x0021 };
    uint32_t const ces[9] = { 0x1CA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_304)
{
    // 20BF 003F;	
    // (₿) BITCOIN SIGN	[1CA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BF, 0x003F };
    uint32_t const ces[9] = { 0x1CA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_305)
{
    // 20BF 0061;	
    // (₿) BITCOIN SIGN	[1CA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BF, 0x0061 };
    uint32_t const ces[9] = { 0x1CA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_306)
{
    // 20BF 0041;	
    // (₿) BITCOIN SIGN	[1CA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20BF, 0x0041 };
    uint32_t const ces[9] = { 0x1CA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_307)
{
    // 20BF 0062;	
    // (₿) BITCOIN SIGN	[1CA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20BF, 0x0062 };
    uint32_t const ces[9] = { 0x1CA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_308)
{
    // 1F101 0021;	
    // (🄁) DIGIT ZERO COMMA	[1CA3 0222 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F101, 0x0021 };
    uint32_t const ces[12] = { 0x1CA3, 0x0222, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_309)
{
    // 1F101 003F;	
    // (🄁) DIGIT ZERO COMMA	[1CA3 0222 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F101, 0x003F };
    uint32_t const ces[12] = { 0x1CA3, 0x0222, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_310)
{
    // 1F101 0061;	
    // (🄁) DIGIT ZERO COMMA	[1CA3 0222 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F101, 0x0061 };
    uint32_t const ces[12] = { 0x1CA3, 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_311)
{
    // 1F101 0041;	
    // (🄁) DIGIT ZERO COMMA	[1CA3 0222 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1F101, 0x0041 };
    uint32_t const ces[12] = { 0x1CA3, 0x0222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_312)
{
    // 1F101 0062;	
    // (🄁) DIGIT ZERO COMMA	[1CA3 0222 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F101, 0x0062 };
    uint32_t const ces[12] = { 0x1CA3, 0x0222, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_313)
{
    // 0030 0021;	
    // (0) DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0030, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_314)
{
    // 0660 0021;	
    // (‎٠‎) ARABIC-INDIC DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0660, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_315)
{
    // 06F0 0021;	
    // (۰) EXTENDED ARABIC-INDIC DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F0, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_316)
{
    // 07C0 0021;	
    // (‎‎߀‎‎) NKO DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C0, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_317)
{
    // 0966 0021;	
    // (०) DEVANAGARI DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0966, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_318)
{
    // 09E6 0021;	
    // (০) BENGALI DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09E6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_319)
{
    // 0A66 0021;	
    // (੦) GURMUKHI DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A66, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_320)
{
    // 0AE6 0021;	
    // (૦) GUJARATI DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_321)
{
    // 0B66 0021;	
    // (୦) ORIYA DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B66, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_322)
{
    // 0BE6 0021;	
    // (௦) TAMIL DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BE6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_323)
{
    // 0C66 0021;	
    // (౦) TELUGU DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C66, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_324)
{
    // 0C78 0021;	
    // (౸) TELUGU FRACTION DIGIT ZERO FOR ODD POWERS OF FOUR	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C78, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_325)
{
    // 0CE6 0021;	
    // (೦) KANNADA DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CE6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_326)
{
    // 0D66 0021;	
    // (൦) MALAYALAM DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D66, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_327)
{
    // 0DE6 0021;	
    // (෦) SINHALA LITH DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DE6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_328)
{
    // 0E50 0021;	
    // (๐) THAI DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E50, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_329)
{
    // 0ED0 0021;	
    // (໐) LAO DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED0, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_330)
{
    // 0F20 0021;	
    // (༠) TIBETAN DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F20, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_331)
{
    // 1040 0021;	
    // (၀) MYANMAR DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1040, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_332)
{
    // 1090 0021;	
    // (႐) MYANMAR SHAN DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_333)
{
    // 17E0 0021;	
    // (០) KHMER DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E0, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_334)
{
    // 17F0 0021;	
    // (៰) KHMER SYMBOL LEK ATTAK SON	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F0, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_335)
{
    // 1810 0021;	
    // (᠐) MONGOLIAN DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1810, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_336)
{
    // 1946 0021;	
    // (᥆) LIMBU DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1946, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_337)
{
    // 19D0 0021;	
    // (᧐) NEW TAI LUE DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D0, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_338)
{
    // 1A80 0021;	
    // (᪀) TAI THAM HORA DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A80, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_339)
{
    // 1A90 0021;	
    // (᪐) TAI THAM THAM DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A90, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_340)
{
    // 1B50 0021;	
    // (᭐) BALINESE DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B50, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_341)
{
    // 1BB0 0021;	
    // (᮰) SUNDANESE DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB0, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_342)
{
    // 1C40 0021;	
    // (᱀) LEPCHA DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C40, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_343)
{
    // 1C50 0021;	
    // (᱐) OL CHIKI DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C50, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_344)
{
    // 3007 0021;	
    // (〇) IDEOGRAPHIC NUMBER ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3007, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_345)
{
    // A620 0021;	
    // (꘠) VAI DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA620, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_346)
{
    // A8D0 0021;	
    // (꣐) SAURASHTRA DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D0, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_347)
{
    // A900 0021;	
    // (꤀) KAYAH LI DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA900, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_348)
{
    // A9D0 0021;	
    // (꧐) JAVANESE DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D0, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_349)
{
    // A9F0 0021;	
    // (꧰) MYANMAR TAI LAING DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F0, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_350)
{
    // AA50 0021;	
    // (꩐) CHAM DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA50, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_351)
{
    // ABF0 0021;	
    // (꯰) MEETEI MAYEK DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF0, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_352)
{
    // 1018A 0021;	
    // (𐆊) GREEK ZERO SIGN	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1018A, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_353)
{
    // 104A0 0021;	
    // (𐒠) OSMANYA DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A0, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_354)
{
    // 11066 0021;	
    // (𑁦) BRAHMI DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11066, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_355)
{
    // 110F0 0021;	
    // (𑃰) SORA SOMPENG DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F0, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_356)
{
    // 11136 0021;	
    // (𑄶) CHAKMA DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11136, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_357)
{
    // 111D0 0021;	
    // (𑇐) SHARADA DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D0, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_358)
{
    // 112F0 0021;	
    // (𑋰) KHUDAWADI DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F0, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_359)
{
    // 11450 0021;	
    // (𑑐) NEWA DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11450, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_360)
{
    // 114D0 0021;	
    // (𑓐) TIRHUTA DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D0, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_361)
{
    // 11650 0021;	
    // (𑙐) MODI DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11650, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_362)
{
    // 116C0 0021;	
    // (𑛀) TAKRI DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C0, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_363)
{
    // 11730 0021;	
    // (𑜰) AHOM DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11730, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_364)
{
    // 118E0 0021;	
    // (𑣠) WARANG CITI DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E0, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_365)
{
    // 11C50 0021;	
    // (𑱐) BHAIKSUKI DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C50, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_366)
{
    // 11D50 0021;	
    // (𑵐) MASARAM GONDI DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D50, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_367)
{
    // 16A60 0021;	
    // (𖩠) MRO DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A60, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_368)
{
    // 16B50 0021;	
    // (𖭐) PAHAWH HMONG DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B50, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_369)
{
    // 1E950 0021;	
    // (‎‎𞥐‎‎) ADLAM DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E950, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_370)
{
    // FF10 0021;	
    // (０) FULLWIDTH DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF10, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_371)
{
    // 0F33 0021;	
    // (༳) TIBETAN DIGIT HALF ZERO	[1CA3 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F33, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_372)
{
    // 1D7CE 0021;	
    // (𝟎) MATHEMATICAL BOLD DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7CE, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_373)
{
    // 1D7D8 0021;	
    // (𝟘) MATHEMATICAL DOUBLE-STRUCK DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D8, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_374)
{
    // 1D7E2 0021;	
    // (𝟢) MATHEMATICAL SANS-SERIF DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E2, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_375)
{
    // 1D7EC 0021;	
    // (𝟬) MATHEMATICAL SANS-SERIF BOLD DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7EC, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_376)
{
    // 1D7F6 0021;	
    // (𝟶) MATHEMATICAL MONOSPACE DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F6, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_377)
{
    // 24EA 0021;	
    // (⓪) CIRCLED DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24EA, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_378)
{
    // 24FF 0021;	
    // (⓿) NEGATIVE CIRCLED DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24FF, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_379)
{
    // 1F10B 0021;	
    // (🄋) DINGBAT CIRCLED SANS-SERIF DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x1F10B, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_380)
{
    // 1F10C 0021;	
    // (🄌) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ZERO	[1CA3 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x1F10C, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_381)
{
    // 2070 0021;	
    // (⁰) SUPERSCRIPT ZERO	[1CA3 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2070, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_382)
{
    // 2080 0021;	
    // (₀) SUBSCRIPT ZERO	[1CA3 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2080, 0x0021 };
    uint32_t const ces[9] = { 0x1CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_383)
{
    // 0030 003F;	
    // (0) DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0030, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_384)
{
    // 0660 003F;	
    // (‎٠‎) ARABIC-INDIC DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0660, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_385)
{
    // 06F0 003F;	
    // (۰) EXTENDED ARABIC-INDIC DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F0, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_386)
{
    // 07C0 003F;	
    // (‎‎߀‎‎) NKO DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C0, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_387)
{
    // 0966 003F;	
    // (०) DEVANAGARI DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0966, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_388)
{
    // 09E6 003F;	
    // (০) BENGALI DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09E6, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_389)
{
    // 0A66 003F;	
    // (੦) GURMUKHI DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A66, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_390)
{
    // 0AE6 003F;	
    // (૦) GUJARATI DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE6, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_391)
{
    // 0B66 003F;	
    // (୦) ORIYA DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B66, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_392)
{
    // 0BE6 003F;	
    // (௦) TAMIL DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BE6, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_393)
{
    // 0C66 003F;	
    // (౦) TELUGU DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C66, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_394)
{
    // 0C78 003F;	
    // (౸) TELUGU FRACTION DIGIT ZERO FOR ODD POWERS OF FOUR	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C78, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_395)
{
    // 0CE6 003F;	
    // (೦) KANNADA DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CE6, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_396)
{
    // 0D66 003F;	
    // (൦) MALAYALAM DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D66, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_397)
{
    // 0DE6 003F;	
    // (෦) SINHALA LITH DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DE6, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_398)
{
    // 0E50 003F;	
    // (๐) THAI DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E50, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_399)
{
    // 0ED0 003F;	
    // (໐) LAO DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED0, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_400)
{
    // 0F20 003F;	
    // (༠) TIBETAN DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F20, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_401)
{
    // 1040 003F;	
    // (၀) MYANMAR DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1040, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_402)
{
    // 1090 003F;	
    // (႐) MYANMAR SHAN DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_403)
{
    // 17E0 003F;	
    // (០) KHMER DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E0, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_404)
{
    // 17F0 003F;	
    // (៰) KHMER SYMBOL LEK ATTAK SON	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F0, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_405)
{
    // 1810 003F;	
    // (᠐) MONGOLIAN DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1810, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_406)
{
    // 1946 003F;	
    // (᥆) LIMBU DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1946, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_407)
{
    // 19D0 003F;	
    // (᧐) NEW TAI LUE DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D0, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_408)
{
    // 1A80 003F;	
    // (᪀) TAI THAM HORA DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A80, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_409)
{
    // 1A90 003F;	
    // (᪐) TAI THAM THAM DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A90, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_410)
{
    // 1B50 003F;	
    // (᭐) BALINESE DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B50, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_411)
{
    // 1BB0 003F;	
    // (᮰) SUNDANESE DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB0, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_412)
{
    // 1C40 003F;	
    // (᱀) LEPCHA DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C40, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_413)
{
    // 1C50 003F;	
    // (᱐) OL CHIKI DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C50, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_414)
{
    // 3007 003F;	
    // (〇) IDEOGRAPHIC NUMBER ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3007, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_415)
{
    // A620 003F;	
    // (꘠) VAI DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA620, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_416)
{
    // A8D0 003F;	
    // (꣐) SAURASHTRA DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D0, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_417)
{
    // A900 003F;	
    // (꤀) KAYAH LI DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA900, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_418)
{
    // A9D0 003F;	
    // (꧐) JAVANESE DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D0, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_419)
{
    // A9F0 003F;	
    // (꧰) MYANMAR TAI LAING DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F0, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_420)
{
    // AA50 003F;	
    // (꩐) CHAM DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA50, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_421)
{
    // ABF0 003F;	
    // (꯰) MEETEI MAYEK DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABF0, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_422)
{
    // 1018A 003F;	
    // (𐆊) GREEK ZERO SIGN	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1018A, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_423)
{
    // 104A0 003F;	
    // (𐒠) OSMANYA DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x104A0, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_424)
{
    // 11066 003F;	
    // (𑁦) BRAHMI DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11066, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_425)
{
    // 110F0 003F;	
    // (𑃰) SORA SOMPENG DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110F0, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_426)
{
    // 11136 003F;	
    // (𑄶) CHAKMA DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11136, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_427)
{
    // 111D0 003F;	
    // (𑇐) SHARADA DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111D0, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_428)
{
    // 112F0 003F;	
    // (𑋰) KHUDAWADI DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112F0, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_429)
{
    // 11450 003F;	
    // (𑑐) NEWA DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11450, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_430)
{
    // 114D0 003F;	
    // (𑓐) TIRHUTA DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114D0, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_431)
{
    // 11650 003F;	
    // (𑙐) MODI DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11650, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_432)
{
    // 116C0 003F;	
    // (𑛀) TAKRI DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116C0, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_433)
{
    // 11730 003F;	
    // (𑜰) AHOM DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11730, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_434)
{
    // 118E0 003F;	
    // (𑣠) WARANG CITI DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x118E0, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_435)
{
    // 11C50 003F;	
    // (𑱐) BHAIKSUKI DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C50, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_436)
{
    // 11D50 003F;	
    // (𑵐) MASARAM GONDI DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D50, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_437)
{
    // 16A60 003F;	
    // (𖩠) MRO DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A60, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_438)
{
    // 16B50 003F;	
    // (𖭐) PAHAWH HMONG DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B50, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_439)
{
    // 1E950 003F;	
    // (‎‎𞥐‎‎) ADLAM DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E950, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_440)
{
    // FF10 003F;	
    // (０) FULLWIDTH DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF10, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_441)
{
    // 0F33 003F;	
    // (༳) TIBETAN DIGIT HALF ZERO	[1CA3 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0F33, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_442)
{
    // 1D7CE 003F;	
    // (𝟎) MATHEMATICAL BOLD DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7CE, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_443)
{
    // 1D7D8 003F;	
    // (𝟘) MATHEMATICAL DOUBLE-STRUCK DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7D8, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_444)
{
    // 1D7E2 003F;	
    // (𝟢) MATHEMATICAL SANS-SERIF DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7E2, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_445)
{
    // 1D7EC 003F;	
    // (𝟬) MATHEMATICAL SANS-SERIF BOLD DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7EC, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_446)
{
    // 1D7F6 003F;	
    // (𝟶) MATHEMATICAL MONOSPACE DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7F6, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_447)
{
    // 24EA 003F;	
    // (⓪) CIRCLED DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24EA, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_448)
{
    // 24FF 003F;	
    // (⓿) NEGATIVE CIRCLED DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24FF, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_449)
{
    // 1F10B 003F;	
    // (🄋) DINGBAT CIRCLED SANS-SERIF DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x1F10B, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_450)
{
    // 1F10C 003F;	
    // (🄌) DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ZERO	[1CA3 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x1F10C, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_451)
{
    // 2070 003F;	
    // (⁰) SUPERSCRIPT ZERO	[1CA3 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x2070, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_452)
{
    // 2080 003F;	
    // (₀) SUBSCRIPT ZERO	[1CA3 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2080, 0x003F };
    uint32_t const ces[9] = { 0x1CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_453)
{
    // 1F100 0021;	
    // (🄀) DIGIT ZERO FULL STOP	[1CA3 0278 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F100, 0x0021 };
    uint32_t const ces[12] = { 0x1CA3, 0x0278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_454)
{
    // 1F100 003F;	
    // (🄀) DIGIT ZERO FULL STOP	[1CA3 0278 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F100, 0x003F };
    uint32_t const ces[12] = { 0x1CA3, 0x0278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_455)
{
    // 1F100 0061;	
    // (🄀) DIGIT ZERO FULL STOP	[1CA3 0278 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F100, 0x0061 };
    uint32_t const ces[12] = { 0x1CA3, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_456)
{
    // 1F100 0041;	
    // (🄀) DIGIT ZERO FULL STOP	[1CA3 0278 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1F100, 0x0041 };
    uint32_t const ces[12] = { 0x1CA3, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_457)
{
    // 1F100 0062;	
    // (🄀) DIGIT ZERO FULL STOP	[1CA3 0278 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1F100, 0x0062 };
    uint32_t const ces[12] = { 0x1CA3, 0x0278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_458)
{
    // 2189 0021;	
    // (↉) VULGAR FRACTION ZERO THIRDS	[1CA3 063C 1CA6 0261 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x2189, 0x0021 };
    uint32_t const ces[15] = { 0x1CA3, 0x063C, 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_459)
{
    // 2189 003F;	
    // (↉) VULGAR FRACTION ZERO THIRDS	[1CA3 063C 1CA6 0267 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x2189, 0x003F };
    uint32_t const ces[15] = { 0x1CA3, 0x063C, 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_460)
{
    // 2189 0061;	
    // (↉) VULGAR FRACTION ZERO THIRDS	[1CA3 063C 1CA6 1CAD | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x2189, 0x0061 };
    uint32_t const ces[15] = { 0x1CA3, 0x063C, 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_461)
{
    // 2189 0041;	
    // (↉) VULGAR FRACTION ZERO THIRDS	[1CA3 063C 1CA6 1CAD | 0020 0020 0020 0020 | 001E 001E 001E 0008 |]

    uint32_t cps[2] = { 0x2189, 0x0041 };
    uint32_t const ces[15] = { 0x1CA3, 0x063C, 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_462)
{
    // 2189 0062;	
    // (↉) VULGAR FRACTION ZERO THIRDS	[1CA3 063C 1CA6 1CC6 | 0020 0020 0020 0020 | 001E 001E 001E 0002 |]

    uint32_t cps[2] = { 0x2189, 0x0062 };
    uint32_t const ces[15] = { 0x1CA3, 0x063C, 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001E, 0x001E, 0x001E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_463)
{
    // 0030 0061;	
    // (0) DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0030, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_464)
{
    // 0660 0061;	
    // (‎٠‎) ARABIC-INDIC DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0660, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_465)
{
    // 06F0 0061;	
    // (۰) EXTENDED ARABIC-INDIC DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06F0, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_466)
{
    // 07C0 0061;	
    // (‎‎߀‎‎) NKO DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07C0, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_467)
{
    // 0966 0061;	
    // (०) DEVANAGARI DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0966, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_468)
{
    // 09E6 0061;	
    // (০) BENGALI DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09E6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_469)
{
    // 0A66 0061;	
    // (੦) GURMUKHI DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A66, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_470)
{
    // 0AE6 0061;	
    // (૦) GUJARATI DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AE6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_471)
{
    // 0B66 0061;	
    // (୦) ORIYA DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B66, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_472)
{
    // 0BE6 0061;	
    // (௦) TAMIL DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BE6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_473)
{
    // 0C66 0061;	
    // (౦) TELUGU DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C66, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_474)
{
    // 0C78 0061;	
    // (౸) TELUGU FRACTION DIGIT ZERO FOR ODD POWERS OF FOUR	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C78, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_475)
{
    // 0CE6 0061;	
    // (೦) KANNADA DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CE6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_476)
{
    // 0D66 0061;	
    // (൦) MALAYALAM DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D66, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_477)
{
    // 0DE6 0061;	
    // (෦) SINHALA LITH DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0DE6, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_478)
{
    // 0E50 0061;	
    // (๐) THAI DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E50, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_479)
{
    // 0ED0 0061;	
    // (໐) LAO DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ED0, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_480)
{
    // 0F20 0061;	
    // (༠) TIBETAN DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F20, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_481)
{
    // 1040 0061;	
    // (၀) MYANMAR DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1040, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_482)
{
    // 1090 0061;	
    // (႐) MYANMAR SHAN DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1090, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_483)
{
    // 17E0 0061;	
    // (០) KHMER DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17E0, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_484)
{
    // 17F0 0061;	
    // (៰) KHMER SYMBOL LEK ATTAK SON	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17F0, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_485)
{
    // 1810 0061;	
    // (᠐) MONGOLIAN DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1810, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_486)
{
    // 1946 0061;	
    // (᥆) LIMBU DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1946, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_487)
{
    // 19D0 0061;	
    // (᧐) NEW TAI LUE DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19D0, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_488)
{
    // 1A80 0061;	
    // (᪀) TAI THAM HORA DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A80, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_489)
{
    // 1A90 0061;	
    // (᪐) TAI THAM THAM DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A90, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_490)
{
    // 1B50 0061;	
    // (᭐) BALINESE DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B50, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_491)
{
    // 1BB0 0061;	
    // (᮰) SUNDANESE DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BB0, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_492)
{
    // 1C40 0061;	
    // (᱀) LEPCHA DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C40, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_493)
{
    // 1C50 0061;	
    // (᱐) OL CHIKI DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C50, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_494)
{
    // 3007 0061;	
    // (〇) IDEOGRAPHIC NUMBER ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3007, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_495)
{
    // A620 0061;	
    // (꘠) VAI DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA620, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_496)
{
    // A8D0 0061;	
    // (꣐) SAURASHTRA DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8D0, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_497)
{
    // A900 0061;	
    // (꤀) KAYAH LI DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA900, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_498)
{
    // A9D0 0061;	
    // (꧐) JAVANESE DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9D0, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_080_499)
{
    // A9F0 0061;	
    // (꧰) MYANMAR TAI LAING DIGIT ZERO	[1CA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9F0, 0x0061 };
    uint32_t const ces[9] = { 0x1CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

