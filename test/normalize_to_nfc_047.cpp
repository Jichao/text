// Warning! This file is autogenerated.
#include <boost/text/normalize.hpp>
#include <boost/text/utility.hpp>

#include <gtest/gtest.h>

#include <algorithm>



TEST(normalization, nfc_047_000)
{
    // C748;C748;110B 1173 11B3;C748;110B 1173 11B3; 
    // (읈; 읈; 읈; 읈; 읈; ) HANGUL SYLLABLE EULS
    {
        std::array<uint32_t, 1> const source = {{ 0xC748 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC748 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_001)
{
    // C749;C749;110B 1173 11B4;C749;110B 1173 11B4; 
    // (읉; 읉; 읉; 읉; 읉; ) HANGUL SYLLABLE EULT
    {
        std::array<uint32_t, 1> const source = {{ 0xC749 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC749 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_002)
{
    // C74A;C74A;110B 1173 11B5;C74A;110B 1173 11B5; 
    // (읊; 읊; 읊; 읊; 읊; ) HANGUL SYLLABLE EULP
    {
        std::array<uint32_t, 1> const source = {{ 0xC74A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC74A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_003)
{
    // C74B;C74B;110B 1173 11B6;C74B;110B 1173 11B6; 
    // (읋; 읋; 읋; 읋; 읋; ) HANGUL SYLLABLE EULH
    {
        std::array<uint32_t, 1> const source = {{ 0xC74B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC74B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_004)
{
    // C74C;C74C;110B 1173 11B7;C74C;110B 1173 11B7; 
    // (음; 음; 음; 음; 음; ) HANGUL SYLLABLE EUM
    {
        std::array<uint32_t, 1> const source = {{ 0xC74C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC74C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_005)
{
    // C74D;C74D;110B 1173 11B8;C74D;110B 1173 11B8; 
    // (읍; 읍; 읍; 읍; 읍; ) HANGUL SYLLABLE EUB
    {
        std::array<uint32_t, 1> const source = {{ 0xC74D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC74D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_006)
{
    // C74E;C74E;110B 1173 11B9;C74E;110B 1173 11B9; 
    // (읎; 읎; 읎; 읎; 읎; ) HANGUL SYLLABLE EUBS
    {
        std::array<uint32_t, 1> const source = {{ 0xC74E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC74E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_007)
{
    // C74F;C74F;110B 1173 11BA;C74F;110B 1173 11BA; 
    // (읏; 읏; 읏; 읏; 읏; ) HANGUL SYLLABLE EUS
    {
        std::array<uint32_t, 1> const source = {{ 0xC74F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC74F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_008)
{
    // C750;C750;110B 1173 11BB;C750;110B 1173 11BB; 
    // (읐; 읐; 읐; 읐; 읐; ) HANGUL SYLLABLE EUSS
    {
        std::array<uint32_t, 1> const source = {{ 0xC750 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC750 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_009)
{
    // C751;C751;110B 1173 11BC;C751;110B 1173 11BC; 
    // (응; 응; 응; 응; 응; ) HANGUL SYLLABLE EUNG
    {
        std::array<uint32_t, 1> const source = {{ 0xC751 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC751 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_010)
{
    // C752;C752;110B 1173 11BD;C752;110B 1173 11BD; 
    // (읒; 읒; 읒; 읒; 읒; ) HANGUL SYLLABLE EUJ
    {
        std::array<uint32_t, 1> const source = {{ 0xC752 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC752 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_011)
{
    // C753;C753;110B 1173 11BE;C753;110B 1173 11BE; 
    // (읓; 읓; 읓; 읓; 읓; ) HANGUL SYLLABLE EUC
    {
        std::array<uint32_t, 1> const source = {{ 0xC753 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC753 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_012)
{
    // C754;C754;110B 1173 11BF;C754;110B 1173 11BF; 
    // (읔; 읔; 읔; 읔; 읔; ) HANGUL SYLLABLE EUK
    {
        std::array<uint32_t, 1> const source = {{ 0xC754 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC754 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_013)
{
    // C755;C755;110B 1173 11C0;C755;110B 1173 11C0; 
    // (읕; 읕; 읕; 읕; 읕; ) HANGUL SYLLABLE EUT
    {
        std::array<uint32_t, 1> const source = {{ 0xC755 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC755 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_014)
{
    // C756;C756;110B 1173 11C1;C756;110B 1173 11C1; 
    // (읖; 읖; 읖; 읖; 읖; ) HANGUL SYLLABLE EUP
    {
        std::array<uint32_t, 1> const source = {{ 0xC756 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC756 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_015)
{
    // C757;C757;110B 1173 11C2;C757;110B 1173 11C2; 
    // (읗; 읗; 읗; 읗; 읗; ) HANGUL SYLLABLE EUH
    {
        std::array<uint32_t, 1> const source = {{ 0xC757 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC757 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_016)
{
    // C758;C758;110B 1174;C758;110B 1174; 
    // (의; 의; 의; 의; 의; ) HANGUL SYLLABLE YI
    {
        std::array<uint32_t, 1> const source = {{ 0xC758 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC758 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_017)
{
    // C759;C759;110B 1174 11A8;C759;110B 1174 11A8; 
    // (읙; 읙; 읙; 읙; 읙; ) HANGUL SYLLABLE YIG
    {
        std::array<uint32_t, 1> const source = {{ 0xC759 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC759 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_018)
{
    // C75A;C75A;110B 1174 11A9;C75A;110B 1174 11A9; 
    // (읚; 읚; 읚; 읚; 읚; ) HANGUL SYLLABLE YIGG
    {
        std::array<uint32_t, 1> const source = {{ 0xC75A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC75A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_019)
{
    // C75B;C75B;110B 1174 11AA;C75B;110B 1174 11AA; 
    // (읛; 읛; 읛; 읛; 읛; ) HANGUL SYLLABLE YIGS
    {
        std::array<uint32_t, 1> const source = {{ 0xC75B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC75B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_020)
{
    // C75C;C75C;110B 1174 11AB;C75C;110B 1174 11AB; 
    // (읜; 읜; 읜; 읜; 읜; ) HANGUL SYLLABLE YIN
    {
        std::array<uint32_t, 1> const source = {{ 0xC75C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC75C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_021)
{
    // C75D;C75D;110B 1174 11AC;C75D;110B 1174 11AC; 
    // (읝; 읝; 읝; 읝; 읝; ) HANGUL SYLLABLE YINJ
    {
        std::array<uint32_t, 1> const source = {{ 0xC75D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC75D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_022)
{
    // C75E;C75E;110B 1174 11AD;C75E;110B 1174 11AD; 
    // (읞; 읞; 읞; 읞; 읞; ) HANGUL SYLLABLE YINH
    {
        std::array<uint32_t, 1> const source = {{ 0xC75E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC75E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_023)
{
    // C75F;C75F;110B 1174 11AE;C75F;110B 1174 11AE; 
    // (읟; 읟; 읟; 읟; 읟; ) HANGUL SYLLABLE YID
    {
        std::array<uint32_t, 1> const source = {{ 0xC75F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC75F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_024)
{
    // C760;C760;110B 1174 11AF;C760;110B 1174 11AF; 
    // (읠; 읠; 읠; 읠; 읠; ) HANGUL SYLLABLE YIL
    {
        std::array<uint32_t, 1> const source = {{ 0xC760 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC760 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_025)
{
    // C761;C761;110B 1174 11B0;C761;110B 1174 11B0; 
    // (읡; 읡; 읡; 읡; 읡; ) HANGUL SYLLABLE YILG
    {
        std::array<uint32_t, 1> const source = {{ 0xC761 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC761 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_026)
{
    // C762;C762;110B 1174 11B1;C762;110B 1174 11B1; 
    // (읢; 읢; 읢; 읢; 읢; ) HANGUL SYLLABLE YILM
    {
        std::array<uint32_t, 1> const source = {{ 0xC762 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC762 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_027)
{
    // C763;C763;110B 1174 11B2;C763;110B 1174 11B2; 
    // (읣; 읣; 읣; 읣; 읣; ) HANGUL SYLLABLE YILB
    {
        std::array<uint32_t, 1> const source = {{ 0xC763 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC763 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_028)
{
    // C764;C764;110B 1174 11B3;C764;110B 1174 11B3; 
    // (읤; 읤; 읤; 읤; 읤; ) HANGUL SYLLABLE YILS
    {
        std::array<uint32_t, 1> const source = {{ 0xC764 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC764 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_029)
{
    // C765;C765;110B 1174 11B4;C765;110B 1174 11B4; 
    // (읥; 읥; 읥; 읥; 읥; ) HANGUL SYLLABLE YILT
    {
        std::array<uint32_t, 1> const source = {{ 0xC765 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC765 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_030)
{
    // C766;C766;110B 1174 11B5;C766;110B 1174 11B5; 
    // (읦; 읦; 읦; 읦; 읦; ) HANGUL SYLLABLE YILP
    {
        std::array<uint32_t, 1> const source = {{ 0xC766 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC766 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_031)
{
    // C767;C767;110B 1174 11B6;C767;110B 1174 11B6; 
    // (읧; 읧; 읧; 읧; 읧; ) HANGUL SYLLABLE YILH
    {
        std::array<uint32_t, 1> const source = {{ 0xC767 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC767 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_032)
{
    // C768;C768;110B 1174 11B7;C768;110B 1174 11B7; 
    // (읨; 읨; 읨; 읨; 읨; ) HANGUL SYLLABLE YIM
    {
        std::array<uint32_t, 1> const source = {{ 0xC768 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC768 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_033)
{
    // C769;C769;110B 1174 11B8;C769;110B 1174 11B8; 
    // (읩; 읩; 읩; 읩; 읩; ) HANGUL SYLLABLE YIB
    {
        std::array<uint32_t, 1> const source = {{ 0xC769 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC769 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_034)
{
    // C76A;C76A;110B 1174 11B9;C76A;110B 1174 11B9; 
    // (읪; 읪; 읪; 읪; 읪; ) HANGUL SYLLABLE YIBS
    {
        std::array<uint32_t, 1> const source = {{ 0xC76A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC76A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_035)
{
    // C76B;C76B;110B 1174 11BA;C76B;110B 1174 11BA; 
    // (읫; 읫; 읫; 읫; 읫; ) HANGUL SYLLABLE YIS
    {
        std::array<uint32_t, 1> const source = {{ 0xC76B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC76B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_036)
{
    // C76C;C76C;110B 1174 11BB;C76C;110B 1174 11BB; 
    // (읬; 읬; 읬; 읬; 읬; ) HANGUL SYLLABLE YISS
    {
        std::array<uint32_t, 1> const source = {{ 0xC76C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC76C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_037)
{
    // C76D;C76D;110B 1174 11BC;C76D;110B 1174 11BC; 
    // (읭; 읭; 읭; 읭; 읭; ) HANGUL SYLLABLE YING
    {
        std::array<uint32_t, 1> const source = {{ 0xC76D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC76D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_038)
{
    // C76E;C76E;110B 1174 11BD;C76E;110B 1174 11BD; 
    // (읮; 읮; 읮; 읮; 읮; ) HANGUL SYLLABLE YIJ
    {
        std::array<uint32_t, 1> const source = {{ 0xC76E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC76E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_039)
{
    // C76F;C76F;110B 1174 11BE;C76F;110B 1174 11BE; 
    // (읯; 읯; 읯; 읯; 읯; ) HANGUL SYLLABLE YIC
    {
        std::array<uint32_t, 1> const source = {{ 0xC76F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC76F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_040)
{
    // C770;C770;110B 1174 11BF;C770;110B 1174 11BF; 
    // (읰; 읰; 읰; 읰; 읰; ) HANGUL SYLLABLE YIK
    {
        std::array<uint32_t, 1> const source = {{ 0xC770 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC770 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_041)
{
    // C771;C771;110B 1174 11C0;C771;110B 1174 11C0; 
    // (읱; 읱; 읱; 읱; 읱; ) HANGUL SYLLABLE YIT
    {
        std::array<uint32_t, 1> const source = {{ 0xC771 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC771 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_042)
{
    // C772;C772;110B 1174 11C1;C772;110B 1174 11C1; 
    // (읲; 읲; 읲; 읲; 읲; ) HANGUL SYLLABLE YIP
    {
        std::array<uint32_t, 1> const source = {{ 0xC772 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC772 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_043)
{
    // C773;C773;110B 1174 11C2;C773;110B 1174 11C2; 
    // (읳; 읳; 읳; 읳; 읳; ) HANGUL SYLLABLE YIH
    {
        std::array<uint32_t, 1> const source = {{ 0xC773 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC773 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_044)
{
    // C774;C774;110B 1175;C774;110B 1175; 
    // (이; 이; 이; 이; 이; ) HANGUL SYLLABLE I
    {
        std::array<uint32_t, 1> const source = {{ 0xC774 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC774 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_045)
{
    // C775;C775;110B 1175 11A8;C775;110B 1175 11A8; 
    // (익; 익; 익; 익; 익; ) HANGUL SYLLABLE IG
    {
        std::array<uint32_t, 1> const source = {{ 0xC775 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC775 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_046)
{
    // C776;C776;110B 1175 11A9;C776;110B 1175 11A9; 
    // (읶; 읶; 읶; 읶; 읶; ) HANGUL SYLLABLE IGG
    {
        std::array<uint32_t, 1> const source = {{ 0xC776 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC776 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_047)
{
    // C777;C777;110B 1175 11AA;C777;110B 1175 11AA; 
    // (읷; 읷; 읷; 읷; 읷; ) HANGUL SYLLABLE IGS
    {
        std::array<uint32_t, 1> const source = {{ 0xC777 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC777 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_048)
{
    // C778;C778;110B 1175 11AB;C778;110B 1175 11AB; 
    // (인; 인; 인; 인; 인; ) HANGUL SYLLABLE IN
    {
        std::array<uint32_t, 1> const source = {{ 0xC778 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC778 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_049)
{
    // C779;C779;110B 1175 11AC;C779;110B 1175 11AC; 
    // (읹; 읹; 읹; 읹; 읹; ) HANGUL SYLLABLE INJ
    {
        std::array<uint32_t, 1> const source = {{ 0xC779 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC779 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_050)
{
    // C77A;C77A;110B 1175 11AD;C77A;110B 1175 11AD; 
    // (읺; 읺; 읺; 읺; 읺; ) HANGUL SYLLABLE INH
    {
        std::array<uint32_t, 1> const source = {{ 0xC77A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC77A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_051)
{
    // C77B;C77B;110B 1175 11AE;C77B;110B 1175 11AE; 
    // (읻; 읻; 읻; 읻; 읻; ) HANGUL SYLLABLE ID
    {
        std::array<uint32_t, 1> const source = {{ 0xC77B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC77B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_052)
{
    // C77C;C77C;110B 1175 11AF;C77C;110B 1175 11AF; 
    // (일; 일; 일; 일; 일; ) HANGUL SYLLABLE IL
    {
        std::array<uint32_t, 1> const source = {{ 0xC77C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC77C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_053)
{
    // C77D;C77D;110B 1175 11B0;C77D;110B 1175 11B0; 
    // (읽; 읽; 읽; 읽; 읽; ) HANGUL SYLLABLE ILG
    {
        std::array<uint32_t, 1> const source = {{ 0xC77D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC77D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_054)
{
    // C77E;C77E;110B 1175 11B1;C77E;110B 1175 11B1; 
    // (읾; 읾; 읾; 읾; 읾; ) HANGUL SYLLABLE ILM
    {
        std::array<uint32_t, 1> const source = {{ 0xC77E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC77E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_055)
{
    // C77F;C77F;110B 1175 11B2;C77F;110B 1175 11B2; 
    // (읿; 읿; 읿; 읿; 읿; ) HANGUL SYLLABLE ILB
    {
        std::array<uint32_t, 1> const source = {{ 0xC77F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC77F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_056)
{
    // C780;C780;110B 1175 11B3;C780;110B 1175 11B3; 
    // (잀; 잀; 잀; 잀; 잀; ) HANGUL SYLLABLE ILS
    {
        std::array<uint32_t, 1> const source = {{ 0xC780 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC780 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_057)
{
    // C781;C781;110B 1175 11B4;C781;110B 1175 11B4; 
    // (잁; 잁; 잁; 잁; 잁; ) HANGUL SYLLABLE ILT
    {
        std::array<uint32_t, 1> const source = {{ 0xC781 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC781 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_058)
{
    // C782;C782;110B 1175 11B5;C782;110B 1175 11B5; 
    // (잂; 잂; 잂; 잂; 잂; ) HANGUL SYLLABLE ILP
    {
        std::array<uint32_t, 1> const source = {{ 0xC782 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC782 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_059)
{
    // C783;C783;110B 1175 11B6;C783;110B 1175 11B6; 
    // (잃; 잃; 잃; 잃; 잃; ) HANGUL SYLLABLE ILH
    {
        std::array<uint32_t, 1> const source = {{ 0xC783 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC783 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_060)
{
    // C784;C784;110B 1175 11B7;C784;110B 1175 11B7; 
    // (임; 임; 임; 임; 임; ) HANGUL SYLLABLE IM
    {
        std::array<uint32_t, 1> const source = {{ 0xC784 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC784 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_061)
{
    // C785;C785;110B 1175 11B8;C785;110B 1175 11B8; 
    // (입; 입; 입; 입; 입; ) HANGUL SYLLABLE IB
    {
        std::array<uint32_t, 1> const source = {{ 0xC785 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC785 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_062)
{
    // C786;C786;110B 1175 11B9;C786;110B 1175 11B9; 
    // (잆; 잆; 잆; 잆; 잆; ) HANGUL SYLLABLE IBS
    {
        std::array<uint32_t, 1> const source = {{ 0xC786 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC786 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_063)
{
    // C787;C787;110B 1175 11BA;C787;110B 1175 11BA; 
    // (잇; 잇; 잇; 잇; 잇; ) HANGUL SYLLABLE IS
    {
        std::array<uint32_t, 1> const source = {{ 0xC787 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC787 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_064)
{
    // C788;C788;110B 1175 11BB;C788;110B 1175 11BB; 
    // (있; 있; 있; 있; 있; ) HANGUL SYLLABLE ISS
    {
        std::array<uint32_t, 1> const source = {{ 0xC788 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC788 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_065)
{
    // C789;C789;110B 1175 11BC;C789;110B 1175 11BC; 
    // (잉; 잉; 잉; 잉; 잉; ) HANGUL SYLLABLE ING
    {
        std::array<uint32_t, 1> const source = {{ 0xC789 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC789 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_066)
{
    // C78A;C78A;110B 1175 11BD;C78A;110B 1175 11BD; 
    // (잊; 잊; 잊; 잊; 잊; ) HANGUL SYLLABLE IJ
    {
        std::array<uint32_t, 1> const source = {{ 0xC78A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC78A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_067)
{
    // C78B;C78B;110B 1175 11BE;C78B;110B 1175 11BE; 
    // (잋; 잋; 잋; 잋; 잋; ) HANGUL SYLLABLE IC
    {
        std::array<uint32_t, 1> const source = {{ 0xC78B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC78B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_068)
{
    // C78C;C78C;110B 1175 11BF;C78C;110B 1175 11BF; 
    // (잌; 잌; 잌; 잌; 잌; ) HANGUL SYLLABLE IK
    {
        std::array<uint32_t, 1> const source = {{ 0xC78C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC78C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_069)
{
    // C78D;C78D;110B 1175 11C0;C78D;110B 1175 11C0; 
    // (잍; 잍; 잍; 잍; 잍; ) HANGUL SYLLABLE IT
    {
        std::array<uint32_t, 1> const source = {{ 0xC78D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC78D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_070)
{
    // C78E;C78E;110B 1175 11C1;C78E;110B 1175 11C1; 
    // (잎; 잎; 잎; 잎; 잎; ) HANGUL SYLLABLE IP
    {
        std::array<uint32_t, 1> const source = {{ 0xC78E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC78E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_071)
{
    // C78F;C78F;110B 1175 11C2;C78F;110B 1175 11C2; 
    // (잏; 잏; 잏; 잏; 잏; ) HANGUL SYLLABLE IH
    {
        std::array<uint32_t, 1> const source = {{ 0xC78F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC78F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_072)
{
    // C790;C790;110C 1161;C790;110C 1161; 
    // (자; 자; 자; 자; 자; ) HANGUL SYLLABLE JA
    {
        std::array<uint32_t, 1> const source = {{ 0xC790 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC790 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_073)
{
    // C791;C791;110C 1161 11A8;C791;110C 1161 11A8; 
    // (작; 작; 작; 작; 작; ) HANGUL SYLLABLE JAG
    {
        std::array<uint32_t, 1> const source = {{ 0xC791 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC791 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_074)
{
    // C792;C792;110C 1161 11A9;C792;110C 1161 11A9; 
    // (잒; 잒; 잒; 잒; 잒; ) HANGUL SYLLABLE JAGG
    {
        std::array<uint32_t, 1> const source = {{ 0xC792 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC792 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_075)
{
    // C793;C793;110C 1161 11AA;C793;110C 1161 11AA; 
    // (잓; 잓; 잓; 잓; 잓; ) HANGUL SYLLABLE JAGS
    {
        std::array<uint32_t, 1> const source = {{ 0xC793 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC793 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_076)
{
    // C794;C794;110C 1161 11AB;C794;110C 1161 11AB; 
    // (잔; 잔; 잔; 잔; 잔; ) HANGUL SYLLABLE JAN
    {
        std::array<uint32_t, 1> const source = {{ 0xC794 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC794 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_077)
{
    // C795;C795;110C 1161 11AC;C795;110C 1161 11AC; 
    // (잕; 잕; 잕; 잕; 잕; ) HANGUL SYLLABLE JANJ
    {
        std::array<uint32_t, 1> const source = {{ 0xC795 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC795 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_078)
{
    // C796;C796;110C 1161 11AD;C796;110C 1161 11AD; 
    // (잖; 잖; 잖; 잖; 잖; ) HANGUL SYLLABLE JANH
    {
        std::array<uint32_t, 1> const source = {{ 0xC796 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC796 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_079)
{
    // C797;C797;110C 1161 11AE;C797;110C 1161 11AE; 
    // (잗; 잗; 잗; 잗; 잗; ) HANGUL SYLLABLE JAD
    {
        std::array<uint32_t, 1> const source = {{ 0xC797 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC797 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_080)
{
    // C798;C798;110C 1161 11AF;C798;110C 1161 11AF; 
    // (잘; 잘; 잘; 잘; 잘; ) HANGUL SYLLABLE JAL
    {
        std::array<uint32_t, 1> const source = {{ 0xC798 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC798 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_081)
{
    // C799;C799;110C 1161 11B0;C799;110C 1161 11B0; 
    // (잙; 잙; 잙; 잙; 잙; ) HANGUL SYLLABLE JALG
    {
        std::array<uint32_t, 1> const source = {{ 0xC799 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC799 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_082)
{
    // C79A;C79A;110C 1161 11B1;C79A;110C 1161 11B1; 
    // (잚; 잚; 잚; 잚; 잚; ) HANGUL SYLLABLE JALM
    {
        std::array<uint32_t, 1> const source = {{ 0xC79A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC79A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_083)
{
    // C79B;C79B;110C 1161 11B2;C79B;110C 1161 11B2; 
    // (잛; 잛; 잛; 잛; 잛; ) HANGUL SYLLABLE JALB
    {
        std::array<uint32_t, 1> const source = {{ 0xC79B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC79B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_084)
{
    // C79C;C79C;110C 1161 11B3;C79C;110C 1161 11B3; 
    // (잜; 잜; 잜; 잜; 잜; ) HANGUL SYLLABLE JALS
    {
        std::array<uint32_t, 1> const source = {{ 0xC79C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC79C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_085)
{
    // C79D;C79D;110C 1161 11B4;C79D;110C 1161 11B4; 
    // (잝; 잝; 잝; 잝; 잝; ) HANGUL SYLLABLE JALT
    {
        std::array<uint32_t, 1> const source = {{ 0xC79D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC79D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_086)
{
    // C79E;C79E;110C 1161 11B5;C79E;110C 1161 11B5; 
    // (잞; 잞; 잞; 잞; 잞; ) HANGUL SYLLABLE JALP
    {
        std::array<uint32_t, 1> const source = {{ 0xC79E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC79E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_087)
{
    // C79F;C79F;110C 1161 11B6;C79F;110C 1161 11B6; 
    // (잟; 잟; 잟; 잟; 잟; ) HANGUL SYLLABLE JALH
    {
        std::array<uint32_t, 1> const source = {{ 0xC79F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC79F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_088)
{
    // C7A0;C7A0;110C 1161 11B7;C7A0;110C 1161 11B7; 
    // (잠; 잠; 잠; 잠; 잠; ) HANGUL SYLLABLE JAM
    {
        std::array<uint32_t, 1> const source = {{ 0xC7A0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7A0 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_089)
{
    // C7A1;C7A1;110C 1161 11B8;C7A1;110C 1161 11B8; 
    // (잡; 잡; 잡; 잡; 잡; ) HANGUL SYLLABLE JAB
    {
        std::array<uint32_t, 1> const source = {{ 0xC7A1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7A1 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_090)
{
    // C7A2;C7A2;110C 1161 11B9;C7A2;110C 1161 11B9; 
    // (잢; 잢; 잢; 잢; 잢; ) HANGUL SYLLABLE JABS
    {
        std::array<uint32_t, 1> const source = {{ 0xC7A2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7A2 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_091)
{
    // C7A3;C7A3;110C 1161 11BA;C7A3;110C 1161 11BA; 
    // (잣; 잣; 잣; 잣; 잣; ) HANGUL SYLLABLE JAS
    {
        std::array<uint32_t, 1> const source = {{ 0xC7A3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7A3 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_092)
{
    // C7A4;C7A4;110C 1161 11BB;C7A4;110C 1161 11BB; 
    // (잤; 잤; 잤; 잤; 잤; ) HANGUL SYLLABLE JASS
    {
        std::array<uint32_t, 1> const source = {{ 0xC7A4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7A4 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_093)
{
    // C7A5;C7A5;110C 1161 11BC;C7A5;110C 1161 11BC; 
    // (장; 장; 장; 장; 장; ) HANGUL SYLLABLE JANG
    {
        std::array<uint32_t, 1> const source = {{ 0xC7A5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7A5 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_094)
{
    // C7A6;C7A6;110C 1161 11BD;C7A6;110C 1161 11BD; 
    // (잦; 잦; 잦; 잦; 잦; ) HANGUL SYLLABLE JAJ
    {
        std::array<uint32_t, 1> const source = {{ 0xC7A6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7A6 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_095)
{
    // C7A7;C7A7;110C 1161 11BE;C7A7;110C 1161 11BE; 
    // (잧; 잧; 잧; 잧; 잧; ) HANGUL SYLLABLE JAC
    {
        std::array<uint32_t, 1> const source = {{ 0xC7A7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7A7 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_096)
{
    // C7A8;C7A8;110C 1161 11BF;C7A8;110C 1161 11BF; 
    // (잨; 잨; 잨; 잨; 잨; ) HANGUL SYLLABLE JAK
    {
        std::array<uint32_t, 1> const source = {{ 0xC7A8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7A8 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_097)
{
    // C7A9;C7A9;110C 1161 11C0;C7A9;110C 1161 11C0; 
    // (잩; 잩; 잩; 잩; 잩; ) HANGUL SYLLABLE JAT
    {
        std::array<uint32_t, 1> const source = {{ 0xC7A9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7A9 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_098)
{
    // C7AA;C7AA;110C 1161 11C1;C7AA;110C 1161 11C1; 
    // (잪; 잪; 잪; 잪; 잪; ) HANGUL SYLLABLE JAP
    {
        std::array<uint32_t, 1> const source = {{ 0xC7AA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7AA }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_099)
{
    // C7AB;C7AB;110C 1161 11C2;C7AB;110C 1161 11C2; 
    // (잫; 잫; 잫; 잫; 잫; ) HANGUL SYLLABLE JAH
    {
        std::array<uint32_t, 1> const source = {{ 0xC7AB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7AB }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_100)
{
    // C7AC;C7AC;110C 1162;C7AC;110C 1162; 
    // (재; 재; 재; 재; 재; ) HANGUL SYLLABLE JAE
    {
        std::array<uint32_t, 1> const source = {{ 0xC7AC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7AC }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_101)
{
    // C7AD;C7AD;110C 1162 11A8;C7AD;110C 1162 11A8; 
    // (잭; 잭; 잭; 잭; 잭; ) HANGUL SYLLABLE JAEG
    {
        std::array<uint32_t, 1> const source = {{ 0xC7AD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7AD }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_102)
{
    // C7AE;C7AE;110C 1162 11A9;C7AE;110C 1162 11A9; 
    // (잮; 잮; 잮; 잮; 잮; ) HANGUL SYLLABLE JAEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xC7AE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7AE }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_103)
{
    // C7AF;C7AF;110C 1162 11AA;C7AF;110C 1162 11AA; 
    // (잯; 잯; 잯; 잯; 잯; ) HANGUL SYLLABLE JAEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xC7AF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7AF }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_104)
{
    // C7B0;C7B0;110C 1162 11AB;C7B0;110C 1162 11AB; 
    // (잰; 잰; 잰; 잰; 잰; ) HANGUL SYLLABLE JAEN
    {
        std::array<uint32_t, 1> const source = {{ 0xC7B0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7B0 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_105)
{
    // C7B1;C7B1;110C 1162 11AC;C7B1;110C 1162 11AC; 
    // (잱; 잱; 잱; 잱; 잱; ) HANGUL SYLLABLE JAENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xC7B1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7B1 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_106)
{
    // C7B2;C7B2;110C 1162 11AD;C7B2;110C 1162 11AD; 
    // (잲; 잲; 잲; 잲; 잲; ) HANGUL SYLLABLE JAENH
    {
        std::array<uint32_t, 1> const source = {{ 0xC7B2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7B2 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_107)
{
    // C7B3;C7B3;110C 1162 11AE;C7B3;110C 1162 11AE; 
    // (잳; 잳; 잳; 잳; 잳; ) HANGUL SYLLABLE JAED
    {
        std::array<uint32_t, 1> const source = {{ 0xC7B3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7B3 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_108)
{
    // C7B4;C7B4;110C 1162 11AF;C7B4;110C 1162 11AF; 
    // (잴; 잴; 잴; 잴; 잴; ) HANGUL SYLLABLE JAEL
    {
        std::array<uint32_t, 1> const source = {{ 0xC7B4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7B4 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_109)
{
    // C7B5;C7B5;110C 1162 11B0;C7B5;110C 1162 11B0; 
    // (잵; 잵; 잵; 잵; 잵; ) HANGUL SYLLABLE JAELG
    {
        std::array<uint32_t, 1> const source = {{ 0xC7B5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7B5 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_110)
{
    // C7B6;C7B6;110C 1162 11B1;C7B6;110C 1162 11B1; 
    // (잶; 잶; 잶; 잶; 잶; ) HANGUL SYLLABLE JAELM
    {
        std::array<uint32_t, 1> const source = {{ 0xC7B6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7B6 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_111)
{
    // C7B7;C7B7;110C 1162 11B2;C7B7;110C 1162 11B2; 
    // (잷; 잷; 잷; 잷; 잷; ) HANGUL SYLLABLE JAELB
    {
        std::array<uint32_t, 1> const source = {{ 0xC7B7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7B7 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_112)
{
    // C7B8;C7B8;110C 1162 11B3;C7B8;110C 1162 11B3; 
    // (잸; 잸; 잸; 잸; 잸; ) HANGUL SYLLABLE JAELS
    {
        std::array<uint32_t, 1> const source = {{ 0xC7B8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7B8 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_113)
{
    // C7B9;C7B9;110C 1162 11B4;C7B9;110C 1162 11B4; 
    // (잹; 잹; 잹; 잹; 잹; ) HANGUL SYLLABLE JAELT
    {
        std::array<uint32_t, 1> const source = {{ 0xC7B9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7B9 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_114)
{
    // C7BA;C7BA;110C 1162 11B5;C7BA;110C 1162 11B5; 
    // (잺; 잺; 잺; 잺; 잺; ) HANGUL SYLLABLE JAELP
    {
        std::array<uint32_t, 1> const source = {{ 0xC7BA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7BA }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_115)
{
    // C7BB;C7BB;110C 1162 11B6;C7BB;110C 1162 11B6; 
    // (잻; 잻; 잻; 잻; 잻; ) HANGUL SYLLABLE JAELH
    {
        std::array<uint32_t, 1> const source = {{ 0xC7BB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7BB }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_116)
{
    // C7BC;C7BC;110C 1162 11B7;C7BC;110C 1162 11B7; 
    // (잼; 잼; 잼; 잼; 잼; ) HANGUL SYLLABLE JAEM
    {
        std::array<uint32_t, 1> const source = {{ 0xC7BC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7BC }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_117)
{
    // C7BD;C7BD;110C 1162 11B8;C7BD;110C 1162 11B8; 
    // (잽; 잽; 잽; 잽; 잽; ) HANGUL SYLLABLE JAEB
    {
        std::array<uint32_t, 1> const source = {{ 0xC7BD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7BD }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_118)
{
    // C7BE;C7BE;110C 1162 11B9;C7BE;110C 1162 11B9; 
    // (잾; 잾; 잾; 잾; 잾; ) HANGUL SYLLABLE JAEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xC7BE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7BE }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_119)
{
    // C7BF;C7BF;110C 1162 11BA;C7BF;110C 1162 11BA; 
    // (잿; 잿; 잿; 잿; 잿; ) HANGUL SYLLABLE JAES
    {
        std::array<uint32_t, 1> const source = {{ 0xC7BF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7BF }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_120)
{
    // C7C0;C7C0;110C 1162 11BB;C7C0;110C 1162 11BB; 
    // (쟀; 쟀; 쟀; 쟀; 쟀; ) HANGUL SYLLABLE JAESS
    {
        std::array<uint32_t, 1> const source = {{ 0xC7C0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7C0 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_121)
{
    // C7C1;C7C1;110C 1162 11BC;C7C1;110C 1162 11BC; 
    // (쟁; 쟁; 쟁; 쟁; 쟁; ) HANGUL SYLLABLE JAENG
    {
        std::array<uint32_t, 1> const source = {{ 0xC7C1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7C1 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_122)
{
    // C7C2;C7C2;110C 1162 11BD;C7C2;110C 1162 11BD; 
    // (쟂; 쟂; 쟂; 쟂; 쟂; ) HANGUL SYLLABLE JAEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xC7C2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7C2 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_123)
{
    // C7C3;C7C3;110C 1162 11BE;C7C3;110C 1162 11BE; 
    // (쟃; 쟃; 쟃; 쟃; 쟃; ) HANGUL SYLLABLE JAEC
    {
        std::array<uint32_t, 1> const source = {{ 0xC7C3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7C3 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_124)
{
    // C7C4;C7C4;110C 1162 11BF;C7C4;110C 1162 11BF; 
    // (쟄; 쟄; 쟄; 쟄; 쟄; ) HANGUL SYLLABLE JAEK
    {
        std::array<uint32_t, 1> const source = {{ 0xC7C4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7C4 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_125)
{
    // C7C5;C7C5;110C 1162 11C0;C7C5;110C 1162 11C0; 
    // (쟅; 쟅; 쟅; 쟅; 쟅; ) HANGUL SYLLABLE JAET
    {
        std::array<uint32_t, 1> const source = {{ 0xC7C5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7C5 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_126)
{
    // C7C6;C7C6;110C 1162 11C1;C7C6;110C 1162 11C1; 
    // (쟆; 쟆; 쟆; 쟆; 쟆; ) HANGUL SYLLABLE JAEP
    {
        std::array<uint32_t, 1> const source = {{ 0xC7C6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7C6 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_127)
{
    // C7C7;C7C7;110C 1162 11C2;C7C7;110C 1162 11C2; 
    // (쟇; 쟇; 쟇; 쟇; 쟇; ) HANGUL SYLLABLE JAEH
    {
        std::array<uint32_t, 1> const source = {{ 0xC7C7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7C7 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_128)
{
    // C7C8;C7C8;110C 1163;C7C8;110C 1163; 
    // (쟈; 쟈; 쟈; 쟈; 쟈; ) HANGUL SYLLABLE JYA
    {
        std::array<uint32_t, 1> const source = {{ 0xC7C8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7C8 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_129)
{
    // C7C9;C7C9;110C 1163 11A8;C7C9;110C 1163 11A8; 
    // (쟉; 쟉; 쟉; 쟉; 쟉; ) HANGUL SYLLABLE JYAG
    {
        std::array<uint32_t, 1> const source = {{ 0xC7C9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7C9 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_130)
{
    // C7CA;C7CA;110C 1163 11A9;C7CA;110C 1163 11A9; 
    // (쟊; 쟊; 쟊; 쟊; 쟊; ) HANGUL SYLLABLE JYAGG
    {
        std::array<uint32_t, 1> const source = {{ 0xC7CA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7CA }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_131)
{
    // C7CB;C7CB;110C 1163 11AA;C7CB;110C 1163 11AA; 
    // (쟋; 쟋; 쟋; 쟋; 쟋; ) HANGUL SYLLABLE JYAGS
    {
        std::array<uint32_t, 1> const source = {{ 0xC7CB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7CB }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_132)
{
    // C7CC;C7CC;110C 1163 11AB;C7CC;110C 1163 11AB; 
    // (쟌; 쟌; 쟌; 쟌; 쟌; ) HANGUL SYLLABLE JYAN
    {
        std::array<uint32_t, 1> const source = {{ 0xC7CC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7CC }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_133)
{
    // C7CD;C7CD;110C 1163 11AC;C7CD;110C 1163 11AC; 
    // (쟍; 쟍; 쟍; 쟍; 쟍; ) HANGUL SYLLABLE JYANJ
    {
        std::array<uint32_t, 1> const source = {{ 0xC7CD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7CD }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_134)
{
    // C7CE;C7CE;110C 1163 11AD;C7CE;110C 1163 11AD; 
    // (쟎; 쟎; 쟎; 쟎; 쟎; ) HANGUL SYLLABLE JYANH
    {
        std::array<uint32_t, 1> const source = {{ 0xC7CE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7CE }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_135)
{
    // C7CF;C7CF;110C 1163 11AE;C7CF;110C 1163 11AE; 
    // (쟏; 쟏; 쟏; 쟏; 쟏; ) HANGUL SYLLABLE JYAD
    {
        std::array<uint32_t, 1> const source = {{ 0xC7CF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7CF }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_136)
{
    // C7D0;C7D0;110C 1163 11AF;C7D0;110C 1163 11AF; 
    // (쟐; 쟐; 쟐; 쟐; 쟐; ) HANGUL SYLLABLE JYAL
    {
        std::array<uint32_t, 1> const source = {{ 0xC7D0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7D0 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_137)
{
    // C7D1;C7D1;110C 1163 11B0;C7D1;110C 1163 11B0; 
    // (쟑; 쟑; 쟑; 쟑; 쟑; ) HANGUL SYLLABLE JYALG
    {
        std::array<uint32_t, 1> const source = {{ 0xC7D1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7D1 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_138)
{
    // C7D2;C7D2;110C 1163 11B1;C7D2;110C 1163 11B1; 
    // (쟒; 쟒; 쟒; 쟒; 쟒; ) HANGUL SYLLABLE JYALM
    {
        std::array<uint32_t, 1> const source = {{ 0xC7D2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7D2 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_139)
{
    // C7D3;C7D3;110C 1163 11B2;C7D3;110C 1163 11B2; 
    // (쟓; 쟓; 쟓; 쟓; 쟓; ) HANGUL SYLLABLE JYALB
    {
        std::array<uint32_t, 1> const source = {{ 0xC7D3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7D3 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_140)
{
    // C7D4;C7D4;110C 1163 11B3;C7D4;110C 1163 11B3; 
    // (쟔; 쟔; 쟔; 쟔; 쟔; ) HANGUL SYLLABLE JYALS
    {
        std::array<uint32_t, 1> const source = {{ 0xC7D4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7D4 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_141)
{
    // C7D5;C7D5;110C 1163 11B4;C7D5;110C 1163 11B4; 
    // (쟕; 쟕; 쟕; 쟕; 쟕; ) HANGUL SYLLABLE JYALT
    {
        std::array<uint32_t, 1> const source = {{ 0xC7D5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7D5 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_142)
{
    // C7D6;C7D6;110C 1163 11B5;C7D6;110C 1163 11B5; 
    // (쟖; 쟖; 쟖; 쟖; 쟖; ) HANGUL SYLLABLE JYALP
    {
        std::array<uint32_t, 1> const source = {{ 0xC7D6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7D6 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_143)
{
    // C7D7;C7D7;110C 1163 11B6;C7D7;110C 1163 11B6; 
    // (쟗; 쟗; 쟗; 쟗; 쟗; ) HANGUL SYLLABLE JYALH
    {
        std::array<uint32_t, 1> const source = {{ 0xC7D7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7D7 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_144)
{
    // C7D8;C7D8;110C 1163 11B7;C7D8;110C 1163 11B7; 
    // (쟘; 쟘; 쟘; 쟘; 쟘; ) HANGUL SYLLABLE JYAM
    {
        std::array<uint32_t, 1> const source = {{ 0xC7D8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7D8 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_145)
{
    // C7D9;C7D9;110C 1163 11B8;C7D9;110C 1163 11B8; 
    // (쟙; 쟙; 쟙; 쟙; 쟙; ) HANGUL SYLLABLE JYAB
    {
        std::array<uint32_t, 1> const source = {{ 0xC7D9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7D9 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_146)
{
    // C7DA;C7DA;110C 1163 11B9;C7DA;110C 1163 11B9; 
    // (쟚; 쟚; 쟚; 쟚; 쟚; ) HANGUL SYLLABLE JYABS
    {
        std::array<uint32_t, 1> const source = {{ 0xC7DA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7DA }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_147)
{
    // C7DB;C7DB;110C 1163 11BA;C7DB;110C 1163 11BA; 
    // (쟛; 쟛; 쟛; 쟛; 쟛; ) HANGUL SYLLABLE JYAS
    {
        std::array<uint32_t, 1> const source = {{ 0xC7DB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7DB }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_148)
{
    // C7DC;C7DC;110C 1163 11BB;C7DC;110C 1163 11BB; 
    // (쟜; 쟜; 쟜; 쟜; 쟜; ) HANGUL SYLLABLE JYASS
    {
        std::array<uint32_t, 1> const source = {{ 0xC7DC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7DC }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_149)
{
    // C7DD;C7DD;110C 1163 11BC;C7DD;110C 1163 11BC; 
    // (쟝; 쟝; 쟝; 쟝; 쟝; ) HANGUL SYLLABLE JYANG
    {
        std::array<uint32_t, 1> const source = {{ 0xC7DD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7DD }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_150)
{
    // C7DE;C7DE;110C 1163 11BD;C7DE;110C 1163 11BD; 
    // (쟞; 쟞; 쟞; 쟞; 쟞; ) HANGUL SYLLABLE JYAJ
    {
        std::array<uint32_t, 1> const source = {{ 0xC7DE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7DE }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_151)
{
    // C7DF;C7DF;110C 1163 11BE;C7DF;110C 1163 11BE; 
    // (쟟; 쟟; 쟟; 쟟; 쟟; ) HANGUL SYLLABLE JYAC
    {
        std::array<uint32_t, 1> const source = {{ 0xC7DF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7DF }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_152)
{
    // C7E0;C7E0;110C 1163 11BF;C7E0;110C 1163 11BF; 
    // (쟠; 쟠; 쟠; 쟠; 쟠; ) HANGUL SYLLABLE JYAK
    {
        std::array<uint32_t, 1> const source = {{ 0xC7E0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7E0 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_153)
{
    // C7E1;C7E1;110C 1163 11C0;C7E1;110C 1163 11C0; 
    // (쟡; 쟡; 쟡; 쟡; 쟡; ) HANGUL SYLLABLE JYAT
    {
        std::array<uint32_t, 1> const source = {{ 0xC7E1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7E1 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_154)
{
    // C7E2;C7E2;110C 1163 11C1;C7E2;110C 1163 11C1; 
    // (쟢; 쟢; 쟢; 쟢; 쟢; ) HANGUL SYLLABLE JYAP
    {
        std::array<uint32_t, 1> const source = {{ 0xC7E2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7E2 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_155)
{
    // C7E3;C7E3;110C 1163 11C2;C7E3;110C 1163 11C2; 
    // (쟣; 쟣; 쟣; 쟣; 쟣; ) HANGUL SYLLABLE JYAH
    {
        std::array<uint32_t, 1> const source = {{ 0xC7E3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7E3 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_156)
{
    // C7E4;C7E4;110C 1164;C7E4;110C 1164; 
    // (쟤; 쟤; 쟤; 쟤; 쟤; ) HANGUL SYLLABLE JYAE
    {
        std::array<uint32_t, 1> const source = {{ 0xC7E4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7E4 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_157)
{
    // C7E5;C7E5;110C 1164 11A8;C7E5;110C 1164 11A8; 
    // (쟥; 쟥; 쟥; 쟥; 쟥; ) HANGUL SYLLABLE JYAEG
    {
        std::array<uint32_t, 1> const source = {{ 0xC7E5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7E5 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_158)
{
    // C7E6;C7E6;110C 1164 11A9;C7E6;110C 1164 11A9; 
    // (쟦; 쟦; 쟦; 쟦; 쟦; ) HANGUL SYLLABLE JYAEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xC7E6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7E6 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_159)
{
    // C7E7;C7E7;110C 1164 11AA;C7E7;110C 1164 11AA; 
    // (쟧; 쟧; 쟧; 쟧; 쟧; ) HANGUL SYLLABLE JYAEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xC7E7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7E7 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_160)
{
    // C7E8;C7E8;110C 1164 11AB;C7E8;110C 1164 11AB; 
    // (쟨; 쟨; 쟨; 쟨; 쟨; ) HANGUL SYLLABLE JYAEN
    {
        std::array<uint32_t, 1> const source = {{ 0xC7E8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7E8 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_161)
{
    // C7E9;C7E9;110C 1164 11AC;C7E9;110C 1164 11AC; 
    // (쟩; 쟩; 쟩; 쟩; 쟩; ) HANGUL SYLLABLE JYAENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xC7E9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7E9 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_162)
{
    // C7EA;C7EA;110C 1164 11AD;C7EA;110C 1164 11AD; 
    // (쟪; 쟪; 쟪; 쟪; 쟪; ) HANGUL SYLLABLE JYAENH
    {
        std::array<uint32_t, 1> const source = {{ 0xC7EA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7EA }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_163)
{
    // C7EB;C7EB;110C 1164 11AE;C7EB;110C 1164 11AE; 
    // (쟫; 쟫; 쟫; 쟫; 쟫; ) HANGUL SYLLABLE JYAED
    {
        std::array<uint32_t, 1> const source = {{ 0xC7EB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7EB }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_164)
{
    // C7EC;C7EC;110C 1164 11AF;C7EC;110C 1164 11AF; 
    // (쟬; 쟬; 쟬; 쟬; 쟬; ) HANGUL SYLLABLE JYAEL
    {
        std::array<uint32_t, 1> const source = {{ 0xC7EC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7EC }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_165)
{
    // C7ED;C7ED;110C 1164 11B0;C7ED;110C 1164 11B0; 
    // (쟭; 쟭; 쟭; 쟭; 쟭; ) HANGUL SYLLABLE JYAELG
    {
        std::array<uint32_t, 1> const source = {{ 0xC7ED }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7ED }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_166)
{
    // C7EE;C7EE;110C 1164 11B1;C7EE;110C 1164 11B1; 
    // (쟮; 쟮; 쟮; 쟮; 쟮; ) HANGUL SYLLABLE JYAELM
    {
        std::array<uint32_t, 1> const source = {{ 0xC7EE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7EE }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_167)
{
    // C7EF;C7EF;110C 1164 11B2;C7EF;110C 1164 11B2; 
    // (쟯; 쟯; 쟯; 쟯; 쟯; ) HANGUL SYLLABLE JYAELB
    {
        std::array<uint32_t, 1> const source = {{ 0xC7EF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7EF }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_168)
{
    // C7F0;C7F0;110C 1164 11B3;C7F0;110C 1164 11B3; 
    // (쟰; 쟰; 쟰; 쟰; 쟰; ) HANGUL SYLLABLE JYAELS
    {
        std::array<uint32_t, 1> const source = {{ 0xC7F0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7F0 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_169)
{
    // C7F1;C7F1;110C 1164 11B4;C7F1;110C 1164 11B4; 
    // (쟱; 쟱; 쟱; 쟱; 쟱; ) HANGUL SYLLABLE JYAELT
    {
        std::array<uint32_t, 1> const source = {{ 0xC7F1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7F1 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_170)
{
    // C7F2;C7F2;110C 1164 11B5;C7F2;110C 1164 11B5; 
    // (쟲; 쟲; 쟲; 쟲; 쟲; ) HANGUL SYLLABLE JYAELP
    {
        std::array<uint32_t, 1> const source = {{ 0xC7F2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7F2 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_171)
{
    // C7F3;C7F3;110C 1164 11B6;C7F3;110C 1164 11B6; 
    // (쟳; 쟳; 쟳; 쟳; 쟳; ) HANGUL SYLLABLE JYAELH
    {
        std::array<uint32_t, 1> const source = {{ 0xC7F3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7F3 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_172)
{
    // C7F4;C7F4;110C 1164 11B7;C7F4;110C 1164 11B7; 
    // (쟴; 쟴; 쟴; 쟴; 쟴; ) HANGUL SYLLABLE JYAEM
    {
        std::array<uint32_t, 1> const source = {{ 0xC7F4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7F4 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_173)
{
    // C7F5;C7F5;110C 1164 11B8;C7F5;110C 1164 11B8; 
    // (쟵; 쟵; 쟵; 쟵; 쟵; ) HANGUL SYLLABLE JYAEB
    {
        std::array<uint32_t, 1> const source = {{ 0xC7F5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7F5 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_174)
{
    // C7F6;C7F6;110C 1164 11B9;C7F6;110C 1164 11B9; 
    // (쟶; 쟶; 쟶; 쟶; 쟶; ) HANGUL SYLLABLE JYAEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xC7F6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7F6 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_175)
{
    // C7F7;C7F7;110C 1164 11BA;C7F7;110C 1164 11BA; 
    // (쟷; 쟷; 쟷; 쟷; 쟷; ) HANGUL SYLLABLE JYAES
    {
        std::array<uint32_t, 1> const source = {{ 0xC7F7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7F7 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_176)
{
    // C7F8;C7F8;110C 1164 11BB;C7F8;110C 1164 11BB; 
    // (쟸; 쟸; 쟸; 쟸; 쟸; ) HANGUL SYLLABLE JYAESS
    {
        std::array<uint32_t, 1> const source = {{ 0xC7F8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7F8 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_177)
{
    // C7F9;C7F9;110C 1164 11BC;C7F9;110C 1164 11BC; 
    // (쟹; 쟹; 쟹; 쟹; 쟹; ) HANGUL SYLLABLE JYAENG
    {
        std::array<uint32_t, 1> const source = {{ 0xC7F9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7F9 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_178)
{
    // C7FA;C7FA;110C 1164 11BD;C7FA;110C 1164 11BD; 
    // (쟺; 쟺; 쟺; 쟺; 쟺; ) HANGUL SYLLABLE JYAEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xC7FA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7FA }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_179)
{
    // C7FB;C7FB;110C 1164 11BE;C7FB;110C 1164 11BE; 
    // (쟻; 쟻; 쟻; 쟻; 쟻; ) HANGUL SYLLABLE JYAEC
    {
        std::array<uint32_t, 1> const source = {{ 0xC7FB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7FB }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_180)
{
    // C7FC;C7FC;110C 1164 11BF;C7FC;110C 1164 11BF; 
    // (쟼; 쟼; 쟼; 쟼; 쟼; ) HANGUL SYLLABLE JYAEK
    {
        std::array<uint32_t, 1> const source = {{ 0xC7FC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7FC }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_181)
{
    // C7FD;C7FD;110C 1164 11C0;C7FD;110C 1164 11C0; 
    // (쟽; 쟽; 쟽; 쟽; 쟽; ) HANGUL SYLLABLE JYAET
    {
        std::array<uint32_t, 1> const source = {{ 0xC7FD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7FD }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_182)
{
    // C7FE;C7FE;110C 1164 11C1;C7FE;110C 1164 11C1; 
    // (쟾; 쟾; 쟾; 쟾; 쟾; ) HANGUL SYLLABLE JYAEP
    {
        std::array<uint32_t, 1> const source = {{ 0xC7FE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7FE }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_183)
{
    // C7FF;C7FF;110C 1164 11C2;C7FF;110C 1164 11C2; 
    // (쟿; 쟿; 쟿; 쟿; 쟿; ) HANGUL SYLLABLE JYAEH
    {
        std::array<uint32_t, 1> const source = {{ 0xC7FF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC7FF }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_184)
{
    // C800;C800;110C 1165;C800;110C 1165; 
    // (저; 저; 저; 저; 저; ) HANGUL SYLLABLE JEO
    {
        std::array<uint32_t, 1> const source = {{ 0xC800 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC800 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_185)
{
    // C801;C801;110C 1165 11A8;C801;110C 1165 11A8; 
    // (적; 적; 적; 적; 적; ) HANGUL SYLLABLE JEOG
    {
        std::array<uint32_t, 1> const source = {{ 0xC801 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC801 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_186)
{
    // C802;C802;110C 1165 11A9;C802;110C 1165 11A9; 
    // (젂; 젂; 젂; 젂; 젂; ) HANGUL SYLLABLE JEOGG
    {
        std::array<uint32_t, 1> const source = {{ 0xC802 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC802 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_187)
{
    // C803;C803;110C 1165 11AA;C803;110C 1165 11AA; 
    // (젃; 젃; 젃; 젃; 젃; ) HANGUL SYLLABLE JEOGS
    {
        std::array<uint32_t, 1> const source = {{ 0xC803 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC803 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_188)
{
    // C804;C804;110C 1165 11AB;C804;110C 1165 11AB; 
    // (전; 전; 전; 전; 전; ) HANGUL SYLLABLE JEON
    {
        std::array<uint32_t, 1> const source = {{ 0xC804 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC804 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_189)
{
    // C805;C805;110C 1165 11AC;C805;110C 1165 11AC; 
    // (젅; 젅; 젅; 젅; 젅; ) HANGUL SYLLABLE JEONJ
    {
        std::array<uint32_t, 1> const source = {{ 0xC805 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC805 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_190)
{
    // C806;C806;110C 1165 11AD;C806;110C 1165 11AD; 
    // (젆; 젆; 젆; 젆; 젆; ) HANGUL SYLLABLE JEONH
    {
        std::array<uint32_t, 1> const source = {{ 0xC806 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC806 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_191)
{
    // C807;C807;110C 1165 11AE;C807;110C 1165 11AE; 
    // (젇; 젇; 젇; 젇; 젇; ) HANGUL SYLLABLE JEOD
    {
        std::array<uint32_t, 1> const source = {{ 0xC807 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC807 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_192)
{
    // C808;C808;110C 1165 11AF;C808;110C 1165 11AF; 
    // (절; 절; 절; 절; 절; ) HANGUL SYLLABLE JEOL
    {
        std::array<uint32_t, 1> const source = {{ 0xC808 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC808 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_193)
{
    // C809;C809;110C 1165 11B0;C809;110C 1165 11B0; 
    // (젉; 젉; 젉; 젉; 젉; ) HANGUL SYLLABLE JEOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xC809 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC809 }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_194)
{
    // C80A;C80A;110C 1165 11B1;C80A;110C 1165 11B1; 
    // (젊; 젊; 젊; 젊; 젊; ) HANGUL SYLLABLE JEOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xC80A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC80A }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_195)
{
    // C80B;C80B;110C 1165 11B2;C80B;110C 1165 11B2; 
    // (젋; 젋; 젋; 젋; 젋; ) HANGUL SYLLABLE JEOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xC80B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC80B }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_196)
{
    // C80C;C80C;110C 1165 11B3;C80C;110C 1165 11B3; 
    // (젌; 젌; 젌; 젌; 젌; ) HANGUL SYLLABLE JEOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xC80C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC80C }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_197)
{
    // C80D;C80D;110C 1165 11B4;C80D;110C 1165 11B4; 
    // (젍; 젍; 젍; 젍; 젍; ) HANGUL SYLLABLE JEOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xC80D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC80D }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_198)
{
    // C80E;C80E;110C 1165 11B5;C80E;110C 1165 11B5; 
    // (젎; 젎; 젎; 젎; 젎; ) HANGUL SYLLABLE JEOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xC80E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC80E }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfc_047_199)
{
    // C80F;C80F;110C 1165 11B6;C80F;110C 1165 11B6; 
    // (젏; 젏; 젏; 젏; 젏; ) HANGUL SYLLABLE JEOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xC80F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0xC80F }};

        boost::text::normalize_to_nfc(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


