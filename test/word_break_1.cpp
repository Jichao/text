// Warning! This file is autogenerated.
#include <boost/text/word_break.hpp>

#include <gtest/gtest.h>

#include <algorithm>


TEST(word, breaks_1)
{
    // ÷ 000A ÷ 0061 ÷ 002C ÷	
    // ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000A ÷ 0308 ÷ 0061 ÷ 002C ÷	
    // ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000A ÷ 0031 ÷ 003A ÷	
    // ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000A ÷ 0308 ÷ 0031 ÷ 003A ÷	
    // ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000A ÷ 0031 ÷ 0027 ÷	
    // ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000A ÷ 0308 ÷ 0031 ÷ 0027 ÷	
    // ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000A ÷ 0031 ÷ 002C ÷	
    // ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000A ÷ 0308 ÷ 0031 ÷ 002C ÷	
    // ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000A ÷ 0031 ÷ 002E × 2060 ÷	
    // ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 000A ÷ 0308 ÷ 0031 ÷ 002E × 2060 ÷	
    // ÷ [0.2] <LINE FEED (LF)> (LF) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 000B ÷ 0001 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] <START OF HEADING> (Other) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0001);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 0001 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0001);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 000D ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 000D ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 000A ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 000A ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 000B ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] <LINE TABULATION> (Newline) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 000B ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 3031 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 3031 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0041 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 0041 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 003A ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COLON (MidLetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 003A ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 002C ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 002C ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 002E ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] FULL STOP (MidNumLet) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 002E ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0030 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] DIGIT ZERO (Numeric) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0030);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 0030 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0030);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 005F ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] LOW LINE (ExtendNumLet) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x005F);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 005F ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x005F);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 1F1E6 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x1F1E6);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 1F1E6 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x1F1E6);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 05D0 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x05D0);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 05D0 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x05D0);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0022 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] QUOTATION MARK (Double_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0022);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 0022 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0022);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0027 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] APOSTROPHE (Single_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 0027 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 261D ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 261D ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 1F3FB ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 1F3FB ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 2640 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 2640 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 1F466 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] BOY (EBG) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 1F466 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] BOY (EBG) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 00AD ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] SOFT HYPHEN (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x00AD);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 × 00AD ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x00AD);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 000B ÷ 0300 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0300);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 × 0300 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0300);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 000B ÷ 200D ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 × 200D ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 000B ÷ 0061 × 2060 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 000B ÷ 0308 ÷ 0061 × 2060 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 000B ÷ 0061 ÷ 003A ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 0061 ÷ 003A ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0061 ÷ 0027 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 0061 ÷ 0027 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0061 ÷ 0027 × 2060 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 000B ÷ 0308 ÷ 0061 ÷ 0027 × 2060 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 000B ÷ 0061 ÷ 002C ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 0061 ÷ 002C ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0031 ÷ 003A ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 0031 ÷ 003A ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0031 ÷ 0027 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 0031 ÷ 0027 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0031 ÷ 002C ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0308 ÷ 0031 ÷ 002C ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 000B ÷ 0031 ÷ 002E × 2060 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 000B ÷ 0308 ÷ 0031 ÷ 002E × 2060 ÷	
    // ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 3031 ÷ 0001 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0001);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 0001 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0001);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 ÷ 000D ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 000D ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 ÷ 000A ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 000A ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 ÷ 000B ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 000B ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 3031 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [13.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 3031 × 0308 × 3031 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 3031 ÷ 0041 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 0041 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 ÷ 003A ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] COLON (MidLetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 003A ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 ÷ 002C ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 002C ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 ÷ 002E ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 002E ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 ÷ 0030 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0030);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 0030 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0030);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 005F ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x005F);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 3031 × 0308 × 005F ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x005F);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 3031 ÷ 1F1E6 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x1F1E6);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 1F1E6 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x1F1E6);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 ÷ 05D0 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x05D0);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 05D0 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x05D0);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 ÷ 0022 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0022);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 0022 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0022);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 ÷ 0027 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 0027 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 ÷ 261D ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 261D ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 ÷ 1F3FB ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 1F3FB ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 ÷ 2640 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 2640 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 ÷ 1F466 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] BOY (EBG) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 1F466 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] BOY (EBG) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 00AD ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x00AD);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 3031 × 0308 × 00AD ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x00AD);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 3031 × 0300 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0300);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 3031 × 0308 × 0300 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0300);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 3031 × 200D ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 3031 × 0308 × 200D ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 3031 ÷ 0061 × 2060 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 3031 × 0308 ÷ 0061 × 2060 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 3031 ÷ 0061 ÷ 003A ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 0061 ÷ 003A ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 ÷ 0061 ÷ 0027 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 0061 ÷ 0027 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 ÷ 0061 ÷ 0027 × 2060 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 3031 × 0308 ÷ 0061 ÷ 0027 × 2060 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 3031 ÷ 0061 ÷ 002C ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 0061 ÷ 002C ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 ÷ 0031 ÷ 003A ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 0031 ÷ 003A ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 ÷ 0031 ÷ 0027 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 0031 ÷ 0027 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 ÷ 0031 ÷ 002C ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 × 0308 ÷ 0031 ÷ 002C ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 3031 ÷ 0031 ÷ 002E × 2060 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 3031 × 0308 ÷ 0031 ÷ 002E × 2060 ÷	
    // ÷ [0.2] VERTICAL KANA REPEAT MARK (Katakana) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0041 ÷ 0001 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0001);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0308 ÷ 0001 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0001);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 ÷ 000D ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0308 ÷ 000D ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 ÷ 000A ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0308 ÷ 000A ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 ÷ 000B ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0308 ÷ 000B ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 ÷ 3031 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0308 ÷ 3031 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0041 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [5.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0041 × 0308 × 0041 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0041 ÷ 003A ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0308 ÷ 003A ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 ÷ 002C ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0308 ÷ 002C ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 ÷ 002E ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0308 ÷ 002E ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0030 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [9.0] DIGIT ZERO (Numeric) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0030);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0041 × 0308 × 0030 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ZERO (Numeric) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0030);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0041 × 005F ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x005F);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0041 × 0308 × 005F ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [13.1] LOW LINE (ExtendNumLet) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x005F);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0041 ÷ 1F1E6 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x1F1E6);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0308 ÷ 1F1E6 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x1F1E6);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 05D0 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [5.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x05D0);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0041 × 0308 × 05D0 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x05D0);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0041 ÷ 0022 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0022);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0308 ÷ 0022 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0022);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 ÷ 0027 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0308 ÷ 0027 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 ÷ 261D ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0308 ÷ 261D ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 ÷ 1F3FB ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0308 ÷ 1F3FB ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 ÷ 2640 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0308 ÷ 2640 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 ÷ 1F466 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) ÷ [999.0] BOY (EBG) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0308 ÷ 1F466 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] BOY (EBG) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 00AD ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x00AD);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0041 × 0308 × 00AD ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x00AD);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0041 × 0300 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0300);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0041 × 0308 × 0300 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0300);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0041 × 200D ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0041 × 0308 × 200D ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0041 × 0061 × 2060 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [5.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0041 × 0308 × 0061 × 2060 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0041 × 0061 ÷ 003A ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0308 × 0061 ÷ 003A ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0061 ÷ 0027 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0308 × 0061 ÷ 0027 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0061 ÷ 0027 × 2060 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0041 × 0308 × 0061 ÷ 0027 × 2060 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0041 × 0061 ÷ 002C ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0308 × 0061 ÷ 002C ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0031 ÷ 003A ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0308 × 0031 ÷ 003A ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0031 ÷ 0027 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0308 × 0031 ÷ 0027 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0031 ÷ 002C ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0308 × 0031 ÷ 002C ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 0041 × 0031 ÷ 002E × 2060 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 0041 × 0308 × 0031 ÷ 002E × 2060 ÷	
    // ÷ [0.2] LATIN CAPITAL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [9.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 003A ÷ 0001 ÷	
    // ÷ [0.2] COLON (MidLetter) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0001);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 003A × 0308 ÷ 0001 ÷	
    // ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0001);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 003A ÷ 000D ÷	
    // ÷ [0.2] COLON (MidLetter) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 003A × 0308 ÷ 000D ÷	
    // ÷ [0.2] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.fsm_, prev_break.prop_, 0x000D);
        EXPECT_EQ(prev_break.break_, true);
    }

}
