// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_155_000)
{
    // 08B4 0062;	
    // (‎‎ࢴ‎‎) ARABIC LETTER KAF WITH DOT BELOW	[23F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08B4, 0x0062 };
    uint32_t const ces[9] = { 0x23F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_001)
{
    // 06AF 0021;	
    // (‎‎گ‎‎) ARABIC LETTER GAF	[23F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06AF, 0x0021 };
    uint32_t const ces[9] = { 0x23F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_002)
{
    // FB94 0021;	
    // (‎‎ﮔ‎‎) ARABIC LETTER GAF INITIAL FORM	[23F6 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB94, 0x0021 };
    uint32_t const ces[9] = { 0x23F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_003)
{
    // FB95 0021;	
    // (‎‎ﮕ‎‎) ARABIC LETTER GAF MEDIAL FORM	[23F6 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB95, 0x0021 };
    uint32_t const ces[9] = { 0x23F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_004)
{
    // FB93 0021;	
    // (‎‎ﮓ‎‎) ARABIC LETTER GAF FINAL FORM	[23F6 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB93, 0x0021 };
    uint32_t const ces[9] = { 0x23F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_005)
{
    // FB92 0021;	
    // (‎‎ﮒ‎‎) ARABIC LETTER GAF ISOLATED FORM	[23F6 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB92, 0x0021 };
    uint32_t const ces[9] = { 0x23F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_006)
{
    // 06AF 003F;	
    // (‎‎گ‎‎) ARABIC LETTER GAF	[23F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06AF, 0x003F };
    uint32_t const ces[9] = { 0x23F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_007)
{
    // FB94 003F;	
    // (‎‎ﮔ‎‎) ARABIC LETTER GAF INITIAL FORM	[23F6 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB94, 0x003F };
    uint32_t const ces[9] = { 0x23F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_008)
{
    // FB95 003F;	
    // (‎‎ﮕ‎‎) ARABIC LETTER GAF MEDIAL FORM	[23F6 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB95, 0x003F };
    uint32_t const ces[9] = { 0x23F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_009)
{
    // FB93 003F;	
    // (‎‎ﮓ‎‎) ARABIC LETTER GAF FINAL FORM	[23F6 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB93, 0x003F };
    uint32_t const ces[9] = { 0x23F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_010)
{
    // FB92 003F;	
    // (‎‎ﮒ‎‎) ARABIC LETTER GAF ISOLATED FORM	[23F6 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB92, 0x003F };
    uint32_t const ces[9] = { 0x23F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_011)
{
    // 06AF 0061;	
    // (‎‎گ‎‎) ARABIC LETTER GAF	[23F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06AF, 0x0061 };
    uint32_t const ces[9] = { 0x23F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_012)
{
    // 06AF 0041;	
    // (‎‎گ‎‎) ARABIC LETTER GAF	[23F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06AF, 0x0041 };
    uint32_t const ces[9] = { 0x23F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_013)
{
    // FB94 0061;	
    // (‎‎ﮔ‎‎) ARABIC LETTER GAF INITIAL FORM	[23F6 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB94, 0x0061 };
    uint32_t const ces[9] = { 0x23F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_014)
{
    // FB94 0041;	
    // (‎‎ﮔ‎‎) ARABIC LETTER GAF INITIAL FORM	[23F6 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFB94, 0x0041 };
    uint32_t const ces[9] = { 0x23F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_015)
{
    // FB95 0061;	
    // (‎‎ﮕ‎‎) ARABIC LETTER GAF MEDIAL FORM	[23F6 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB95, 0x0061 };
    uint32_t const ces[9] = { 0x23F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_016)
{
    // FB95 0041;	
    // (‎‎ﮕ‎‎) ARABIC LETTER GAF MEDIAL FORM	[23F6 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFB95, 0x0041 };
    uint32_t const ces[9] = { 0x23F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_017)
{
    // FB93 0061;	
    // (‎‎ﮓ‎‎) ARABIC LETTER GAF FINAL FORM	[23F6 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB93, 0x0061 };
    uint32_t const ces[9] = { 0x23F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_018)
{
    // FB93 0041;	
    // (‎‎ﮓ‎‎) ARABIC LETTER GAF FINAL FORM	[23F6 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFB93, 0x0041 };
    uint32_t const ces[9] = { 0x23F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_019)
{
    // FB92 0061;	
    // (‎‎ﮒ‎‎) ARABIC LETTER GAF ISOLATED FORM	[23F6 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB92, 0x0061 };
    uint32_t const ces[9] = { 0x23F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_020)
{
    // FB92 0041;	
    // (‎‎ﮒ‎‎) ARABIC LETTER GAF ISOLATED FORM	[23F6 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFB92, 0x0041 };
    uint32_t const ces[9] = { 0x23F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_021)
{
    // 06AF 0062;	
    // (‎‎گ‎‎) ARABIC LETTER GAF	[23F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06AF, 0x0062 };
    uint32_t const ces[9] = { 0x23F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_022)
{
    // FB94 0062;	
    // (‎‎ﮔ‎‎) ARABIC LETTER GAF INITIAL FORM	[23F6 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB94, 0x0062 };
    uint32_t const ces[9] = { 0x23F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_023)
{
    // FB95 0062;	
    // (‎‎ﮕ‎‎) ARABIC LETTER GAF MEDIAL FORM	[23F6 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB95, 0x0062 };
    uint32_t const ces[9] = { 0x23F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_024)
{
    // FB93 0062;	
    // (‎‎ﮓ‎‎) ARABIC LETTER GAF FINAL FORM	[23F6 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB93, 0x0062 };
    uint32_t const ces[9] = { 0x23F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_025)
{
    // FB92 0062;	
    // (‎‎ﮒ‎‎) ARABIC LETTER GAF ISOLATED FORM	[23F6 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB92, 0x0062 };
    uint32_t const ces[9] = { 0x23F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_026)
{
    // 08B0 0021;	
    // (‎‎ࢰ‎‎) ARABIC LETTER GAF WITH INVERTED STROKE	[23F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08B0, 0x0021 };
    uint32_t const ces[9] = { 0x23F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_027)
{
    // 08B0 003F;	
    // (‎‎ࢰ‎‎) ARABIC LETTER GAF WITH INVERTED STROKE	[23F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08B0, 0x003F };
    uint32_t const ces[9] = { 0x23F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_028)
{
    // 08B0 0061;	
    // (‎‎ࢰ‎‎) ARABIC LETTER GAF WITH INVERTED STROKE	[23F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08B0, 0x0061 };
    uint32_t const ces[9] = { 0x23F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_029)
{
    // 08B0 0041;	
    // (‎‎ࢰ‎‎) ARABIC LETTER GAF WITH INVERTED STROKE	[23F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08B0, 0x0041 };
    uint32_t const ces[9] = { 0x23F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_030)
{
    // 08B0 0062;	
    // (‎‎ࢰ‎‎) ARABIC LETTER GAF WITH INVERTED STROKE	[23F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08B0, 0x0062 };
    uint32_t const ces[9] = { 0x23F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_031)
{
    // 06B0 0021;	
    // (‎‎ڰ‎‎) ARABIC LETTER GAF WITH RING	[23F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B0, 0x0021 };
    uint32_t const ces[9] = { 0x23F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_032)
{
    // 06B0 003F;	
    // (‎‎ڰ‎‎) ARABIC LETTER GAF WITH RING	[23F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B0, 0x003F };
    uint32_t const ces[9] = { 0x23F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_033)
{
    // 06B0 0061;	
    // (‎‎ڰ‎‎) ARABIC LETTER GAF WITH RING	[23F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B0, 0x0061 };
    uint32_t const ces[9] = { 0x23F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_034)
{
    // 06B0 0041;	
    // (‎‎ڰ‎‎) ARABIC LETTER GAF WITH RING	[23F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06B0, 0x0041 };
    uint32_t const ces[9] = { 0x23F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_035)
{
    // 06B0 0062;	
    // (‎‎ڰ‎‎) ARABIC LETTER GAF WITH RING	[23F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B0, 0x0062 };
    uint32_t const ces[9] = { 0x23F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_036)
{
    // 06B1 0021;	
    // (‎‎ڱ‎‎) ARABIC LETTER NGOEH	[23F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B1, 0x0021 };
    uint32_t const ces[9] = { 0x23F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_037)
{
    // FB9C 0021;	
    // (‎‎ﮜ‎‎) ARABIC LETTER NGOEH INITIAL FORM	[23F9 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB9C, 0x0021 };
    uint32_t const ces[9] = { 0x23F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_038)
{
    // FB9D 0021;	
    // (‎‎ﮝ‎‎) ARABIC LETTER NGOEH MEDIAL FORM	[23F9 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB9D, 0x0021 };
    uint32_t const ces[9] = { 0x23F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_039)
{
    // FB9B 0021;	
    // (‎‎ﮛ‎‎) ARABIC LETTER NGOEH FINAL FORM	[23F9 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB9B, 0x0021 };
    uint32_t const ces[9] = { 0x23F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_040)
{
    // FB9A 0021;	
    // (‎‎ﮚ‎‎) ARABIC LETTER NGOEH ISOLATED FORM	[23F9 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB9A, 0x0021 };
    uint32_t const ces[9] = { 0x23F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_041)
{
    // 06B1 003F;	
    // (‎‎ڱ‎‎) ARABIC LETTER NGOEH	[23F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B1, 0x003F };
    uint32_t const ces[9] = { 0x23F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_042)
{
    // FB9C 003F;	
    // (‎‎ﮜ‎‎) ARABIC LETTER NGOEH INITIAL FORM	[23F9 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB9C, 0x003F };
    uint32_t const ces[9] = { 0x23F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_043)
{
    // FB9D 003F;	
    // (‎‎ﮝ‎‎) ARABIC LETTER NGOEH MEDIAL FORM	[23F9 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB9D, 0x003F };
    uint32_t const ces[9] = { 0x23F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_044)
{
    // FB9B 003F;	
    // (‎‎ﮛ‎‎) ARABIC LETTER NGOEH FINAL FORM	[23F9 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB9B, 0x003F };
    uint32_t const ces[9] = { 0x23F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_045)
{
    // FB9A 003F;	
    // (‎‎ﮚ‎‎) ARABIC LETTER NGOEH ISOLATED FORM	[23F9 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB9A, 0x003F };
    uint32_t const ces[9] = { 0x23F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_046)
{
    // 06B1 0061;	
    // (‎‎ڱ‎‎) ARABIC LETTER NGOEH	[23F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B1, 0x0061 };
    uint32_t const ces[9] = { 0x23F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_047)
{
    // 06B1 0041;	
    // (‎‎ڱ‎‎) ARABIC LETTER NGOEH	[23F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06B1, 0x0041 };
    uint32_t const ces[9] = { 0x23F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_048)
{
    // FB9C 0061;	
    // (‎‎ﮜ‎‎) ARABIC LETTER NGOEH INITIAL FORM	[23F9 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB9C, 0x0061 };
    uint32_t const ces[9] = { 0x23F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_049)
{
    // FB9C 0041;	
    // (‎‎ﮜ‎‎) ARABIC LETTER NGOEH INITIAL FORM	[23F9 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFB9C, 0x0041 };
    uint32_t const ces[9] = { 0x23F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_050)
{
    // FB9D 0061;	
    // (‎‎ﮝ‎‎) ARABIC LETTER NGOEH MEDIAL FORM	[23F9 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB9D, 0x0061 };
    uint32_t const ces[9] = { 0x23F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_051)
{
    // FB9D 0041;	
    // (‎‎ﮝ‎‎) ARABIC LETTER NGOEH MEDIAL FORM	[23F9 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFB9D, 0x0041 };
    uint32_t const ces[9] = { 0x23F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_052)
{
    // FB9B 0061;	
    // (‎‎ﮛ‎‎) ARABIC LETTER NGOEH FINAL FORM	[23F9 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB9B, 0x0061 };
    uint32_t const ces[9] = { 0x23F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_053)
{
    // FB9B 0041;	
    // (‎‎ﮛ‎‎) ARABIC LETTER NGOEH FINAL FORM	[23F9 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFB9B, 0x0041 };
    uint32_t const ces[9] = { 0x23F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_054)
{
    // FB9A 0061;	
    // (‎‎ﮚ‎‎) ARABIC LETTER NGOEH ISOLATED FORM	[23F9 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB9A, 0x0061 };
    uint32_t const ces[9] = { 0x23F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_055)
{
    // FB9A 0041;	
    // (‎‎ﮚ‎‎) ARABIC LETTER NGOEH ISOLATED FORM	[23F9 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFB9A, 0x0041 };
    uint32_t const ces[9] = { 0x23F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_056)
{
    // 06B1 0062;	
    // (‎‎ڱ‎‎) ARABIC LETTER NGOEH	[23F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B1, 0x0062 };
    uint32_t const ces[9] = { 0x23F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_057)
{
    // FB9C 0062;	
    // (‎‎ﮜ‎‎) ARABIC LETTER NGOEH INITIAL FORM	[23F9 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB9C, 0x0062 };
    uint32_t const ces[9] = { 0x23F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_058)
{
    // FB9D 0062;	
    // (‎‎ﮝ‎‎) ARABIC LETTER NGOEH MEDIAL FORM	[23F9 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB9D, 0x0062 };
    uint32_t const ces[9] = { 0x23F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_059)
{
    // FB9B 0062;	
    // (‎‎ﮛ‎‎) ARABIC LETTER NGOEH FINAL FORM	[23F9 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB9B, 0x0062 };
    uint32_t const ces[9] = { 0x23F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_060)
{
    // FB9A 0062;	
    // (‎‎ﮚ‎‎) ARABIC LETTER NGOEH ISOLATED FORM	[23F9 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB9A, 0x0062 };
    uint32_t const ces[9] = { 0x23F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_061)
{
    // 06B2 0021;	
    // (‎‎ڲ‎‎) ARABIC LETTER GAF WITH TWO DOTS BELOW	[23FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B2, 0x0021 };
    uint32_t const ces[9] = { 0x23FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_062)
{
    // 06B2 003F;	
    // (‎‎ڲ‎‎) ARABIC LETTER GAF WITH TWO DOTS BELOW	[23FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B2, 0x003F };
    uint32_t const ces[9] = { 0x23FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_063)
{
    // 06B2 0061;	
    // (‎‎ڲ‎‎) ARABIC LETTER GAF WITH TWO DOTS BELOW	[23FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B2, 0x0061 };
    uint32_t const ces[9] = { 0x23FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_064)
{
    // 06B2 0041;	
    // (‎‎ڲ‎‎) ARABIC LETTER GAF WITH TWO DOTS BELOW	[23FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06B2, 0x0041 };
    uint32_t const ces[9] = { 0x23FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_065)
{
    // 06B2 0062;	
    // (‎‎ڲ‎‎) ARABIC LETTER GAF WITH TWO DOTS BELOW	[23FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B2, 0x0062 };
    uint32_t const ces[9] = { 0x23FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_066)
{
    // 06B3 0021;	
    // (‎‎ڳ‎‎) ARABIC LETTER GUEH	[23FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B3, 0x0021 };
    uint32_t const ces[9] = { 0x23FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_067)
{
    // FB98 0021;	
    // (‎‎ﮘ‎‎) ARABIC LETTER GUEH INITIAL FORM	[23FB 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB98, 0x0021 };
    uint32_t const ces[9] = { 0x23FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_068)
{
    // FB99 0021;	
    // (‎‎ﮙ‎‎) ARABIC LETTER GUEH MEDIAL FORM	[23FB 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB99, 0x0021 };
    uint32_t const ces[9] = { 0x23FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_069)
{
    // FB97 0021;	
    // (‎‎ﮗ‎‎) ARABIC LETTER GUEH FINAL FORM	[23FB 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB97, 0x0021 };
    uint32_t const ces[9] = { 0x23FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_070)
{
    // FB96 0021;	
    // (‎‎ﮖ‎‎) ARABIC LETTER GUEH ISOLATED FORM	[23FB 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB96, 0x0021 };
    uint32_t const ces[9] = { 0x23FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_071)
{
    // 06B3 003F;	
    // (‎‎ڳ‎‎) ARABIC LETTER GUEH	[23FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B3, 0x003F };
    uint32_t const ces[9] = { 0x23FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_072)
{
    // FB98 003F;	
    // (‎‎ﮘ‎‎) ARABIC LETTER GUEH INITIAL FORM	[23FB 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB98, 0x003F };
    uint32_t const ces[9] = { 0x23FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_073)
{
    // FB99 003F;	
    // (‎‎ﮙ‎‎) ARABIC LETTER GUEH MEDIAL FORM	[23FB 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB99, 0x003F };
    uint32_t const ces[9] = { 0x23FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_074)
{
    // FB97 003F;	
    // (‎‎ﮗ‎‎) ARABIC LETTER GUEH FINAL FORM	[23FB 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB97, 0x003F };
    uint32_t const ces[9] = { 0x23FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_075)
{
    // FB96 003F;	
    // (‎‎ﮖ‎‎) ARABIC LETTER GUEH ISOLATED FORM	[23FB 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB96, 0x003F };
    uint32_t const ces[9] = { 0x23FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_076)
{
    // 06B3 0061;	
    // (‎‎ڳ‎‎) ARABIC LETTER GUEH	[23FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B3, 0x0061 };
    uint32_t const ces[9] = { 0x23FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_077)
{
    // 06B3 0041;	
    // (‎‎ڳ‎‎) ARABIC LETTER GUEH	[23FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06B3, 0x0041 };
    uint32_t const ces[9] = { 0x23FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_078)
{
    // FB98 0061;	
    // (‎‎ﮘ‎‎) ARABIC LETTER GUEH INITIAL FORM	[23FB 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB98, 0x0061 };
    uint32_t const ces[9] = { 0x23FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_079)
{
    // FB98 0041;	
    // (‎‎ﮘ‎‎) ARABIC LETTER GUEH INITIAL FORM	[23FB 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFB98, 0x0041 };
    uint32_t const ces[9] = { 0x23FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_080)
{
    // FB99 0061;	
    // (‎‎ﮙ‎‎) ARABIC LETTER GUEH MEDIAL FORM	[23FB 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB99, 0x0061 };
    uint32_t const ces[9] = { 0x23FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_081)
{
    // FB99 0041;	
    // (‎‎ﮙ‎‎) ARABIC LETTER GUEH MEDIAL FORM	[23FB 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFB99, 0x0041 };
    uint32_t const ces[9] = { 0x23FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_082)
{
    // FB97 0061;	
    // (‎‎ﮗ‎‎) ARABIC LETTER GUEH FINAL FORM	[23FB 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB97, 0x0061 };
    uint32_t const ces[9] = { 0x23FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_083)
{
    // FB97 0041;	
    // (‎‎ﮗ‎‎) ARABIC LETTER GUEH FINAL FORM	[23FB 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFB97, 0x0041 };
    uint32_t const ces[9] = { 0x23FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_084)
{
    // FB96 0061;	
    // (‎‎ﮖ‎‎) ARABIC LETTER GUEH ISOLATED FORM	[23FB 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB96, 0x0061 };
    uint32_t const ces[9] = { 0x23FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_085)
{
    // FB96 0041;	
    // (‎‎ﮖ‎‎) ARABIC LETTER GUEH ISOLATED FORM	[23FB 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFB96, 0x0041 };
    uint32_t const ces[9] = { 0x23FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_086)
{
    // 06B3 0062;	
    // (‎‎ڳ‎‎) ARABIC LETTER GUEH	[23FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B3, 0x0062 };
    uint32_t const ces[9] = { 0x23FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_087)
{
    // FB98 0062;	
    // (‎‎ﮘ‎‎) ARABIC LETTER GUEH INITIAL FORM	[23FB 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB98, 0x0062 };
    uint32_t const ces[9] = { 0x23FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_088)
{
    // FB99 0062;	
    // (‎‎ﮙ‎‎) ARABIC LETTER GUEH MEDIAL FORM	[23FB 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB99, 0x0062 };
    uint32_t const ces[9] = { 0x23FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_089)
{
    // FB97 0062;	
    // (‎‎ﮗ‎‎) ARABIC LETTER GUEH FINAL FORM	[23FB 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB97, 0x0062 };
    uint32_t const ces[9] = { 0x23FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_090)
{
    // FB96 0062;	
    // (‎‎ﮖ‎‎) ARABIC LETTER GUEH ISOLATED FORM	[23FB 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB96, 0x0062 };
    uint32_t const ces[9] = { 0x23FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_091)
{
    // 06B4 0021;	
    // (‎‎ڴ‎‎) ARABIC LETTER GAF WITH THREE DOTS ABOVE	[23FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B4, 0x0021 };
    uint32_t const ces[9] = { 0x23FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_092)
{
    // 06B4 003F;	
    // (‎‎ڴ‎‎) ARABIC LETTER GAF WITH THREE DOTS ABOVE	[23FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B4, 0x003F };
    uint32_t const ces[9] = { 0x23FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_093)
{
    // 06B4 0061;	
    // (‎‎ڴ‎‎) ARABIC LETTER GAF WITH THREE DOTS ABOVE	[23FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B4, 0x0061 };
    uint32_t const ces[9] = { 0x23FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_094)
{
    // 06B4 0041;	
    // (‎‎ڴ‎‎) ARABIC LETTER GAF WITH THREE DOTS ABOVE	[23FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06B4, 0x0041 };
    uint32_t const ces[9] = { 0x23FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_095)
{
    // 06B4 0062;	
    // (‎‎ڴ‎‎) ARABIC LETTER GAF WITH THREE DOTS ABOVE	[23FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B4, 0x0062 };
    uint32_t const ces[9] = { 0x23FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_096)
{
    // 0762 0021;	
    // (‎‎ݢ‎‎) ARABIC LETTER KEHEH WITH DOT ABOVE	[23FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0762, 0x0021 };
    uint32_t const ces[9] = { 0x23FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_097)
{
    // 0762 003F;	
    // (‎‎ݢ‎‎) ARABIC LETTER KEHEH WITH DOT ABOVE	[23FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0762, 0x003F };
    uint32_t const ces[9] = { 0x23FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_098)
{
    // 0762 0061;	
    // (‎‎ݢ‎‎) ARABIC LETTER KEHEH WITH DOT ABOVE	[23FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0762, 0x0061 };
    uint32_t const ces[9] = { 0x23FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_099)
{
    // 0762 0041;	
    // (‎‎ݢ‎‎) ARABIC LETTER KEHEH WITH DOT ABOVE	[23FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0762, 0x0041 };
    uint32_t const ces[9] = { 0x23FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_100)
{
    // 0762 0062;	
    // (‎‎ݢ‎‎) ARABIC LETTER KEHEH WITH DOT ABOVE	[23FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0762, 0x0062 };
    uint32_t const ces[9] = { 0x23FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_101)
{
    // 063B 0021;	
    // (‎‎ػ‎‎) ARABIC LETTER KEHEH WITH TWO DOTS ABOVE	[23FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x063B, 0x0021 };
    uint32_t const ces[9] = { 0x23FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_102)
{
    // 063B 003F;	
    // (‎‎ػ‎‎) ARABIC LETTER KEHEH WITH TWO DOTS ABOVE	[23FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x063B, 0x003F };
    uint32_t const ces[9] = { 0x23FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_103)
{
    // 063B 0061;	
    // (‎‎ػ‎‎) ARABIC LETTER KEHEH WITH TWO DOTS ABOVE	[23FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x063B, 0x0061 };
    uint32_t const ces[9] = { 0x23FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_104)
{
    // 063B 0041;	
    // (‎‎ػ‎‎) ARABIC LETTER KEHEH WITH TWO DOTS ABOVE	[23FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x063B, 0x0041 };
    uint32_t const ces[9] = { 0x23FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_105)
{
    // 063B 0062;	
    // (‎‎ػ‎‎) ARABIC LETTER KEHEH WITH TWO DOTS ABOVE	[23FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x063B, 0x0062 };
    uint32_t const ces[9] = { 0x23FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_106)
{
    // 063C 0021;	
    // (‎‎ؼ‎‎) ARABIC LETTER KEHEH WITH THREE DOTS BELOW	[23FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x063C, 0x0021 };
    uint32_t const ces[9] = { 0x23FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_107)
{
    // 063C 003F;	
    // (‎‎ؼ‎‎) ARABIC LETTER KEHEH WITH THREE DOTS BELOW	[23FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x063C, 0x003F };
    uint32_t const ces[9] = { 0x23FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_108)
{
    // 063C 0061;	
    // (‎‎ؼ‎‎) ARABIC LETTER KEHEH WITH THREE DOTS BELOW	[23FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x063C, 0x0061 };
    uint32_t const ces[9] = { 0x23FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_109)
{
    // 063C 0041;	
    // (‎‎ؼ‎‎) ARABIC LETTER KEHEH WITH THREE DOTS BELOW	[23FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x063C, 0x0041 };
    uint32_t const ces[9] = { 0x23FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_110)
{
    // 063C 0062;	
    // (‎‎ؼ‎‎) ARABIC LETTER KEHEH WITH THREE DOTS BELOW	[23FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x063C, 0x0062 };
    uint32_t const ces[9] = { 0x23FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_111)
{
    // 0763 0021;	
    // (‎‎ݣ‎‎) ARABIC LETTER KEHEH WITH THREE DOTS ABOVE	[2400 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0763, 0x0021 };
    uint32_t const ces[9] = { 0x2400, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_112)
{
    // 0763 003F;	
    // (‎‎ݣ‎‎) ARABIC LETTER KEHEH WITH THREE DOTS ABOVE	[2400 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0763, 0x003F };
    uint32_t const ces[9] = { 0x2400, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_113)
{
    // 0763 0061;	
    // (‎‎ݣ‎‎) ARABIC LETTER KEHEH WITH THREE DOTS ABOVE	[2400 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0763, 0x0061 };
    uint32_t const ces[9] = { 0x2400, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_114)
{
    // 0763 0041;	
    // (‎‎ݣ‎‎) ARABIC LETTER KEHEH WITH THREE DOTS ABOVE	[2400 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0763, 0x0041 };
    uint32_t const ces[9] = { 0x2400, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_115)
{
    // 0763 0062;	
    // (‎‎ݣ‎‎) ARABIC LETTER KEHEH WITH THREE DOTS ABOVE	[2400 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0763, 0x0062 };
    uint32_t const ces[9] = { 0x2400, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_116)
{
    // 0764 0021;	
    // (‎‎ݤ‎‎) ARABIC LETTER KEHEH WITH THREE DOTS POINTING UPWARDS BELOW	[2401 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0764, 0x0021 };
    uint32_t const ces[9] = { 0x2401, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_117)
{
    // 0764 003F;	
    // (‎‎ݤ‎‎) ARABIC LETTER KEHEH WITH THREE DOTS POINTING UPWARDS BELOW	[2401 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0764, 0x003F };
    uint32_t const ces[9] = { 0x2401, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_118)
{
    // 0764 0061;	
    // (‎‎ݤ‎‎) ARABIC LETTER KEHEH WITH THREE DOTS POINTING UPWARDS BELOW	[2401 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0764, 0x0061 };
    uint32_t const ces[9] = { 0x2401, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_119)
{
    // 0764 0041;	
    // (‎‎ݤ‎‎) ARABIC LETTER KEHEH WITH THREE DOTS POINTING UPWARDS BELOW	[2401 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0764, 0x0041 };
    uint32_t const ces[9] = { 0x2401, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_120)
{
    // 0764 0062;	
    // (‎‎ݤ‎‎) ARABIC LETTER KEHEH WITH THREE DOTS POINTING UPWARDS BELOW	[2401 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0764, 0x0062 };
    uint32_t const ces[9] = { 0x2401, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_121)
{
    // 0644 0021;	
    // (‎‎ل‎‎) ARABIC LETTER LAM	[2402 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0644, 0x0021 };
    uint32_t const ces[9] = { 0x2402, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_122)
{
    // 1EE0B 0021;	
    // (‎‎𞸋‎‎) ARABIC MATHEMATICAL LAM	[2402 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE0B, 0x0021 };
    uint32_t const ces[9] = { 0x2402, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_123)
{
    // 1EE2B 0021;	
    // (‎‎𞸫‎‎) ARABIC MATHEMATICAL INITIAL LAM	[2402 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE2B, 0x0021 };
    uint32_t const ces[9] = { 0x2402, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_124)
{
    // 1EE4B 0021;	
    // (‎‎𞹋‎‎) ARABIC MATHEMATICAL TAILED LAM	[2402 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE4B, 0x0021 };
    uint32_t const ces[9] = { 0x2402, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_125)
{
    // 1EE8B 0021;	
    // (‎‎𞺋‎‎) ARABIC MATHEMATICAL LOOPED LAM	[2402 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE8B, 0x0021 };
    uint32_t const ces[9] = { 0x2402, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_126)
{
    // 1EEAB 0021;	
    // (‎‎𞺫‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK LAM	[2402 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEAB, 0x0021 };
    uint32_t const ces[9] = { 0x2402, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_127)
{
    // FEDF 0021;	
    // (‎‎ﻟ‎‎) ARABIC LETTER LAM INITIAL FORM	[2402 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEDF, 0x0021 };
    uint32_t const ces[9] = { 0x2402, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_128)
{
    // FEE0 0021;	
    // (‎‎ﻠ‎‎) ARABIC LETTER LAM MEDIAL FORM	[2402 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEE0, 0x0021 };
    uint32_t const ces[9] = { 0x2402, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_129)
{
    // FEDE 0021;	
    // (‎‎ﻞ‎‎) ARABIC LETTER LAM FINAL FORM	[2402 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEDE, 0x0021 };
    uint32_t const ces[9] = { 0x2402, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_130)
{
    // FEDD 0021;	
    // (‎‎ﻝ‎‎) ARABIC LETTER LAM ISOLATED FORM	[2402 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEDD, 0x0021 };
    uint32_t const ces[9] = { 0x2402, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_131)
{
    // 0644 003F;	
    // (‎‎ل‎‎) ARABIC LETTER LAM	[2402 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0644, 0x003F };
    uint32_t const ces[9] = { 0x2402, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_132)
{
    // 1EE0B 003F;	
    // (‎‎𞸋‎‎) ARABIC MATHEMATICAL LAM	[2402 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE0B, 0x003F };
    uint32_t const ces[9] = { 0x2402, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_133)
{
    // 1EE2B 003F;	
    // (‎‎𞸫‎‎) ARABIC MATHEMATICAL INITIAL LAM	[2402 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE2B, 0x003F };
    uint32_t const ces[9] = { 0x2402, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_134)
{
    // 1EE4B 003F;	
    // (‎‎𞹋‎‎) ARABIC MATHEMATICAL TAILED LAM	[2402 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE4B, 0x003F };
    uint32_t const ces[9] = { 0x2402, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_135)
{
    // 1EE8B 003F;	
    // (‎‎𞺋‎‎) ARABIC MATHEMATICAL LOOPED LAM	[2402 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE8B, 0x003F };
    uint32_t const ces[9] = { 0x2402, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_136)
{
    // 1EEAB 003F;	
    // (‎‎𞺫‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK LAM	[2402 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEAB, 0x003F };
    uint32_t const ces[9] = { 0x2402, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_137)
{
    // FEDF 003F;	
    // (‎‎ﻟ‎‎) ARABIC LETTER LAM INITIAL FORM	[2402 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEDF, 0x003F };
    uint32_t const ces[9] = { 0x2402, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_138)
{
    // FEE0 003F;	
    // (‎‎ﻠ‎‎) ARABIC LETTER LAM MEDIAL FORM	[2402 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEE0, 0x003F };
    uint32_t const ces[9] = { 0x2402, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_139)
{
    // FEDE 003F;	
    // (‎‎ﻞ‎‎) ARABIC LETTER LAM FINAL FORM	[2402 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEDE, 0x003F };
    uint32_t const ces[9] = { 0x2402, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_140)
{
    // FEDD 003F;	
    // (‎‎ﻝ‎‎) ARABIC LETTER LAM ISOLATED FORM	[2402 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEDD, 0x003F };
    uint32_t const ces[9] = { 0x2402, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_141)
{
    // 0644 0061;	
    // (‎‎ل‎‎) ARABIC LETTER LAM	[2402 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0644, 0x0061 };
    uint32_t const ces[9] = { 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_142)
{
    // 0644 0041;	
    // (‎‎ل‎‎) ARABIC LETTER LAM	[2402 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0644, 0x0041 };
    uint32_t const ces[9] = { 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_143)
{
    // 1EE0B 0061;	
    // (‎‎𞸋‎‎) ARABIC MATHEMATICAL LAM	[2402 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE0B, 0x0061 };
    uint32_t const ces[9] = { 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_144)
{
    // 1EE2B 0061;	
    // (‎‎𞸫‎‎) ARABIC MATHEMATICAL INITIAL LAM	[2402 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE2B, 0x0061 };
    uint32_t const ces[9] = { 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_145)
{
    // 1EE4B 0061;	
    // (‎‎𞹋‎‎) ARABIC MATHEMATICAL TAILED LAM	[2402 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE4B, 0x0061 };
    uint32_t const ces[9] = { 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_146)
{
    // 1EE8B 0061;	
    // (‎‎𞺋‎‎) ARABIC MATHEMATICAL LOOPED LAM	[2402 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE8B, 0x0061 };
    uint32_t const ces[9] = { 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_147)
{
    // 1EEAB 0061;	
    // (‎‎𞺫‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK LAM	[2402 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEAB, 0x0061 };
    uint32_t const ces[9] = { 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_148)
{
    // 1EE0B 0041;	
    // (‎‎𞸋‎‎) ARABIC MATHEMATICAL LAM	[2402 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE0B, 0x0041 };
    uint32_t const ces[9] = { 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_149)
{
    // 1EE2B 0041;	
    // (‎‎𞸫‎‎) ARABIC MATHEMATICAL INITIAL LAM	[2402 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE2B, 0x0041 };
    uint32_t const ces[9] = { 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_150)
{
    // 1EE4B 0041;	
    // (‎‎𞹋‎‎) ARABIC MATHEMATICAL TAILED LAM	[2402 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE4B, 0x0041 };
    uint32_t const ces[9] = { 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_151)
{
    // 1EE8B 0041;	
    // (‎‎𞺋‎‎) ARABIC MATHEMATICAL LOOPED LAM	[2402 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE8B, 0x0041 };
    uint32_t const ces[9] = { 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_152)
{
    // 1EEAB 0041;	
    // (‎‎𞺫‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK LAM	[2402 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EEAB, 0x0041 };
    uint32_t const ces[9] = { 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_153)
{
    // FEDF 0061;	
    // (‎‎ﻟ‎‎) ARABIC LETTER LAM INITIAL FORM	[2402 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEDF, 0x0061 };
    uint32_t const ces[9] = { 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_154)
{
    // FEDF 0041;	
    // (‎‎ﻟ‎‎) ARABIC LETTER LAM INITIAL FORM	[2402 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFEDF, 0x0041 };
    uint32_t const ces[9] = { 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_155)
{
    // FEE0 0061;	
    // (‎‎ﻠ‎‎) ARABIC LETTER LAM MEDIAL FORM	[2402 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEE0, 0x0061 };
    uint32_t const ces[9] = { 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_156)
{
    // FEE0 0041;	
    // (‎‎ﻠ‎‎) ARABIC LETTER LAM MEDIAL FORM	[2402 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFEE0, 0x0041 };
    uint32_t const ces[9] = { 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_157)
{
    // FEDE 0061;	
    // (‎‎ﻞ‎‎) ARABIC LETTER LAM FINAL FORM	[2402 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEDE, 0x0061 };
    uint32_t const ces[9] = { 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_158)
{
    // FEDE 0041;	
    // (‎‎ﻞ‎‎) ARABIC LETTER LAM FINAL FORM	[2402 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFEDE, 0x0041 };
    uint32_t const ces[9] = { 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_159)
{
    // FEDD 0061;	
    // (‎‎ﻝ‎‎) ARABIC LETTER LAM ISOLATED FORM	[2402 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEDD, 0x0061 };
    uint32_t const ces[9] = { 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_160)
{
    // FEDD 0041;	
    // (‎‎ﻝ‎‎) ARABIC LETTER LAM ISOLATED FORM	[2402 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFEDD, 0x0041 };
    uint32_t const ces[9] = { 0x2402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_161)
{
    // 0644 0062;	
    // (‎‎ل‎‎) ARABIC LETTER LAM	[2402 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0644, 0x0062 };
    uint32_t const ces[9] = { 0x2402, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_162)
{
    // 1EE0B 0062;	
    // (‎‎𞸋‎‎) ARABIC MATHEMATICAL LAM	[2402 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE0B, 0x0062 };
    uint32_t const ces[9] = { 0x2402, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_163)
{
    // 1EE2B 0062;	
    // (‎‎𞸫‎‎) ARABIC MATHEMATICAL INITIAL LAM	[2402 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE2B, 0x0062 };
    uint32_t const ces[9] = { 0x2402, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_164)
{
    // 1EE4B 0062;	
    // (‎‎𞹋‎‎) ARABIC MATHEMATICAL TAILED LAM	[2402 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE4B, 0x0062 };
    uint32_t const ces[9] = { 0x2402, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_165)
{
    // 1EE8B 0062;	
    // (‎‎𞺋‎‎) ARABIC MATHEMATICAL LOOPED LAM	[2402 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE8B, 0x0062 };
    uint32_t const ces[9] = { 0x2402, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_166)
{
    // 1EEAB 0062;	
    // (‎‎𞺫‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK LAM	[2402 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEAB, 0x0062 };
    uint32_t const ces[9] = { 0x2402, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_167)
{
    // FEDF 0062;	
    // (‎‎ﻟ‎‎) ARABIC LETTER LAM INITIAL FORM	[2402 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEDF, 0x0062 };
    uint32_t const ces[9] = { 0x2402, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_168)
{
    // FEE0 0062;	
    // (‎‎ﻠ‎‎) ARABIC LETTER LAM MEDIAL FORM	[2402 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEE0, 0x0062 };
    uint32_t const ces[9] = { 0x2402, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_169)
{
    // FEDE 0062;	
    // (‎‎ﻞ‎‎) ARABIC LETTER LAM FINAL FORM	[2402 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEDE, 0x0062 };
    uint32_t const ces[9] = { 0x2402, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_170)
{
    // FEDD 0062;	
    // (‎‎ﻝ‎‎) ARABIC LETTER LAM ISOLATED FORM	[2402 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEDD, 0x0062 };
    uint32_t const ces[9] = { 0x2402, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_171)
{
    // FEF6 0021;	
    // (‎‎ﻶ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH MADDA ABOVE FINAL FORM	[2402 2364 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFEF6, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x2364, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_172)
{
    // FEF5 0021;	
    // (‎‎ﻵ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH MADDA ABOVE ISOLATED FORM	[2402 2364 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFEF5, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x2364, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_173)
{
    // FEF6 003F;	
    // (‎‎ﻶ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH MADDA ABOVE FINAL FORM	[2402 2364 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFEF6, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x2364, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_174)
{
    // FEF5 003F;	
    // (‎‎ﻵ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH MADDA ABOVE ISOLATED FORM	[2402 2364 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFEF5, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x2364, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_175)
{
    // FEF6 0061;	
    // (‎‎ﻶ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH MADDA ABOVE FINAL FORM	[2402 2364 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFEF6, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x2364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_176)
{
    // FEF6 0041;	
    // (‎‎ﻶ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH MADDA ABOVE FINAL FORM	[2402 2364 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFEF6, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x2364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_177)
{
    // FEF5 0061;	
    // (‎‎ﻵ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH MADDA ABOVE ISOLATED FORM	[2402 2364 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFEF5, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x2364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_178)
{
    // FEF5 0041;	
    // (‎‎ﻵ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH MADDA ABOVE ISOLATED FORM	[2402 2364 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFEF5, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x2364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_179)
{
    // FEF6 0062;	
    // (‎‎ﻶ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH MADDA ABOVE FINAL FORM	[2402 2364 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFEF6, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x2364, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_180)
{
    // FEF5 0062;	
    // (‎‎ﻵ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH MADDA ABOVE ISOLATED FORM	[2402 2364 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFEF5, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x2364, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_181)
{
    // FEF8 0021;	
    // (‎‎ﻸ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH HAMZA ABOVE FINAL FORM	[2402 2365 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFEF8, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x2365, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_182)
{
    // FEF7 0021;	
    // (‎‎ﻷ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH HAMZA ABOVE ISOLATED FORM	[2402 2365 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFEF7, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x2365, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_183)
{
    // FEF8 003F;	
    // (‎‎ﻸ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH HAMZA ABOVE FINAL FORM	[2402 2365 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFEF8, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x2365, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_184)
{
    // FEF7 003F;	
    // (‎‎ﻷ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH HAMZA ABOVE ISOLATED FORM	[2402 2365 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFEF7, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x2365, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_185)
{
    // FEF8 0061;	
    // (‎‎ﻸ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH HAMZA ABOVE FINAL FORM	[2402 2365 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFEF8, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x2365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_186)
{
    // FEF8 0041;	
    // (‎‎ﻸ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH HAMZA ABOVE FINAL FORM	[2402 2365 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFEF8, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x2365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_187)
{
    // FEF7 0061;	
    // (‎‎ﻷ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH HAMZA ABOVE ISOLATED FORM	[2402 2365 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFEF7, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x2365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_188)
{
    // FEF7 0041;	
    // (‎‎ﻷ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH HAMZA ABOVE ISOLATED FORM	[2402 2365 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFEF7, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x2365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_189)
{
    // FEF8 0062;	
    // (‎‎ﻸ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH HAMZA ABOVE FINAL FORM	[2402 2365 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFEF8, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x2365, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_190)
{
    // FEF7 0062;	
    // (‎‎ﻷ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH HAMZA ABOVE ISOLATED FORM	[2402 2365 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFEF7, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x2365, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_191)
{
    // FEFA 0021;	
    // (‎‎ﻺ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW FINAL FORM	[2402 2369 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFEFA, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x2369, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_192)
{
    // FEF9 0021;	
    // (‎‎ﻹ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW ISOLATED FORM	[2402 2369 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFEF9, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x2369, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_193)
{
    // FEFA 003F;	
    // (‎‎ﻺ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW FINAL FORM	[2402 2369 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFEFA, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x2369, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_194)
{
    // FEF9 003F;	
    // (‎‎ﻹ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW ISOLATED FORM	[2402 2369 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFEF9, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x2369, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_195)
{
    // FEFA 0061;	
    // (‎‎ﻺ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW FINAL FORM	[2402 2369 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFEFA, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x2369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_196)
{
    // FEFA 0041;	
    // (‎‎ﻺ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW FINAL FORM	[2402 2369 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFEFA, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x2369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_197)
{
    // FEF9 0061;	
    // (‎‎ﻹ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW ISOLATED FORM	[2402 2369 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFEF9, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x2369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_198)
{
    // FEF9 0041;	
    // (‎‎ﻹ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW ISOLATED FORM	[2402 2369 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFEF9, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x2369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_199)
{
    // FEFA 0062;	
    // (‎‎ﻺ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW FINAL FORM	[2402 2369 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFEFA, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x2369, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_200)
{
    // FEF9 0062;	
    // (‎‎ﻹ‎‎) ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW ISOLATED FORM	[2402 2369 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFEF9, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x2369, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_201)
{
    // FEFC 0021;	
    // (‎‎ﻼ‎‎) ARABIC LIGATURE LAM WITH ALEF FINAL FORM	[2402 2371 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFEFC, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x2371, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_202)
{
    // FEFB 0021;	
    // (‎‎ﻻ‎‎) ARABIC LIGATURE LAM WITH ALEF ISOLATED FORM	[2402 2371 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFEFB, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x2371, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_203)
{
    // FEFC 003F;	
    // (‎‎ﻼ‎‎) ARABIC LIGATURE LAM WITH ALEF FINAL FORM	[2402 2371 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFEFC, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x2371, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_204)
{
    // FEFB 003F;	
    // (‎‎ﻻ‎‎) ARABIC LIGATURE LAM WITH ALEF ISOLATED FORM	[2402 2371 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFEFB, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x2371, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_205)
{
    // FEFC 0061;	
    // (‎‎ﻼ‎‎) ARABIC LIGATURE LAM WITH ALEF FINAL FORM	[2402 2371 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFEFC, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_206)
{
    // FEFC 0041;	
    // (‎‎ﻼ‎‎) ARABIC LIGATURE LAM WITH ALEF FINAL FORM	[2402 2371 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFEFC, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_207)
{
    // FEFB 0061;	
    // (‎‎ﻻ‎‎) ARABIC LIGATURE LAM WITH ALEF ISOLATED FORM	[2402 2371 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFEFB, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_208)
{
    // FEFB 0041;	
    // (‎‎ﻻ‎‎) ARABIC LIGATURE LAM WITH ALEF ISOLATED FORM	[2402 2371 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFEFB, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_209)
{
    // FEFC 0062;	
    // (‎‎ﻼ‎‎) ARABIC LIGATURE LAM WITH ALEF FINAL FORM	[2402 2371 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFEFC, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x2371, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_210)
{
    // FEFB 0062;	
    // (‎‎ﻻ‎‎) ARABIC LIGATURE LAM WITH ALEF ISOLATED FORM	[2402 2371 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFEFB, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x2371, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_211)
{
    // FCC9 0021;	
    // (‎‎ﳉ‎‎) ARABIC LIGATURE LAM WITH JEEM INITIAL FORM	[2402 238B 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCC9, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_212)
{
    // FC3F 0021;	
    // (‎‎ﰿ‎‎) ARABIC LIGATURE LAM WITH JEEM ISOLATED FORM	[2402 238B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC3F, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_213)
{
    // FCC9 003F;	
    // (‎‎ﳉ‎‎) ARABIC LIGATURE LAM WITH JEEM INITIAL FORM	[2402 238B 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCC9, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_214)
{
    // FC3F 003F;	
    // (‎‎ﰿ‎‎) ARABIC LIGATURE LAM WITH JEEM ISOLATED FORM	[2402 238B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC3F, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_215)
{
    // FCC9 0061;	
    // (‎‎ﳉ‎‎) ARABIC LIGATURE LAM WITH JEEM INITIAL FORM	[2402 238B 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCC9, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_216)
{
    // FCC9 0041;	
    // (‎‎ﳉ‎‎) ARABIC LIGATURE LAM WITH JEEM INITIAL FORM	[2402 238B 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCC9, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_217)
{
    // FC3F 0061;	
    // (‎‎ﰿ‎‎) ARABIC LIGATURE LAM WITH JEEM ISOLATED FORM	[2402 238B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC3F, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_218)
{
    // FC3F 0041;	
    // (‎‎ﰿ‎‎) ARABIC LIGATURE LAM WITH JEEM ISOLATED FORM	[2402 238B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC3F, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_219)
{
    // FCC9 0062;	
    // (‎‎ﳉ‎‎) ARABIC LIGATURE LAM WITH JEEM INITIAL FORM	[2402 238B 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCC9, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_220)
{
    // FC3F 0062;	
    // (‎‎ﰿ‎‎) ARABIC LIGATURE LAM WITH JEEM ISOLATED FORM	[2402 238B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC3F, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_221)
{
    // FD83 0021;	
    // (‎‎ﶃ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH JEEM INITIAL FORM	[2402 238B 238B 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD83, 0x0021 };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_222)
{
    // FD84 0021;	
    // (‎‎ﶄ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH JEEM FINAL FORM	[2402 238B 238B 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD84, 0x0021 };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_223)
{
    // FD83 003F;	
    // (‎‎ﶃ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH JEEM INITIAL FORM	[2402 238B 238B 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD83, 0x003F };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_224)
{
    // FD84 003F;	
    // (‎‎ﶄ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH JEEM FINAL FORM	[2402 238B 238B 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD84, 0x003F };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_225)
{
    // FD83 0061;	
    // (‎‎ﶃ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH JEEM INITIAL FORM	[2402 238B 238B 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD83, 0x0061 };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_226)
{
    // FD83 0041;	
    // (‎‎ﶃ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH JEEM INITIAL FORM	[2402 238B 238B 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD83, 0x0041 };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_227)
{
    // FD84 0061;	
    // (‎‎ﶄ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH JEEM FINAL FORM	[2402 238B 238B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD84, 0x0061 };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_228)
{
    // FD84 0041;	
    // (‎‎ﶄ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH JEEM FINAL FORM	[2402 238B 238B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD84, 0x0041 };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_229)
{
    // FD83 0062;	
    // (‎‎ﶃ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH JEEM INITIAL FORM	[2402 238B 238B 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD83, 0x0062 };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_230)
{
    // FD84 0062;	
    // (‎‎ﶄ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH JEEM FINAL FORM	[2402 238B 238B 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD84, 0x0062 };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_231)
{
    // FDBA 0021;	
    // (‎‎ﶺ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH MEEM INITIAL FORM	[2402 238B 2409 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFDBA, 0x0021 };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_232)
{
    // FDBC 0021;	
    // (‎‎ﶼ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH MEEM FINAL FORM	[2402 238B 2409 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDBC, 0x0021 };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_233)
{
    // FDBA 003F;	
    // (‎‎ﶺ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH MEEM INITIAL FORM	[2402 238B 2409 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFDBA, 0x003F };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_234)
{
    // FDBC 003F;	
    // (‎‎ﶼ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH MEEM FINAL FORM	[2402 238B 2409 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDBC, 0x003F };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_235)
{
    // FDBA 0061;	
    // (‎‎ﶺ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH MEEM INITIAL FORM	[2402 238B 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFDBA, 0x0061 };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_236)
{
    // FDBA 0041;	
    // (‎‎ﶺ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH MEEM INITIAL FORM	[2402 238B 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFDBA, 0x0041 };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_237)
{
    // FDBC 0061;	
    // (‎‎ﶼ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH MEEM FINAL FORM	[2402 238B 2409 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDBC, 0x0061 };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_238)
{
    // FDBC 0041;	
    // (‎‎ﶼ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH MEEM FINAL FORM	[2402 238B 2409 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFDBC, 0x0041 };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_239)
{
    // FDBA 0062;	
    // (‎‎ﶺ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH MEEM INITIAL FORM	[2402 238B 2409 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFDBA, 0x0062 };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_240)
{
    // FDBC 0062;	
    // (‎‎ﶼ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH MEEM FINAL FORM	[2402 238B 2409 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDBC, 0x0062 };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_241)
{
    // FDAC 0021;	
    // (‎‎ﶬ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH YEH FINAL FORM	[2402 238B 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDAC, 0x0021 };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_242)
{
    // FDAC 003F;	
    // (‎‎ﶬ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH YEH FINAL FORM	[2402 238B 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDAC, 0x003F };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_243)
{
    // FDAC 0061;	
    // (‎‎ﶬ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH YEH FINAL FORM	[2402 238B 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDAC, 0x0061 };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_244)
{
    // FDAC 0041;	
    // (‎‎ﶬ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH YEH FINAL FORM	[2402 238B 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFDAC, 0x0041 };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_245)
{
    // FDAC 0062;	
    // (‎‎ﶬ‎‎) ARABIC LIGATURE LAM WITH JEEM WITH YEH FINAL FORM	[2402 238B 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDAC, 0x0062 };
    uint32_t const ces[15] = { 0x2402, 0x238B, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_246)
{
    // FCCA 0021;	
    // (‎‎ﳊ‎‎) ARABIC LIGATURE LAM WITH HAH INITIAL FORM	[2402 2392 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCA, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_247)
{
    // FC40 0021;	
    // (‎‎ﱀ‎‎) ARABIC LIGATURE LAM WITH HAH ISOLATED FORM	[2402 2392 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC40, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_248)
{
    // FCCA 003F;	
    // (‎‎ﳊ‎‎) ARABIC LIGATURE LAM WITH HAH INITIAL FORM	[2402 2392 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCA, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_249)
{
    // FC40 003F;	
    // (‎‎ﱀ‎‎) ARABIC LIGATURE LAM WITH HAH ISOLATED FORM	[2402 2392 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC40, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_250)
{
    // FCCA 0061;	
    // (‎‎ﳊ‎‎) ARABIC LIGATURE LAM WITH HAH INITIAL FORM	[2402 2392 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCA, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_251)
{
    // FCCA 0041;	
    // (‎‎ﳊ‎‎) ARABIC LIGATURE LAM WITH HAH INITIAL FORM	[2402 2392 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCCA, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_252)
{
    // FC40 0061;	
    // (‎‎ﱀ‎‎) ARABIC LIGATURE LAM WITH HAH ISOLATED FORM	[2402 2392 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC40, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_253)
{
    // FC40 0041;	
    // (‎‎ﱀ‎‎) ARABIC LIGATURE LAM WITH HAH ISOLATED FORM	[2402 2392 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC40, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_254)
{
    // FCCA 0062;	
    // (‎‎ﳊ‎‎) ARABIC LIGATURE LAM WITH HAH INITIAL FORM	[2402 2392 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCA, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_255)
{
    // FC40 0062;	
    // (‎‎ﱀ‎‎) ARABIC LIGATURE LAM WITH HAH ISOLATED FORM	[2402 2392 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC40, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_256)
{
    // FDB5 0021;	
    // (‎‎ﶵ‎‎) ARABIC LIGATURE LAM WITH HAH WITH MEEM INITIAL FORM	[2402 2392 2409 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFDB5, 0x0021 };
    uint32_t const ces[15] = { 0x2402, 0x2392, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_257)
{
    // FD80 0021;	
    // (‎‎ﶀ‎‎) ARABIC LIGATURE LAM WITH HAH WITH MEEM FINAL FORM	[2402 2392 2409 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD80, 0x0021 };
    uint32_t const ces[15] = { 0x2402, 0x2392, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_258)
{
    // FDB5 003F;	
    // (‎‎ﶵ‎‎) ARABIC LIGATURE LAM WITH HAH WITH MEEM INITIAL FORM	[2402 2392 2409 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFDB5, 0x003F };
    uint32_t const ces[15] = { 0x2402, 0x2392, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_259)
{
    // FD80 003F;	
    // (‎‎ﶀ‎‎) ARABIC LIGATURE LAM WITH HAH WITH MEEM FINAL FORM	[2402 2392 2409 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD80, 0x003F };
    uint32_t const ces[15] = { 0x2402, 0x2392, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_260)
{
    // FDB5 0061;	
    // (‎‎ﶵ‎‎) ARABIC LIGATURE LAM WITH HAH WITH MEEM INITIAL FORM	[2402 2392 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFDB5, 0x0061 };
    uint32_t const ces[15] = { 0x2402, 0x2392, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_261)
{
    // FDB5 0041;	
    // (‎‎ﶵ‎‎) ARABIC LIGATURE LAM WITH HAH WITH MEEM INITIAL FORM	[2402 2392 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFDB5, 0x0041 };
    uint32_t const ces[15] = { 0x2402, 0x2392, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_262)
{
    // FD80 0061;	
    // (‎‎ﶀ‎‎) ARABIC LIGATURE LAM WITH HAH WITH MEEM FINAL FORM	[2402 2392 2409 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD80, 0x0061 };
    uint32_t const ces[15] = { 0x2402, 0x2392, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_263)
{
    // FD80 0041;	
    // (‎‎ﶀ‎‎) ARABIC LIGATURE LAM WITH HAH WITH MEEM FINAL FORM	[2402 2392 2409 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD80, 0x0041 };
    uint32_t const ces[15] = { 0x2402, 0x2392, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_264)
{
    // FDB5 0062;	
    // (‎‎ﶵ‎‎) ARABIC LIGATURE LAM WITH HAH WITH MEEM INITIAL FORM	[2402 2392 2409 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFDB5, 0x0062 };
    uint32_t const ces[15] = { 0x2402, 0x2392, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_265)
{
    // FD80 0062;	
    // (‎‎ﶀ‎‎) ARABIC LIGATURE LAM WITH HAH WITH MEEM FINAL FORM	[2402 2392 2409 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD80, 0x0062 };
    uint32_t const ces[15] = { 0x2402, 0x2392, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_266)
{
    // FD82 0021;	
    // (‎‎ﶂ‎‎) ARABIC LIGATURE LAM WITH HAH WITH ALEF MAKSURA FINAL FORM	[2402 2392 242B 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD82, 0x0021 };
    uint32_t const ces[15] = { 0x2402, 0x2392, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_267)
{
    // FD82 003F;	
    // (‎‎ﶂ‎‎) ARABIC LIGATURE LAM WITH HAH WITH ALEF MAKSURA FINAL FORM	[2402 2392 242B 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD82, 0x003F };
    uint32_t const ces[15] = { 0x2402, 0x2392, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_268)
{
    // FD82 0061;	
    // (‎‎ﶂ‎‎) ARABIC LIGATURE LAM WITH HAH WITH ALEF MAKSURA FINAL FORM	[2402 2392 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD82, 0x0061 };
    uint32_t const ces[15] = { 0x2402, 0x2392, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_269)
{
    // FD82 0041;	
    // (‎‎ﶂ‎‎) ARABIC LIGATURE LAM WITH HAH WITH ALEF MAKSURA FINAL FORM	[2402 2392 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD82, 0x0041 };
    uint32_t const ces[15] = { 0x2402, 0x2392, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_270)
{
    // FD82 0062;	
    // (‎‎ﶂ‎‎) ARABIC LIGATURE LAM WITH HAH WITH ALEF MAKSURA FINAL FORM	[2402 2392 242B 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD82, 0x0062 };
    uint32_t const ces[15] = { 0x2402, 0x2392, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_271)
{
    // FD81 0021;	
    // (‎‎ﶁ‎‎) ARABIC LIGATURE LAM WITH HAH WITH YEH FINAL FORM	[2402 2392 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD81, 0x0021 };
    uint32_t const ces[15] = { 0x2402, 0x2392, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_272)
{
    // FD81 003F;	
    // (‎‎ﶁ‎‎) ARABIC LIGATURE LAM WITH HAH WITH YEH FINAL FORM	[2402 2392 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD81, 0x003F };
    uint32_t const ces[15] = { 0x2402, 0x2392, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_273)
{
    // FD81 0061;	
    // (‎‎ﶁ‎‎) ARABIC LIGATURE LAM WITH HAH WITH YEH FINAL FORM	[2402 2392 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD81, 0x0061 };
    uint32_t const ces[15] = { 0x2402, 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_274)
{
    // FD81 0041;	
    // (‎‎ﶁ‎‎) ARABIC LIGATURE LAM WITH HAH WITH YEH FINAL FORM	[2402 2392 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD81, 0x0041 };
    uint32_t const ces[15] = { 0x2402, 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_275)
{
    // FD81 0062;	
    // (‎‎ﶁ‎‎) ARABIC LIGATURE LAM WITH HAH WITH YEH FINAL FORM	[2402 2392 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD81, 0x0062 };
    uint32_t const ces[15] = { 0x2402, 0x2392, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_276)
{
    // FCCB 0021;	
    // (‎‎ﳋ‎‎) ARABIC LIGATURE LAM WITH KHAH INITIAL FORM	[2402 2393 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCB, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_277)
{
    // FC41 0021;	
    // (‎‎ﱁ‎‎) ARABIC LIGATURE LAM WITH KHAH ISOLATED FORM	[2402 2393 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC41, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_278)
{
    // FCCB 003F;	
    // (‎‎ﳋ‎‎) ARABIC LIGATURE LAM WITH KHAH INITIAL FORM	[2402 2393 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCB, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_279)
{
    // FC41 003F;	
    // (‎‎ﱁ‎‎) ARABIC LIGATURE LAM WITH KHAH ISOLATED FORM	[2402 2393 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC41, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_280)
{
    // FCCB 0061;	
    // (‎‎ﳋ‎‎) ARABIC LIGATURE LAM WITH KHAH INITIAL FORM	[2402 2393 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCB, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_281)
{
    // FCCB 0041;	
    // (‎‎ﳋ‎‎) ARABIC LIGATURE LAM WITH KHAH INITIAL FORM	[2402 2393 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCCB, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_282)
{
    // FC41 0061;	
    // (‎‎ﱁ‎‎) ARABIC LIGATURE LAM WITH KHAH ISOLATED FORM	[2402 2393 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC41, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_283)
{
    // FC41 0041;	
    // (‎‎ﱁ‎‎) ARABIC LIGATURE LAM WITH KHAH ISOLATED FORM	[2402 2393 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC41, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_284)
{
    // FCCB 0062;	
    // (‎‎ﳋ‎‎) ARABIC LIGATURE LAM WITH KHAH INITIAL FORM	[2402 2393 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCB, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_285)
{
    // FC41 0062;	
    // (‎‎ﱁ‎‎) ARABIC LIGATURE LAM WITH KHAH ISOLATED FORM	[2402 2393 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC41, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_286)
{
    // FD86 0021;	
    // (‎‎ﶆ‎‎) ARABIC LIGATURE LAM WITH KHAH WITH MEEM INITIAL FORM	[2402 2393 2409 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD86, 0x0021 };
    uint32_t const ces[15] = { 0x2402, 0x2393, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_287)
{
    // FD85 0021;	
    // (‎‎ﶅ‎‎) ARABIC LIGATURE LAM WITH KHAH WITH MEEM FINAL FORM	[2402 2393 2409 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD85, 0x0021 };
    uint32_t const ces[15] = { 0x2402, 0x2393, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_288)
{
    // FD86 003F;	
    // (‎‎ﶆ‎‎) ARABIC LIGATURE LAM WITH KHAH WITH MEEM INITIAL FORM	[2402 2393 2409 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD86, 0x003F };
    uint32_t const ces[15] = { 0x2402, 0x2393, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_289)
{
    // FD85 003F;	
    // (‎‎ﶅ‎‎) ARABIC LIGATURE LAM WITH KHAH WITH MEEM FINAL FORM	[2402 2393 2409 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD85, 0x003F };
    uint32_t const ces[15] = { 0x2402, 0x2393, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_290)
{
    // FD86 0061;	
    // (‎‎ﶆ‎‎) ARABIC LIGATURE LAM WITH KHAH WITH MEEM INITIAL FORM	[2402 2393 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD86, 0x0061 };
    uint32_t const ces[15] = { 0x2402, 0x2393, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_291)
{
    // FD86 0041;	
    // (‎‎ﶆ‎‎) ARABIC LIGATURE LAM WITH KHAH WITH MEEM INITIAL FORM	[2402 2393 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD86, 0x0041 };
    uint32_t const ces[15] = { 0x2402, 0x2393, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_292)
{
    // FD85 0061;	
    // (‎‎ﶅ‎‎) ARABIC LIGATURE LAM WITH KHAH WITH MEEM FINAL FORM	[2402 2393 2409 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD85, 0x0061 };
    uint32_t const ces[15] = { 0x2402, 0x2393, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_293)
{
    // FD85 0041;	
    // (‎‎ﶅ‎‎) ARABIC LIGATURE LAM WITH KHAH WITH MEEM FINAL FORM	[2402 2393 2409 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD85, 0x0041 };
    uint32_t const ces[15] = { 0x2402, 0x2393, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_294)
{
    // FD86 0062;	
    // (‎‎ﶆ‎‎) ARABIC LIGATURE LAM WITH KHAH WITH MEEM INITIAL FORM	[2402 2393 2409 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD86, 0x0062 };
    uint32_t const ces[15] = { 0x2402, 0x2393, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_295)
{
    // FD85 0062;	
    // (‎‎ﶅ‎‎) ARABIC LIGATURE LAM WITH KHAH WITH MEEM FINAL FORM	[2402 2393 2409 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD85, 0x0062 };
    uint32_t const ces[15] = { 0x2402, 0x2393, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_296)
{
    // FCCC 0021;	
    // (‎‎ﳌ‎‎) ARABIC LIGATURE LAM WITH MEEM INITIAL FORM	[2402 2409 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCC, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_297)
{
    // FCED 0021;	
    // (‎‎ﳭ‎‎) ARABIC LIGATURE LAM WITH MEEM MEDIAL FORM	[2402 2409 0261 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCED, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_298)
{
    // FC85 0021;	
    // (‎‎ﲅ‎‎) ARABIC LIGATURE LAM WITH MEEM FINAL FORM	[2402 2409 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC85, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_299)
{
    // FC42 0021;	
    // (‎‎ﱂ‎‎) ARABIC LIGATURE LAM WITH MEEM ISOLATED FORM	[2402 2409 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC42, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_300)
{
    // FCCC 003F;	
    // (‎‎ﳌ‎‎) ARABIC LIGATURE LAM WITH MEEM INITIAL FORM	[2402 2409 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCC, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_301)
{
    // FCED 003F;	
    // (‎‎ﳭ‎‎) ARABIC LIGATURE LAM WITH MEEM MEDIAL FORM	[2402 2409 0267 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCED, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_302)
{
    // FC85 003F;	
    // (‎‎ﲅ‎‎) ARABIC LIGATURE LAM WITH MEEM FINAL FORM	[2402 2409 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC85, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_303)
{
    // FC42 003F;	
    // (‎‎ﱂ‎‎) ARABIC LIGATURE LAM WITH MEEM ISOLATED FORM	[2402 2409 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC42, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_304)
{
    // FCCC 0061;	
    // (‎‎ﳌ‎‎) ARABIC LIGATURE LAM WITH MEEM INITIAL FORM	[2402 2409 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCC, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_305)
{
    // FCCC 0041;	
    // (‎‎ﳌ‎‎) ARABIC LIGATURE LAM WITH MEEM INITIAL FORM	[2402 2409 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCCC, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_306)
{
    // FCED 0061;	
    // (‎‎ﳭ‎‎) ARABIC LIGATURE LAM WITH MEEM MEDIAL FORM	[2402 2409 1CAD | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCED, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_307)
{
    // FCED 0041;	
    // (‎‎ﳭ‎‎) ARABIC LIGATURE LAM WITH MEEM MEDIAL FORM	[2402 2409 1CAD | 0020 0020 0020 | 0018 0018 0008 |]

    uint32_t cps[2] = { 0xFCED, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_308)
{
    // FC85 0061;	
    // (‎‎ﲅ‎‎) ARABIC LIGATURE LAM WITH MEEM FINAL FORM	[2402 2409 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC85, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_309)
{
    // FC85 0041;	
    // (‎‎ﲅ‎‎) ARABIC LIGATURE LAM WITH MEEM FINAL FORM	[2402 2409 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC85, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_310)
{
    // FC42 0061;	
    // (‎‎ﱂ‎‎) ARABIC LIGATURE LAM WITH MEEM ISOLATED FORM	[2402 2409 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC42, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_311)
{
    // FC42 0041;	
    // (‎‎ﱂ‎‎) ARABIC LIGATURE LAM WITH MEEM ISOLATED FORM	[2402 2409 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC42, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_312)
{
    // FCCC 0062;	
    // (‎‎ﳌ‎‎) ARABIC LIGATURE LAM WITH MEEM INITIAL FORM	[2402 2409 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCC, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_313)
{
    // FCED 0062;	
    // (‎‎ﳭ‎‎) ARABIC LIGATURE LAM WITH MEEM MEDIAL FORM	[2402 2409 1CC6 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCED, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_314)
{
    // FC85 0062;	
    // (‎‎ﲅ‎‎) ARABIC LIGATURE LAM WITH MEEM FINAL FORM	[2402 2409 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC85, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_315)
{
    // FC42 0062;	
    // (‎‎ﱂ‎‎) ARABIC LIGATURE LAM WITH MEEM ISOLATED FORM	[2402 2409 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC42, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_316)
{
    // FD88 0021;	
    // (‎‎ﶈ‎‎) ARABIC LIGATURE LAM WITH MEEM WITH HAH INITIAL FORM	[2402 2409 2392 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD88, 0x0021 };
    uint32_t const ces[15] = { 0x2402, 0x2409, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_317)
{
    // FD87 0021;	
    // (‎‎ﶇ‎‎) ARABIC LIGATURE LAM WITH MEEM WITH HAH FINAL FORM	[2402 2409 2392 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD87, 0x0021 };
    uint32_t const ces[15] = { 0x2402, 0x2409, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_318)
{
    // FD88 003F;	
    // (‎‎ﶈ‎‎) ARABIC LIGATURE LAM WITH MEEM WITH HAH INITIAL FORM	[2402 2409 2392 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD88, 0x003F };
    uint32_t const ces[15] = { 0x2402, 0x2409, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_319)
{
    // FD87 003F;	
    // (‎‎ﶇ‎‎) ARABIC LIGATURE LAM WITH MEEM WITH HAH FINAL FORM	[2402 2409 2392 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD87, 0x003F };
    uint32_t const ces[15] = { 0x2402, 0x2409, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_320)
{
    // FD88 0061;	
    // (‎‎ﶈ‎‎) ARABIC LIGATURE LAM WITH MEEM WITH HAH INITIAL FORM	[2402 2409 2392 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD88, 0x0061 };
    uint32_t const ces[15] = { 0x2402, 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_321)
{
    // FD88 0041;	
    // (‎‎ﶈ‎‎) ARABIC LIGATURE LAM WITH MEEM WITH HAH INITIAL FORM	[2402 2409 2392 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD88, 0x0041 };
    uint32_t const ces[15] = { 0x2402, 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_322)
{
    // FD87 0061;	
    // (‎‎ﶇ‎‎) ARABIC LIGATURE LAM WITH MEEM WITH HAH FINAL FORM	[2402 2409 2392 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD87, 0x0061 };
    uint32_t const ces[15] = { 0x2402, 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_323)
{
    // FD87 0041;	
    // (‎‎ﶇ‎‎) ARABIC LIGATURE LAM WITH MEEM WITH HAH FINAL FORM	[2402 2409 2392 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD87, 0x0041 };
    uint32_t const ces[15] = { 0x2402, 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_324)
{
    // FD88 0062;	
    // (‎‎ﶈ‎‎) ARABIC LIGATURE LAM WITH MEEM WITH HAH INITIAL FORM	[2402 2409 2392 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD88, 0x0062 };
    uint32_t const ces[15] = { 0x2402, 0x2409, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_325)
{
    // FD87 0062;	
    // (‎‎ﶇ‎‎) ARABIC LIGATURE LAM WITH MEEM WITH HAH FINAL FORM	[2402 2409 2392 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD87, 0x0062 };
    uint32_t const ces[15] = { 0x2402, 0x2409, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_326)
{
    // FDAD 0021;	
    // (‎‎ﶭ‎‎) ARABIC LIGATURE LAM WITH MEEM WITH YEH FINAL FORM	[2402 2409 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDAD, 0x0021 };
    uint32_t const ces[15] = { 0x2402, 0x2409, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_327)
{
    // FDAD 003F;	
    // (‎‎ﶭ‎‎) ARABIC LIGATURE LAM WITH MEEM WITH YEH FINAL FORM	[2402 2409 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDAD, 0x003F };
    uint32_t const ces[15] = { 0x2402, 0x2409, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_328)
{
    // FDAD 0061;	
    // (‎‎ﶭ‎‎) ARABIC LIGATURE LAM WITH MEEM WITH YEH FINAL FORM	[2402 2409 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDAD, 0x0061 };
    uint32_t const ces[15] = { 0x2402, 0x2409, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_329)
{
    // FDAD 0041;	
    // (‎‎ﶭ‎‎) ARABIC LIGATURE LAM WITH MEEM WITH YEH FINAL FORM	[2402 2409 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFDAD, 0x0041 };
    uint32_t const ces[15] = { 0x2402, 0x2409, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_330)
{
    // FDAD 0062;	
    // (‎‎ﶭ‎‎) ARABIC LIGATURE LAM WITH MEEM WITH YEH FINAL FORM	[2402 2409 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDAD, 0x0062 };
    uint32_t const ces[15] = { 0x2402, 0x2409, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_331)
{
    // FCCD 0021;	
    // (‎‎ﳍ‎‎) ARABIC LIGATURE LAM WITH HEH INITIAL FORM	[2402 2417 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCD, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_332)
{
    // FCCD 003F;	
    // (‎‎ﳍ‎‎) ARABIC LIGATURE LAM WITH HEH INITIAL FORM	[2402 2417 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCD, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_333)
{
    // FCCD 0061;	
    // (‎‎ﳍ‎‎) ARABIC LIGATURE LAM WITH HEH INITIAL FORM	[2402 2417 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCD, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_334)
{
    // FCCD 0041;	
    // (‎‎ﳍ‎‎) ARABIC LIGATURE LAM WITH HEH INITIAL FORM	[2402 2417 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCCD, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_335)
{
    // FCCD 0062;	
    // (‎‎ﳍ‎‎) ARABIC LIGATURE LAM WITH HEH INITIAL FORM	[2402 2417 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCD, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_336)
{
    // FC86 0021;	
    // (‎‎ﲆ‎‎) ARABIC LIGATURE LAM WITH ALEF MAKSURA FINAL FORM	[2402 242B 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC86, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_337)
{
    // FC43 0021;	
    // (‎‎ﱃ‎‎) ARABIC LIGATURE LAM WITH ALEF MAKSURA ISOLATED FORM	[2402 242B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC43, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_338)
{
    // FC86 003F;	
    // (‎‎ﲆ‎‎) ARABIC LIGATURE LAM WITH ALEF MAKSURA FINAL FORM	[2402 242B 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC86, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_339)
{
    // FC43 003F;	
    // (‎‎ﱃ‎‎) ARABIC LIGATURE LAM WITH ALEF MAKSURA ISOLATED FORM	[2402 242B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC43, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_340)
{
    // FC86 0061;	
    // (‎‎ﲆ‎‎) ARABIC LIGATURE LAM WITH ALEF MAKSURA FINAL FORM	[2402 242B 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC86, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_341)
{
    // FC86 0041;	
    // (‎‎ﲆ‎‎) ARABIC LIGATURE LAM WITH ALEF MAKSURA FINAL FORM	[2402 242B 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC86, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_342)
{
    // FC43 0061;	
    // (‎‎ﱃ‎‎) ARABIC LIGATURE LAM WITH ALEF MAKSURA ISOLATED FORM	[2402 242B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC43, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_343)
{
    // FC43 0041;	
    // (‎‎ﱃ‎‎) ARABIC LIGATURE LAM WITH ALEF MAKSURA ISOLATED FORM	[2402 242B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC43, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_344)
{
    // FC86 0062;	
    // (‎‎ﲆ‎‎) ARABIC LIGATURE LAM WITH ALEF MAKSURA FINAL FORM	[2402 242B 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC86, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_345)
{
    // FC43 0062;	
    // (‎‎ﱃ‎‎) ARABIC LIGATURE LAM WITH ALEF MAKSURA ISOLATED FORM	[2402 242B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC43, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_346)
{
    // FC87 0021;	
    // (‎‎ﲇ‎‎) ARABIC LIGATURE LAM WITH YEH FINAL FORM	[2402 242C 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC87, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_347)
{
    // FC44 0021;	
    // (‎‎ﱄ‎‎) ARABIC LIGATURE LAM WITH YEH ISOLATED FORM	[2402 242C 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC44, 0x0021 };
    uint32_t const ces[12] = { 0x2402, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_348)
{
    // FC87 003F;	
    // (‎‎ﲇ‎‎) ARABIC LIGATURE LAM WITH YEH FINAL FORM	[2402 242C 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC87, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_349)
{
    // FC44 003F;	
    // (‎‎ﱄ‎‎) ARABIC LIGATURE LAM WITH YEH ISOLATED FORM	[2402 242C 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC44, 0x003F };
    uint32_t const ces[12] = { 0x2402, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_350)
{
    // FC87 0061;	
    // (‎‎ﲇ‎‎) ARABIC LIGATURE LAM WITH YEH FINAL FORM	[2402 242C 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC87, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_351)
{
    // FC87 0041;	
    // (‎‎ﲇ‎‎) ARABIC LIGATURE LAM WITH YEH FINAL FORM	[2402 242C 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC87, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_352)
{
    // FC44 0061;	
    // (‎‎ﱄ‎‎) ARABIC LIGATURE LAM WITH YEH ISOLATED FORM	[2402 242C 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC44, 0x0061 };
    uint32_t const ces[12] = { 0x2402, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_353)
{
    // FC44 0041;	
    // (‎‎ﱄ‎‎) ARABIC LIGATURE LAM WITH YEH ISOLATED FORM	[2402 242C 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC44, 0x0041 };
    uint32_t const ces[12] = { 0x2402, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_354)
{
    // FC87 0062;	
    // (‎‎ﲇ‎‎) ARABIC LIGATURE LAM WITH YEH FINAL FORM	[2402 242C 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC87, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_355)
{
    // FC44 0062;	
    // (‎‎ﱄ‎‎) ARABIC LIGATURE LAM WITH YEH ISOLATED FORM	[2402 242C 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC44, 0x0062 };
    uint32_t const ces[12] = { 0x2402, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_356)
{
    // 06B5 0021;	
    // (‎‎ڵ‎‎) ARABIC LETTER LAM WITH SMALL V	[2403 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B5, 0x0021 };
    uint32_t const ces[9] = { 0x2403, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_357)
{
    // 06B5 003F;	
    // (‎‎ڵ‎‎) ARABIC LETTER LAM WITH SMALL V	[2403 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B5, 0x003F };
    uint32_t const ces[9] = { 0x2403, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_358)
{
    // 06B5 0061;	
    // (‎‎ڵ‎‎) ARABIC LETTER LAM WITH SMALL V	[2403 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B5, 0x0061 };
    uint32_t const ces[9] = { 0x2403, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_359)
{
    // 06B5 0041;	
    // (‎‎ڵ‎‎) ARABIC LETTER LAM WITH SMALL V	[2403 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06B5, 0x0041 };
    uint32_t const ces[9] = { 0x2403, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_360)
{
    // 06B5 0062;	
    // (‎‎ڵ‎‎) ARABIC LETTER LAM WITH SMALL V	[2403 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B5, 0x0062 };
    uint32_t const ces[9] = { 0x2403, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_361)
{
    // 06B6 0021;	
    // (‎‎ڶ‎‎) ARABIC LETTER LAM WITH DOT ABOVE	[2404 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B6, 0x0021 };
    uint32_t const ces[9] = { 0x2404, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_362)
{
    // 06B6 003F;	
    // (‎‎ڶ‎‎) ARABIC LETTER LAM WITH DOT ABOVE	[2404 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B6, 0x003F };
    uint32_t const ces[9] = { 0x2404, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_363)
{
    // 06B6 0061;	
    // (‎‎ڶ‎‎) ARABIC LETTER LAM WITH DOT ABOVE	[2404 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B6, 0x0061 };
    uint32_t const ces[9] = { 0x2404, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_364)
{
    // 06B6 0041;	
    // (‎‎ڶ‎‎) ARABIC LETTER LAM WITH DOT ABOVE	[2404 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06B6, 0x0041 };
    uint32_t const ces[9] = { 0x2404, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_365)
{
    // 06B6 0062;	
    // (‎‎ڶ‎‎) ARABIC LETTER LAM WITH DOT ABOVE	[2404 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B6, 0x0062 };
    uint32_t const ces[9] = { 0x2404, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_366)
{
    // 06B7 0021;	
    // (‎‎ڷ‎‎) ARABIC LETTER LAM WITH THREE DOTS ABOVE	[2405 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B7, 0x0021 };
    uint32_t const ces[9] = { 0x2405, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_367)
{
    // 06B7 003F;	
    // (‎‎ڷ‎‎) ARABIC LETTER LAM WITH THREE DOTS ABOVE	[2405 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B7, 0x003F };
    uint32_t const ces[9] = { 0x2405, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_368)
{
    // 06B7 0061;	
    // (‎‎ڷ‎‎) ARABIC LETTER LAM WITH THREE DOTS ABOVE	[2405 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B7, 0x0061 };
    uint32_t const ces[9] = { 0x2405, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_369)
{
    // 06B7 0041;	
    // (‎‎ڷ‎‎) ARABIC LETTER LAM WITH THREE DOTS ABOVE	[2405 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06B7, 0x0041 };
    uint32_t const ces[9] = { 0x2405, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_370)
{
    // 06B7 0062;	
    // (‎‎ڷ‎‎) ARABIC LETTER LAM WITH THREE DOTS ABOVE	[2405 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B7, 0x0062 };
    uint32_t const ces[9] = { 0x2405, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_371)
{
    // 06B8 0021;	
    // (‎‎ڸ‎‎) ARABIC LETTER LAM WITH THREE DOTS BELOW	[2406 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B8, 0x0021 };
    uint32_t const ces[9] = { 0x2406, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_372)
{
    // 06B8 003F;	
    // (‎‎ڸ‎‎) ARABIC LETTER LAM WITH THREE DOTS BELOW	[2406 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B8, 0x003F };
    uint32_t const ces[9] = { 0x2406, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_373)
{
    // 06B8 0061;	
    // (‎‎ڸ‎‎) ARABIC LETTER LAM WITH THREE DOTS BELOW	[2406 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B8, 0x0061 };
    uint32_t const ces[9] = { 0x2406, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_374)
{
    // 06B8 0041;	
    // (‎‎ڸ‎‎) ARABIC LETTER LAM WITH THREE DOTS BELOW	[2406 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06B8, 0x0041 };
    uint32_t const ces[9] = { 0x2406, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_375)
{
    // 06B8 0062;	
    // (‎‎ڸ‎‎) ARABIC LETTER LAM WITH THREE DOTS BELOW	[2406 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B8, 0x0062 };
    uint32_t const ces[9] = { 0x2406, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_376)
{
    // 076A 0021;	
    // (‎‎ݪ‎‎) ARABIC LETTER LAM WITH BAR	[2407 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076A, 0x0021 };
    uint32_t const ces[9] = { 0x2407, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_377)
{
    // 076A 003F;	
    // (‎‎ݪ‎‎) ARABIC LETTER LAM WITH BAR	[2407 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076A, 0x003F };
    uint32_t const ces[9] = { 0x2407, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_378)
{
    // 076A 0061;	
    // (‎‎ݪ‎‎) ARABIC LETTER LAM WITH BAR	[2407 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076A, 0x0061 };
    uint32_t const ces[9] = { 0x2407, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_379)
{
    // 076A 0041;	
    // (‎‎ݪ‎‎) ARABIC LETTER LAM WITH BAR	[2407 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x076A, 0x0041 };
    uint32_t const ces[9] = { 0x2407, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_380)
{
    // 076A 0062;	
    // (‎‎ݪ‎‎) ARABIC LETTER LAM WITH BAR	[2407 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076A, 0x0062 };
    uint32_t const ces[9] = { 0x2407, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_381)
{
    // 08A6 0021;	
    // (‎‎ࢦ‎‎) ARABIC LETTER LAM WITH DOUBLE BAR	[2408 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A6, 0x0021 };
    uint32_t const ces[9] = { 0x2408, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_382)
{
    // 08A6 003F;	
    // (‎‎ࢦ‎‎) ARABIC LETTER LAM WITH DOUBLE BAR	[2408 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A6, 0x003F };
    uint32_t const ces[9] = { 0x2408, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_383)
{
    // 08A6 0061;	
    // (‎‎ࢦ‎‎) ARABIC LETTER LAM WITH DOUBLE BAR	[2408 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A6, 0x0061 };
    uint32_t const ces[9] = { 0x2408, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_384)
{
    // 08A6 0041;	
    // (‎‎ࢦ‎‎) ARABIC LETTER LAM WITH DOUBLE BAR	[2408 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08A6, 0x0041 };
    uint32_t const ces[9] = { 0x2408, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_385)
{
    // 08A6 0062;	
    // (‎‎ࢦ‎‎) ARABIC LETTER LAM WITH DOUBLE BAR	[2408 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A6, 0x0062 };
    uint32_t const ces[9] = { 0x2408, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_386)
{
    // 0645 0021;	
    // (‎‎م‎‎) ARABIC LETTER MEEM	[2409 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0645, 0x0021 };
    uint32_t const ces[9] = { 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_387)
{
    // 1EE0C 0021;	
    // (‎‎𞸌‎‎) ARABIC MATHEMATICAL MEEM	[2409 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE0C, 0x0021 };
    uint32_t const ces[9] = { 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_388)
{
    // 1EE2C 0021;	
    // (‎‎𞸬‎‎) ARABIC MATHEMATICAL INITIAL MEEM	[2409 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE2C, 0x0021 };
    uint32_t const ces[9] = { 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_389)
{
    // 1EE6C 0021;	
    // (‎‎𞹬‎‎) ARABIC MATHEMATICAL STRETCHED MEEM	[2409 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE6C, 0x0021 };
    uint32_t const ces[9] = { 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_390)
{
    // 1EE8C 0021;	
    // (‎‎𞺌‎‎) ARABIC MATHEMATICAL LOOPED MEEM	[2409 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE8C, 0x0021 };
    uint32_t const ces[9] = { 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_391)
{
    // 1EEAC 0021;	
    // (‎‎𞺬‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK MEEM	[2409 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEAC, 0x0021 };
    uint32_t const ces[9] = { 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_392)
{
    // FEE3 0021;	
    // (‎‎ﻣ‎‎) ARABIC LETTER MEEM INITIAL FORM	[2409 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEE3, 0x0021 };
    uint32_t const ces[9] = { 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_393)
{
    // FEE4 0021;	
    // (‎‎ﻤ‎‎) ARABIC LETTER MEEM MEDIAL FORM	[2409 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEE4, 0x0021 };
    uint32_t const ces[9] = { 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_394)
{
    // FEE2 0021;	
    // (‎‎ﻢ‎‎) ARABIC LETTER MEEM FINAL FORM	[2409 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEE2, 0x0021 };
    uint32_t const ces[9] = { 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_395)
{
    // FEE1 0021;	
    // (‎‎ﻡ‎‎) ARABIC LETTER MEEM ISOLATED FORM	[2409 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEE1, 0x0021 };
    uint32_t const ces[9] = { 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_396)
{
    // 06FE 0021;	
    // (‎‎۾‎‎) ARABIC SIGN SINDHI POSTPOSITION MEN	[2409 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x06FE, 0x0021 };
    uint32_t const ces[11] = { 0x2409, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_397)
{
    // 0645 003F;	
    // (‎‎م‎‎) ARABIC LETTER MEEM	[2409 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0645, 0x003F };
    uint32_t const ces[9] = { 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_398)
{
    // 1EE0C 003F;	
    // (‎‎𞸌‎‎) ARABIC MATHEMATICAL MEEM	[2409 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE0C, 0x003F };
    uint32_t const ces[9] = { 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_399)
{
    // 1EE2C 003F;	
    // (‎‎𞸬‎‎) ARABIC MATHEMATICAL INITIAL MEEM	[2409 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE2C, 0x003F };
    uint32_t const ces[9] = { 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_400)
{
    // 1EE6C 003F;	
    // (‎‎𞹬‎‎) ARABIC MATHEMATICAL STRETCHED MEEM	[2409 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE6C, 0x003F };
    uint32_t const ces[9] = { 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_401)
{
    // 1EE8C 003F;	
    // (‎‎𞺌‎‎) ARABIC MATHEMATICAL LOOPED MEEM	[2409 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE8C, 0x003F };
    uint32_t const ces[9] = { 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_402)
{
    // 1EEAC 003F;	
    // (‎‎𞺬‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK MEEM	[2409 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEAC, 0x003F };
    uint32_t const ces[9] = { 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_403)
{
    // FEE3 003F;	
    // (‎‎ﻣ‎‎) ARABIC LETTER MEEM INITIAL FORM	[2409 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEE3, 0x003F };
    uint32_t const ces[9] = { 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_404)
{
    // FEE4 003F;	
    // (‎‎ﻤ‎‎) ARABIC LETTER MEEM MEDIAL FORM	[2409 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEE4, 0x003F };
    uint32_t const ces[9] = { 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_405)
{
    // FEE2 003F;	
    // (‎‎ﻢ‎‎) ARABIC LETTER MEEM FINAL FORM	[2409 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEE2, 0x003F };
    uint32_t const ces[9] = { 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_406)
{
    // FEE1 003F;	
    // (‎‎ﻡ‎‎) ARABIC LETTER MEEM ISOLATED FORM	[2409 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEE1, 0x003F };
    uint32_t const ces[9] = { 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_407)
{
    // 06FE 003F;	
    // (‎‎۾‎‎) ARABIC SIGN SINDHI POSTPOSITION MEN	[2409 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x06FE, 0x003F };
    uint32_t const ces[11] = { 0x2409, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_408)
{
    // 0645 0061;	
    // (‎‎م‎‎) ARABIC LETTER MEEM	[2409 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0645, 0x0061 };
    uint32_t const ces[9] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_409)
{
    // 0645 0041;	
    // (‎‎م‎‎) ARABIC LETTER MEEM	[2409 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0645, 0x0041 };
    uint32_t const ces[9] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_410)
{
    // 1EE0C 0061;	
    // (‎‎𞸌‎‎) ARABIC MATHEMATICAL MEEM	[2409 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE0C, 0x0061 };
    uint32_t const ces[9] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_411)
{
    // 1EE2C 0061;	
    // (‎‎𞸬‎‎) ARABIC MATHEMATICAL INITIAL MEEM	[2409 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE2C, 0x0061 };
    uint32_t const ces[9] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_412)
{
    // 1EE6C 0061;	
    // (‎‎𞹬‎‎) ARABIC MATHEMATICAL STRETCHED MEEM	[2409 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE6C, 0x0061 };
    uint32_t const ces[9] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_413)
{
    // 1EE8C 0061;	
    // (‎‎𞺌‎‎) ARABIC MATHEMATICAL LOOPED MEEM	[2409 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE8C, 0x0061 };
    uint32_t const ces[9] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_414)
{
    // 1EEAC 0061;	
    // (‎‎𞺬‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK MEEM	[2409 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEAC, 0x0061 };
    uint32_t const ces[9] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_415)
{
    // 1EE0C 0041;	
    // (‎‎𞸌‎‎) ARABIC MATHEMATICAL MEEM	[2409 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE0C, 0x0041 };
    uint32_t const ces[9] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_416)
{
    // 1EE2C 0041;	
    // (‎‎𞸬‎‎) ARABIC MATHEMATICAL INITIAL MEEM	[2409 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE2C, 0x0041 };
    uint32_t const ces[9] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_417)
{
    // 1EE6C 0041;	
    // (‎‎𞹬‎‎) ARABIC MATHEMATICAL STRETCHED MEEM	[2409 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE6C, 0x0041 };
    uint32_t const ces[9] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_418)
{
    // 1EE8C 0041;	
    // (‎‎𞺌‎‎) ARABIC MATHEMATICAL LOOPED MEEM	[2409 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE8C, 0x0041 };
    uint32_t const ces[9] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_419)
{
    // 1EEAC 0041;	
    // (‎‎𞺬‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK MEEM	[2409 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EEAC, 0x0041 };
    uint32_t const ces[9] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_420)
{
    // FEE3 0061;	
    // (‎‎ﻣ‎‎) ARABIC LETTER MEEM INITIAL FORM	[2409 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEE3, 0x0061 };
    uint32_t const ces[9] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_421)
{
    // FEE3 0041;	
    // (‎‎ﻣ‎‎) ARABIC LETTER MEEM INITIAL FORM	[2409 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFEE3, 0x0041 };
    uint32_t const ces[9] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_422)
{
    // FEE4 0061;	
    // (‎‎ﻤ‎‎) ARABIC LETTER MEEM MEDIAL FORM	[2409 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEE4, 0x0061 };
    uint32_t const ces[9] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_423)
{
    // FEE4 0041;	
    // (‎‎ﻤ‎‎) ARABIC LETTER MEEM MEDIAL FORM	[2409 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFEE4, 0x0041 };
    uint32_t const ces[9] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_424)
{
    // FEE2 0061;	
    // (‎‎ﻢ‎‎) ARABIC LETTER MEEM FINAL FORM	[2409 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEE2, 0x0061 };
    uint32_t const ces[9] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_425)
{
    // FEE2 0041;	
    // (‎‎ﻢ‎‎) ARABIC LETTER MEEM FINAL FORM	[2409 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFEE2, 0x0041 };
    uint32_t const ces[9] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_426)
{
    // FEE1 0061;	
    // (‎‎ﻡ‎‎) ARABIC LETTER MEEM ISOLATED FORM	[2409 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEE1, 0x0061 };
    uint32_t const ces[9] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_427)
{
    // FEE1 0041;	
    // (‎‎ﻡ‎‎) ARABIC LETTER MEEM ISOLATED FORM	[2409 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFEE1, 0x0041 };
    uint32_t const ces[9] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_428)
{
    // 06FE 0061;	
    // (‎‎۾‎‎) ARABIC SIGN SINDHI POSTPOSITION MEN	[2409 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x06FE, 0x0061 };
    uint32_t const ces[11] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_429)
{
    // 06FE 0041;	
    // (‎‎۾‎‎) ARABIC SIGN SINDHI POSTPOSITION MEN	[2409 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x06FE, 0x0041 };
    uint32_t const ces[11] = { 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_430)
{
    // 0645 0062;	
    // (‎‎م‎‎) ARABIC LETTER MEEM	[2409 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0645, 0x0062 };
    uint32_t const ces[9] = { 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_431)
{
    // 1EE0C 0062;	
    // (‎‎𞸌‎‎) ARABIC MATHEMATICAL MEEM	[2409 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE0C, 0x0062 };
    uint32_t const ces[9] = { 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_432)
{
    // 1EE2C 0062;	
    // (‎‎𞸬‎‎) ARABIC MATHEMATICAL INITIAL MEEM	[2409 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE2C, 0x0062 };
    uint32_t const ces[9] = { 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_433)
{
    // 1EE6C 0062;	
    // (‎‎𞹬‎‎) ARABIC MATHEMATICAL STRETCHED MEEM	[2409 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE6C, 0x0062 };
    uint32_t const ces[9] = { 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_434)
{
    // 1EE8C 0062;	
    // (‎‎𞺌‎‎) ARABIC MATHEMATICAL LOOPED MEEM	[2409 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE8C, 0x0062 };
    uint32_t const ces[9] = { 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_435)
{
    // 1EEAC 0062;	
    // (‎‎𞺬‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK MEEM	[2409 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEAC, 0x0062 };
    uint32_t const ces[9] = { 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_436)
{
    // FEE3 0062;	
    // (‎‎ﻣ‎‎) ARABIC LETTER MEEM INITIAL FORM	[2409 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEE3, 0x0062 };
    uint32_t const ces[9] = { 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_437)
{
    // FEE4 0062;	
    // (‎‎ﻤ‎‎) ARABIC LETTER MEEM MEDIAL FORM	[2409 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEE4, 0x0062 };
    uint32_t const ces[9] = { 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_438)
{
    // FEE2 0062;	
    // (‎‎ﻢ‎‎) ARABIC LETTER MEEM FINAL FORM	[2409 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEE2, 0x0062 };
    uint32_t const ces[9] = { 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_439)
{
    // FEE1 0062;	
    // (‎‎ﻡ‎‎) ARABIC LETTER MEEM ISOLATED FORM	[2409 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEE1, 0x0062 };
    uint32_t const ces[9] = { 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_440)
{
    // 06FE 0062;	
    // (‎‎۾‎‎) ARABIC SIGN SINDHI POSTPOSITION MEN	[2409 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x06FE, 0x0062 };
    uint32_t const ces[11] = { 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_441)
{
    // FC88 0021;	
    // (‎‎ﲈ‎‎) ARABIC LIGATURE MEEM WITH ALEF FINAL FORM	[2409 2371 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC88, 0x0021 };
    uint32_t const ces[12] = { 0x2409, 0x2371, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_442)
{
    // FC88 003F;	
    // (‎‎ﲈ‎‎) ARABIC LIGATURE MEEM WITH ALEF FINAL FORM	[2409 2371 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC88, 0x003F };
    uint32_t const ces[12] = { 0x2409, 0x2371, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_443)
{
    // FC88 0061;	
    // (‎‎ﲈ‎‎) ARABIC LIGATURE MEEM WITH ALEF FINAL FORM	[2409 2371 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC88, 0x0061 };
    uint32_t const ces[12] = { 0x2409, 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_444)
{
    // FC88 0041;	
    // (‎‎ﲈ‎‎) ARABIC LIGATURE MEEM WITH ALEF FINAL FORM	[2409 2371 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC88, 0x0041 };
    uint32_t const ces[12] = { 0x2409, 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_445)
{
    // FC88 0062;	
    // (‎‎ﲈ‎‎) ARABIC LIGATURE MEEM WITH ALEF FINAL FORM	[2409 2371 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC88, 0x0062 };
    uint32_t const ces[12] = { 0x2409, 0x2371, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_446)
{
    // FCCE 0021;	
    // (‎‎ﳎ‎‎) ARABIC LIGATURE MEEM WITH JEEM INITIAL FORM	[2409 238B 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCE, 0x0021 };
    uint32_t const ces[12] = { 0x2409, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_447)
{
    // FC45 0021;	
    // (‎‎ﱅ‎‎) ARABIC LIGATURE MEEM WITH JEEM ISOLATED FORM	[2409 238B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC45, 0x0021 };
    uint32_t const ces[12] = { 0x2409, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_448)
{
    // FCCE 003F;	
    // (‎‎ﳎ‎‎) ARABIC LIGATURE MEEM WITH JEEM INITIAL FORM	[2409 238B 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCE, 0x003F };
    uint32_t const ces[12] = { 0x2409, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_449)
{
    // FC45 003F;	
    // (‎‎ﱅ‎‎) ARABIC LIGATURE MEEM WITH JEEM ISOLATED FORM	[2409 238B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC45, 0x003F };
    uint32_t const ces[12] = { 0x2409, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_450)
{
    // FCCE 0061;	
    // (‎‎ﳎ‎‎) ARABIC LIGATURE MEEM WITH JEEM INITIAL FORM	[2409 238B 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCE, 0x0061 };
    uint32_t const ces[12] = { 0x2409, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_451)
{
    // FCCE 0041;	
    // (‎‎ﳎ‎‎) ARABIC LIGATURE MEEM WITH JEEM INITIAL FORM	[2409 238B 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCCE, 0x0041 };
    uint32_t const ces[12] = { 0x2409, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_452)
{
    // FC45 0061;	
    // (‎‎ﱅ‎‎) ARABIC LIGATURE MEEM WITH JEEM ISOLATED FORM	[2409 238B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC45, 0x0061 };
    uint32_t const ces[12] = { 0x2409, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_453)
{
    // FC45 0041;	
    // (‎‎ﱅ‎‎) ARABIC LIGATURE MEEM WITH JEEM ISOLATED FORM	[2409 238B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC45, 0x0041 };
    uint32_t const ces[12] = { 0x2409, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_454)
{
    // FCCE 0062;	
    // (‎‎ﳎ‎‎) ARABIC LIGATURE MEEM WITH JEEM INITIAL FORM	[2409 238B 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCE, 0x0062 };
    uint32_t const ces[12] = { 0x2409, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_455)
{
    // FC45 0062;	
    // (‎‎ﱅ‎‎) ARABIC LIGATURE MEEM WITH JEEM ISOLATED FORM	[2409 238B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC45, 0x0062 };
    uint32_t const ces[12] = { 0x2409, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_456)
{
    // FD8C 0021;	
    // (‎‎ﶌ‎‎) ARABIC LIGATURE MEEM WITH JEEM WITH HAH INITIAL FORM	[2409 238B 2392 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD8C, 0x0021 };
    uint32_t const ces[15] = { 0x2409, 0x238B, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_457)
{
    // FD8C 003F;	
    // (‎‎ﶌ‎‎) ARABIC LIGATURE MEEM WITH JEEM WITH HAH INITIAL FORM	[2409 238B 2392 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD8C, 0x003F };
    uint32_t const ces[15] = { 0x2409, 0x238B, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_458)
{
    // FD8C 0061;	
    // (‎‎ﶌ‎‎) ARABIC LIGATURE MEEM WITH JEEM WITH HAH INITIAL FORM	[2409 238B 2392 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD8C, 0x0061 };
    uint32_t const ces[15] = { 0x2409, 0x238B, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_459)
{
    // FD8C 0041;	
    // (‎‎ﶌ‎‎) ARABIC LIGATURE MEEM WITH JEEM WITH HAH INITIAL FORM	[2409 238B 2392 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD8C, 0x0041 };
    uint32_t const ces[15] = { 0x2409, 0x238B, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_460)
{
    // FD8C 0062;	
    // (‎‎ﶌ‎‎) ARABIC LIGATURE MEEM WITH JEEM WITH HAH INITIAL FORM	[2409 238B 2392 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD8C, 0x0062 };
    uint32_t const ces[15] = { 0x2409, 0x238B, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_461)
{
    // FD92 0021;	
    // (‎‎ﶒ‎‎) ARABIC LIGATURE MEEM WITH JEEM WITH KHAH INITIAL FORM	[2409 238B 2393 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD92, 0x0021 };
    uint32_t const ces[15] = { 0x2409, 0x238B, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_462)
{
    // FD92 003F;	
    // (‎‎ﶒ‎‎) ARABIC LIGATURE MEEM WITH JEEM WITH KHAH INITIAL FORM	[2409 238B 2393 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD92, 0x003F };
    uint32_t const ces[15] = { 0x2409, 0x238B, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_463)
{
    // FD92 0061;	
    // (‎‎ﶒ‎‎) ARABIC LIGATURE MEEM WITH JEEM WITH KHAH INITIAL FORM	[2409 238B 2393 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD92, 0x0061 };
    uint32_t const ces[15] = { 0x2409, 0x238B, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_464)
{
    // FD92 0041;	
    // (‎‎ﶒ‎‎) ARABIC LIGATURE MEEM WITH JEEM WITH KHAH INITIAL FORM	[2409 238B 2393 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD92, 0x0041 };
    uint32_t const ces[15] = { 0x2409, 0x238B, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_465)
{
    // FD92 0062;	
    // (‎‎ﶒ‎‎) ARABIC LIGATURE MEEM WITH JEEM WITH KHAH INITIAL FORM	[2409 238B 2393 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD92, 0x0062 };
    uint32_t const ces[15] = { 0x2409, 0x238B, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_466)
{
    // FD8D 0021;	
    // (‎‎ﶍ‎‎) ARABIC LIGATURE MEEM WITH JEEM WITH MEEM INITIAL FORM	[2409 238B 2409 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD8D, 0x0021 };
    uint32_t const ces[15] = { 0x2409, 0x238B, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_467)
{
    // FD8D 003F;	
    // (‎‎ﶍ‎‎) ARABIC LIGATURE MEEM WITH JEEM WITH MEEM INITIAL FORM	[2409 238B 2409 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD8D, 0x003F };
    uint32_t const ces[15] = { 0x2409, 0x238B, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_468)
{
    // FD8D 0061;	
    // (‎‎ﶍ‎‎) ARABIC LIGATURE MEEM WITH JEEM WITH MEEM INITIAL FORM	[2409 238B 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD8D, 0x0061 };
    uint32_t const ces[15] = { 0x2409, 0x238B, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_469)
{
    // FD8D 0041;	
    // (‎‎ﶍ‎‎) ARABIC LIGATURE MEEM WITH JEEM WITH MEEM INITIAL FORM	[2409 238B 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD8D, 0x0041 };
    uint32_t const ces[15] = { 0x2409, 0x238B, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_470)
{
    // FD8D 0062;	
    // (‎‎ﶍ‎‎) ARABIC LIGATURE MEEM WITH JEEM WITH MEEM INITIAL FORM	[2409 238B 2409 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD8D, 0x0062 };
    uint32_t const ces[15] = { 0x2409, 0x238B, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_471)
{
    // FDC0 0021;	
    // (‎‎ﷀ‎‎) ARABIC LIGATURE MEEM WITH JEEM WITH YEH FINAL FORM	[2409 238B 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDC0, 0x0021 };
    uint32_t const ces[15] = { 0x2409, 0x238B, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_472)
{
    // FDC0 003F;	
    // (‎‎ﷀ‎‎) ARABIC LIGATURE MEEM WITH JEEM WITH YEH FINAL FORM	[2409 238B 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDC0, 0x003F };
    uint32_t const ces[15] = { 0x2409, 0x238B, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_473)
{
    // FDC0 0061;	
    // (‎‎ﷀ‎‎) ARABIC LIGATURE MEEM WITH JEEM WITH YEH FINAL FORM	[2409 238B 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDC0, 0x0061 };
    uint32_t const ces[15] = { 0x2409, 0x238B, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_474)
{
    // FDC0 0041;	
    // (‎‎ﷀ‎‎) ARABIC LIGATURE MEEM WITH JEEM WITH YEH FINAL FORM	[2409 238B 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFDC0, 0x0041 };
    uint32_t const ces[15] = { 0x2409, 0x238B, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_475)
{
    // FDC0 0062;	
    // (‎‎ﷀ‎‎) ARABIC LIGATURE MEEM WITH JEEM WITH YEH FINAL FORM	[2409 238B 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDC0, 0x0062 };
    uint32_t const ces[15] = { 0x2409, 0x238B, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_476)
{
    // FCCF 0021;	
    // (‎‎ﳏ‎‎) ARABIC LIGATURE MEEM WITH HAH INITIAL FORM	[2409 2392 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCF, 0x0021 };
    uint32_t const ces[12] = { 0x2409, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_477)
{
    // FC46 0021;	
    // (‎‎ﱆ‎‎) ARABIC LIGATURE MEEM WITH HAH ISOLATED FORM	[2409 2392 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC46, 0x0021 };
    uint32_t const ces[12] = { 0x2409, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_478)
{
    // FCCF 003F;	
    // (‎‎ﳏ‎‎) ARABIC LIGATURE MEEM WITH HAH INITIAL FORM	[2409 2392 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCF, 0x003F };
    uint32_t const ces[12] = { 0x2409, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_479)
{
    // FC46 003F;	
    // (‎‎ﱆ‎‎) ARABIC LIGATURE MEEM WITH HAH ISOLATED FORM	[2409 2392 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC46, 0x003F };
    uint32_t const ces[12] = { 0x2409, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_480)
{
    // FCCF 0061;	
    // (‎‎ﳏ‎‎) ARABIC LIGATURE MEEM WITH HAH INITIAL FORM	[2409 2392 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCF, 0x0061 };
    uint32_t const ces[12] = { 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_481)
{
    // FCCF 0041;	
    // (‎‎ﳏ‎‎) ARABIC LIGATURE MEEM WITH HAH INITIAL FORM	[2409 2392 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCCF, 0x0041 };
    uint32_t const ces[12] = { 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_482)
{
    // FC46 0061;	
    // (‎‎ﱆ‎‎) ARABIC LIGATURE MEEM WITH HAH ISOLATED FORM	[2409 2392 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC46, 0x0061 };
    uint32_t const ces[12] = { 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_483)
{
    // FC46 0041;	
    // (‎‎ﱆ‎‎) ARABIC LIGATURE MEEM WITH HAH ISOLATED FORM	[2409 2392 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC46, 0x0041 };
    uint32_t const ces[12] = { 0x2409, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_484)
{
    // FCCF 0062;	
    // (‎‎ﳏ‎‎) ARABIC LIGATURE MEEM WITH HAH INITIAL FORM	[2409 2392 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCCF, 0x0062 };
    uint32_t const ces[12] = { 0x2409, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_485)
{
    // FC46 0062;	
    // (‎‎ﱆ‎‎) ARABIC LIGATURE MEEM WITH HAH ISOLATED FORM	[2409 2392 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC46, 0x0062 };
    uint32_t const ces[12] = { 0x2409, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_486)
{
    // FD89 0021;	
    // (‎‎ﶉ‎‎) ARABIC LIGATURE MEEM WITH HAH WITH JEEM INITIAL FORM	[2409 2392 238B 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD89, 0x0021 };
    uint32_t const ces[15] = { 0x2409, 0x2392, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_487)
{
    // FD89 003F;	
    // (‎‎ﶉ‎‎) ARABIC LIGATURE MEEM WITH HAH WITH JEEM INITIAL FORM	[2409 2392 238B 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD89, 0x003F };
    uint32_t const ces[15] = { 0x2409, 0x2392, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_488)
{
    // FD89 0061;	
    // (‎‎ﶉ‎‎) ARABIC LIGATURE MEEM WITH HAH WITH JEEM INITIAL FORM	[2409 2392 238B 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD89, 0x0061 };
    uint32_t const ces[15] = { 0x2409, 0x2392, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_489)
{
    // FD89 0041;	
    // (‎‎ﶉ‎‎) ARABIC LIGATURE MEEM WITH HAH WITH JEEM INITIAL FORM	[2409 2392 238B 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD89, 0x0041 };
    uint32_t const ces[15] = { 0x2409, 0x2392, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_490)
{
    // FD89 0062;	
    // (‎‎ﶉ‎‎) ARABIC LIGATURE MEEM WITH HAH WITH JEEM INITIAL FORM	[2409 2392 238B 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD89, 0x0062 };
    uint32_t const ces[15] = { 0x2409, 0x2392, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_491)
{
    // FD8A 0021;	
    // (‎‎ﶊ‎‎) ARABIC LIGATURE MEEM WITH HAH WITH MEEM INITIAL FORM	[2409 2392 2409 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD8A, 0x0021 };
    uint32_t const ces[15] = { 0x2409, 0x2392, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_492)
{
    // FD8A 003F;	
    // (‎‎ﶊ‎‎) ARABIC LIGATURE MEEM WITH HAH WITH MEEM INITIAL FORM	[2409 2392 2409 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD8A, 0x003F };
    uint32_t const ces[15] = { 0x2409, 0x2392, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_493)
{
    // FD8A 0061;	
    // (‎‎ﶊ‎‎) ARABIC LIGATURE MEEM WITH HAH WITH MEEM INITIAL FORM	[2409 2392 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD8A, 0x0061 };
    uint32_t const ces[15] = { 0x2409, 0x2392, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_494)
{
    // FD8A 0041;	
    // (‎‎ﶊ‎‎) ARABIC LIGATURE MEEM WITH HAH WITH MEEM INITIAL FORM	[2409 2392 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD8A, 0x0041 };
    uint32_t const ces[15] = { 0x2409, 0x2392, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_495)
{
    // FD8A 0062;	
    // (‎‎ﶊ‎‎) ARABIC LIGATURE MEEM WITH HAH WITH MEEM INITIAL FORM	[2409 2392 2409 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD8A, 0x0062 };
    uint32_t const ces[15] = { 0x2409, 0x2392, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_496)
{
    // FDF4 0021;	
    // (‎‎ﷴ‎‎) ARABIC LIGATURE MOHAMMAD ISOLATED FORM	[2409 2392 2409 239D 0261 | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF4, 0x0021 };
    uint32_t const ces[18] = { 0x2409, 0x2392, 0x2409, 0x239D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_497)
{
    // FDF4 003F;	
    // (‎‎ﷴ‎‎) ARABIC LIGATURE MOHAMMAD ISOLATED FORM	[2409 2392 2409 239D 0267 | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF4, 0x003F };
    uint32_t const ces[18] = { 0x2409, 0x2392, 0x2409, 0x239D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_498)
{
    // FDF4 0061;	
    // (‎‎ﷴ‎‎) ARABIC LIGATURE MOHAMMAD ISOLATED FORM	[2409 2392 2409 239D 1CAD | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF4, 0x0061 };
    uint32_t const ces[18] = { 0x2409, 0x2392, 0x2409, 0x239D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_155_499)
{
    // FDF4 0041;	
    // (‎‎ﷴ‎‎) ARABIC LIGATURE MOHAMMAD ISOLATED FORM	[2409 2392 2409 239D 1CAD | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFDF4, 0x0041 };
    uint32_t const ces[18] = { 0x2409, 0x2392, 0x2409, 0x239D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

