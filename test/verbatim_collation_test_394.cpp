// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, verbatim_394_000)
{
    uint32_t const cps[2] = { 0x2F96B, 0x003F };

    // 2F96B 003F;	
    // (𥾆) CJK COMPATIBILITY IDEOGRAPH-2F96B	[FB84 DF86 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xDF86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F96B 003F;	
    // (𥾆) CJK COMPATIBILITY IDEOGRAPH-2F96B	[FB84 DF86 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xDF86, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_001)
{
    uint32_t const cps[2] = { 0x2F96B, 0x0061 };

    // 2F96B 0061;	
    // (𥾆) CJK COMPATIBILITY IDEOGRAPH-2F96B	[FB84 DF86 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xDF86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F96B 0061;	
    // (𥾆) CJK COMPATIBILITY IDEOGRAPH-2F96B	[FB84 DF86 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xDF86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_002)
{
    uint32_t const cps[2] = { 0x2F96B, 0x0041 };

    // 2F96B 0041;	
    // (𥾆) CJK COMPATIBILITY IDEOGRAPH-2F96B	[FB84 DF86 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xDF86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F96B 0041;	
    // (𥾆) CJK COMPATIBILITY IDEOGRAPH-2F96B	[FB84 DF86 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xDF86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_003)
{
    uint32_t const cps[2] = { 0x2F96B, 0x0062 };

    // 2F96B 0062;	
    // (𥾆) CJK COMPATIBILITY IDEOGRAPH-2F96B	[FB84 DF86 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xDF86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F96B 0062;	
    // (𥾆) CJK COMPATIBILITY IDEOGRAPH-2F96B	[FB84 DF86 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xDF86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_004)
{
    uint32_t const cps[2] = { 0x2F898, 0x0021 };

    // 2F898 0021;	
    // (𦇚) CJK COMPATIBILITY IDEOGRAPH-2F898	[FB84 E1DA 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE1DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F898 0021;	
    // (𦇚) CJK COMPATIBILITY IDEOGRAPH-2F898	[FB84 E1DA | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xE1DA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_005)
{
    uint32_t const cps[2] = { 0x2F898, 0x003F };

    // 2F898 003F;	
    // (𦇚) CJK COMPATIBILITY IDEOGRAPH-2F898	[FB84 E1DA 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE1DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F898 003F;	
    // (𦇚) CJK COMPATIBILITY IDEOGRAPH-2F898	[FB84 E1DA | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xE1DA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_006)
{
    uint32_t const cps[2] = { 0x2F898, 0x0061 };

    // 2F898 0061;	
    // (𦇚) CJK COMPATIBILITY IDEOGRAPH-2F898	[FB84 E1DA 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE1DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F898 0061;	
    // (𦇚) CJK COMPATIBILITY IDEOGRAPH-2F898	[FB84 E1DA 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE1DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_007)
{
    uint32_t const cps[2] = { 0x2F898, 0x0041 };

    // 2F898 0041;	
    // (𦇚) CJK COMPATIBILITY IDEOGRAPH-2F898	[FB84 E1DA 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE1DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F898 0041;	
    // (𦇚) CJK COMPATIBILITY IDEOGRAPH-2F898	[FB84 E1DA 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE1DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_008)
{
    uint32_t const cps[2] = { 0x2F898, 0x0062 };

    // 2F898 0062;	
    // (𦇚) CJK COMPATIBILITY IDEOGRAPH-2F898	[FB84 E1DA 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE1DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F898 0062;	
    // (𦇚) CJK COMPATIBILITY IDEOGRAPH-2F898	[FB84 E1DA 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE1DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_009)
{
    uint32_t const cps[2] = { 0x2F972, 0x0021 };

    // 2F972 0021;	
    // (𦈨) CJK COMPATIBILITY IDEOGRAPH-2F972	[FB84 E228 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE228, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F972 0021;	
    // (𦈨) CJK COMPATIBILITY IDEOGRAPH-2F972	[FB84 E228 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xE228, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_010)
{
    uint32_t const cps[2] = { 0x2F972, 0x003F };

    // 2F972 003F;	
    // (𦈨) CJK COMPATIBILITY IDEOGRAPH-2F972	[FB84 E228 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE228, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F972 003F;	
    // (𦈨) CJK COMPATIBILITY IDEOGRAPH-2F972	[FB84 E228 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xE228, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_011)
{
    uint32_t const cps[2] = { 0x2F972, 0x0061 };

    // 2F972 0061;	
    // (𦈨) CJK COMPATIBILITY IDEOGRAPH-2F972	[FB84 E228 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE228, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F972 0061;	
    // (𦈨) CJK COMPATIBILITY IDEOGRAPH-2F972	[FB84 E228 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE228, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_012)
{
    uint32_t const cps[2] = { 0x2F972, 0x0041 };

    // 2F972 0041;	
    // (𦈨) CJK COMPATIBILITY IDEOGRAPH-2F972	[FB84 E228 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE228, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F972 0041;	
    // (𦈨) CJK COMPATIBILITY IDEOGRAPH-2F972	[FB84 E228 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE228, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_013)
{
    uint32_t const cps[2] = { 0x2F972, 0x0062 };

    // 2F972 0062;	
    // (𦈨) CJK COMPATIBILITY IDEOGRAPH-2F972	[FB84 E228 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE228, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F972 0062;	
    // (𦈨) CJK COMPATIBILITY IDEOGRAPH-2F972	[FB84 E228 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE228, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_014)
{
    uint32_t const cps[2] = { 0x2F973, 0x0021 };

    // 2F973 0021;	
    // (𦉇) CJK COMPATIBILITY IDEOGRAPH-2F973	[FB84 E247 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE247, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F973 0021;	
    // (𦉇) CJK COMPATIBILITY IDEOGRAPH-2F973	[FB84 E247 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xE247, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_015)
{
    uint32_t const cps[2] = { 0x2F973, 0x003F };

    // 2F973 003F;	
    // (𦉇) CJK COMPATIBILITY IDEOGRAPH-2F973	[FB84 E247 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE247, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F973 003F;	
    // (𦉇) CJK COMPATIBILITY IDEOGRAPH-2F973	[FB84 E247 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xE247, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_016)
{
    uint32_t const cps[2] = { 0x2F973, 0x0061 };

    // 2F973 0061;	
    // (𦉇) CJK COMPATIBILITY IDEOGRAPH-2F973	[FB84 E247 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE247, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F973 0061;	
    // (𦉇) CJK COMPATIBILITY IDEOGRAPH-2F973	[FB84 E247 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE247, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_017)
{
    uint32_t const cps[2] = { 0x2F973, 0x0041 };

    // 2F973 0041;	
    // (𦉇) CJK COMPATIBILITY IDEOGRAPH-2F973	[FB84 E247 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE247, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F973 0041;	
    // (𦉇) CJK COMPATIBILITY IDEOGRAPH-2F973	[FB84 E247 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE247, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_018)
{
    uint32_t const cps[2] = { 0x2F973, 0x0062 };

    // 2F973 0062;	
    // (𦉇) CJK COMPATIBILITY IDEOGRAPH-2F973	[FB84 E247 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE247, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F973 0062;	
    // (𦉇) CJK COMPATIBILITY IDEOGRAPH-2F973	[FB84 E247 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE247, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_019)
{
    uint32_t const cps[2] = { 0x2F975, 0x0021 };

    // 2F975 0021;	
    // (𦋙) CJK COMPATIBILITY IDEOGRAPH-2F975	[FB84 E2D9 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE2D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F975 0021;	
    // (𦋙) CJK COMPATIBILITY IDEOGRAPH-2F975	[FB84 E2D9 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xE2D9, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_020)
{
    uint32_t const cps[2] = { 0x2F975, 0x003F };

    // 2F975 003F;	
    // (𦋙) CJK COMPATIBILITY IDEOGRAPH-2F975	[FB84 E2D9 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE2D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F975 003F;	
    // (𦋙) CJK COMPATIBILITY IDEOGRAPH-2F975	[FB84 E2D9 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xE2D9, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_021)
{
    uint32_t const cps[2] = { 0x2F975, 0x0061 };

    // 2F975 0061;	
    // (𦋙) CJK COMPATIBILITY IDEOGRAPH-2F975	[FB84 E2D9 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE2D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F975 0061;	
    // (𦋙) CJK COMPATIBILITY IDEOGRAPH-2F975	[FB84 E2D9 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE2D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_022)
{
    uint32_t const cps[2] = { 0x2F975, 0x0041 };

    // 2F975 0041;	
    // (𦋙) CJK COMPATIBILITY IDEOGRAPH-2F975	[FB84 E2D9 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE2D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F975 0041;	
    // (𦋙) CJK COMPATIBILITY IDEOGRAPH-2F975	[FB84 E2D9 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE2D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_023)
{
    uint32_t const cps[2] = { 0x2F975, 0x0062 };

    // 2F975 0062;	
    // (𦋙) CJK COMPATIBILITY IDEOGRAPH-2F975	[FB84 E2D9 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE2D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F975 0062;	
    // (𦋙) CJK COMPATIBILITY IDEOGRAPH-2F975	[FB84 E2D9 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE2D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_024)
{
    uint32_t const cps[2] = { 0x2F977, 0x0021 };

    // 2F977 0021;	
    // (𦌾) CJK COMPATIBILITY IDEOGRAPH-2F977	[FB84 E33E 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE33E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F977 0021;	
    // (𦌾) CJK COMPATIBILITY IDEOGRAPH-2F977	[FB84 E33E | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xE33E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_025)
{
    uint32_t const cps[2] = { 0x2F977, 0x003F };

    // 2F977 003F;	
    // (𦌾) CJK COMPATIBILITY IDEOGRAPH-2F977	[FB84 E33E 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE33E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F977 003F;	
    // (𦌾) CJK COMPATIBILITY IDEOGRAPH-2F977	[FB84 E33E | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xE33E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_026)
{
    uint32_t const cps[2] = { 0x2F977, 0x0061 };

    // 2F977 0061;	
    // (𦌾) CJK COMPATIBILITY IDEOGRAPH-2F977	[FB84 E33E 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE33E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F977 0061;	
    // (𦌾) CJK COMPATIBILITY IDEOGRAPH-2F977	[FB84 E33E 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE33E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_027)
{
    uint32_t const cps[2] = { 0x2F977, 0x0041 };

    // 2F977 0041;	
    // (𦌾) CJK COMPATIBILITY IDEOGRAPH-2F977	[FB84 E33E 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE33E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F977 0041;	
    // (𦌾) CJK COMPATIBILITY IDEOGRAPH-2F977	[FB84 E33E 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE33E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_028)
{
    uint32_t const cps[2] = { 0x2F977, 0x0062 };

    // 2F977 0062;	
    // (𦌾) CJK COMPATIBILITY IDEOGRAPH-2F977	[FB84 E33E 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE33E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F977 0062;	
    // (𦌾) CJK COMPATIBILITY IDEOGRAPH-2F977	[FB84 E33E 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE33E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_029)
{
    uint32_t const cps[2] = { 0x2F97B, 0x0021 };

    // 2F97B 0021;	
    // (𦓚) CJK COMPATIBILITY IDEOGRAPH-2F97B	[FB84 E4DA 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE4DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F97B 0021;	
    // (𦓚) CJK COMPATIBILITY IDEOGRAPH-2F97B	[FB84 E4DA | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xE4DA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_030)
{
    uint32_t const cps[2] = { 0x2F97B, 0x003F };

    // 2F97B 003F;	
    // (𦓚) CJK COMPATIBILITY IDEOGRAPH-2F97B	[FB84 E4DA 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE4DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F97B 003F;	
    // (𦓚) CJK COMPATIBILITY IDEOGRAPH-2F97B	[FB84 E4DA | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xE4DA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_031)
{
    uint32_t const cps[2] = { 0x2F97B, 0x0061 };

    // 2F97B 0061;	
    // (𦓚) CJK COMPATIBILITY IDEOGRAPH-2F97B	[FB84 E4DA 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE4DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F97B 0061;	
    // (𦓚) CJK COMPATIBILITY IDEOGRAPH-2F97B	[FB84 E4DA 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE4DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_032)
{
    uint32_t const cps[2] = { 0x2F97B, 0x0041 };

    // 2F97B 0041;	
    // (𦓚) CJK COMPATIBILITY IDEOGRAPH-2F97B	[FB84 E4DA 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE4DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F97B 0041;	
    // (𦓚) CJK COMPATIBILITY IDEOGRAPH-2F97B	[FB84 E4DA 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE4DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_033)
{
    uint32_t const cps[2] = { 0x2F97B, 0x0062 };

    // 2F97B 0062;	
    // (𦓚) CJK COMPATIBILITY IDEOGRAPH-2F97B	[FB84 E4DA 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE4DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F97B 0062;	
    // (𦓚) CJK COMPATIBILITY IDEOGRAPH-2F97B	[FB84 E4DA 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE4DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_034)
{
    uint32_t const cps[2] = { 0x2F97C, 0x0021 };

    // 2F97C 0021;	
    // (𦔣) CJK COMPATIBILITY IDEOGRAPH-2F97C	[FB84 E523 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE523, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F97C 0021;	
    // (𦔣) CJK COMPATIBILITY IDEOGRAPH-2F97C	[FB84 E523 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xE523, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_035)
{
    uint32_t const cps[2] = { 0x2F97C, 0x003F };

    // 2F97C 003F;	
    // (𦔣) CJK COMPATIBILITY IDEOGRAPH-2F97C	[FB84 E523 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE523, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F97C 003F;	
    // (𦔣) CJK COMPATIBILITY IDEOGRAPH-2F97C	[FB84 E523 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xE523, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_036)
{
    uint32_t const cps[2] = { 0x2F97C, 0x0061 };

    // 2F97C 0061;	
    // (𦔣) CJK COMPATIBILITY IDEOGRAPH-2F97C	[FB84 E523 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE523, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F97C 0061;	
    // (𦔣) CJK COMPATIBILITY IDEOGRAPH-2F97C	[FB84 E523 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE523, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_037)
{
    uint32_t const cps[2] = { 0x2F97C, 0x0041 };

    // 2F97C 0041;	
    // (𦔣) CJK COMPATIBILITY IDEOGRAPH-2F97C	[FB84 E523 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE523, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F97C 0041;	
    // (𦔣) CJK COMPATIBILITY IDEOGRAPH-2F97C	[FB84 E523 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE523, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_038)
{
    uint32_t const cps[2] = { 0x2F97C, 0x0062 };

    // 2F97C 0062;	
    // (𦔣) CJK COMPATIBILITY IDEOGRAPH-2F97C	[FB84 E523 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE523, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F97C 0062;	
    // (𦔣) CJK COMPATIBILITY IDEOGRAPH-2F97C	[FB84 E523 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE523, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_039)
{
    uint32_t const cps[2] = { 0x2F97E, 0x0021 };

    // 2F97E 0021;	
    // (𦖨) CJK COMPATIBILITY IDEOGRAPH-2F97E	[FB84 E5A8 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE5A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F97E 0021;	
    // (𦖨) CJK COMPATIBILITY IDEOGRAPH-2F97E	[FB84 E5A8 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xE5A8, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_040)
{
    uint32_t const cps[2] = { 0x2F97E, 0x003F };

    // 2F97E 003F;	
    // (𦖨) CJK COMPATIBILITY IDEOGRAPH-2F97E	[FB84 E5A8 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE5A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F97E 003F;	
    // (𦖨) CJK COMPATIBILITY IDEOGRAPH-2F97E	[FB84 E5A8 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xE5A8, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_041)
{
    uint32_t const cps[2] = { 0x2F97E, 0x0061 };

    // 2F97E 0061;	
    // (𦖨) CJK COMPATIBILITY IDEOGRAPH-2F97E	[FB84 E5A8 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE5A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F97E 0061;	
    // (𦖨) CJK COMPATIBILITY IDEOGRAPH-2F97E	[FB84 E5A8 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE5A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_042)
{
    uint32_t const cps[2] = { 0x2F97E, 0x0041 };

    // 2F97E 0041;	
    // (𦖨) CJK COMPATIBILITY IDEOGRAPH-2F97E	[FB84 E5A8 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE5A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F97E 0041;	
    // (𦖨) CJK COMPATIBILITY IDEOGRAPH-2F97E	[FB84 E5A8 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE5A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_043)
{
    uint32_t const cps[2] = { 0x2F97E, 0x0062 };

    // 2F97E 0062;	
    // (𦖨) CJK COMPATIBILITY IDEOGRAPH-2F97E	[FB84 E5A8 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE5A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F97E 0062;	
    // (𦖨) CJK COMPATIBILITY IDEOGRAPH-2F97E	[FB84 E5A8 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE5A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_044)
{
    uint32_t const cps[2] = { 0x2F987, 0x0021 };

    // 2F987 0021;	
    // (𦞧) CJK COMPATIBILITY IDEOGRAPH-2F987	[FB84 E7A7 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE7A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F987 0021;	
    // (𦞧) CJK COMPATIBILITY IDEOGRAPH-2F987	[FB84 E7A7 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xE7A7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_045)
{
    uint32_t const cps[2] = { 0x2F987, 0x003F };

    // 2F987 003F;	
    // (𦞧) CJK COMPATIBILITY IDEOGRAPH-2F987	[FB84 E7A7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE7A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F987 003F;	
    // (𦞧) CJK COMPATIBILITY IDEOGRAPH-2F987	[FB84 E7A7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xE7A7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_046)
{
    uint32_t const cps[2] = { 0x2F987, 0x0061 };

    // 2F987 0061;	
    // (𦞧) CJK COMPATIBILITY IDEOGRAPH-2F987	[FB84 E7A7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE7A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F987 0061;	
    // (𦞧) CJK COMPATIBILITY IDEOGRAPH-2F987	[FB84 E7A7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE7A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_047)
{
    uint32_t const cps[2] = { 0x2F987, 0x0041 };

    // 2F987 0041;	
    // (𦞧) CJK COMPATIBILITY IDEOGRAPH-2F987	[FB84 E7A7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE7A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F987 0041;	
    // (𦞧) CJK COMPATIBILITY IDEOGRAPH-2F987	[FB84 E7A7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE7A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_048)
{
    uint32_t const cps[2] = { 0x2F987, 0x0062 };

    // 2F987 0062;	
    // (𦞧) CJK COMPATIBILITY IDEOGRAPH-2F987	[FB84 E7A7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE7A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F987 0062;	
    // (𦞧) CJK COMPATIBILITY IDEOGRAPH-2F987	[FB84 E7A7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE7A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_049)
{
    uint32_t const cps[2] = { 0x2F988, 0x0021 };

    // 2F988 0021;	
    // (𦞵) CJK COMPATIBILITY IDEOGRAPH-2F988	[FB84 E7B5 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE7B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F988 0021;	
    // (𦞵) CJK COMPATIBILITY IDEOGRAPH-2F988	[FB84 E7B5 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xE7B5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_050)
{
    uint32_t const cps[2] = { 0x2F988, 0x003F };

    // 2F988 003F;	
    // (𦞵) CJK COMPATIBILITY IDEOGRAPH-2F988	[FB84 E7B5 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE7B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F988 003F;	
    // (𦞵) CJK COMPATIBILITY IDEOGRAPH-2F988	[FB84 E7B5 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xE7B5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_051)
{
    uint32_t const cps[2] = { 0x2F988, 0x0061 };

    // 2F988 0061;	
    // (𦞵) CJK COMPATIBILITY IDEOGRAPH-2F988	[FB84 E7B5 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE7B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F988 0061;	
    // (𦞵) CJK COMPATIBILITY IDEOGRAPH-2F988	[FB84 E7B5 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE7B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_052)
{
    uint32_t const cps[2] = { 0x2F988, 0x0041 };

    // 2F988 0041;	
    // (𦞵) CJK COMPATIBILITY IDEOGRAPH-2F988	[FB84 E7B5 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE7B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F988 0041;	
    // (𦞵) CJK COMPATIBILITY IDEOGRAPH-2F988	[FB84 E7B5 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE7B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_053)
{
    uint32_t const cps[2] = { 0x2F988, 0x0062 };

    // 2F988 0062;	
    // (𦞵) CJK COMPATIBILITY IDEOGRAPH-2F988	[FB84 E7B5 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xE7B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F988 0062;	
    // (𦞵) CJK COMPATIBILITY IDEOGRAPH-2F988	[FB84 E7B5 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xE7B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_054)
{
    uint32_t const cps[2] = { 0x2F997, 0x0021 };

    // 2F997 0021;	
    // (𦬼) CJK COMPATIBILITY IDEOGRAPH-2F997	[FB84 EB3C 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xEB3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F997 0021;	
    // (𦬼) CJK COMPATIBILITY IDEOGRAPH-2F997	[FB84 EB3C | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xEB3C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_055)
{
    uint32_t const cps[2] = { 0x2F997, 0x003F };

    // 2F997 003F;	
    // (𦬼) CJK COMPATIBILITY IDEOGRAPH-2F997	[FB84 EB3C 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xEB3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F997 003F;	
    // (𦬼) CJK COMPATIBILITY IDEOGRAPH-2F997	[FB84 EB3C | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xEB3C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_056)
{
    uint32_t const cps[2] = { 0x2F997, 0x0061 };

    // 2F997 0061;	
    // (𦬼) CJK COMPATIBILITY IDEOGRAPH-2F997	[FB84 EB3C 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xEB3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F997 0061;	
    // (𦬼) CJK COMPATIBILITY IDEOGRAPH-2F997	[FB84 EB3C 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xEB3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_057)
{
    uint32_t const cps[2] = { 0x2F997, 0x0041 };

    // 2F997 0041;	
    // (𦬼) CJK COMPATIBILITY IDEOGRAPH-2F997	[FB84 EB3C 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xEB3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F997 0041;	
    // (𦬼) CJK COMPATIBILITY IDEOGRAPH-2F997	[FB84 EB3C 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xEB3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_058)
{
    uint32_t const cps[2] = { 0x2F997, 0x0062 };

    // 2F997 0062;	
    // (𦬼) CJK COMPATIBILITY IDEOGRAPH-2F997	[FB84 EB3C 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xEB3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F997 0062;	
    // (𦬼) CJK COMPATIBILITY IDEOGRAPH-2F997	[FB84 EB3C 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xEB3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_059)
{
    uint32_t const cps[2] = { 0x2F9A4, 0x0021 };

    // 2F9A4 0021;	
    // (𦰶) CJK COMPATIBILITY IDEOGRAPH-2F9A4	[FB84 EC36 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xEC36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9A4 0021;	
    // (𦰶) CJK COMPATIBILITY IDEOGRAPH-2F9A4	[FB84 EC36 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xEC36, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_060)
{
    uint32_t const cps[2] = { 0x2F9A4, 0x003F };

    // 2F9A4 003F;	
    // (𦰶) CJK COMPATIBILITY IDEOGRAPH-2F9A4	[FB84 EC36 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xEC36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9A4 003F;	
    // (𦰶) CJK COMPATIBILITY IDEOGRAPH-2F9A4	[FB84 EC36 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xEC36, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_061)
{
    uint32_t const cps[2] = { 0x2F9A4, 0x0061 };

    // 2F9A4 0061;	
    // (𦰶) CJK COMPATIBILITY IDEOGRAPH-2F9A4	[FB84 EC36 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xEC36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9A4 0061;	
    // (𦰶) CJK COMPATIBILITY IDEOGRAPH-2F9A4	[FB84 EC36 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xEC36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_062)
{
    uint32_t const cps[2] = { 0x2F9A4, 0x0041 };

    // 2F9A4 0041;	
    // (𦰶) CJK COMPATIBILITY IDEOGRAPH-2F9A4	[FB84 EC36 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xEC36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9A4 0041;	
    // (𦰶) CJK COMPATIBILITY IDEOGRAPH-2F9A4	[FB84 EC36 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xEC36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_063)
{
    uint32_t const cps[2] = { 0x2F9A4, 0x0062 };

    // 2F9A4 0062;	
    // (𦰶) CJK COMPATIBILITY IDEOGRAPH-2F9A4	[FB84 EC36 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xEC36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9A4 0062;	
    // (𦰶) CJK COMPATIBILITY IDEOGRAPH-2F9A4	[FB84 EC36 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xEC36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_064)
{
    uint32_t const cps[2] = { 0x2F9A6, 0x0021 };

    // 2F9A6 0021;	
    // (𦳕) CJK COMPATIBILITY IDEOGRAPH-2F9A6	[FB84 ECD5 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xECD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9A6 0021;	
    // (𦳕) CJK COMPATIBILITY IDEOGRAPH-2F9A6	[FB84 ECD5 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xECD5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_065)
{
    uint32_t const cps[2] = { 0x2F9A6, 0x003F };

    // 2F9A6 003F;	
    // (𦳕) CJK COMPATIBILITY IDEOGRAPH-2F9A6	[FB84 ECD5 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xECD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9A6 003F;	
    // (𦳕) CJK COMPATIBILITY IDEOGRAPH-2F9A6	[FB84 ECD5 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xECD5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_066)
{
    uint32_t const cps[2] = { 0x2F9A6, 0x0061 };

    // 2F9A6 0061;	
    // (𦳕) CJK COMPATIBILITY IDEOGRAPH-2F9A6	[FB84 ECD5 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xECD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9A6 0061;	
    // (𦳕) CJK COMPATIBILITY IDEOGRAPH-2F9A6	[FB84 ECD5 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xECD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_067)
{
    uint32_t const cps[2] = { 0x2F9A6, 0x0041 };

    // 2F9A6 0041;	
    // (𦳕) CJK COMPATIBILITY IDEOGRAPH-2F9A6	[FB84 ECD5 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xECD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9A6 0041;	
    // (𦳕) CJK COMPATIBILITY IDEOGRAPH-2F9A6	[FB84 ECD5 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xECD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_068)
{
    uint32_t const cps[2] = { 0x2F9A6, 0x0062 };

    // 2F9A6 0062;	
    // (𦳕) CJK COMPATIBILITY IDEOGRAPH-2F9A6	[FB84 ECD5 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xECD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9A6 0062;	
    // (𦳕) CJK COMPATIBILITY IDEOGRAPH-2F9A6	[FB84 ECD5 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xECD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_069)
{
    uint32_t const cps[2] = { 0x2F9A5, 0x0021 };

    // 2F9A5 0021;	
    // (𦵫) CJK COMPATIBILITY IDEOGRAPH-2F9A5	[FB84 ED6B 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xED6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9A5 0021;	
    // (𦵫) CJK COMPATIBILITY IDEOGRAPH-2F9A5	[FB84 ED6B | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xED6B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_070)
{
    uint32_t const cps[2] = { 0x2F9A5, 0x003F };

    // 2F9A5 003F;	
    // (𦵫) CJK COMPATIBILITY IDEOGRAPH-2F9A5	[FB84 ED6B 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xED6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9A5 003F;	
    // (𦵫) CJK COMPATIBILITY IDEOGRAPH-2F9A5	[FB84 ED6B | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xED6B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_071)
{
    uint32_t const cps[2] = { 0x2F9A5, 0x0061 };

    // 2F9A5 0061;	
    // (𦵫) CJK COMPATIBILITY IDEOGRAPH-2F9A5	[FB84 ED6B 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xED6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9A5 0061;	
    // (𦵫) CJK COMPATIBILITY IDEOGRAPH-2F9A5	[FB84 ED6B 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xED6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_072)
{
    uint32_t const cps[2] = { 0x2F9A5, 0x0041 };

    // 2F9A5 0041;	
    // (𦵫) CJK COMPATIBILITY IDEOGRAPH-2F9A5	[FB84 ED6B 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xED6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9A5 0041;	
    // (𦵫) CJK COMPATIBILITY IDEOGRAPH-2F9A5	[FB84 ED6B 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xED6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_073)
{
    uint32_t const cps[2] = { 0x2F9A5, 0x0062 };

    // 2F9A5 0062;	
    // (𦵫) CJK COMPATIBILITY IDEOGRAPH-2F9A5	[FB84 ED6B 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xED6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9A5 0062;	
    // (𦵫) CJK COMPATIBILITY IDEOGRAPH-2F9A5	[FB84 ED6B 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xED6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_074)
{
    uint32_t const cps[2] = { 0x2F9AD, 0x0021 };

    // 2F9AD 0021;	
    // (𦼬) CJK COMPATIBILITY IDEOGRAPH-2F9AD	[FB84 EF2C 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xEF2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9AD 0021;	
    // (𦼬) CJK COMPATIBILITY IDEOGRAPH-2F9AD	[FB84 EF2C | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xEF2C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_075)
{
    uint32_t const cps[2] = { 0x2F9AD, 0x003F };

    // 2F9AD 003F;	
    // (𦼬) CJK COMPATIBILITY IDEOGRAPH-2F9AD	[FB84 EF2C 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xEF2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9AD 003F;	
    // (𦼬) CJK COMPATIBILITY IDEOGRAPH-2F9AD	[FB84 EF2C | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xEF2C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_076)
{
    uint32_t const cps[2] = { 0x2F9AD, 0x0061 };

    // 2F9AD 0061;	
    // (𦼬) CJK COMPATIBILITY IDEOGRAPH-2F9AD	[FB84 EF2C 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xEF2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9AD 0061;	
    // (𦼬) CJK COMPATIBILITY IDEOGRAPH-2F9AD	[FB84 EF2C 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xEF2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_077)
{
    uint32_t const cps[2] = { 0x2F9AD, 0x0041 };

    // 2F9AD 0041;	
    // (𦼬) CJK COMPATIBILITY IDEOGRAPH-2F9AD	[FB84 EF2C 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xEF2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9AD 0041;	
    // (𦼬) CJK COMPATIBILITY IDEOGRAPH-2F9AD	[FB84 EF2C 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xEF2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_078)
{
    uint32_t const cps[2] = { 0x2F9AD, 0x0062 };

    // 2F9AD 0062;	
    // (𦼬) CJK COMPATIBILITY IDEOGRAPH-2F9AD	[FB84 EF2C 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xEF2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9AD 0062;	
    // (𦼬) CJK COMPATIBILITY IDEOGRAPH-2F9AD	[FB84 EF2C 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xEF2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_079)
{
    uint32_t const cps[2] = { 0x2F9B0, 0x0021 };

    // 2F9B0 0021;	
    // (𦾱) CJK COMPATIBILITY IDEOGRAPH-2F9B0	[FB84 EFB1 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xEFB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9B0 0021;	
    // (𦾱) CJK COMPATIBILITY IDEOGRAPH-2F9B0	[FB84 EFB1 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xEFB1, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_080)
{
    uint32_t const cps[2] = { 0x2F9B0, 0x003F };

    // 2F9B0 003F;	
    // (𦾱) CJK COMPATIBILITY IDEOGRAPH-2F9B0	[FB84 EFB1 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xEFB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9B0 003F;	
    // (𦾱) CJK COMPATIBILITY IDEOGRAPH-2F9B0	[FB84 EFB1 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xEFB1, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_081)
{
    uint32_t const cps[2] = { 0x2F9B0, 0x0061 };

    // 2F9B0 0061;	
    // (𦾱) CJK COMPATIBILITY IDEOGRAPH-2F9B0	[FB84 EFB1 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xEFB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9B0 0061;	
    // (𦾱) CJK COMPATIBILITY IDEOGRAPH-2F9B0	[FB84 EFB1 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xEFB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_082)
{
    uint32_t const cps[2] = { 0x2F9B0, 0x0041 };

    // 2F9B0 0041;	
    // (𦾱) CJK COMPATIBILITY IDEOGRAPH-2F9B0	[FB84 EFB1 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xEFB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9B0 0041;	
    // (𦾱) CJK COMPATIBILITY IDEOGRAPH-2F9B0	[FB84 EFB1 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xEFB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_083)
{
    uint32_t const cps[2] = { 0x2F9B0, 0x0062 };

    // 2F9B0 0062;	
    // (𦾱) CJK COMPATIBILITY IDEOGRAPH-2F9B0	[FB84 EFB1 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xEFB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9B0 0062;	
    // (𦾱) CJK COMPATIBILITY IDEOGRAPH-2F9B0	[FB84 EFB1 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xEFB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_084)
{
    uint32_t const cps[2] = { 0x2F9B1, 0x0021 };

    // 2F9B1 0021;	
    // (𧃒) CJK COMPATIBILITY IDEOGRAPH-2F9B1	[FB84 F0D2 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF0D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9B1 0021;	
    // (𧃒) CJK COMPATIBILITY IDEOGRAPH-2F9B1	[FB84 F0D2 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xF0D2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_085)
{
    uint32_t const cps[2] = { 0x2F9B1, 0x003F };

    // 2F9B1 003F;	
    // (𧃒) CJK COMPATIBILITY IDEOGRAPH-2F9B1	[FB84 F0D2 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF0D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9B1 003F;	
    // (𧃒) CJK COMPATIBILITY IDEOGRAPH-2F9B1	[FB84 F0D2 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xF0D2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_086)
{
    uint32_t const cps[2] = { 0x2F9B1, 0x0061 };

    // 2F9B1 0061;	
    // (𧃒) CJK COMPATIBILITY IDEOGRAPH-2F9B1	[FB84 F0D2 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF0D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9B1 0061;	
    // (𧃒) CJK COMPATIBILITY IDEOGRAPH-2F9B1	[FB84 F0D2 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xF0D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_087)
{
    uint32_t const cps[2] = { 0x2F9B1, 0x0041 };

    // 2F9B1 0041;	
    // (𧃒) CJK COMPATIBILITY IDEOGRAPH-2F9B1	[FB84 F0D2 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF0D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9B1 0041;	
    // (𧃒) CJK COMPATIBILITY IDEOGRAPH-2F9B1	[FB84 F0D2 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xF0D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_088)
{
    uint32_t const cps[2] = { 0x2F9B1, 0x0062 };

    // 2F9B1 0062;	
    // (𧃒) CJK COMPATIBILITY IDEOGRAPH-2F9B1	[FB84 F0D2 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF0D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9B1 0062;	
    // (𧃒) CJK COMPATIBILITY IDEOGRAPH-2F9B1	[FB84 F0D2 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xF0D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_089)
{
    uint32_t const cps[2] = { 0x2F9AB, 0x0021 };

    // 2F9AB 0021;	
    // (𧏊) CJK COMPATIBILITY IDEOGRAPH-2F9AB	[FB84 F3CA 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF3CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9AB 0021;	
    // (𧏊) CJK COMPATIBILITY IDEOGRAPH-2F9AB	[FB84 F3CA | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xF3CA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_090)
{
    uint32_t const cps[2] = { 0x2F9AB, 0x003F };

    // 2F9AB 003F;	
    // (𧏊) CJK COMPATIBILITY IDEOGRAPH-2F9AB	[FB84 F3CA 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF3CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9AB 003F;	
    // (𧏊) CJK COMPATIBILITY IDEOGRAPH-2F9AB	[FB84 F3CA | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xF3CA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_091)
{
    uint32_t const cps[2] = { 0x2F9AB, 0x0061 };

    // 2F9AB 0061;	
    // (𧏊) CJK COMPATIBILITY IDEOGRAPH-2F9AB	[FB84 F3CA 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF3CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9AB 0061;	
    // (𧏊) CJK COMPATIBILITY IDEOGRAPH-2F9AB	[FB84 F3CA 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xF3CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_092)
{
    uint32_t const cps[2] = { 0x2F9AB, 0x0041 };

    // 2F9AB 0041;	
    // (𧏊) CJK COMPATIBILITY IDEOGRAPH-2F9AB	[FB84 F3CA 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF3CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9AB 0041;	
    // (𧏊) CJK COMPATIBILITY IDEOGRAPH-2F9AB	[FB84 F3CA 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xF3CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_093)
{
    uint32_t const cps[2] = { 0x2F9AB, 0x0062 };

    // 2F9AB 0062;	
    // (𧏊) CJK COMPATIBILITY IDEOGRAPH-2F9AB	[FB84 F3CA 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF3CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9AB 0062;	
    // (𧏊) CJK COMPATIBILITY IDEOGRAPH-2F9AB	[FB84 F3CA 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xF3CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_094)
{
    uint32_t const cps[2] = { 0x2F9C5, 0x0021 };

    // 2F9C5 0021;	
    // (𧙧) CJK COMPATIBILITY IDEOGRAPH-2F9C5	[FB84 F667 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF667, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9C5 0021;	
    // (𧙧) CJK COMPATIBILITY IDEOGRAPH-2F9C5	[FB84 F667 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xF667, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_095)
{
    uint32_t const cps[2] = { 0x2F9C5, 0x003F };

    // 2F9C5 003F;	
    // (𧙧) CJK COMPATIBILITY IDEOGRAPH-2F9C5	[FB84 F667 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF667, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9C5 003F;	
    // (𧙧) CJK COMPATIBILITY IDEOGRAPH-2F9C5	[FB84 F667 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xF667, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_096)
{
    uint32_t const cps[2] = { 0x2F9C5, 0x0061 };

    // 2F9C5 0061;	
    // (𧙧) CJK COMPATIBILITY IDEOGRAPH-2F9C5	[FB84 F667 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF667, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9C5 0061;	
    // (𧙧) CJK COMPATIBILITY IDEOGRAPH-2F9C5	[FB84 F667 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xF667, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_097)
{
    uint32_t const cps[2] = { 0x2F9C5, 0x0041 };

    // 2F9C5 0041;	
    // (𧙧) CJK COMPATIBILITY IDEOGRAPH-2F9C5	[FB84 F667 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF667, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9C5 0041;	
    // (𧙧) CJK COMPATIBILITY IDEOGRAPH-2F9C5	[FB84 F667 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xF667, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_098)
{
    uint32_t const cps[2] = { 0x2F9C5, 0x0062 };

    // 2F9C5 0062;	
    // (𧙧) CJK COMPATIBILITY IDEOGRAPH-2F9C5	[FB84 F667 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF667, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9C5 0062;	
    // (𧙧) CJK COMPATIBILITY IDEOGRAPH-2F9C5	[FB84 F667 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xF667, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_099)
{
    uint32_t const cps[2] = { 0x2F9CB, 0x0021 };

    // 2F9CB 0021;	
    // (𧢮) CJK COMPATIBILITY IDEOGRAPH-2F9CB	[FB84 F8AE 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF8AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9CB 0021;	
    // (𧢮) CJK COMPATIBILITY IDEOGRAPH-2F9CB	[FB84 F8AE | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xF8AE, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_100)
{
    uint32_t const cps[2] = { 0x2F9CB, 0x003F };

    // 2F9CB 003F;	
    // (𧢮) CJK COMPATIBILITY IDEOGRAPH-2F9CB	[FB84 F8AE 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF8AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9CB 003F;	
    // (𧢮) CJK COMPATIBILITY IDEOGRAPH-2F9CB	[FB84 F8AE | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xF8AE, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_101)
{
    uint32_t const cps[2] = { 0x2F9CB, 0x0061 };

    // 2F9CB 0061;	
    // (𧢮) CJK COMPATIBILITY IDEOGRAPH-2F9CB	[FB84 F8AE 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF8AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9CB 0061;	
    // (𧢮) CJK COMPATIBILITY IDEOGRAPH-2F9CB	[FB84 F8AE 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xF8AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_102)
{
    uint32_t const cps[2] = { 0x2F9CB, 0x0041 };

    // 2F9CB 0041;	
    // (𧢮) CJK COMPATIBILITY IDEOGRAPH-2F9CB	[FB84 F8AE 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF8AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9CB 0041;	
    // (𧢮) CJK COMPATIBILITY IDEOGRAPH-2F9CB	[FB84 F8AE 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xF8AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_103)
{
    uint32_t const cps[2] = { 0x2F9CB, 0x0062 };

    // 2F9CB 0062;	
    // (𧢮) CJK COMPATIBILITY IDEOGRAPH-2F9CB	[FB84 F8AE 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF8AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9CB 0062;	
    // (𧢮) CJK COMPATIBILITY IDEOGRAPH-2F9CB	[FB84 F8AE 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xF8AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_104)
{
    uint32_t const cps[2] = { 0x2F9CC, 0x0021 };

    // 2F9CC 0021;	
    // (𧥦) CJK COMPATIBILITY IDEOGRAPH-2F9CC	[FB84 F966 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF966, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9CC 0021;	
    // (𧥦) CJK COMPATIBILITY IDEOGRAPH-2F9CC	[FB84 F966 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xF966, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_105)
{
    uint32_t const cps[2] = { 0x2F9CC, 0x003F };

    // 2F9CC 003F;	
    // (𧥦) CJK COMPATIBILITY IDEOGRAPH-2F9CC	[FB84 F966 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF966, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9CC 003F;	
    // (𧥦) CJK COMPATIBILITY IDEOGRAPH-2F9CC	[FB84 F966 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xF966, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_106)
{
    uint32_t const cps[2] = { 0x2F9CC, 0x0061 };

    // 2F9CC 0061;	
    // (𧥦) CJK COMPATIBILITY IDEOGRAPH-2F9CC	[FB84 F966 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF966, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9CC 0061;	
    // (𧥦) CJK COMPATIBILITY IDEOGRAPH-2F9CC	[FB84 F966 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xF966, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_107)
{
    uint32_t const cps[2] = { 0x2F9CC, 0x0041 };

    // 2F9CC 0041;	
    // (𧥦) CJK COMPATIBILITY IDEOGRAPH-2F9CC	[FB84 F966 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF966, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9CC 0041;	
    // (𧥦) CJK COMPATIBILITY IDEOGRAPH-2F9CC	[FB84 F966 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xF966, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_108)
{
    uint32_t const cps[2] = { 0x2F9CC, 0x0062 };

    // 2F9CC 0062;	
    // (𧥦) CJK COMPATIBILITY IDEOGRAPH-2F9CC	[FB84 F966 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xF966, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9CC 0062;	
    // (𧥦) CJK COMPATIBILITY IDEOGRAPH-2F9CC	[FB84 F966 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xF966, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_109)
{
    uint32_t const cps[2] = { 0x2F9D3, 0x0021 };

    // 2F9D3 0021;	
    // (𧲨) CJK COMPATIBILITY IDEOGRAPH-2F9D3	[FB84 FCA8 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xFCA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9D3 0021;	
    // (𧲨) CJK COMPATIBILITY IDEOGRAPH-2F9D3	[FB84 FCA8 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xFCA8, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_110)
{
    uint32_t const cps[2] = { 0x2F9D3, 0x003F };

    // 2F9D3 003F;	
    // (𧲨) CJK COMPATIBILITY IDEOGRAPH-2F9D3	[FB84 FCA8 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xFCA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9D3 003F;	
    // (𧲨) CJK COMPATIBILITY IDEOGRAPH-2F9D3	[FB84 FCA8 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xFCA8, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_111)
{
    uint32_t const cps[2] = { 0x2F9D3, 0x0061 };

    // 2F9D3 0061;	
    // (𧲨) CJK COMPATIBILITY IDEOGRAPH-2F9D3	[FB84 FCA8 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xFCA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9D3 0061;	
    // (𧲨) CJK COMPATIBILITY IDEOGRAPH-2F9D3	[FB84 FCA8 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xFCA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_112)
{
    uint32_t const cps[2] = { 0x2F9D3, 0x0041 };

    // 2F9D3 0041;	
    // (𧲨) CJK COMPATIBILITY IDEOGRAPH-2F9D3	[FB84 FCA8 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xFCA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9D3 0041;	
    // (𧲨) CJK COMPATIBILITY IDEOGRAPH-2F9D3	[FB84 FCA8 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xFCA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_113)
{
    uint32_t const cps[2] = { 0x2F9D3, 0x0062 };

    // 2F9D3 0062;	
    // (𧲨) CJK COMPATIBILITY IDEOGRAPH-2F9D3	[FB84 FCA8 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xFCA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9D3 0062;	
    // (𧲨) CJK COMPATIBILITY IDEOGRAPH-2F9D3	[FB84 FCA8 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xFCA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_114)
{
    uint32_t const cps[2] = { 0xFAD7, 0x0021 };

    // FAD7 0021;	
    // (𧻓) CJK COMPATIBILITY IDEOGRAPH-FAD7	[FB84 FED3 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xFED3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FAD7 0021;	
    // (𧻓) CJK COMPATIBILITY IDEOGRAPH-FAD7	[FB84 FED3 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xFED3, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_115)
{
    uint32_t const cps[2] = { 0xFAD7, 0x003F };

    // FAD7 003F;	
    // (𧻓) CJK COMPATIBILITY IDEOGRAPH-FAD7	[FB84 FED3 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xFED3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FAD7 003F;	
    // (𧻓) CJK COMPATIBILITY IDEOGRAPH-FAD7	[FB84 FED3 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xFED3, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_116)
{
    uint32_t const cps[2] = { 0xFAD7, 0x0061 };

    // FAD7 0061;	
    // (𧻓) CJK COMPATIBILITY IDEOGRAPH-FAD7	[FB84 FED3 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xFED3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FAD7 0061;	
    // (𧻓) CJK COMPATIBILITY IDEOGRAPH-FAD7	[FB84 FED3 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xFED3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_117)
{
    uint32_t const cps[2] = { 0xFAD7, 0x0041 };

    // FAD7 0041;	
    // (𧻓) CJK COMPATIBILITY IDEOGRAPH-FAD7	[FB84 FED3 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xFED3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FAD7 0041;	
    // (𧻓) CJK COMPATIBILITY IDEOGRAPH-FAD7	[FB84 FED3 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xFED3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_118)
{
    uint32_t const cps[2] = { 0xFAD7, 0x0062 };

    // FAD7 0062;	
    // (𧻓) CJK COMPATIBILITY IDEOGRAPH-FAD7	[FB84 FED3 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xFED3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FAD7 0062;	
    // (𧻓) CJK COMPATIBILITY IDEOGRAPH-FAD7	[FB84 FED3 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xFED3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_119)
{
    uint32_t const cps[2] = { 0x2F9D8, 0x0021 };

    // 2F9D8 0021;	
    // (𧼯) CJK COMPATIBILITY IDEOGRAPH-2F9D8	[FB84 FF2F 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xFF2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9D8 0021;	
    // (𧼯) CJK COMPATIBILITY IDEOGRAPH-2F9D8	[FB84 FF2F | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xFF2F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_120)
{
    uint32_t const cps[2] = { 0x2F9D8, 0x003F };

    // 2F9D8 003F;	
    // (𧼯) CJK COMPATIBILITY IDEOGRAPH-2F9D8	[FB84 FF2F 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xFF2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9D8 003F;	
    // (𧼯) CJK COMPATIBILITY IDEOGRAPH-2F9D8	[FB84 FF2F | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB84, 0xFF2F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_121)
{
    uint32_t const cps[2] = { 0x2F9D8, 0x0061 };

    // 2F9D8 0061;	
    // (𧼯) CJK COMPATIBILITY IDEOGRAPH-2F9D8	[FB84 FF2F 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xFF2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9D8 0061;	
    // (𧼯) CJK COMPATIBILITY IDEOGRAPH-2F9D8	[FB84 FF2F 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xFF2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_122)
{
    uint32_t const cps[2] = { 0x2F9D8, 0x0041 };

    // 2F9D8 0041;	
    // (𧼯) CJK COMPATIBILITY IDEOGRAPH-2F9D8	[FB84 FF2F 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xFF2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9D8 0041;	
    // (𧼯) CJK COMPATIBILITY IDEOGRAPH-2F9D8	[FB84 FF2F 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xFF2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_123)
{
    uint32_t const cps[2] = { 0x2F9D8, 0x0062 };

    // 2F9D8 0062;	
    // (𧼯) CJK COMPATIBILITY IDEOGRAPH-2F9D8	[FB84 FF2F 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB84, 0xFF2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9D8 0062;	
    // (𧼯) CJK COMPATIBILITY IDEOGRAPH-2F9D8	[FB84 FF2F 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB84, 0xFF2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_124)
{
    uint32_t const cps[2] = { 0x2F9E0, 0x0021 };

    // 2F9E0 0021;	
    // (𨗒) CJK COMPATIBILITY IDEOGRAPH-2F9E0	[FB85 85D2 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x85D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9E0 0021;	
    // (𨗒) CJK COMPATIBILITY IDEOGRAPH-2F9E0	[FB85 85D2 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x85D2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_125)
{
    uint32_t const cps[2] = { 0x2F9E0, 0x003F };

    // 2F9E0 003F;	
    // (𨗒) CJK COMPATIBILITY IDEOGRAPH-2F9E0	[FB85 85D2 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x85D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9E0 003F;	
    // (𨗒) CJK COMPATIBILITY IDEOGRAPH-2F9E0	[FB85 85D2 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x85D2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_126)
{
    uint32_t const cps[2] = { 0x2F9E0, 0x0061 };

    // 2F9E0 0061;	
    // (𨗒) CJK COMPATIBILITY IDEOGRAPH-2F9E0	[FB85 85D2 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x85D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9E0 0061;	
    // (𨗒) CJK COMPATIBILITY IDEOGRAPH-2F9E0	[FB85 85D2 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x85D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_127)
{
    uint32_t const cps[2] = { 0x2F9E0, 0x0041 };

    // 2F9E0 0041;	
    // (𨗒) CJK COMPATIBILITY IDEOGRAPH-2F9E0	[FB85 85D2 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x85D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9E0 0041;	
    // (𨗒) CJK COMPATIBILITY IDEOGRAPH-2F9E0	[FB85 85D2 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x85D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_128)
{
    uint32_t const cps[2] = { 0x2F9E0, 0x0062 };

    // 2F9E0 0062;	
    // (𨗒) CJK COMPATIBILITY IDEOGRAPH-2F9E0	[FB85 85D2 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x85D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9E0 0062;	
    // (𨗒) CJK COMPATIBILITY IDEOGRAPH-2F9E0	[FB85 85D2 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x85D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_129)
{
    uint32_t const cps[2] = { 0x2F9E1, 0x0021 };

    // 2F9E1 0021;	
    // (𨗭) CJK COMPATIBILITY IDEOGRAPH-2F9E1	[FB85 85ED 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x85ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9E1 0021;	
    // (𨗭) CJK COMPATIBILITY IDEOGRAPH-2F9E1	[FB85 85ED | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x85ED, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_130)
{
    uint32_t const cps[2] = { 0x2F9E1, 0x003F };

    // 2F9E1 003F;	
    // (𨗭) CJK COMPATIBILITY IDEOGRAPH-2F9E1	[FB85 85ED 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x85ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9E1 003F;	
    // (𨗭) CJK COMPATIBILITY IDEOGRAPH-2F9E1	[FB85 85ED | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x85ED, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_131)
{
    uint32_t const cps[2] = { 0x2F9E1, 0x0061 };

    // 2F9E1 0061;	
    // (𨗭) CJK COMPATIBILITY IDEOGRAPH-2F9E1	[FB85 85ED 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x85ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9E1 0061;	
    // (𨗭) CJK COMPATIBILITY IDEOGRAPH-2F9E1	[FB85 85ED 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x85ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_132)
{
    uint32_t const cps[2] = { 0x2F9E1, 0x0041 };

    // 2F9E1 0041;	
    // (𨗭) CJK COMPATIBILITY IDEOGRAPH-2F9E1	[FB85 85ED 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x85ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9E1 0041;	
    // (𨗭) CJK COMPATIBILITY IDEOGRAPH-2F9E1	[FB85 85ED 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x85ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_133)
{
    uint32_t const cps[2] = { 0x2F9E1, 0x0062 };

    // 2F9E1 0062;	
    // (𨗭) CJK COMPATIBILITY IDEOGRAPH-2F9E1	[FB85 85ED 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x85ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9E1 0062;	
    // (𨗭) CJK COMPATIBILITY IDEOGRAPH-2F9E1	[FB85 85ED 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x85ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_134)
{
    uint32_t const cps[2] = { 0x2F9E5, 0x0021 };

    // 2F9E5 0021;	
    // (𨜮) CJK COMPATIBILITY IDEOGRAPH-2F9E5	[FB85 872E 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x872E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9E5 0021;	
    // (𨜮) CJK COMPATIBILITY IDEOGRAPH-2F9E5	[FB85 872E | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x872E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_135)
{
    uint32_t const cps[2] = { 0x2F9E5, 0x003F };

    // 2F9E5 003F;	
    // (𨜮) CJK COMPATIBILITY IDEOGRAPH-2F9E5	[FB85 872E 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x872E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9E5 003F;	
    // (𨜮) CJK COMPATIBILITY IDEOGRAPH-2F9E5	[FB85 872E | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x872E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_136)
{
    uint32_t const cps[2] = { 0x2F9E5, 0x0061 };

    // 2F9E5 0061;	
    // (𨜮) CJK COMPATIBILITY IDEOGRAPH-2F9E5	[FB85 872E 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x872E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9E5 0061;	
    // (𨜮) CJK COMPATIBILITY IDEOGRAPH-2F9E5	[FB85 872E 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x872E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_137)
{
    uint32_t const cps[2] = { 0x2F9E5, 0x0041 };

    // 2F9E5 0041;	
    // (𨜮) CJK COMPATIBILITY IDEOGRAPH-2F9E5	[FB85 872E 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x872E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9E5 0041;	
    // (𨜮) CJK COMPATIBILITY IDEOGRAPH-2F9E5	[FB85 872E 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x872E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_138)
{
    uint32_t const cps[2] = { 0x2F9E5, 0x0062 };

    // 2F9E5 0062;	
    // (𨜮) CJK COMPATIBILITY IDEOGRAPH-2F9E5	[FB85 872E 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x872E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9E5 0062;	
    // (𨜮) CJK COMPATIBILITY IDEOGRAPH-2F9E5	[FB85 872E 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x872E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_139)
{
    uint32_t const cps[2] = { 0x2F9ED, 0x0021 };

    // 2F9ED 0021;	
    // (𨯺) CJK COMPATIBILITY IDEOGRAPH-2F9ED	[FB85 8BFA 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x8BFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9ED 0021;	
    // (𨯺) CJK COMPATIBILITY IDEOGRAPH-2F9ED	[FB85 8BFA | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x8BFA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_140)
{
    uint32_t const cps[2] = { 0x2F9ED, 0x003F };

    // 2F9ED 003F;	
    // (𨯺) CJK COMPATIBILITY IDEOGRAPH-2F9ED	[FB85 8BFA 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x8BFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9ED 003F;	
    // (𨯺) CJK COMPATIBILITY IDEOGRAPH-2F9ED	[FB85 8BFA | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x8BFA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_141)
{
    uint32_t const cps[2] = { 0x2F9ED, 0x0061 };

    // 2F9ED 0061;	
    // (𨯺) CJK COMPATIBILITY IDEOGRAPH-2F9ED	[FB85 8BFA 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x8BFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9ED 0061;	
    // (𨯺) CJK COMPATIBILITY IDEOGRAPH-2F9ED	[FB85 8BFA 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x8BFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_142)
{
    uint32_t const cps[2] = { 0x2F9ED, 0x0041 };

    // 2F9ED 0041;	
    // (𨯺) CJK COMPATIBILITY IDEOGRAPH-2F9ED	[FB85 8BFA 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x8BFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9ED 0041;	
    // (𨯺) CJK COMPATIBILITY IDEOGRAPH-2F9ED	[FB85 8BFA 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x8BFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_143)
{
    uint32_t const cps[2] = { 0x2F9ED, 0x0062 };

    // 2F9ED 0062;	
    // (𨯺) CJK COMPATIBILITY IDEOGRAPH-2F9ED	[FB85 8BFA 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x8BFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9ED 0062;	
    // (𨯺) CJK COMPATIBILITY IDEOGRAPH-2F9ED	[FB85 8BFA 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x8BFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_144)
{
    uint32_t const cps[2] = { 0x2F9F1, 0x0021 };

    // 2F9F1 0021;	
    // (𨵷) CJK COMPATIBILITY IDEOGRAPH-2F9F1	[FB85 8D77 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x8D77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9F1 0021;	
    // (𨵷) CJK COMPATIBILITY IDEOGRAPH-2F9F1	[FB85 8D77 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x8D77, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_145)
{
    uint32_t const cps[2] = { 0x2F9F1, 0x003F };

    // 2F9F1 003F;	
    // (𨵷) CJK COMPATIBILITY IDEOGRAPH-2F9F1	[FB85 8D77 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x8D77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9F1 003F;	
    // (𨵷) CJK COMPATIBILITY IDEOGRAPH-2F9F1	[FB85 8D77 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x8D77, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_146)
{
    uint32_t const cps[2] = { 0x2F9F1, 0x0061 };

    // 2F9F1 0061;	
    // (𨵷) CJK COMPATIBILITY IDEOGRAPH-2F9F1	[FB85 8D77 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x8D77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9F1 0061;	
    // (𨵷) CJK COMPATIBILITY IDEOGRAPH-2F9F1	[FB85 8D77 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x8D77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_147)
{
    uint32_t const cps[2] = { 0x2F9F1, 0x0041 };

    // 2F9F1 0041;	
    // (𨵷) CJK COMPATIBILITY IDEOGRAPH-2F9F1	[FB85 8D77 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x8D77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9F1 0041;	
    // (𨵷) CJK COMPATIBILITY IDEOGRAPH-2F9F1	[FB85 8D77 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x8D77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_148)
{
    uint32_t const cps[2] = { 0x2F9F1, 0x0062 };

    // 2F9F1 0062;	
    // (𨵷) CJK COMPATIBILITY IDEOGRAPH-2F9F1	[FB85 8D77 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x8D77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9F1 0062;	
    // (𨵷) CJK COMPATIBILITY IDEOGRAPH-2F9F1	[FB85 8D77 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x8D77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_149)
{
    uint32_t const cps[2] = { 0x2F9F6, 0x0021 };

    // 2F9F6 0021;	
    // (𩅅) CJK COMPATIBILITY IDEOGRAPH-2F9F6	[FB85 9145 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x9145, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9F6 0021;	
    // (𩅅) CJK COMPATIBILITY IDEOGRAPH-2F9F6	[FB85 9145 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x9145, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_150)
{
    uint32_t const cps[2] = { 0x2F9F6, 0x003F };

    // 2F9F6 003F;	
    // (𩅅) CJK COMPATIBILITY IDEOGRAPH-2F9F6	[FB85 9145 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x9145, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9F6 003F;	
    // (𩅅) CJK COMPATIBILITY IDEOGRAPH-2F9F6	[FB85 9145 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x9145, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_151)
{
    uint32_t const cps[2] = { 0x2F9F6, 0x0061 };

    // 2F9F6 0061;	
    // (𩅅) CJK COMPATIBILITY IDEOGRAPH-2F9F6	[FB85 9145 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x9145, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9F6 0061;	
    // (𩅅) CJK COMPATIBILITY IDEOGRAPH-2F9F6	[FB85 9145 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x9145, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_152)
{
    uint32_t const cps[2] = { 0x2F9F6, 0x0041 };

    // 2F9F6 0041;	
    // (𩅅) CJK COMPATIBILITY IDEOGRAPH-2F9F6	[FB85 9145 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x9145, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9F6 0041;	
    // (𩅅) CJK COMPATIBILITY IDEOGRAPH-2F9F6	[FB85 9145 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x9145, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_153)
{
    uint32_t const cps[2] = { 0x2F9F6, 0x0062 };

    // 2F9F6 0062;	
    // (𩅅) CJK COMPATIBILITY IDEOGRAPH-2F9F6	[FB85 9145 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x9145, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9F6 0062;	
    // (𩅅) CJK COMPATIBILITY IDEOGRAPH-2F9F6	[FB85 9145 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x9145, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_154)
{
    uint32_t const cps[2] = { 0x2F81C, 0x0021 };

    // 2F81C 0021;	
    // (𩇟) CJK COMPATIBILITY IDEOGRAPH-2F81C	[FB85 91DF 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x91DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F81C 0021;	
    // (𩇟) CJK COMPATIBILITY IDEOGRAPH-2F81C	[FB85 91DF | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x91DF, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_155)
{
    uint32_t const cps[2] = { 0x2F81C, 0x003F };

    // 2F81C 003F;	
    // (𩇟) CJK COMPATIBILITY IDEOGRAPH-2F81C	[FB85 91DF 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x91DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F81C 003F;	
    // (𩇟) CJK COMPATIBILITY IDEOGRAPH-2F81C	[FB85 91DF | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x91DF, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_156)
{
    uint32_t const cps[2] = { 0x2F81C, 0x0061 };

    // 2F81C 0061;	
    // (𩇟) CJK COMPATIBILITY IDEOGRAPH-2F81C	[FB85 91DF 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x91DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F81C 0061;	
    // (𩇟) CJK COMPATIBILITY IDEOGRAPH-2F81C	[FB85 91DF 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x91DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_157)
{
    uint32_t const cps[2] = { 0x2F81C, 0x0041 };

    // 2F81C 0041;	
    // (𩇟) CJK COMPATIBILITY IDEOGRAPH-2F81C	[FB85 91DF 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x91DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F81C 0041;	
    // (𩇟) CJK COMPATIBILITY IDEOGRAPH-2F81C	[FB85 91DF 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x91DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_158)
{
    uint32_t const cps[2] = { 0x2F81C, 0x0062 };

    // 2F81C 0062;	
    // (𩇟) CJK COMPATIBILITY IDEOGRAPH-2F81C	[FB85 91DF 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x91DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F81C 0062;	
    // (𩇟) CJK COMPATIBILITY IDEOGRAPH-2F81C	[FB85 91DF 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x91DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_159)
{
    uint32_t const cps[2] = { 0x2F9F7, 0x0021 };

    // 2F9F7 0021;	
    // (𩈚) CJK COMPATIBILITY IDEOGRAPH-2F9F7	[FB85 921A 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x921A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9F7 0021;	
    // (𩈚) CJK COMPATIBILITY IDEOGRAPH-2F9F7	[FB85 921A | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x921A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_160)
{
    uint32_t const cps[2] = { 0x2F9F7, 0x003F };

    // 2F9F7 003F;	
    // (𩈚) CJK COMPATIBILITY IDEOGRAPH-2F9F7	[FB85 921A 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x921A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9F7 003F;	
    // (𩈚) CJK COMPATIBILITY IDEOGRAPH-2F9F7	[FB85 921A | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x921A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_161)
{
    uint32_t const cps[2] = { 0x2F9F7, 0x0061 };

    // 2F9F7 0061;	
    // (𩈚) CJK COMPATIBILITY IDEOGRAPH-2F9F7	[FB85 921A 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x921A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9F7 0061;	
    // (𩈚) CJK COMPATIBILITY IDEOGRAPH-2F9F7	[FB85 921A 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x921A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_162)
{
    uint32_t const cps[2] = { 0x2F9F7, 0x0041 };

    // 2F9F7 0041;	
    // (𩈚) CJK COMPATIBILITY IDEOGRAPH-2F9F7	[FB85 921A 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x921A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9F7 0041;	
    // (𩈚) CJK COMPATIBILITY IDEOGRAPH-2F9F7	[FB85 921A 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x921A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_163)
{
    uint32_t const cps[2] = { 0x2F9F7, 0x0062 };

    // 2F9F7 0062;	
    // (𩈚) CJK COMPATIBILITY IDEOGRAPH-2F9F7	[FB85 921A 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x921A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9F7 0062;	
    // (𩈚) CJK COMPATIBILITY IDEOGRAPH-2F9F7	[FB85 921A 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x921A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_164)
{
    uint32_t const cps[2] = { 0x2F9FB, 0x0021 };

    // 2F9FB 0021;	
    // (𩐊) CJK COMPATIBILITY IDEOGRAPH-2F9FB	[FB85 940A 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x940A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9FB 0021;	
    // (𩐊) CJK COMPATIBILITY IDEOGRAPH-2F9FB	[FB85 940A | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x940A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_165)
{
    uint32_t const cps[2] = { 0x2F9FB, 0x003F };

    // 2F9FB 003F;	
    // (𩐊) CJK COMPATIBILITY IDEOGRAPH-2F9FB	[FB85 940A 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x940A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9FB 003F;	
    // (𩐊) CJK COMPATIBILITY IDEOGRAPH-2F9FB	[FB85 940A | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x940A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_166)
{
    uint32_t const cps[2] = { 0x2F9FB, 0x0061 };

    // 2F9FB 0061;	
    // (𩐊) CJK COMPATIBILITY IDEOGRAPH-2F9FB	[FB85 940A 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x940A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9FB 0061;	
    // (𩐊) CJK COMPATIBILITY IDEOGRAPH-2F9FB	[FB85 940A 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x940A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_167)
{
    uint32_t const cps[2] = { 0x2F9FB, 0x0041 };

    // 2F9FB 0041;	
    // (𩐊) CJK COMPATIBILITY IDEOGRAPH-2F9FB	[FB85 940A 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x940A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9FB 0041;	
    // (𩐊) CJK COMPATIBILITY IDEOGRAPH-2F9FB	[FB85 940A 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x940A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_168)
{
    uint32_t const cps[2] = { 0x2F9FB, 0x0062 };

    // 2F9FB 0062;	
    // (𩐊) CJK COMPATIBILITY IDEOGRAPH-2F9FB	[FB85 940A 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x940A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9FB 0062;	
    // (𩐊) CJK COMPATIBILITY IDEOGRAPH-2F9FB	[FB85 940A 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x940A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_169)
{
    uint32_t const cps[2] = { 0x2F9FD, 0x0021 };

    // 2F9FD 0021;	
    // (𩒖) CJK COMPATIBILITY IDEOGRAPH-2F9FD	[FB85 9496 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x9496, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9FD 0021;	
    // (𩒖) CJK COMPATIBILITY IDEOGRAPH-2F9FD	[FB85 9496 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x9496, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_170)
{
    uint32_t const cps[2] = { 0x2F9FD, 0x003F };

    // 2F9FD 003F;	
    // (𩒖) CJK COMPATIBILITY IDEOGRAPH-2F9FD	[FB85 9496 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x9496, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9FD 003F;	
    // (𩒖) CJK COMPATIBILITY IDEOGRAPH-2F9FD	[FB85 9496 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x9496, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_171)
{
    uint32_t const cps[2] = { 0x2F9FD, 0x0061 };

    // 2F9FD 0061;	
    // (𩒖) CJK COMPATIBILITY IDEOGRAPH-2F9FD	[FB85 9496 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x9496, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9FD 0061;	
    // (𩒖) CJK COMPATIBILITY IDEOGRAPH-2F9FD	[FB85 9496 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x9496, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_172)
{
    uint32_t const cps[2] = { 0x2F9FD, 0x0041 };

    // 2F9FD 0041;	
    // (𩒖) CJK COMPATIBILITY IDEOGRAPH-2F9FD	[FB85 9496 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x9496, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9FD 0041;	
    // (𩒖) CJK COMPATIBILITY IDEOGRAPH-2F9FD	[FB85 9496 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x9496, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_173)
{
    uint32_t const cps[2] = { 0x2F9FD, 0x0062 };

    // 2F9FD 0062;	
    // (𩒖) CJK COMPATIBILITY IDEOGRAPH-2F9FD	[FB85 9496 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x9496, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F9FD 0062;	
    // (𩒖) CJK COMPATIBILITY IDEOGRAPH-2F9FD	[FB85 9496 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x9496, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_174)
{
    uint32_t const cps[2] = { 0x2FA01, 0x0021 };

    // 2FA01 0021;	
    // (𩖶) CJK COMPATIBILITY IDEOGRAPH-2FA01	[FB85 95B6 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x95B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA01 0021;	
    // (𩖶) CJK COMPATIBILITY IDEOGRAPH-2FA01	[FB85 95B6 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x95B6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_175)
{
    uint32_t const cps[2] = { 0x2FA01, 0x003F };

    // 2FA01 003F;	
    // (𩖶) CJK COMPATIBILITY IDEOGRAPH-2FA01	[FB85 95B6 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x95B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA01 003F;	
    // (𩖶) CJK COMPATIBILITY IDEOGRAPH-2FA01	[FB85 95B6 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x95B6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_176)
{
    uint32_t const cps[2] = { 0x2FA01, 0x0061 };

    // 2FA01 0061;	
    // (𩖶) CJK COMPATIBILITY IDEOGRAPH-2FA01	[FB85 95B6 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x95B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA01 0061;	
    // (𩖶) CJK COMPATIBILITY IDEOGRAPH-2FA01	[FB85 95B6 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x95B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_177)
{
    uint32_t const cps[2] = { 0x2FA01, 0x0041 };

    // 2FA01 0041;	
    // (𩖶) CJK COMPATIBILITY IDEOGRAPH-2FA01	[FB85 95B6 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x95B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA01 0041;	
    // (𩖶) CJK COMPATIBILITY IDEOGRAPH-2FA01	[FB85 95B6 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x95B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_178)
{
    uint32_t const cps[2] = { 0x2FA01, 0x0062 };

    // 2FA01 0062;	
    // (𩖶) CJK COMPATIBILITY IDEOGRAPH-2FA01	[FB85 95B6 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x95B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA01 0062;	
    // (𩖶) CJK COMPATIBILITY IDEOGRAPH-2FA01	[FB85 95B6 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x95B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_179)
{
    uint32_t const cps[2] = { 0x2FA09, 0x0021 };

    // 2FA09 0021;	
    // (𩬰) CJK COMPATIBILITY IDEOGRAPH-2FA09	[FB85 9B30 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x9B30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA09 0021;	
    // (𩬰) CJK COMPATIBILITY IDEOGRAPH-2FA09	[FB85 9B30 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x9B30, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_180)
{
    uint32_t const cps[2] = { 0x2FA09, 0x003F };

    // 2FA09 003F;	
    // (𩬰) CJK COMPATIBILITY IDEOGRAPH-2FA09	[FB85 9B30 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x9B30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA09 003F;	
    // (𩬰) CJK COMPATIBILITY IDEOGRAPH-2FA09	[FB85 9B30 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0x9B30, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_181)
{
    uint32_t const cps[2] = { 0x2FA09, 0x0061 };

    // 2FA09 0061;	
    // (𩬰) CJK COMPATIBILITY IDEOGRAPH-2FA09	[FB85 9B30 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x9B30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA09 0061;	
    // (𩬰) CJK COMPATIBILITY IDEOGRAPH-2FA09	[FB85 9B30 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x9B30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_182)
{
    uint32_t const cps[2] = { 0x2FA09, 0x0041 };

    // 2FA09 0041;	
    // (𩬰) CJK COMPATIBILITY IDEOGRAPH-2FA09	[FB85 9B30 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x9B30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA09 0041;	
    // (𩬰) CJK COMPATIBILITY IDEOGRAPH-2FA09	[FB85 9B30 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x9B30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_183)
{
    uint32_t const cps[2] = { 0x2FA09, 0x0062 };

    // 2FA09 0062;	
    // (𩬰) CJK COMPATIBILITY IDEOGRAPH-2FA09	[FB85 9B30 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0x9B30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA09 0062;	
    // (𩬰) CJK COMPATIBILITY IDEOGRAPH-2FA09	[FB85 9B30 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0x9B30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_184)
{
    uint32_t const cps[2] = { 0x2FA10, 0x0021 };

    // 2FA10 0021;	
    // (𪃎) CJK COMPATIBILITY IDEOGRAPH-2FA10	[FB85 A0CE 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA0CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA10 0021;	
    // (𪃎) CJK COMPATIBILITY IDEOGRAPH-2FA10	[FB85 A0CE | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA0CE, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_185)
{
    uint32_t const cps[2] = { 0x2FA10, 0x003F };

    // 2FA10 003F;	
    // (𪃎) CJK COMPATIBILITY IDEOGRAPH-2FA10	[FB85 A0CE 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA0CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA10 003F;	
    // (𪃎) CJK COMPATIBILITY IDEOGRAPH-2FA10	[FB85 A0CE | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA0CE, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_186)
{
    uint32_t const cps[2] = { 0x2FA10, 0x0061 };

    // 2FA10 0061;	
    // (𪃎) CJK COMPATIBILITY IDEOGRAPH-2FA10	[FB85 A0CE 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA0CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA10 0061;	
    // (𪃎) CJK COMPATIBILITY IDEOGRAPH-2FA10	[FB85 A0CE 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA0CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_187)
{
    uint32_t const cps[2] = { 0x2FA10, 0x0041 };

    // 2FA10 0041;	
    // (𪃎) CJK COMPATIBILITY IDEOGRAPH-2FA10	[FB85 A0CE 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA0CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA10 0041;	
    // (𪃎) CJK COMPATIBILITY IDEOGRAPH-2FA10	[FB85 A0CE 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA0CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_188)
{
    uint32_t const cps[2] = { 0x2FA10, 0x0062 };

    // 2FA10 0062;	
    // (𪃎) CJK COMPATIBILITY IDEOGRAPH-2FA10	[FB85 A0CE 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA0CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA10 0062;	
    // (𪃎) CJK COMPATIBILITY IDEOGRAPH-2FA10	[FB85 A0CE 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA0CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_189)
{
    uint32_t const cps[2] = { 0x2FA12, 0x0021 };

    // 2FA12 0021;	
    // (𪄅) CJK COMPATIBILITY IDEOGRAPH-2FA12	[FB85 A105 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA105, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA12 0021;	
    // (𪄅) CJK COMPATIBILITY IDEOGRAPH-2FA12	[FB85 A105 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA105, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_190)
{
    uint32_t const cps[2] = { 0x2FA12, 0x003F };

    // 2FA12 003F;	
    // (𪄅) CJK COMPATIBILITY IDEOGRAPH-2FA12	[FB85 A105 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA105, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA12 003F;	
    // (𪄅) CJK COMPATIBILITY IDEOGRAPH-2FA12	[FB85 A105 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA105, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_191)
{
    uint32_t const cps[2] = { 0x2FA12, 0x0061 };

    // 2FA12 0061;	
    // (𪄅) CJK COMPATIBILITY IDEOGRAPH-2FA12	[FB85 A105 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA105, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA12 0061;	
    // (𪄅) CJK COMPATIBILITY IDEOGRAPH-2FA12	[FB85 A105 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA105, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_192)
{
    uint32_t const cps[2] = { 0x2FA12, 0x0041 };

    // 2FA12 0041;	
    // (𪄅) CJK COMPATIBILITY IDEOGRAPH-2FA12	[FB85 A105 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA105, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA12 0041;	
    // (𪄅) CJK COMPATIBILITY IDEOGRAPH-2FA12	[FB85 A105 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA105, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_193)
{
    uint32_t const cps[2] = { 0x2FA12, 0x0062 };

    // 2FA12 0062;	
    // (𪄅) CJK COMPATIBILITY IDEOGRAPH-2FA12	[FB85 A105 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA105, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA12 0062;	
    // (𪄅) CJK COMPATIBILITY IDEOGRAPH-2FA12	[FB85 A105 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA105, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_194)
{
    uint32_t const cps[2] = { 0x2FA13, 0x0021 };

    // 2FA13 0021;	
    // (𪈎) CJK COMPATIBILITY IDEOGRAPH-2FA13	[FB85 A20E 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA20E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA13 0021;	
    // (𪈎) CJK COMPATIBILITY IDEOGRAPH-2FA13	[FB85 A20E | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA20E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_195)
{
    uint32_t const cps[2] = { 0x2FA13, 0x003F };

    // 2FA13 003F;	
    // (𪈎) CJK COMPATIBILITY IDEOGRAPH-2FA13	[FB85 A20E 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA20E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA13 003F;	
    // (𪈎) CJK COMPATIBILITY IDEOGRAPH-2FA13	[FB85 A20E | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA20E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_196)
{
    uint32_t const cps[2] = { 0x2FA13, 0x0061 };

    // 2FA13 0061;	
    // (𪈎) CJK COMPATIBILITY IDEOGRAPH-2FA13	[FB85 A20E 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA20E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA13 0061;	
    // (𪈎) CJK COMPATIBILITY IDEOGRAPH-2FA13	[FB85 A20E 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA20E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_197)
{
    uint32_t const cps[2] = { 0x2FA13, 0x0041 };

    // 2FA13 0041;	
    // (𪈎) CJK COMPATIBILITY IDEOGRAPH-2FA13	[FB85 A20E 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA20E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA13 0041;	
    // (𪈎) CJK COMPATIBILITY IDEOGRAPH-2FA13	[FB85 A20E 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA20E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_198)
{
    uint32_t const cps[2] = { 0x2FA13, 0x0062 };

    // 2FA13 0062;	
    // (𪈎) CJK COMPATIBILITY IDEOGRAPH-2FA13	[FB85 A20E 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA20E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA13 0062;	
    // (𪈎) CJK COMPATIBILITY IDEOGRAPH-2FA13	[FB85 A20E 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA20E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_199)
{
    uint32_t const cps[2] = { 0x2FA14, 0x0021 };

    // 2FA14 0021;	
    // (𪊑) CJK COMPATIBILITY IDEOGRAPH-2FA14	[FB85 A291 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA291, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA14 0021;	
    // (𪊑) CJK COMPATIBILITY IDEOGRAPH-2FA14	[FB85 A291 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA291, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_200)
{
    uint32_t const cps[2] = { 0x2FA14, 0x003F };

    // 2FA14 003F;	
    // (𪊑) CJK COMPATIBILITY IDEOGRAPH-2FA14	[FB85 A291 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA291, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA14 003F;	
    // (𪊑) CJK COMPATIBILITY IDEOGRAPH-2FA14	[FB85 A291 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA291, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_201)
{
    uint32_t const cps[2] = { 0x2FA14, 0x0061 };

    // 2FA14 0061;	
    // (𪊑) CJK COMPATIBILITY IDEOGRAPH-2FA14	[FB85 A291 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA291, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA14 0061;	
    // (𪊑) CJK COMPATIBILITY IDEOGRAPH-2FA14	[FB85 A291 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA291, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_202)
{
    uint32_t const cps[2] = { 0x2FA14, 0x0041 };

    // 2FA14 0041;	
    // (𪊑) CJK COMPATIBILITY IDEOGRAPH-2FA14	[FB85 A291 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA291, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA14 0041;	
    // (𪊑) CJK COMPATIBILITY IDEOGRAPH-2FA14	[FB85 A291 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA291, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_203)
{
    uint32_t const cps[2] = { 0x2FA14, 0x0062 };

    // 2FA14 0062;	
    // (𪊑) CJK COMPATIBILITY IDEOGRAPH-2FA14	[FB85 A291 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA291, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA14 0062;	
    // (𪊑) CJK COMPATIBILITY IDEOGRAPH-2FA14	[FB85 A291 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA291, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_204)
{
    uint32_t const cps[2] = { 0x2F88F, 0x0021 };

    // 2F88F 0021;	
    // (𪎒) CJK COMPATIBILITY IDEOGRAPH-2F88F	[FB85 A392 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F88F 0021;	
    // (𪎒) CJK COMPATIBILITY IDEOGRAPH-2F88F	[FB85 A392 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA392, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_205)
{
    uint32_t const cps[2] = { 0x2F88F, 0x003F };

    // 2F88F 003F;	
    // (𪎒) CJK COMPATIBILITY IDEOGRAPH-2F88F	[FB85 A392 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F88F 003F;	
    // (𪎒) CJK COMPATIBILITY IDEOGRAPH-2F88F	[FB85 A392 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA392, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_206)
{
    uint32_t const cps[2] = { 0x2F88F, 0x0061 };

    // 2F88F 0061;	
    // (𪎒) CJK COMPATIBILITY IDEOGRAPH-2F88F	[FB85 A392 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F88F 0061;	
    // (𪎒) CJK COMPATIBILITY IDEOGRAPH-2F88F	[FB85 A392 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_207)
{
    uint32_t const cps[2] = { 0x2F88F, 0x0041 };

    // 2F88F 0041;	
    // (𪎒) CJK COMPATIBILITY IDEOGRAPH-2F88F	[FB85 A392 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F88F 0041;	
    // (𪎒) CJK COMPATIBILITY IDEOGRAPH-2F88F	[FB85 A392 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_208)
{
    uint32_t const cps[2] = { 0x2F88F, 0x0062 };

    // 2F88F 0062;	
    // (𪎒) CJK COMPATIBILITY IDEOGRAPH-2F88F	[FB85 A392 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2F88F 0062;	
    // (𪎒) CJK COMPATIBILITY IDEOGRAPH-2F88F	[FB85 A392 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_209)
{
    uint32_t const cps[2] = { 0x2FA1D, 0x0021 };

    // 2FA1D 0021;	
    // (𪘀) CJK COMPATIBILITY IDEOGRAPH-2FA1D	[FB85 A600 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA600, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA1D 0021;	
    // (𪘀) CJK COMPATIBILITY IDEOGRAPH-2FA1D	[FB85 A600 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA600, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_210)
{
    uint32_t const cps[2] = { 0x2FA1D, 0x003F };

    // 2FA1D 003F;	
    // (𪘀) CJK COMPATIBILITY IDEOGRAPH-2FA1D	[FB85 A600 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA600, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA1D 003F;	
    // (𪘀) CJK COMPATIBILITY IDEOGRAPH-2FA1D	[FB85 A600 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA600, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_211)
{
    uint32_t const cps[2] = { 0x2FA1D, 0x0061 };

    // 2FA1D 0061;	
    // (𪘀) CJK COMPATIBILITY IDEOGRAPH-2FA1D	[FB85 A600 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA600, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA1D 0061;	
    // (𪘀) CJK COMPATIBILITY IDEOGRAPH-2FA1D	[FB85 A600 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA600, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_212)
{
    uint32_t const cps[2] = { 0x2FA1D, 0x0041 };

    // 2FA1D 0041;	
    // (𪘀) CJK COMPATIBILITY IDEOGRAPH-2FA1D	[FB85 A600 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA600, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA1D 0041;	
    // (𪘀) CJK COMPATIBILITY IDEOGRAPH-2FA1D	[FB85 A600 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA600, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_213)
{
    uint32_t const cps[2] = { 0x2FA1D, 0x0062 };

    // 2FA1D 0062;	
    // (𪘀) CJK COMPATIBILITY IDEOGRAPH-2FA1D	[FB85 A600 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA600, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2FA1D 0062;	
    // (𪘀) CJK COMPATIBILITY IDEOGRAPH-2FA1D	[FB85 A600 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA600, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_214)
{
    uint32_t const cps[2] = { 0x2A6D2, 0x0021 };

    // 2A6D2 0021;	
    // (𪛒) CJK UNIFIED IDEOGRAPH-2A6D2	[FB85 A6D2 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D2 0021;	
    // (𪛒) CJK UNIFIED IDEOGRAPH-2A6D2	[FB85 A6D2 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA6D2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_215)
{
    uint32_t const cps[2] = { 0x2A6D2, 0x003F };

    // 2A6D2 003F;	
    // (𪛒) CJK UNIFIED IDEOGRAPH-2A6D2	[FB85 A6D2 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D2 003F;	
    // (𪛒) CJK UNIFIED IDEOGRAPH-2A6D2	[FB85 A6D2 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA6D2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_216)
{
    uint32_t const cps[2] = { 0x2A6D2, 0x0061 };

    // 2A6D2 0061;	
    // (𪛒) CJK UNIFIED IDEOGRAPH-2A6D2	[FB85 A6D2 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D2 0061;	
    // (𪛒) CJK UNIFIED IDEOGRAPH-2A6D2	[FB85 A6D2 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA6D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_217)
{
    uint32_t const cps[2] = { 0x2A6D2, 0x0041 };

    // 2A6D2 0041;	
    // (𪛒) CJK UNIFIED IDEOGRAPH-2A6D2	[FB85 A6D2 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D2 0041;	
    // (𪛒) CJK UNIFIED IDEOGRAPH-2A6D2	[FB85 A6D2 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA6D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_218)
{
    uint32_t const cps[2] = { 0x2A6D2, 0x0062 };

    // 2A6D2 0062;	
    // (𪛒) CJK UNIFIED IDEOGRAPH-2A6D2	[FB85 A6D2 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D2 0062;	
    // (𪛒) CJK UNIFIED IDEOGRAPH-2A6D2	[FB85 A6D2 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA6D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_219)
{
    uint32_t const cps[2] = { 0x2A6D3, 0x0021 };

    // 2A6D3 0021;	
    // (𪛓) CJK UNIFIED IDEOGRAPH-2A6D3	[FB85 A6D3 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D3 0021;	
    // (𪛓) CJK UNIFIED IDEOGRAPH-2A6D3	[FB85 A6D3 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA6D3, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_220)
{
    uint32_t const cps[2] = { 0x2A6D3, 0x003F };

    // 2A6D3 003F;	
    // (𪛓) CJK UNIFIED IDEOGRAPH-2A6D3	[FB85 A6D3 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D3 003F;	
    // (𪛓) CJK UNIFIED IDEOGRAPH-2A6D3	[FB85 A6D3 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA6D3, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_221)
{
    uint32_t const cps[2] = { 0x2A6D3, 0x0061 };

    // 2A6D3 0061;	
    // (𪛓) CJK UNIFIED IDEOGRAPH-2A6D3	[FB85 A6D3 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D3 0061;	
    // (𪛓) CJK UNIFIED IDEOGRAPH-2A6D3	[FB85 A6D3 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA6D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_222)
{
    uint32_t const cps[2] = { 0x2A6D3, 0x0041 };

    // 2A6D3 0041;	
    // (𪛓) CJK UNIFIED IDEOGRAPH-2A6D3	[FB85 A6D3 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D3 0041;	
    // (𪛓) CJK UNIFIED IDEOGRAPH-2A6D3	[FB85 A6D3 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA6D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_223)
{
    uint32_t const cps[2] = { 0x2A6D3, 0x0062 };

    // 2A6D3 0062;	
    // (𪛓) CJK UNIFIED IDEOGRAPH-2A6D3	[FB85 A6D3 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D3 0062;	
    // (𪛓) CJK UNIFIED IDEOGRAPH-2A6D3	[FB85 A6D3 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA6D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_224)
{
    uint32_t const cps[2] = { 0x2A6D4, 0x0021 };

    // 2A6D4 0021;	
    // (𪛔) CJK UNIFIED IDEOGRAPH-2A6D4	[FB85 A6D4 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D4 0021;	
    // (𪛔) CJK UNIFIED IDEOGRAPH-2A6D4	[FB85 A6D4 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA6D4, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_225)
{
    uint32_t const cps[2] = { 0x2A6D4, 0x003F };

    // 2A6D4 003F;	
    // (𪛔) CJK UNIFIED IDEOGRAPH-2A6D4	[FB85 A6D4 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D4 003F;	
    // (𪛔) CJK UNIFIED IDEOGRAPH-2A6D4	[FB85 A6D4 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA6D4, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_226)
{
    uint32_t const cps[2] = { 0x2A6D4, 0x0061 };

    // 2A6D4 0061;	
    // (𪛔) CJK UNIFIED IDEOGRAPH-2A6D4	[FB85 A6D4 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D4 0061;	
    // (𪛔) CJK UNIFIED IDEOGRAPH-2A6D4	[FB85 A6D4 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA6D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_227)
{
    uint32_t const cps[2] = { 0x2A6D4, 0x0041 };

    // 2A6D4 0041;	
    // (𪛔) CJK UNIFIED IDEOGRAPH-2A6D4	[FB85 A6D4 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D4 0041;	
    // (𪛔) CJK UNIFIED IDEOGRAPH-2A6D4	[FB85 A6D4 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA6D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_228)
{
    uint32_t const cps[2] = { 0x2A6D4, 0x0062 };

    // 2A6D4 0062;	
    // (𪛔) CJK UNIFIED IDEOGRAPH-2A6D4	[FB85 A6D4 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D4 0062;	
    // (𪛔) CJK UNIFIED IDEOGRAPH-2A6D4	[FB85 A6D4 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA6D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_229)
{
    uint32_t const cps[2] = { 0x2A6D5, 0x0021 };

    // 2A6D5 0021;	
    // (𪛕) CJK UNIFIED IDEOGRAPH-2A6D5	[FB85 A6D5 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D5 0021;	
    // (𪛕) CJK UNIFIED IDEOGRAPH-2A6D5	[FB85 A6D5 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA6D5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_230)
{
    uint32_t const cps[2] = { 0x2A6D5, 0x003F };

    // 2A6D5 003F;	
    // (𪛕) CJK UNIFIED IDEOGRAPH-2A6D5	[FB85 A6D5 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D5 003F;	
    // (𪛕) CJK UNIFIED IDEOGRAPH-2A6D5	[FB85 A6D5 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA6D5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_231)
{
    uint32_t const cps[2] = { 0x2A6D5, 0x0061 };

    // 2A6D5 0061;	
    // (𪛕) CJK UNIFIED IDEOGRAPH-2A6D5	[FB85 A6D5 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D5 0061;	
    // (𪛕) CJK UNIFIED IDEOGRAPH-2A6D5	[FB85 A6D5 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA6D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_232)
{
    uint32_t const cps[2] = { 0x2A6D5, 0x0041 };

    // 2A6D5 0041;	
    // (𪛕) CJK UNIFIED IDEOGRAPH-2A6D5	[FB85 A6D5 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D5 0041;	
    // (𪛕) CJK UNIFIED IDEOGRAPH-2A6D5	[FB85 A6D5 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA6D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_233)
{
    uint32_t const cps[2] = { 0x2A6D5, 0x0062 };

    // 2A6D5 0062;	
    // (𪛕) CJK UNIFIED IDEOGRAPH-2A6D5	[FB85 A6D5 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D5 0062;	
    // (𪛕) CJK UNIFIED IDEOGRAPH-2A6D5	[FB85 A6D5 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA6D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_234)
{
    uint32_t const cps[2] = { 0x2A6D6, 0x0021 };

    // 2A6D6 0021;	
    // (𪛖) CJK UNIFIED IDEOGRAPH-2A6D6	[FB85 A6D6 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D6 0021;	
    // (𪛖) CJK UNIFIED IDEOGRAPH-2A6D6	[FB85 A6D6 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA6D6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_235)
{
    uint32_t const cps[2] = { 0x2A6D6, 0x003F };

    // 2A6D6 003F;	
    // (𪛖) CJK UNIFIED IDEOGRAPH-2A6D6	[FB85 A6D6 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D6 003F;	
    // (𪛖) CJK UNIFIED IDEOGRAPH-2A6D6	[FB85 A6D6 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA6D6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_236)
{
    uint32_t const cps[2] = { 0x2A6D6, 0x0061 };

    // 2A6D6 0061;	
    // (𪛖) CJK UNIFIED IDEOGRAPH-2A6D6	[FB85 A6D6 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D6 0061;	
    // (𪛖) CJK UNIFIED IDEOGRAPH-2A6D6	[FB85 A6D6 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA6D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_237)
{
    uint32_t const cps[2] = { 0x2A6D6, 0x0041 };

    // 2A6D6 0041;	
    // (𪛖) CJK UNIFIED IDEOGRAPH-2A6D6	[FB85 A6D6 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D6 0041;	
    // (𪛖) CJK UNIFIED IDEOGRAPH-2A6D6	[FB85 A6D6 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA6D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_238)
{
    uint32_t const cps[2] = { 0x2A6D6, 0x0062 };

    // 2A6D6 0062;	
    // (𪛖) CJK UNIFIED IDEOGRAPH-2A6D6	[FB85 A6D6 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA6D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A6D6 0062;	
    // (𪛖) CJK UNIFIED IDEOGRAPH-2A6D6	[FB85 A6D6 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA6D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_239)
{
    uint32_t const cps[2] = { 0x2A700, 0x0021 };

    // 2A700 0021;	
    // (𪜀) CJK UNIFIED IDEOGRAPH-2A700	[FB85 A700 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA700, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A700 0021;	
    // (𪜀) CJK UNIFIED IDEOGRAPH-2A700	[FB85 A700 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA700, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_240)
{
    uint32_t const cps[2] = { 0x2A700, 0x003F };

    // 2A700 003F;	
    // (𪜀) CJK UNIFIED IDEOGRAPH-2A700	[FB85 A700 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA700, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A700 003F;	
    // (𪜀) CJK UNIFIED IDEOGRAPH-2A700	[FB85 A700 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA700, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_241)
{
    uint32_t const cps[2] = { 0x2A700, 0x0061 };

    // 2A700 0061;	
    // (𪜀) CJK UNIFIED IDEOGRAPH-2A700	[FB85 A700 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA700, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A700 0061;	
    // (𪜀) CJK UNIFIED IDEOGRAPH-2A700	[FB85 A700 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA700, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_242)
{
    uint32_t const cps[2] = { 0x2A700, 0x0041 };

    // 2A700 0041;	
    // (𪜀) CJK UNIFIED IDEOGRAPH-2A700	[FB85 A700 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA700, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A700 0041;	
    // (𪜀) CJK UNIFIED IDEOGRAPH-2A700	[FB85 A700 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA700, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_243)
{
    uint32_t const cps[2] = { 0x2A700, 0x0062 };

    // 2A700 0062;	
    // (𪜀) CJK UNIFIED IDEOGRAPH-2A700	[FB85 A700 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA700, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A700 0062;	
    // (𪜀) CJK UNIFIED IDEOGRAPH-2A700	[FB85 A700 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA700, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_244)
{
    uint32_t const cps[2] = { 0x2A701, 0x0021 };

    // 2A701 0021;	
    // (𪜁) CJK UNIFIED IDEOGRAPH-2A701	[FB85 A701 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA701, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A701 0021;	
    // (𪜁) CJK UNIFIED IDEOGRAPH-2A701	[FB85 A701 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA701, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_245)
{
    uint32_t const cps[2] = { 0x2A701, 0x003F };

    // 2A701 003F;	
    // (𪜁) CJK UNIFIED IDEOGRAPH-2A701	[FB85 A701 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA701, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A701 003F;	
    // (𪜁) CJK UNIFIED IDEOGRAPH-2A701	[FB85 A701 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA701, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_246)
{
    uint32_t const cps[2] = { 0x2A701, 0x0061 };

    // 2A701 0061;	
    // (𪜁) CJK UNIFIED IDEOGRAPH-2A701	[FB85 A701 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA701, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A701 0061;	
    // (𪜁) CJK UNIFIED IDEOGRAPH-2A701	[FB85 A701 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA701, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_247)
{
    uint32_t const cps[2] = { 0x2A701, 0x0041 };

    // 2A701 0041;	
    // (𪜁) CJK UNIFIED IDEOGRAPH-2A701	[FB85 A701 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA701, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A701 0041;	
    // (𪜁) CJK UNIFIED IDEOGRAPH-2A701	[FB85 A701 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA701, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_248)
{
    uint32_t const cps[2] = { 0x2A701, 0x0062 };

    // 2A701 0062;	
    // (𪜁) CJK UNIFIED IDEOGRAPH-2A701	[FB85 A701 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA701, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A701 0062;	
    // (𪜁) CJK UNIFIED IDEOGRAPH-2A701	[FB85 A701 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA701, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_249)
{
    uint32_t const cps[2] = { 0x2A702, 0x0021 };

    // 2A702 0021;	
    // (𪜂) CJK UNIFIED IDEOGRAPH-2A702	[FB85 A702 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA702, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A702 0021;	
    // (𪜂) CJK UNIFIED IDEOGRAPH-2A702	[FB85 A702 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA702, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_250)
{
    uint32_t const cps[2] = { 0x2A702, 0x003F };

    // 2A702 003F;	
    // (𪜂) CJK UNIFIED IDEOGRAPH-2A702	[FB85 A702 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA702, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A702 003F;	
    // (𪜂) CJK UNIFIED IDEOGRAPH-2A702	[FB85 A702 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA702, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_251)
{
    uint32_t const cps[2] = { 0x2A702, 0x0061 };

    // 2A702 0061;	
    // (𪜂) CJK UNIFIED IDEOGRAPH-2A702	[FB85 A702 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA702, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A702 0061;	
    // (𪜂) CJK UNIFIED IDEOGRAPH-2A702	[FB85 A702 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA702, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_252)
{
    uint32_t const cps[2] = { 0x2A702, 0x0041 };

    // 2A702 0041;	
    // (𪜂) CJK UNIFIED IDEOGRAPH-2A702	[FB85 A702 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA702, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A702 0041;	
    // (𪜂) CJK UNIFIED IDEOGRAPH-2A702	[FB85 A702 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA702, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_253)
{
    uint32_t const cps[2] = { 0x2A702, 0x0062 };

    // 2A702 0062;	
    // (𪜂) CJK UNIFIED IDEOGRAPH-2A702	[FB85 A702 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA702, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A702 0062;	
    // (𪜂) CJK UNIFIED IDEOGRAPH-2A702	[FB85 A702 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA702, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_254)
{
    uint32_t const cps[2] = { 0x2A703, 0x0021 };

    // 2A703 0021;	
    // (𪜃) CJK UNIFIED IDEOGRAPH-2A703	[FB85 A703 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA703, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A703 0021;	
    // (𪜃) CJK UNIFIED IDEOGRAPH-2A703	[FB85 A703 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA703, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_255)
{
    uint32_t const cps[2] = { 0x2A703, 0x003F };

    // 2A703 003F;	
    // (𪜃) CJK UNIFIED IDEOGRAPH-2A703	[FB85 A703 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA703, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A703 003F;	
    // (𪜃) CJK UNIFIED IDEOGRAPH-2A703	[FB85 A703 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA703, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_256)
{
    uint32_t const cps[2] = { 0x2A703, 0x0061 };

    // 2A703 0061;	
    // (𪜃) CJK UNIFIED IDEOGRAPH-2A703	[FB85 A703 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA703, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A703 0061;	
    // (𪜃) CJK UNIFIED IDEOGRAPH-2A703	[FB85 A703 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA703, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_257)
{
    uint32_t const cps[2] = { 0x2A703, 0x0041 };

    // 2A703 0041;	
    // (𪜃) CJK UNIFIED IDEOGRAPH-2A703	[FB85 A703 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA703, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A703 0041;	
    // (𪜃) CJK UNIFIED IDEOGRAPH-2A703	[FB85 A703 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA703, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_258)
{
    uint32_t const cps[2] = { 0x2A703, 0x0062 };

    // 2A703 0062;	
    // (𪜃) CJK UNIFIED IDEOGRAPH-2A703	[FB85 A703 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA703, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A703 0062;	
    // (𪜃) CJK UNIFIED IDEOGRAPH-2A703	[FB85 A703 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA703, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_259)
{
    uint32_t const cps[2] = { 0x2A704, 0x0021 };

    // 2A704 0021;	
    // (𪜄) CJK UNIFIED IDEOGRAPH-2A704	[FB85 A704 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA704, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A704 0021;	
    // (𪜄) CJK UNIFIED IDEOGRAPH-2A704	[FB85 A704 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA704, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_260)
{
    uint32_t const cps[2] = { 0x2A704, 0x003F };

    // 2A704 003F;	
    // (𪜄) CJK UNIFIED IDEOGRAPH-2A704	[FB85 A704 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA704, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A704 003F;	
    // (𪜄) CJK UNIFIED IDEOGRAPH-2A704	[FB85 A704 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA704, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_261)
{
    uint32_t const cps[2] = { 0x2A704, 0x0061 };

    // 2A704 0061;	
    // (𪜄) CJK UNIFIED IDEOGRAPH-2A704	[FB85 A704 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA704, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A704 0061;	
    // (𪜄) CJK UNIFIED IDEOGRAPH-2A704	[FB85 A704 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA704, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_262)
{
    uint32_t const cps[2] = { 0x2A704, 0x0041 };

    // 2A704 0041;	
    // (𪜄) CJK UNIFIED IDEOGRAPH-2A704	[FB85 A704 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA704, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A704 0041;	
    // (𪜄) CJK UNIFIED IDEOGRAPH-2A704	[FB85 A704 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA704, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_263)
{
    uint32_t const cps[2] = { 0x2A704, 0x0062 };

    // 2A704 0062;	
    // (𪜄) CJK UNIFIED IDEOGRAPH-2A704	[FB85 A704 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA704, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A704 0062;	
    // (𪜄) CJK UNIFIED IDEOGRAPH-2A704	[FB85 A704 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA704, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_264)
{
    uint32_t const cps[2] = { 0x2A705, 0x0021 };

    // 2A705 0021;	
    // (𪜅) CJK UNIFIED IDEOGRAPH-2A705	[FB85 A705 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA705, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A705 0021;	
    // (𪜅) CJK UNIFIED IDEOGRAPH-2A705	[FB85 A705 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA705, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_265)
{
    uint32_t const cps[2] = { 0x2A705, 0x003F };

    // 2A705 003F;	
    // (𪜅) CJK UNIFIED IDEOGRAPH-2A705	[FB85 A705 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA705, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A705 003F;	
    // (𪜅) CJK UNIFIED IDEOGRAPH-2A705	[FB85 A705 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xA705, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_266)
{
    uint32_t const cps[2] = { 0x2A705, 0x0061 };

    // 2A705 0061;	
    // (𪜅) CJK UNIFIED IDEOGRAPH-2A705	[FB85 A705 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA705, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A705 0061;	
    // (𪜅) CJK UNIFIED IDEOGRAPH-2A705	[FB85 A705 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA705, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_267)
{
    uint32_t const cps[2] = { 0x2A705, 0x0041 };

    // 2A705 0041;	
    // (𪜅) CJK UNIFIED IDEOGRAPH-2A705	[FB85 A705 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA705, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A705 0041;	
    // (𪜅) CJK UNIFIED IDEOGRAPH-2A705	[FB85 A705 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA705, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_268)
{
    uint32_t const cps[2] = { 0x2A705, 0x0062 };

    // 2A705 0062;	
    // (𪜅) CJK UNIFIED IDEOGRAPH-2A705	[FB85 A705 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xA705, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2A705 0062;	
    // (𪜅) CJK UNIFIED IDEOGRAPH-2A705	[FB85 A705 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xA705, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_269)
{
    uint32_t const cps[2] = { 0x2B730, 0x0021 };

    // 2B730 0021;	
    // (𫜰) CJK UNIFIED IDEOGRAPH-2B730	[FB85 B730 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB730, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B730 0021;	
    // (𫜰) CJK UNIFIED IDEOGRAPH-2B730	[FB85 B730 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB730, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_270)
{
    uint32_t const cps[2] = { 0x2B730, 0x003F };

    // 2B730 003F;	
    // (𫜰) CJK UNIFIED IDEOGRAPH-2B730	[FB85 B730 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB730, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B730 003F;	
    // (𫜰) CJK UNIFIED IDEOGRAPH-2B730	[FB85 B730 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB730, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_271)
{
    uint32_t const cps[2] = { 0x2B730, 0x0061 };

    // 2B730 0061;	
    // (𫜰) CJK UNIFIED IDEOGRAPH-2B730	[FB85 B730 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB730, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B730 0061;	
    // (𫜰) CJK UNIFIED IDEOGRAPH-2B730	[FB85 B730 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB730, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_272)
{
    uint32_t const cps[2] = { 0x2B730, 0x0041 };

    // 2B730 0041;	
    // (𫜰) CJK UNIFIED IDEOGRAPH-2B730	[FB85 B730 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB730, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B730 0041;	
    // (𫜰) CJK UNIFIED IDEOGRAPH-2B730	[FB85 B730 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB730, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_273)
{
    uint32_t const cps[2] = { 0x2B730, 0x0062 };

    // 2B730 0062;	
    // (𫜰) CJK UNIFIED IDEOGRAPH-2B730	[FB85 B730 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB730, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B730 0062;	
    // (𫜰) CJK UNIFIED IDEOGRAPH-2B730	[FB85 B730 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB730, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_274)
{
    uint32_t const cps[2] = { 0x2B731, 0x0021 };

    // 2B731 0021;	
    // (𫜱) CJK UNIFIED IDEOGRAPH-2B731	[FB85 B731 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB731, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B731 0021;	
    // (𫜱) CJK UNIFIED IDEOGRAPH-2B731	[FB85 B731 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB731, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_275)
{
    uint32_t const cps[2] = { 0x2B731, 0x003F };

    // 2B731 003F;	
    // (𫜱) CJK UNIFIED IDEOGRAPH-2B731	[FB85 B731 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB731, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B731 003F;	
    // (𫜱) CJK UNIFIED IDEOGRAPH-2B731	[FB85 B731 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB731, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_276)
{
    uint32_t const cps[2] = { 0x2B731, 0x0061 };

    // 2B731 0061;	
    // (𫜱) CJK UNIFIED IDEOGRAPH-2B731	[FB85 B731 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB731, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B731 0061;	
    // (𫜱) CJK UNIFIED IDEOGRAPH-2B731	[FB85 B731 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB731, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_277)
{
    uint32_t const cps[2] = { 0x2B731, 0x0041 };

    // 2B731 0041;	
    // (𫜱) CJK UNIFIED IDEOGRAPH-2B731	[FB85 B731 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB731, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B731 0041;	
    // (𫜱) CJK UNIFIED IDEOGRAPH-2B731	[FB85 B731 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB731, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_278)
{
    uint32_t const cps[2] = { 0x2B731, 0x0062 };

    // 2B731 0062;	
    // (𫜱) CJK UNIFIED IDEOGRAPH-2B731	[FB85 B731 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB731, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B731 0062;	
    // (𫜱) CJK UNIFIED IDEOGRAPH-2B731	[FB85 B731 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB731, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_279)
{
    uint32_t const cps[2] = { 0x2B732, 0x0021 };

    // 2B732 0021;	
    // (𫜲) CJK UNIFIED IDEOGRAPH-2B732	[FB85 B732 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB732, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B732 0021;	
    // (𫜲) CJK UNIFIED IDEOGRAPH-2B732	[FB85 B732 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB732, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_280)
{
    uint32_t const cps[2] = { 0x2B732, 0x003F };

    // 2B732 003F;	
    // (𫜲) CJK UNIFIED IDEOGRAPH-2B732	[FB85 B732 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB732, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B732 003F;	
    // (𫜲) CJK UNIFIED IDEOGRAPH-2B732	[FB85 B732 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB732, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_281)
{
    uint32_t const cps[2] = { 0x2B732, 0x0061 };

    // 2B732 0061;	
    // (𫜲) CJK UNIFIED IDEOGRAPH-2B732	[FB85 B732 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB732, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B732 0061;	
    // (𫜲) CJK UNIFIED IDEOGRAPH-2B732	[FB85 B732 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB732, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_282)
{
    uint32_t const cps[2] = { 0x2B732, 0x0041 };

    // 2B732 0041;	
    // (𫜲) CJK UNIFIED IDEOGRAPH-2B732	[FB85 B732 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB732, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B732 0041;	
    // (𫜲) CJK UNIFIED IDEOGRAPH-2B732	[FB85 B732 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB732, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_283)
{
    uint32_t const cps[2] = { 0x2B732, 0x0062 };

    // 2B732 0062;	
    // (𫜲) CJK UNIFIED IDEOGRAPH-2B732	[FB85 B732 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB732, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B732 0062;	
    // (𫜲) CJK UNIFIED IDEOGRAPH-2B732	[FB85 B732 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB732, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_284)
{
    uint32_t const cps[2] = { 0x2B733, 0x0021 };

    // 2B733 0021;	
    // (𫜳) CJK UNIFIED IDEOGRAPH-2B733	[FB85 B733 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB733, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B733 0021;	
    // (𫜳) CJK UNIFIED IDEOGRAPH-2B733	[FB85 B733 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB733, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_285)
{
    uint32_t const cps[2] = { 0x2B733, 0x003F };

    // 2B733 003F;	
    // (𫜳) CJK UNIFIED IDEOGRAPH-2B733	[FB85 B733 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB733, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B733 003F;	
    // (𫜳) CJK UNIFIED IDEOGRAPH-2B733	[FB85 B733 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB733, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_286)
{
    uint32_t const cps[2] = { 0x2B733, 0x0061 };

    // 2B733 0061;	
    // (𫜳) CJK UNIFIED IDEOGRAPH-2B733	[FB85 B733 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB733, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B733 0061;	
    // (𫜳) CJK UNIFIED IDEOGRAPH-2B733	[FB85 B733 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB733, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_287)
{
    uint32_t const cps[2] = { 0x2B733, 0x0041 };

    // 2B733 0041;	
    // (𫜳) CJK UNIFIED IDEOGRAPH-2B733	[FB85 B733 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB733, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B733 0041;	
    // (𫜳) CJK UNIFIED IDEOGRAPH-2B733	[FB85 B733 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB733, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_288)
{
    uint32_t const cps[2] = { 0x2B733, 0x0062 };

    // 2B733 0062;	
    // (𫜳) CJK UNIFIED IDEOGRAPH-2B733	[FB85 B733 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB733, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B733 0062;	
    // (𫜳) CJK UNIFIED IDEOGRAPH-2B733	[FB85 B733 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB733, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_289)
{
    uint32_t const cps[2] = { 0x2B734, 0x0021 };

    // 2B734 0021;	
    // (𫜴) CJK UNIFIED IDEOGRAPH-2B734	[FB85 B734 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB734, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B734 0021;	
    // (𫜴) CJK UNIFIED IDEOGRAPH-2B734	[FB85 B734 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB734, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_290)
{
    uint32_t const cps[2] = { 0x2B734, 0x003F };

    // 2B734 003F;	
    // (𫜴) CJK UNIFIED IDEOGRAPH-2B734	[FB85 B734 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB734, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B734 003F;	
    // (𫜴) CJK UNIFIED IDEOGRAPH-2B734	[FB85 B734 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB734, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_291)
{
    uint32_t const cps[2] = { 0x2B734, 0x0061 };

    // 2B734 0061;	
    // (𫜴) CJK UNIFIED IDEOGRAPH-2B734	[FB85 B734 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB734, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B734 0061;	
    // (𫜴) CJK UNIFIED IDEOGRAPH-2B734	[FB85 B734 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB734, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_292)
{
    uint32_t const cps[2] = { 0x2B734, 0x0041 };

    // 2B734 0041;	
    // (𫜴) CJK UNIFIED IDEOGRAPH-2B734	[FB85 B734 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB734, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B734 0041;	
    // (𫜴) CJK UNIFIED IDEOGRAPH-2B734	[FB85 B734 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB734, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_293)
{
    uint32_t const cps[2] = { 0x2B734, 0x0062 };

    // 2B734 0062;	
    // (𫜴) CJK UNIFIED IDEOGRAPH-2B734	[FB85 B734 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB734, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B734 0062;	
    // (𫜴) CJK UNIFIED IDEOGRAPH-2B734	[FB85 B734 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB734, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_294)
{
    uint32_t const cps[2] = { 0x2B740, 0x0021 };

    // 2B740 0021;	
    // (𫝀) CJK UNIFIED IDEOGRAPH-2B740	[FB85 B740 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB740, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B740 0021;	
    // (𫝀) CJK UNIFIED IDEOGRAPH-2B740	[FB85 B740 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB740, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_295)
{
    uint32_t const cps[2] = { 0x2B740, 0x003F };

    // 2B740 003F;	
    // (𫝀) CJK UNIFIED IDEOGRAPH-2B740	[FB85 B740 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB740, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B740 003F;	
    // (𫝀) CJK UNIFIED IDEOGRAPH-2B740	[FB85 B740 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB740, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_296)
{
    uint32_t const cps[2] = { 0x2B740, 0x0061 };

    // 2B740 0061;	
    // (𫝀) CJK UNIFIED IDEOGRAPH-2B740	[FB85 B740 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB740, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B740 0061;	
    // (𫝀) CJK UNIFIED IDEOGRAPH-2B740	[FB85 B740 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB740, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_297)
{
    uint32_t const cps[2] = { 0x2B740, 0x0041 };

    // 2B740 0041;	
    // (𫝀) CJK UNIFIED IDEOGRAPH-2B740	[FB85 B740 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB740, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B740 0041;	
    // (𫝀) CJK UNIFIED IDEOGRAPH-2B740	[FB85 B740 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB740, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_298)
{
    uint32_t const cps[2] = { 0x2B740, 0x0062 };

    // 2B740 0062;	
    // (𫝀) CJK UNIFIED IDEOGRAPH-2B740	[FB85 B740 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB740, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B740 0062;	
    // (𫝀) CJK UNIFIED IDEOGRAPH-2B740	[FB85 B740 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB740, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_299)
{
    uint32_t const cps[2] = { 0x2B741, 0x0021 };

    // 2B741 0021;	
    // (𫝁) CJK UNIFIED IDEOGRAPH-2B741	[FB85 B741 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB741, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B741 0021;	
    // (𫝁) CJK UNIFIED IDEOGRAPH-2B741	[FB85 B741 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB741, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_300)
{
    uint32_t const cps[2] = { 0x2B741, 0x003F };

    // 2B741 003F;	
    // (𫝁) CJK UNIFIED IDEOGRAPH-2B741	[FB85 B741 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB741, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B741 003F;	
    // (𫝁) CJK UNIFIED IDEOGRAPH-2B741	[FB85 B741 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB741, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_301)
{
    uint32_t const cps[2] = { 0x2B741, 0x0061 };

    // 2B741 0061;	
    // (𫝁) CJK UNIFIED IDEOGRAPH-2B741	[FB85 B741 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB741, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B741 0061;	
    // (𫝁) CJK UNIFIED IDEOGRAPH-2B741	[FB85 B741 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB741, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_302)
{
    uint32_t const cps[2] = { 0x2B741, 0x0041 };

    // 2B741 0041;	
    // (𫝁) CJK UNIFIED IDEOGRAPH-2B741	[FB85 B741 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB741, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B741 0041;	
    // (𫝁) CJK UNIFIED IDEOGRAPH-2B741	[FB85 B741 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB741, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_303)
{
    uint32_t const cps[2] = { 0x2B741, 0x0062 };

    // 2B741 0062;	
    // (𫝁) CJK UNIFIED IDEOGRAPH-2B741	[FB85 B741 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB741, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B741 0062;	
    // (𫝁) CJK UNIFIED IDEOGRAPH-2B741	[FB85 B741 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB741, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_304)
{
    uint32_t const cps[2] = { 0x2B742, 0x0021 };

    // 2B742 0021;	
    // (𫝂) CJK UNIFIED IDEOGRAPH-2B742	[FB85 B742 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB742, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B742 0021;	
    // (𫝂) CJK UNIFIED IDEOGRAPH-2B742	[FB85 B742 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB742, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_305)
{
    uint32_t const cps[2] = { 0x2B742, 0x003F };

    // 2B742 003F;	
    // (𫝂) CJK UNIFIED IDEOGRAPH-2B742	[FB85 B742 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB742, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B742 003F;	
    // (𫝂) CJK UNIFIED IDEOGRAPH-2B742	[FB85 B742 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB742, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_306)
{
    uint32_t const cps[2] = { 0x2B742, 0x0061 };

    // 2B742 0061;	
    // (𫝂) CJK UNIFIED IDEOGRAPH-2B742	[FB85 B742 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB742, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B742 0061;	
    // (𫝂) CJK UNIFIED IDEOGRAPH-2B742	[FB85 B742 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB742, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_307)
{
    uint32_t const cps[2] = { 0x2B742, 0x0041 };

    // 2B742 0041;	
    // (𫝂) CJK UNIFIED IDEOGRAPH-2B742	[FB85 B742 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB742, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B742 0041;	
    // (𫝂) CJK UNIFIED IDEOGRAPH-2B742	[FB85 B742 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB742, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_308)
{
    uint32_t const cps[2] = { 0x2B742, 0x0062 };

    // 2B742 0062;	
    // (𫝂) CJK UNIFIED IDEOGRAPH-2B742	[FB85 B742 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB742, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B742 0062;	
    // (𫝂) CJK UNIFIED IDEOGRAPH-2B742	[FB85 B742 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB742, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_309)
{
    uint32_t const cps[2] = { 0x2B743, 0x0021 };

    // 2B743 0021;	
    // (𫝃) CJK UNIFIED IDEOGRAPH-2B743	[FB85 B743 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB743, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B743 0021;	
    // (𫝃) CJK UNIFIED IDEOGRAPH-2B743	[FB85 B743 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB743, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_310)
{
    uint32_t const cps[2] = { 0x2B743, 0x003F };

    // 2B743 003F;	
    // (𫝃) CJK UNIFIED IDEOGRAPH-2B743	[FB85 B743 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB743, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B743 003F;	
    // (𫝃) CJK UNIFIED IDEOGRAPH-2B743	[FB85 B743 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB743, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_311)
{
    uint32_t const cps[2] = { 0x2B743, 0x0061 };

    // 2B743 0061;	
    // (𫝃) CJK UNIFIED IDEOGRAPH-2B743	[FB85 B743 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB743, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B743 0061;	
    // (𫝃) CJK UNIFIED IDEOGRAPH-2B743	[FB85 B743 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB743, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_312)
{
    uint32_t const cps[2] = { 0x2B743, 0x0041 };

    // 2B743 0041;	
    // (𫝃) CJK UNIFIED IDEOGRAPH-2B743	[FB85 B743 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB743, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B743 0041;	
    // (𫝃) CJK UNIFIED IDEOGRAPH-2B743	[FB85 B743 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB743, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_313)
{
    uint32_t const cps[2] = { 0x2B743, 0x0062 };

    // 2B743 0062;	
    // (𫝃) CJK UNIFIED IDEOGRAPH-2B743	[FB85 B743 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB743, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B743 0062;	
    // (𫝃) CJK UNIFIED IDEOGRAPH-2B743	[FB85 B743 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB743, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_314)
{
    uint32_t const cps[2] = { 0x2B744, 0x0021 };

    // 2B744 0021;	
    // (𫝄) CJK UNIFIED IDEOGRAPH-2B744	[FB85 B744 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB744, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B744 0021;	
    // (𫝄) CJK UNIFIED IDEOGRAPH-2B744	[FB85 B744 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB744, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_315)
{
    uint32_t const cps[2] = { 0x2B744, 0x003F };

    // 2B744 003F;	
    // (𫝄) CJK UNIFIED IDEOGRAPH-2B744	[FB85 B744 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB744, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B744 003F;	
    // (𫝄) CJK UNIFIED IDEOGRAPH-2B744	[FB85 B744 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB744, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_316)
{
    uint32_t const cps[2] = { 0x2B744, 0x0061 };

    // 2B744 0061;	
    // (𫝄) CJK UNIFIED IDEOGRAPH-2B744	[FB85 B744 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB744, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B744 0061;	
    // (𫝄) CJK UNIFIED IDEOGRAPH-2B744	[FB85 B744 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB744, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_317)
{
    uint32_t const cps[2] = { 0x2B744, 0x0041 };

    // 2B744 0041;	
    // (𫝄) CJK UNIFIED IDEOGRAPH-2B744	[FB85 B744 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB744, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B744 0041;	
    // (𫝄) CJK UNIFIED IDEOGRAPH-2B744	[FB85 B744 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB744, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_318)
{
    uint32_t const cps[2] = { 0x2B744, 0x0062 };

    // 2B744 0062;	
    // (𫝄) CJK UNIFIED IDEOGRAPH-2B744	[FB85 B744 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB744, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B744 0062;	
    // (𫝄) CJK UNIFIED IDEOGRAPH-2B744	[FB85 B744 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB744, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_319)
{
    uint32_t const cps[2] = { 0x2B745, 0x0021 };

    // 2B745 0021;	
    // (𫝅) CJK UNIFIED IDEOGRAPH-2B745	[FB85 B745 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB745, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B745 0021;	
    // (𫝅) CJK UNIFIED IDEOGRAPH-2B745	[FB85 B745 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB745, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_320)
{
    uint32_t const cps[2] = { 0x2B745, 0x003F };

    // 2B745 003F;	
    // (𫝅) CJK UNIFIED IDEOGRAPH-2B745	[FB85 B745 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB745, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B745 003F;	
    // (𫝅) CJK UNIFIED IDEOGRAPH-2B745	[FB85 B745 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB745, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_321)
{
    uint32_t const cps[2] = { 0x2B745, 0x0061 };

    // 2B745 0061;	
    // (𫝅) CJK UNIFIED IDEOGRAPH-2B745	[FB85 B745 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB745, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B745 0061;	
    // (𫝅) CJK UNIFIED IDEOGRAPH-2B745	[FB85 B745 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB745, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_322)
{
    uint32_t const cps[2] = { 0x2B745, 0x0041 };

    // 2B745 0041;	
    // (𫝅) CJK UNIFIED IDEOGRAPH-2B745	[FB85 B745 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB745, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B745 0041;	
    // (𫝅) CJK UNIFIED IDEOGRAPH-2B745	[FB85 B745 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB745, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_323)
{
    uint32_t const cps[2] = { 0x2B745, 0x0062 };

    // 2B745 0062;	
    // (𫝅) CJK UNIFIED IDEOGRAPH-2B745	[FB85 B745 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB745, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B745 0062;	
    // (𫝅) CJK UNIFIED IDEOGRAPH-2B745	[FB85 B745 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB745, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_324)
{
    uint32_t const cps[2] = { 0x2B819, 0x0021 };

    // 2B819 0021;	
    // (𫠙) CJK UNIFIED IDEOGRAPH-2B819	[FB85 B819 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB819, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B819 0021;	
    // (𫠙) CJK UNIFIED IDEOGRAPH-2B819	[FB85 B819 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB819, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_325)
{
    uint32_t const cps[2] = { 0x2B819, 0x003F };

    // 2B819 003F;	
    // (𫠙) CJK UNIFIED IDEOGRAPH-2B819	[FB85 B819 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB819, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B819 003F;	
    // (𫠙) CJK UNIFIED IDEOGRAPH-2B819	[FB85 B819 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB819, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_326)
{
    uint32_t const cps[2] = { 0x2B819, 0x0061 };

    // 2B819 0061;	
    // (𫠙) CJK UNIFIED IDEOGRAPH-2B819	[FB85 B819 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB819, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B819 0061;	
    // (𫠙) CJK UNIFIED IDEOGRAPH-2B819	[FB85 B819 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB819, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_327)
{
    uint32_t const cps[2] = { 0x2B819, 0x0041 };

    // 2B819 0041;	
    // (𫠙) CJK UNIFIED IDEOGRAPH-2B819	[FB85 B819 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB819, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B819 0041;	
    // (𫠙) CJK UNIFIED IDEOGRAPH-2B819	[FB85 B819 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB819, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_328)
{
    uint32_t const cps[2] = { 0x2B819, 0x0062 };

    // 2B819 0062;	
    // (𫠙) CJK UNIFIED IDEOGRAPH-2B819	[FB85 B819 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB819, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B819 0062;	
    // (𫠙) CJK UNIFIED IDEOGRAPH-2B819	[FB85 B819 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB819, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_329)
{
    uint32_t const cps[2] = { 0x2B81A, 0x0021 };

    // 2B81A 0021;	
    // (𫠚) CJK UNIFIED IDEOGRAPH-2B81A	[FB85 B81A 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB81A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B81A 0021;	
    // (𫠚) CJK UNIFIED IDEOGRAPH-2B81A	[FB85 B81A | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB81A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_330)
{
    uint32_t const cps[2] = { 0x2B81A, 0x003F };

    // 2B81A 003F;	
    // (𫠚) CJK UNIFIED IDEOGRAPH-2B81A	[FB85 B81A 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB81A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B81A 003F;	
    // (𫠚) CJK UNIFIED IDEOGRAPH-2B81A	[FB85 B81A | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB81A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_331)
{
    uint32_t const cps[2] = { 0x2B81A, 0x0061 };

    // 2B81A 0061;	
    // (𫠚) CJK UNIFIED IDEOGRAPH-2B81A	[FB85 B81A 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB81A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B81A 0061;	
    // (𫠚) CJK UNIFIED IDEOGRAPH-2B81A	[FB85 B81A 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB81A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_332)
{
    uint32_t const cps[2] = { 0x2B81A, 0x0041 };

    // 2B81A 0041;	
    // (𫠚) CJK UNIFIED IDEOGRAPH-2B81A	[FB85 B81A 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB81A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B81A 0041;	
    // (𫠚) CJK UNIFIED IDEOGRAPH-2B81A	[FB85 B81A 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB81A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_333)
{
    uint32_t const cps[2] = { 0x2B81A, 0x0062 };

    // 2B81A 0062;	
    // (𫠚) CJK UNIFIED IDEOGRAPH-2B81A	[FB85 B81A 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB81A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B81A 0062;	
    // (𫠚) CJK UNIFIED IDEOGRAPH-2B81A	[FB85 B81A 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB81A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_334)
{
    uint32_t const cps[2] = { 0x2B81B, 0x0021 };

    // 2B81B 0021;	
    // (𫠛) CJK UNIFIED IDEOGRAPH-2B81B	[FB85 B81B 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB81B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B81B 0021;	
    // (𫠛) CJK UNIFIED IDEOGRAPH-2B81B	[FB85 B81B | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB81B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_335)
{
    uint32_t const cps[2] = { 0x2B81B, 0x003F };

    // 2B81B 003F;	
    // (𫠛) CJK UNIFIED IDEOGRAPH-2B81B	[FB85 B81B 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB81B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B81B 003F;	
    // (𫠛) CJK UNIFIED IDEOGRAPH-2B81B	[FB85 B81B | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB81B, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_336)
{
    uint32_t const cps[2] = { 0x2B81B, 0x0061 };

    // 2B81B 0061;	
    // (𫠛) CJK UNIFIED IDEOGRAPH-2B81B	[FB85 B81B 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB81B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B81B 0061;	
    // (𫠛) CJK UNIFIED IDEOGRAPH-2B81B	[FB85 B81B 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB81B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_337)
{
    uint32_t const cps[2] = { 0x2B81B, 0x0041 };

    // 2B81B 0041;	
    // (𫠛) CJK UNIFIED IDEOGRAPH-2B81B	[FB85 B81B 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB81B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B81B 0041;	
    // (𫠛) CJK UNIFIED IDEOGRAPH-2B81B	[FB85 B81B 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB81B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_338)
{
    uint32_t const cps[2] = { 0x2B81B, 0x0062 };

    // 2B81B 0062;	
    // (𫠛) CJK UNIFIED IDEOGRAPH-2B81B	[FB85 B81B 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB81B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B81B 0062;	
    // (𫠛) CJK UNIFIED IDEOGRAPH-2B81B	[FB85 B81B 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB81B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_339)
{
    uint32_t const cps[2] = { 0x2B81C, 0x0021 };

    // 2B81C 0021;	
    // (𫠜) CJK UNIFIED IDEOGRAPH-2B81C	[FB85 B81C 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB81C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B81C 0021;	
    // (𫠜) CJK UNIFIED IDEOGRAPH-2B81C	[FB85 B81C | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB81C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_340)
{
    uint32_t const cps[2] = { 0x2B81C, 0x003F };

    // 2B81C 003F;	
    // (𫠜) CJK UNIFIED IDEOGRAPH-2B81C	[FB85 B81C 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB81C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B81C 003F;	
    // (𫠜) CJK UNIFIED IDEOGRAPH-2B81C	[FB85 B81C | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB81C, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_341)
{
    uint32_t const cps[2] = { 0x2B81C, 0x0061 };

    // 2B81C 0061;	
    // (𫠜) CJK UNIFIED IDEOGRAPH-2B81C	[FB85 B81C 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB81C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B81C 0061;	
    // (𫠜) CJK UNIFIED IDEOGRAPH-2B81C	[FB85 B81C 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB81C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_342)
{
    uint32_t const cps[2] = { 0x2B81C, 0x0041 };

    // 2B81C 0041;	
    // (𫠜) CJK UNIFIED IDEOGRAPH-2B81C	[FB85 B81C 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB81C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B81C 0041;	
    // (𫠜) CJK UNIFIED IDEOGRAPH-2B81C	[FB85 B81C 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB81C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_343)
{
    uint32_t const cps[2] = { 0x2B81C, 0x0062 };

    // 2B81C 0062;	
    // (𫠜) CJK UNIFIED IDEOGRAPH-2B81C	[FB85 B81C 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB81C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B81C 0062;	
    // (𫠜) CJK UNIFIED IDEOGRAPH-2B81C	[FB85 B81C 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB81C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_344)
{
    uint32_t const cps[2] = { 0x2B81D, 0x0021 };

    // 2B81D 0021;	
    // (𫠝) CJK UNIFIED IDEOGRAPH-2B81D	[FB85 B81D 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB81D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B81D 0021;	
    // (𫠝) CJK UNIFIED IDEOGRAPH-2B81D	[FB85 B81D | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB81D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_345)
{
    uint32_t const cps[2] = { 0x2B81D, 0x003F };

    // 2B81D 003F;	
    // (𫠝) CJK UNIFIED IDEOGRAPH-2B81D	[FB85 B81D 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB81D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B81D 003F;	
    // (𫠝) CJK UNIFIED IDEOGRAPH-2B81D	[FB85 B81D | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB81D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_346)
{
    uint32_t const cps[2] = { 0x2B81D, 0x0061 };

    // 2B81D 0061;	
    // (𫠝) CJK UNIFIED IDEOGRAPH-2B81D	[FB85 B81D 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB81D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B81D 0061;	
    // (𫠝) CJK UNIFIED IDEOGRAPH-2B81D	[FB85 B81D 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB81D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_347)
{
    uint32_t const cps[2] = { 0x2B81D, 0x0041 };

    // 2B81D 0041;	
    // (𫠝) CJK UNIFIED IDEOGRAPH-2B81D	[FB85 B81D 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB81D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B81D 0041;	
    // (𫠝) CJK UNIFIED IDEOGRAPH-2B81D	[FB85 B81D 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB81D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_348)
{
    uint32_t const cps[2] = { 0x2B81D, 0x0062 };

    // 2B81D 0062;	
    // (𫠝) CJK UNIFIED IDEOGRAPH-2B81D	[FB85 B81D 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB81D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B81D 0062;	
    // (𫠝) CJK UNIFIED IDEOGRAPH-2B81D	[FB85 B81D 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB81D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_349)
{
    uint32_t const cps[2] = { 0x2B820, 0x0021 };

    // 2B820 0021;	
    // (𫠠) CJK UNIFIED IDEOGRAPH-2B820	[FB85 B820 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB820, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B820 0021;	
    // (𫠠) CJK UNIFIED IDEOGRAPH-2B820	[FB85 B820 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB820, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_350)
{
    uint32_t const cps[2] = { 0x2B820, 0x003F };

    // 2B820 003F;	
    // (𫠠) CJK UNIFIED IDEOGRAPH-2B820	[FB85 B820 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB820, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B820 003F;	
    // (𫠠) CJK UNIFIED IDEOGRAPH-2B820	[FB85 B820 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB820, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_351)
{
    uint32_t const cps[2] = { 0x2B820, 0x0061 };

    // 2B820 0061;	
    // (𫠠) CJK UNIFIED IDEOGRAPH-2B820	[FB85 B820 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB820, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B820 0061;	
    // (𫠠) CJK UNIFIED IDEOGRAPH-2B820	[FB85 B820 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB820, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_352)
{
    uint32_t const cps[2] = { 0x2B820, 0x0041 };

    // 2B820 0041;	
    // (𫠠) CJK UNIFIED IDEOGRAPH-2B820	[FB85 B820 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB820, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B820 0041;	
    // (𫠠) CJK UNIFIED IDEOGRAPH-2B820	[FB85 B820 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB820, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_353)
{
    uint32_t const cps[2] = { 0x2B820, 0x0062 };

    // 2B820 0062;	
    // (𫠠) CJK UNIFIED IDEOGRAPH-2B820	[FB85 B820 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB820, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B820 0062;	
    // (𫠠) CJK UNIFIED IDEOGRAPH-2B820	[FB85 B820 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB820, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_354)
{
    uint32_t const cps[2] = { 0x2B821, 0x0021 };

    // 2B821 0021;	
    // (𫠡) CJK UNIFIED IDEOGRAPH-2B821	[FB85 B821 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB821, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B821 0021;	
    // (𫠡) CJK UNIFIED IDEOGRAPH-2B821	[FB85 B821 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB821, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_355)
{
    uint32_t const cps[2] = { 0x2B821, 0x003F };

    // 2B821 003F;	
    // (𫠡) CJK UNIFIED IDEOGRAPH-2B821	[FB85 B821 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB821, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B821 003F;	
    // (𫠡) CJK UNIFIED IDEOGRAPH-2B821	[FB85 B821 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB821, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_356)
{
    uint32_t const cps[2] = { 0x2B821, 0x0061 };

    // 2B821 0061;	
    // (𫠡) CJK UNIFIED IDEOGRAPH-2B821	[FB85 B821 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB821, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B821 0061;	
    // (𫠡) CJK UNIFIED IDEOGRAPH-2B821	[FB85 B821 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB821, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_357)
{
    uint32_t const cps[2] = { 0x2B821, 0x0041 };

    // 2B821 0041;	
    // (𫠡) CJK UNIFIED IDEOGRAPH-2B821	[FB85 B821 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB821, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B821 0041;	
    // (𫠡) CJK UNIFIED IDEOGRAPH-2B821	[FB85 B821 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB821, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_358)
{
    uint32_t const cps[2] = { 0x2B821, 0x0062 };

    // 2B821 0062;	
    // (𫠡) CJK UNIFIED IDEOGRAPH-2B821	[FB85 B821 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB821, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B821 0062;	
    // (𫠡) CJK UNIFIED IDEOGRAPH-2B821	[FB85 B821 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB821, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_359)
{
    uint32_t const cps[2] = { 0x2B822, 0x0021 };

    // 2B822 0021;	
    // (𫠢) CJK UNIFIED IDEOGRAPH-2B822	[FB85 B822 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB822, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B822 0021;	
    // (𫠢) CJK UNIFIED IDEOGRAPH-2B822	[FB85 B822 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB822, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_360)
{
    uint32_t const cps[2] = { 0x2B822, 0x003F };

    // 2B822 003F;	
    // (𫠢) CJK UNIFIED IDEOGRAPH-2B822	[FB85 B822 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB822, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B822 003F;	
    // (𫠢) CJK UNIFIED IDEOGRAPH-2B822	[FB85 B822 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB822, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_361)
{
    uint32_t const cps[2] = { 0x2B822, 0x0061 };

    // 2B822 0061;	
    // (𫠢) CJK UNIFIED IDEOGRAPH-2B822	[FB85 B822 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB822, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B822 0061;	
    // (𫠢) CJK UNIFIED IDEOGRAPH-2B822	[FB85 B822 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB822, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_362)
{
    uint32_t const cps[2] = { 0x2B822, 0x0041 };

    // 2B822 0041;	
    // (𫠢) CJK UNIFIED IDEOGRAPH-2B822	[FB85 B822 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB822, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B822 0041;	
    // (𫠢) CJK UNIFIED IDEOGRAPH-2B822	[FB85 B822 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB822, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_363)
{
    uint32_t const cps[2] = { 0x2B822, 0x0062 };

    // 2B822 0062;	
    // (𫠢) CJK UNIFIED IDEOGRAPH-2B822	[FB85 B822 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB822, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B822 0062;	
    // (𫠢) CJK UNIFIED IDEOGRAPH-2B822	[FB85 B822 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB822, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_364)
{
    uint32_t const cps[2] = { 0x2B823, 0x0021 };

    // 2B823 0021;	
    // (𫠣) CJK UNIFIED IDEOGRAPH-2B823	[FB85 B823 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB823, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B823 0021;	
    // (𫠣) CJK UNIFIED IDEOGRAPH-2B823	[FB85 B823 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB823, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_365)
{
    uint32_t const cps[2] = { 0x2B823, 0x003F };

    // 2B823 003F;	
    // (𫠣) CJK UNIFIED IDEOGRAPH-2B823	[FB85 B823 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB823, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B823 003F;	
    // (𫠣) CJK UNIFIED IDEOGRAPH-2B823	[FB85 B823 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB823, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_366)
{
    uint32_t const cps[2] = { 0x2B823, 0x0061 };

    // 2B823 0061;	
    // (𫠣) CJK UNIFIED IDEOGRAPH-2B823	[FB85 B823 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB823, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B823 0061;	
    // (𫠣) CJK UNIFIED IDEOGRAPH-2B823	[FB85 B823 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB823, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_367)
{
    uint32_t const cps[2] = { 0x2B823, 0x0041 };

    // 2B823 0041;	
    // (𫠣) CJK UNIFIED IDEOGRAPH-2B823	[FB85 B823 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB823, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B823 0041;	
    // (𫠣) CJK UNIFIED IDEOGRAPH-2B823	[FB85 B823 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB823, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_368)
{
    uint32_t const cps[2] = { 0x2B823, 0x0062 };

    // 2B823 0062;	
    // (𫠣) CJK UNIFIED IDEOGRAPH-2B823	[FB85 B823 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB823, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B823 0062;	
    // (𫠣) CJK UNIFIED IDEOGRAPH-2B823	[FB85 B823 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB823, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_369)
{
    uint32_t const cps[2] = { 0x2B824, 0x0021 };

    // 2B824 0021;	
    // (𫠤) CJK UNIFIED IDEOGRAPH-2B824	[FB85 B824 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB824, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B824 0021;	
    // (𫠤) CJK UNIFIED IDEOGRAPH-2B824	[FB85 B824 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB824, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_370)
{
    uint32_t const cps[2] = { 0x2B824, 0x003F };

    // 2B824 003F;	
    // (𫠤) CJK UNIFIED IDEOGRAPH-2B824	[FB85 B824 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB824, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B824 003F;	
    // (𫠤) CJK UNIFIED IDEOGRAPH-2B824	[FB85 B824 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB824, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_371)
{
    uint32_t const cps[2] = { 0x2B824, 0x0061 };

    // 2B824 0061;	
    // (𫠤) CJK UNIFIED IDEOGRAPH-2B824	[FB85 B824 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB824, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B824 0061;	
    // (𫠤) CJK UNIFIED IDEOGRAPH-2B824	[FB85 B824 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB824, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_372)
{
    uint32_t const cps[2] = { 0x2B824, 0x0041 };

    // 2B824 0041;	
    // (𫠤) CJK UNIFIED IDEOGRAPH-2B824	[FB85 B824 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB824, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B824 0041;	
    // (𫠤) CJK UNIFIED IDEOGRAPH-2B824	[FB85 B824 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB824, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_373)
{
    uint32_t const cps[2] = { 0x2B824, 0x0062 };

    // 2B824 0062;	
    // (𫠤) CJK UNIFIED IDEOGRAPH-2B824	[FB85 B824 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB824, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B824 0062;	
    // (𫠤) CJK UNIFIED IDEOGRAPH-2B824	[FB85 B824 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB824, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_374)
{
    uint32_t const cps[2] = { 0x2B825, 0x0021 };

    // 2B825 0021;	
    // (𫠥) CJK UNIFIED IDEOGRAPH-2B825	[FB85 B825 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB825, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B825 0021;	
    // (𫠥) CJK UNIFIED IDEOGRAPH-2B825	[FB85 B825 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB825, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_375)
{
    uint32_t const cps[2] = { 0x2B825, 0x003F };

    // 2B825 003F;	
    // (𫠥) CJK UNIFIED IDEOGRAPH-2B825	[FB85 B825 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB825, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B825 003F;	
    // (𫠥) CJK UNIFIED IDEOGRAPH-2B825	[FB85 B825 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xB825, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_376)
{
    uint32_t const cps[2] = { 0x2B825, 0x0061 };

    // 2B825 0061;	
    // (𫠥) CJK UNIFIED IDEOGRAPH-2B825	[FB85 B825 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB825, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B825 0061;	
    // (𫠥) CJK UNIFIED IDEOGRAPH-2B825	[FB85 B825 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB825, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_377)
{
    uint32_t const cps[2] = { 0x2B825, 0x0041 };

    // 2B825 0041;	
    // (𫠥) CJK UNIFIED IDEOGRAPH-2B825	[FB85 B825 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB825, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B825 0041;	
    // (𫠥) CJK UNIFIED IDEOGRAPH-2B825	[FB85 B825 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB825, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_378)
{
    uint32_t const cps[2] = { 0x2B825, 0x0062 };

    // 2B825 0062;	
    // (𫠥) CJK UNIFIED IDEOGRAPH-2B825	[FB85 B825 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xB825, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2B825 0062;	
    // (𫠥) CJK UNIFIED IDEOGRAPH-2B825	[FB85 B825 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xB825, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_379)
{
    uint32_t const cps[2] = { 0x2CE9D, 0x0021 };

    // 2CE9D 0021;	
    // (𬺝) CJK UNIFIED IDEOGRAPH-2CE9D	[FB85 CE9D 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCE9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CE9D 0021;	
    // (𬺝) CJK UNIFIED IDEOGRAPH-2CE9D	[FB85 CE9D | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCE9D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_380)
{
    uint32_t const cps[2] = { 0x2CE9D, 0x003F };

    // 2CE9D 003F;	
    // (𬺝) CJK UNIFIED IDEOGRAPH-2CE9D	[FB85 CE9D 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCE9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CE9D 003F;	
    // (𬺝) CJK UNIFIED IDEOGRAPH-2CE9D	[FB85 CE9D | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCE9D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_381)
{
    uint32_t const cps[2] = { 0x2CE9D, 0x0061 };

    // 2CE9D 0061;	
    // (𬺝) CJK UNIFIED IDEOGRAPH-2CE9D	[FB85 CE9D 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCE9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CE9D 0061;	
    // (𬺝) CJK UNIFIED IDEOGRAPH-2CE9D	[FB85 CE9D 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCE9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_382)
{
    uint32_t const cps[2] = { 0x2CE9D, 0x0041 };

    // 2CE9D 0041;	
    // (𬺝) CJK UNIFIED IDEOGRAPH-2CE9D	[FB85 CE9D 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCE9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CE9D 0041;	
    // (𬺝) CJK UNIFIED IDEOGRAPH-2CE9D	[FB85 CE9D 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCE9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_383)
{
    uint32_t const cps[2] = { 0x2CE9D, 0x0062 };

    // 2CE9D 0062;	
    // (𬺝) CJK UNIFIED IDEOGRAPH-2CE9D	[FB85 CE9D 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCE9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CE9D 0062;	
    // (𬺝) CJK UNIFIED IDEOGRAPH-2CE9D	[FB85 CE9D 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCE9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_384)
{
    uint32_t const cps[2] = { 0x2CE9E, 0x0021 };

    // 2CE9E 0021;	
    // (𬺞) CJK UNIFIED IDEOGRAPH-2CE9E	[FB85 CE9E 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCE9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CE9E 0021;	
    // (𬺞) CJK UNIFIED IDEOGRAPH-2CE9E	[FB85 CE9E | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCE9E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_385)
{
    uint32_t const cps[2] = { 0x2CE9E, 0x003F };

    // 2CE9E 003F;	
    // (𬺞) CJK UNIFIED IDEOGRAPH-2CE9E	[FB85 CE9E 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCE9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CE9E 003F;	
    // (𬺞) CJK UNIFIED IDEOGRAPH-2CE9E	[FB85 CE9E | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCE9E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_386)
{
    uint32_t const cps[2] = { 0x2CE9E, 0x0061 };

    // 2CE9E 0061;	
    // (𬺞) CJK UNIFIED IDEOGRAPH-2CE9E	[FB85 CE9E 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCE9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CE9E 0061;	
    // (𬺞) CJK UNIFIED IDEOGRAPH-2CE9E	[FB85 CE9E 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCE9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_387)
{
    uint32_t const cps[2] = { 0x2CE9E, 0x0041 };

    // 2CE9E 0041;	
    // (𬺞) CJK UNIFIED IDEOGRAPH-2CE9E	[FB85 CE9E 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCE9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CE9E 0041;	
    // (𬺞) CJK UNIFIED IDEOGRAPH-2CE9E	[FB85 CE9E 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCE9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_388)
{
    uint32_t const cps[2] = { 0x2CE9E, 0x0062 };

    // 2CE9E 0062;	
    // (𬺞) CJK UNIFIED IDEOGRAPH-2CE9E	[FB85 CE9E 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCE9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CE9E 0062;	
    // (𬺞) CJK UNIFIED IDEOGRAPH-2CE9E	[FB85 CE9E 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCE9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_389)
{
    uint32_t const cps[2] = { 0x2CE9F, 0x0021 };

    // 2CE9F 0021;	
    // (𬺟) CJK UNIFIED IDEOGRAPH-2CE9F	[FB85 CE9F 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCE9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CE9F 0021;	
    // (𬺟) CJK UNIFIED IDEOGRAPH-2CE9F	[FB85 CE9F | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCE9F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_390)
{
    uint32_t const cps[2] = { 0x2CE9F, 0x003F };

    // 2CE9F 003F;	
    // (𬺟) CJK UNIFIED IDEOGRAPH-2CE9F	[FB85 CE9F 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCE9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CE9F 003F;	
    // (𬺟) CJK UNIFIED IDEOGRAPH-2CE9F	[FB85 CE9F | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCE9F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_391)
{
    uint32_t const cps[2] = { 0x2CE9F, 0x0061 };

    // 2CE9F 0061;	
    // (𬺟) CJK UNIFIED IDEOGRAPH-2CE9F	[FB85 CE9F 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCE9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CE9F 0061;	
    // (𬺟) CJK UNIFIED IDEOGRAPH-2CE9F	[FB85 CE9F 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCE9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_392)
{
    uint32_t const cps[2] = { 0x2CE9F, 0x0041 };

    // 2CE9F 0041;	
    // (𬺟) CJK UNIFIED IDEOGRAPH-2CE9F	[FB85 CE9F 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCE9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CE9F 0041;	
    // (𬺟) CJK UNIFIED IDEOGRAPH-2CE9F	[FB85 CE9F 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCE9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_393)
{
    uint32_t const cps[2] = { 0x2CE9F, 0x0062 };

    // 2CE9F 0062;	
    // (𬺟) CJK UNIFIED IDEOGRAPH-2CE9F	[FB85 CE9F 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCE9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CE9F 0062;	
    // (𬺟) CJK UNIFIED IDEOGRAPH-2CE9F	[FB85 CE9F 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCE9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_394)
{
    uint32_t const cps[2] = { 0x2CEA0, 0x0021 };

    // 2CEA0 0021;	
    // (𬺠) CJK UNIFIED IDEOGRAPH-2CEA0	[FB85 CEA0 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEA0 0021;	
    // (𬺠) CJK UNIFIED IDEOGRAPH-2CEA0	[FB85 CEA0 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCEA0, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_395)
{
    uint32_t const cps[2] = { 0x2CEA0, 0x003F };

    // 2CEA0 003F;	
    // (𬺠) CJK UNIFIED IDEOGRAPH-2CEA0	[FB85 CEA0 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEA0 003F;	
    // (𬺠) CJK UNIFIED IDEOGRAPH-2CEA0	[FB85 CEA0 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCEA0, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_396)
{
    uint32_t const cps[2] = { 0x2CEA0, 0x0061 };

    // 2CEA0 0061;	
    // (𬺠) CJK UNIFIED IDEOGRAPH-2CEA0	[FB85 CEA0 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEA0 0061;	
    // (𬺠) CJK UNIFIED IDEOGRAPH-2CEA0	[FB85 CEA0 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_397)
{
    uint32_t const cps[2] = { 0x2CEA0, 0x0041 };

    // 2CEA0 0041;	
    // (𬺠) CJK UNIFIED IDEOGRAPH-2CEA0	[FB85 CEA0 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEA0 0041;	
    // (𬺠) CJK UNIFIED IDEOGRAPH-2CEA0	[FB85 CEA0 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_398)
{
    uint32_t const cps[2] = { 0x2CEA0, 0x0062 };

    // 2CEA0 0062;	
    // (𬺠) CJK UNIFIED IDEOGRAPH-2CEA0	[FB85 CEA0 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEA0 0062;	
    // (𬺠) CJK UNIFIED IDEOGRAPH-2CEA0	[FB85 CEA0 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_399)
{
    uint32_t const cps[2] = { 0x2CEA1, 0x0021 };

    // 2CEA1 0021;	
    // (𬺡) CJK UNIFIED IDEOGRAPH-2CEA1	[FB85 CEA1 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEA1 0021;	
    // (𬺡) CJK UNIFIED IDEOGRAPH-2CEA1	[FB85 CEA1 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCEA1, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_400)
{
    uint32_t const cps[2] = { 0x2CEA1, 0x003F };

    // 2CEA1 003F;	
    // (𬺡) CJK UNIFIED IDEOGRAPH-2CEA1	[FB85 CEA1 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEA1 003F;	
    // (𬺡) CJK UNIFIED IDEOGRAPH-2CEA1	[FB85 CEA1 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCEA1, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_401)
{
    uint32_t const cps[2] = { 0x2CEA1, 0x0061 };

    // 2CEA1 0061;	
    // (𬺡) CJK UNIFIED IDEOGRAPH-2CEA1	[FB85 CEA1 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEA1 0061;	
    // (𬺡) CJK UNIFIED IDEOGRAPH-2CEA1	[FB85 CEA1 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_402)
{
    uint32_t const cps[2] = { 0x2CEA1, 0x0041 };

    // 2CEA1 0041;	
    // (𬺡) CJK UNIFIED IDEOGRAPH-2CEA1	[FB85 CEA1 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEA1 0041;	
    // (𬺡) CJK UNIFIED IDEOGRAPH-2CEA1	[FB85 CEA1 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_403)
{
    uint32_t const cps[2] = { 0x2CEA1, 0x0062 };

    // 2CEA1 0062;	
    // (𬺡) CJK UNIFIED IDEOGRAPH-2CEA1	[FB85 CEA1 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEA1 0062;	
    // (𬺡) CJK UNIFIED IDEOGRAPH-2CEA1	[FB85 CEA1 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_404)
{
    uint32_t const cps[2] = { 0x2CEB0, 0x0021 };

    // 2CEB0 0021;	
    // (𬺰) CJK UNIFIED IDEOGRAPH-2CEB0	[FB85 CEB0 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB0 0021;	
    // (𬺰) CJK UNIFIED IDEOGRAPH-2CEB0	[FB85 CEB0 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCEB0, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_405)
{
    uint32_t const cps[2] = { 0x2CEB0, 0x003F };

    // 2CEB0 003F;	
    // (𬺰) CJK UNIFIED IDEOGRAPH-2CEB0	[FB85 CEB0 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB0 003F;	
    // (𬺰) CJK UNIFIED IDEOGRAPH-2CEB0	[FB85 CEB0 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCEB0, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_406)
{
    uint32_t const cps[2] = { 0x2CEB0, 0x0061 };

    // 2CEB0 0061;	
    // (𬺰) CJK UNIFIED IDEOGRAPH-2CEB0	[FB85 CEB0 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB0 0061;	
    // (𬺰) CJK UNIFIED IDEOGRAPH-2CEB0	[FB85 CEB0 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_407)
{
    uint32_t const cps[2] = { 0x2CEB0, 0x0041 };

    // 2CEB0 0041;	
    // (𬺰) CJK UNIFIED IDEOGRAPH-2CEB0	[FB85 CEB0 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB0 0041;	
    // (𬺰) CJK UNIFIED IDEOGRAPH-2CEB0	[FB85 CEB0 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_408)
{
    uint32_t const cps[2] = { 0x2CEB0, 0x0062 };

    // 2CEB0 0062;	
    // (𬺰) CJK UNIFIED IDEOGRAPH-2CEB0	[FB85 CEB0 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB0 0062;	
    // (𬺰) CJK UNIFIED IDEOGRAPH-2CEB0	[FB85 CEB0 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_409)
{
    uint32_t const cps[2] = { 0x2CEB1, 0x0021 };

    // 2CEB1 0021;	
    // (𬺱) CJK UNIFIED IDEOGRAPH-2CEB1	[FB85 CEB1 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB1 0021;	
    // (𬺱) CJK UNIFIED IDEOGRAPH-2CEB1	[FB85 CEB1 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCEB1, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_410)
{
    uint32_t const cps[2] = { 0x2CEB1, 0x003F };

    // 2CEB1 003F;	
    // (𬺱) CJK UNIFIED IDEOGRAPH-2CEB1	[FB85 CEB1 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB1 003F;	
    // (𬺱) CJK UNIFIED IDEOGRAPH-2CEB1	[FB85 CEB1 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCEB1, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_411)
{
    uint32_t const cps[2] = { 0x2CEB1, 0x0061 };

    // 2CEB1 0061;	
    // (𬺱) CJK UNIFIED IDEOGRAPH-2CEB1	[FB85 CEB1 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB1 0061;	
    // (𬺱) CJK UNIFIED IDEOGRAPH-2CEB1	[FB85 CEB1 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_412)
{
    uint32_t const cps[2] = { 0x2CEB1, 0x0041 };

    // 2CEB1 0041;	
    // (𬺱) CJK UNIFIED IDEOGRAPH-2CEB1	[FB85 CEB1 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB1 0041;	
    // (𬺱) CJK UNIFIED IDEOGRAPH-2CEB1	[FB85 CEB1 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_413)
{
    uint32_t const cps[2] = { 0x2CEB1, 0x0062 };

    // 2CEB1 0062;	
    // (𬺱) CJK UNIFIED IDEOGRAPH-2CEB1	[FB85 CEB1 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB1 0062;	
    // (𬺱) CJK UNIFIED IDEOGRAPH-2CEB1	[FB85 CEB1 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_414)
{
    uint32_t const cps[2] = { 0x2CEB2, 0x0021 };

    // 2CEB2 0021;	
    // (𬺲) CJK UNIFIED IDEOGRAPH-2CEB2	[FB85 CEB2 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB2 0021;	
    // (𬺲) CJK UNIFIED IDEOGRAPH-2CEB2	[FB85 CEB2 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCEB2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_415)
{
    uint32_t const cps[2] = { 0x2CEB2, 0x003F };

    // 2CEB2 003F;	
    // (𬺲) CJK UNIFIED IDEOGRAPH-2CEB2	[FB85 CEB2 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB2 003F;	
    // (𬺲) CJK UNIFIED IDEOGRAPH-2CEB2	[FB85 CEB2 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCEB2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_416)
{
    uint32_t const cps[2] = { 0x2CEB2, 0x0061 };

    // 2CEB2 0061;	
    // (𬺲) CJK UNIFIED IDEOGRAPH-2CEB2	[FB85 CEB2 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB2 0061;	
    // (𬺲) CJK UNIFIED IDEOGRAPH-2CEB2	[FB85 CEB2 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_417)
{
    uint32_t const cps[2] = { 0x2CEB2, 0x0041 };

    // 2CEB2 0041;	
    // (𬺲) CJK UNIFIED IDEOGRAPH-2CEB2	[FB85 CEB2 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB2 0041;	
    // (𬺲) CJK UNIFIED IDEOGRAPH-2CEB2	[FB85 CEB2 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_418)
{
    uint32_t const cps[2] = { 0x2CEB2, 0x0062 };

    // 2CEB2 0062;	
    // (𬺲) CJK UNIFIED IDEOGRAPH-2CEB2	[FB85 CEB2 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB2 0062;	
    // (𬺲) CJK UNIFIED IDEOGRAPH-2CEB2	[FB85 CEB2 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_419)
{
    uint32_t const cps[2] = { 0x2CEB3, 0x0021 };

    // 2CEB3 0021;	
    // (𬺳) CJK UNIFIED IDEOGRAPH-2CEB3	[FB85 CEB3 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB3 0021;	
    // (𬺳) CJK UNIFIED IDEOGRAPH-2CEB3	[FB85 CEB3 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCEB3, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_420)
{
    uint32_t const cps[2] = { 0x2CEB3, 0x003F };

    // 2CEB3 003F;	
    // (𬺳) CJK UNIFIED IDEOGRAPH-2CEB3	[FB85 CEB3 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB3 003F;	
    // (𬺳) CJK UNIFIED IDEOGRAPH-2CEB3	[FB85 CEB3 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCEB3, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_421)
{
    uint32_t const cps[2] = { 0x2CEB3, 0x0061 };

    // 2CEB3 0061;	
    // (𬺳) CJK UNIFIED IDEOGRAPH-2CEB3	[FB85 CEB3 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB3 0061;	
    // (𬺳) CJK UNIFIED IDEOGRAPH-2CEB3	[FB85 CEB3 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_422)
{
    uint32_t const cps[2] = { 0x2CEB3, 0x0041 };

    // 2CEB3 0041;	
    // (𬺳) CJK UNIFIED IDEOGRAPH-2CEB3	[FB85 CEB3 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB3 0041;	
    // (𬺳) CJK UNIFIED IDEOGRAPH-2CEB3	[FB85 CEB3 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_423)
{
    uint32_t const cps[2] = { 0x2CEB3, 0x0062 };

    // 2CEB3 0062;	
    // (𬺳) CJK UNIFIED IDEOGRAPH-2CEB3	[FB85 CEB3 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB3 0062;	
    // (𬺳) CJK UNIFIED IDEOGRAPH-2CEB3	[FB85 CEB3 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_424)
{
    uint32_t const cps[2] = { 0x2CEB4, 0x0021 };

    // 2CEB4 0021;	
    // (𬺴) CJK UNIFIED IDEOGRAPH-2CEB4	[FB85 CEB4 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB4 0021;	
    // (𬺴) CJK UNIFIED IDEOGRAPH-2CEB4	[FB85 CEB4 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCEB4, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_425)
{
    uint32_t const cps[2] = { 0x2CEB4, 0x003F };

    // 2CEB4 003F;	
    // (𬺴) CJK UNIFIED IDEOGRAPH-2CEB4	[FB85 CEB4 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB4 003F;	
    // (𬺴) CJK UNIFIED IDEOGRAPH-2CEB4	[FB85 CEB4 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCEB4, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_426)
{
    uint32_t const cps[2] = { 0x2CEB4, 0x0061 };

    // 2CEB4 0061;	
    // (𬺴) CJK UNIFIED IDEOGRAPH-2CEB4	[FB85 CEB4 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB4 0061;	
    // (𬺴) CJK UNIFIED IDEOGRAPH-2CEB4	[FB85 CEB4 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_427)
{
    uint32_t const cps[2] = { 0x2CEB4, 0x0041 };

    // 2CEB4 0041;	
    // (𬺴) CJK UNIFIED IDEOGRAPH-2CEB4	[FB85 CEB4 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB4 0041;	
    // (𬺴) CJK UNIFIED IDEOGRAPH-2CEB4	[FB85 CEB4 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_428)
{
    uint32_t const cps[2] = { 0x2CEB4, 0x0062 };

    // 2CEB4 0062;	
    // (𬺴) CJK UNIFIED IDEOGRAPH-2CEB4	[FB85 CEB4 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB4 0062;	
    // (𬺴) CJK UNIFIED IDEOGRAPH-2CEB4	[FB85 CEB4 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_429)
{
    uint32_t const cps[2] = { 0x2CEB5, 0x0021 };

    // 2CEB5 0021;	
    // (𬺵) CJK UNIFIED IDEOGRAPH-2CEB5	[FB85 CEB5 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB5 0021;	
    // (𬺵) CJK UNIFIED IDEOGRAPH-2CEB5	[FB85 CEB5 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCEB5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_430)
{
    uint32_t const cps[2] = { 0x2CEB5, 0x003F };

    // 2CEB5 003F;	
    // (𬺵) CJK UNIFIED IDEOGRAPH-2CEB5	[FB85 CEB5 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB5 003F;	
    // (𬺵) CJK UNIFIED IDEOGRAPH-2CEB5	[FB85 CEB5 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xCEB5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_431)
{
    uint32_t const cps[2] = { 0x2CEB5, 0x0061 };

    // 2CEB5 0061;	
    // (𬺵) CJK UNIFIED IDEOGRAPH-2CEB5	[FB85 CEB5 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB5 0061;	
    // (𬺵) CJK UNIFIED IDEOGRAPH-2CEB5	[FB85 CEB5 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_432)
{
    uint32_t const cps[2] = { 0x2CEB5, 0x0041 };

    // 2CEB5 0041;	
    // (𬺵) CJK UNIFIED IDEOGRAPH-2CEB5	[FB85 CEB5 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB5 0041;	
    // (𬺵) CJK UNIFIED IDEOGRAPH-2CEB5	[FB85 CEB5 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_433)
{
    uint32_t const cps[2] = { 0x2CEB5, 0x0062 };

    // 2CEB5 0062;	
    // (𬺵) CJK UNIFIED IDEOGRAPH-2CEB5	[FB85 CEB5 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xCEB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2CEB5 0062;	
    // (𬺵) CJK UNIFIED IDEOGRAPH-2CEB5	[FB85 CEB5 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xCEB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_434)
{
    uint32_t const cps[2] = { 0x2EBDC, 0x0021 };

    // 2EBDC 0021;	
    // (𮯜) CJK UNIFIED IDEOGRAPH-2EBDC	[FB85 EBDC 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBDC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBDC 0021;	
    // (𮯜) CJK UNIFIED IDEOGRAPH-2EBDC	[FB85 EBDC | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xEBDC, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_435)
{
    uint32_t const cps[2] = { 0x2EBDC, 0x003F };

    // 2EBDC 003F;	
    // (𮯜) CJK UNIFIED IDEOGRAPH-2EBDC	[FB85 EBDC 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBDC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBDC 003F;	
    // (𮯜) CJK UNIFIED IDEOGRAPH-2EBDC	[FB85 EBDC | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xEBDC, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_436)
{
    uint32_t const cps[2] = { 0x2EBDC, 0x0061 };

    // 2EBDC 0061;	
    // (𮯜) CJK UNIFIED IDEOGRAPH-2EBDC	[FB85 EBDC 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBDC 0061;	
    // (𮯜) CJK UNIFIED IDEOGRAPH-2EBDC	[FB85 EBDC 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xEBDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_437)
{
    uint32_t const cps[2] = { 0x2EBDC, 0x0041 };

    // 2EBDC 0041;	
    // (𮯜) CJK UNIFIED IDEOGRAPH-2EBDC	[FB85 EBDC 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBDC 0041;	
    // (𮯜) CJK UNIFIED IDEOGRAPH-2EBDC	[FB85 EBDC 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xEBDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_438)
{
    uint32_t const cps[2] = { 0x2EBDC, 0x0062 };

    // 2EBDC 0062;	
    // (𮯜) CJK UNIFIED IDEOGRAPH-2EBDC	[FB85 EBDC 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBDC 0062;	
    // (𮯜) CJK UNIFIED IDEOGRAPH-2EBDC	[FB85 EBDC 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xEBDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_439)
{
    uint32_t const cps[2] = { 0x2EBDD, 0x0021 };

    // 2EBDD 0021;	
    // (𮯝) CJK UNIFIED IDEOGRAPH-2EBDD	[FB85 EBDD 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBDD 0021;	
    // (𮯝) CJK UNIFIED IDEOGRAPH-2EBDD	[FB85 EBDD | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xEBDD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_440)
{
    uint32_t const cps[2] = { 0x2EBDD, 0x003F };

    // 2EBDD 003F;	
    // (𮯝) CJK UNIFIED IDEOGRAPH-2EBDD	[FB85 EBDD 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBDD 003F;	
    // (𮯝) CJK UNIFIED IDEOGRAPH-2EBDD	[FB85 EBDD | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xEBDD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_441)
{
    uint32_t const cps[2] = { 0x2EBDD, 0x0061 };

    // 2EBDD 0061;	
    // (𮯝) CJK UNIFIED IDEOGRAPH-2EBDD	[FB85 EBDD 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBDD 0061;	
    // (𮯝) CJK UNIFIED IDEOGRAPH-2EBDD	[FB85 EBDD 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xEBDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_442)
{
    uint32_t const cps[2] = { 0x2EBDD, 0x0041 };

    // 2EBDD 0041;	
    // (𮯝) CJK UNIFIED IDEOGRAPH-2EBDD	[FB85 EBDD 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBDD 0041;	
    // (𮯝) CJK UNIFIED IDEOGRAPH-2EBDD	[FB85 EBDD 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xEBDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_443)
{
    uint32_t const cps[2] = { 0x2EBDD, 0x0062 };

    // 2EBDD 0062;	
    // (𮯝) CJK UNIFIED IDEOGRAPH-2EBDD	[FB85 EBDD 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBDD 0062;	
    // (𮯝) CJK UNIFIED IDEOGRAPH-2EBDD	[FB85 EBDD 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xEBDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_444)
{
    uint32_t const cps[2] = { 0x2EBDE, 0x0021 };

    // 2EBDE 0021;	
    // (𮯞) CJK UNIFIED IDEOGRAPH-2EBDE	[FB85 EBDE 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBDE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBDE 0021;	
    // (𮯞) CJK UNIFIED IDEOGRAPH-2EBDE	[FB85 EBDE | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xEBDE, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_445)
{
    uint32_t const cps[2] = { 0x2EBDE, 0x003F };

    // 2EBDE 003F;	
    // (𮯞) CJK UNIFIED IDEOGRAPH-2EBDE	[FB85 EBDE 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBDE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBDE 003F;	
    // (𮯞) CJK UNIFIED IDEOGRAPH-2EBDE	[FB85 EBDE | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xEBDE, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_446)
{
    uint32_t const cps[2] = { 0x2EBDE, 0x0061 };

    // 2EBDE 0061;	
    // (𮯞) CJK UNIFIED IDEOGRAPH-2EBDE	[FB85 EBDE 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBDE 0061;	
    // (𮯞) CJK UNIFIED IDEOGRAPH-2EBDE	[FB85 EBDE 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xEBDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_447)
{
    uint32_t const cps[2] = { 0x2EBDE, 0x0041 };

    // 2EBDE 0041;	
    // (𮯞) CJK UNIFIED IDEOGRAPH-2EBDE	[FB85 EBDE 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBDE 0041;	
    // (𮯞) CJK UNIFIED IDEOGRAPH-2EBDE	[FB85 EBDE 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xEBDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_448)
{
    uint32_t const cps[2] = { 0x2EBDE, 0x0062 };

    // 2EBDE 0062;	
    // (𮯞) CJK UNIFIED IDEOGRAPH-2EBDE	[FB85 EBDE 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBDE 0062;	
    // (𮯞) CJK UNIFIED IDEOGRAPH-2EBDE	[FB85 EBDE 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xEBDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_449)
{
    uint32_t const cps[2] = { 0x2EBDF, 0x0021 };

    // 2EBDF 0021;	
    // (𮯟) CJK UNIFIED IDEOGRAPH-2EBDF	[FB85 EBDF 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBDF 0021;	
    // (𮯟) CJK UNIFIED IDEOGRAPH-2EBDF	[FB85 EBDF | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xEBDF, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_450)
{
    uint32_t const cps[2] = { 0x2EBDF, 0x003F };

    // 2EBDF 003F;	
    // (𮯟) CJK UNIFIED IDEOGRAPH-2EBDF	[FB85 EBDF 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBDF 003F;	
    // (𮯟) CJK UNIFIED IDEOGRAPH-2EBDF	[FB85 EBDF | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xEBDF, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_451)
{
    uint32_t const cps[2] = { 0x2EBDF, 0x0061 };

    // 2EBDF 0061;	
    // (𮯟) CJK UNIFIED IDEOGRAPH-2EBDF	[FB85 EBDF 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBDF 0061;	
    // (𮯟) CJK UNIFIED IDEOGRAPH-2EBDF	[FB85 EBDF 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xEBDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_452)
{
    uint32_t const cps[2] = { 0x2EBDF, 0x0041 };

    // 2EBDF 0041;	
    // (𮯟) CJK UNIFIED IDEOGRAPH-2EBDF	[FB85 EBDF 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBDF 0041;	
    // (𮯟) CJK UNIFIED IDEOGRAPH-2EBDF	[FB85 EBDF 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xEBDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_453)
{
    uint32_t const cps[2] = { 0x2EBDF, 0x0062 };

    // 2EBDF 0062;	
    // (𮯟) CJK UNIFIED IDEOGRAPH-2EBDF	[FB85 EBDF 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBDF 0062;	
    // (𮯟) CJK UNIFIED IDEOGRAPH-2EBDF	[FB85 EBDF 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xEBDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_454)
{
    uint32_t const cps[2] = { 0x2EBE0, 0x0021 };

    // 2EBE0 0021;	
    // (𮯠) CJK UNIFIED IDEOGRAPH-2EBE0	[FB85 EBE0 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBE0 0021;	
    // (𮯠) CJK UNIFIED IDEOGRAPH-2EBE0	[FB85 EBE0 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xEBE0, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_455)
{
    uint32_t const cps[2] = { 0x2EBE0, 0x003F };

    // 2EBE0 003F;	
    // (𮯠) CJK UNIFIED IDEOGRAPH-2EBE0	[FB85 EBE0 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBE0 003F;	
    // (𮯠) CJK UNIFIED IDEOGRAPH-2EBE0	[FB85 EBE0 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFB85, 0xEBE0, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_456)
{
    uint32_t const cps[2] = { 0x2EBE0, 0x0061 };

    // 2EBE0 0061;	
    // (𮯠) CJK UNIFIED IDEOGRAPH-2EBE0	[FB85 EBE0 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBE0 0061;	
    // (𮯠) CJK UNIFIED IDEOGRAPH-2EBE0	[FB85 EBE0 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xEBE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_457)
{
    uint32_t const cps[2] = { 0x2EBE0, 0x0041 };

    // 2EBE0 0041;	
    // (𮯠) CJK UNIFIED IDEOGRAPH-2EBE0	[FB85 EBE0 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBE0 0041;	
    // (𮯠) CJK UNIFIED IDEOGRAPH-2EBE0	[FB85 EBE0 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xEBE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_458)
{
    uint32_t const cps[2] = { 0x2EBE0, 0x0062 };

    // 2EBE0 0062;	
    // (𮯠) CJK UNIFIED IDEOGRAPH-2EBE0	[FB85 EBE0 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFB85, 0xEBE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2EBE0 0062;	
    // (𮯠) CJK UNIFIED IDEOGRAPH-2EBE0	[FB85 EBE0 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFB85, 0xEBE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_459)
{
    uint32_t const cps[2] = { 0x0378, 0x0021 };

    // 0378 0021;	
    // ('\u0378') <reserved-0378>	[FBC0 8378 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC0, 0x8378, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0378 0021;	
    // ('\u0378') <reserved-0378>	[FBC0 8378 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFBC0, 0x8378, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_460)
{
    uint32_t const cps[2] = { 0x0378, 0x003F };

    // 0378 003F;	
    // ('\u0378') <reserved-0378>	[FBC0 8378 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC0, 0x8378, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0378 003F;	
    // ('\u0378') <reserved-0378>	[FBC0 8378 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFBC0, 0x8378, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_461)
{
    uint32_t const cps[2] = { 0x0378, 0x0061 };

    // 0378 0061;	
    // ('\u0378') <reserved-0378>	[FBC0 8378 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC0, 0x8378, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0378 0061;	
    // ('\u0378') <reserved-0378>	[FBC0 8378 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC0, 0x8378, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_462)
{
    uint32_t const cps[2] = { 0x0378, 0x0041 };

    // 0378 0041;	
    // ('\u0378') <reserved-0378>	[FBC0 8378 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC0, 0x8378, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0378 0041;	
    // ('\u0378') <reserved-0378>	[FBC0 8378 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC0, 0x8378, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_463)
{
    uint32_t const cps[2] = { 0x0378, 0x0062 };

    // 0378 0062;	
    // ('\u0378') <reserved-0378>	[FBC0 8378 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC0, 0x8378, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0378 0062;	
    // ('\u0378') <reserved-0378>	[FBC0 8378 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC0, 0x8378, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_464)
{
    uint32_t const cps[2] = { 0x4DB6, 0x0021 };

    // 4DB6 0021;	
    // ('\u4DB6') null	[FBC0 CDB6 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC0, 0xCDB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 4DB6 0021;	
    // ('\u4DB6') null	[FBC0 CDB6 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFBC0, 0xCDB6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_465)
{
    uint32_t const cps[2] = { 0x4DB6, 0x003F };

    // 4DB6 003F;	
    // ('\u4DB6') null	[FBC0 CDB6 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC0, 0xCDB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 4DB6 003F;	
    // ('\u4DB6') null	[FBC0 CDB6 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFBC0, 0xCDB6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_466)
{
    uint32_t const cps[2] = { 0x4DB6, 0x0061 };

    // 4DB6 0061;	
    // ('\u4DB6') null	[FBC0 CDB6 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC0, 0xCDB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 4DB6 0061;	
    // ('\u4DB6') null	[FBC0 CDB6 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC0, 0xCDB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_467)
{
    uint32_t const cps[2] = { 0x4DB6, 0x0041 };

    // 4DB6 0041;	
    // ('\u4DB6') null	[FBC0 CDB6 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC0, 0xCDB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 4DB6 0041;	
    // ('\u4DB6') null	[FBC0 CDB6 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC0, 0xCDB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_468)
{
    uint32_t const cps[2] = { 0x4DB6, 0x0062 };

    // 4DB6 0062;	
    // ('\u4DB6') null	[FBC0 CDB6 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC0, 0xCDB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 4DB6 0062;	
    // ('\u4DB6') null	[FBC0 CDB6 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC0, 0xCDB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_469)
{
    uint32_t const cps[2] = { 0x9FEB, 0x0021 };

    // 9FEB 0021;	
    // ('\u9FEB') null	[FBC1 9FEB 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0x9FEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 9FEB 0021;	
    // ('\u9FEB') null	[FBC1 9FEB | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFBC1, 0x9FEB, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_470)
{
    uint32_t const cps[2] = { 0x9FEB, 0x003F };

    // 9FEB 003F;	
    // ('\u9FEB') null	[FBC1 9FEB 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0x9FEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 9FEB 003F;	
    // ('\u9FEB') null	[FBC1 9FEB | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFBC1, 0x9FEB, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_471)
{
    uint32_t const cps[2] = { 0x9FEB, 0x0061 };

    // 9FEB 0061;	
    // ('\u9FEB') null	[FBC1 9FEB 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0x9FEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 9FEB 0061;	
    // ('\u9FEB') null	[FBC1 9FEB 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC1, 0x9FEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_472)
{
    uint32_t const cps[2] = { 0x9FEB, 0x0041 };

    // 9FEB 0041;	
    // ('\u9FEB') null	[FBC1 9FEB 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0x9FEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 9FEB 0041;	
    // ('\u9FEB') null	[FBC1 9FEB 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC1, 0x9FEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_473)
{
    uint32_t const cps[2] = { 0x9FEB, 0x0062 };

    // 9FEB 0062;	
    // ('\u9FEB') null	[FBC1 9FEB 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0x9FEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 9FEB 0062;	
    // ('\u9FEB') null	[FBC1 9FEB 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC1, 0x9FEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_474)
{
    uint32_t const cps[2] = { 0xE000, 0x0021 };

    // E000 0021;	
    // ('\uE000') <private-use-E000>	[FBC1 E000 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE000, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E000 0021;	
    // ('\uE000') <private-use-E000>	[FBC1 E000 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFBC1, 0xE000, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_475)
{
    uint32_t const cps[2] = { 0xE000, 0x003F };

    // E000 003F;	
    // ('\uE000') <private-use-E000>	[FBC1 E000 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE000, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E000 003F;	
    // ('\uE000') <private-use-E000>	[FBC1 E000 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFBC1, 0xE000, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_476)
{
    uint32_t const cps[2] = { 0xE000, 0x0061 };

    // E000 0061;	
    // ('\uE000') <private-use-E000>	[FBC1 E000 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E000 0061;	
    // ('\uE000') <private-use-E000>	[FBC1 E000 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC1, 0xE000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_477)
{
    uint32_t const cps[2] = { 0xE000, 0x0041 };

    // E000 0041;	
    // ('\uE000') <private-use-E000>	[FBC1 E000 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E000 0041;	
    // ('\uE000') <private-use-E000>	[FBC1 E000 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC1, 0xE000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_478)
{
    uint32_t const cps[2] = { 0xE000, 0x0062 };

    // E000 0062;	
    // ('\uE000') <private-use-E000>	[FBC1 E000 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE000, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E000 0062;	
    // ('\uE000') <private-use-E000>	[FBC1 E000 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC1, 0xE000, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_479)
{
    uint32_t const cps[2] = { 0xE001, 0x0021 };

    // E001 0021;	
    // ('\uE001') <private-use-E001>	[FBC1 E001 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE001, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E001 0021;	
    // ('\uE001') <private-use-E001>	[FBC1 E001 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFBC1, 0xE001, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_480)
{
    uint32_t const cps[2] = { 0xE001, 0x003F };

    // E001 003F;	
    // ('\uE001') <private-use-E001>	[FBC1 E001 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE001, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E001 003F;	
    // ('\uE001') <private-use-E001>	[FBC1 E001 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFBC1, 0xE001, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_481)
{
    uint32_t const cps[2] = { 0xE001, 0x0061 };

    // E001 0061;	
    // ('\uE001') <private-use-E001>	[FBC1 E001 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E001 0061;	
    // ('\uE001') <private-use-E001>	[FBC1 E001 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC1, 0xE001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_482)
{
    uint32_t const cps[2] = { 0xE001, 0x0041 };

    // E001 0041;	
    // ('\uE001') <private-use-E001>	[FBC1 E001 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E001 0041;	
    // ('\uE001') <private-use-E001>	[FBC1 E001 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC1, 0xE001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_483)
{
    uint32_t const cps[2] = { 0xE001, 0x0062 };

    // E001 0062;	
    // ('\uE001') <private-use-E001>	[FBC1 E001 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE001, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E001 0062;	
    // ('\uE001') <private-use-E001>	[FBC1 E001 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC1, 0xE001, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_484)
{
    uint32_t const cps[2] = { 0xE002, 0x0021 };

    // E002 0021;	
    // ('\uE002') <private-use-E002>	[FBC1 E002 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE002, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002 0021;	
    // ('\uE002') <private-use-E002>	[FBC1 E002 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFBC1, 0xE002, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_485)
{
    uint32_t const cps[2] = { 0xE002, 0x003F };

    // E002 003F;	
    // ('\uE002') <private-use-E002>	[FBC1 E002 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE002, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002 003F;	
    // ('\uE002') <private-use-E002>	[FBC1 E002 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFBC1, 0xE002, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_486)
{
    uint32_t const cps[2] = { 0xE002, 0x0061 };

    // E002 0061;	
    // ('\uE002') <private-use-E002>	[FBC1 E002 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002 0061;	
    // ('\uE002') <private-use-E002>	[FBC1 E002 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC1, 0xE002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_487)
{
    uint32_t const cps[2] = { 0xE002, 0x0041 };

    // E002 0041;	
    // ('\uE002') <private-use-E002>	[FBC1 E002 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002 0041;	
    // ('\uE002') <private-use-E002>	[FBC1 E002 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC1, 0xE002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_488)
{
    uint32_t const cps[2] = { 0xE002, 0x0062 };

    // E002 0062;	
    // ('\uE002') <private-use-E002>	[FBC1 E002 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE002, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002 0062;	
    // ('\uE002') <private-use-E002>	[FBC1 E002 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC1, 0xE002, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_489)
{
    uint32_t const cps[2] = { 0xE003, 0x0021 };

    // E003 0021;	
    // ('\uE003') <private-use-E003>	[FBC1 E003 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE003, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003 0021;	
    // ('\uE003') <private-use-E003>	[FBC1 E003 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFBC1, 0xE003, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_490)
{
    uint32_t const cps[2] = { 0xE003, 0x003F };

    // E003 003F;	
    // ('\uE003') <private-use-E003>	[FBC1 E003 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE003, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003 003F;	
    // ('\uE003') <private-use-E003>	[FBC1 E003 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFBC1, 0xE003, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_491)
{
    uint32_t const cps[2] = { 0xE003, 0x0061 };

    // E003 0061;	
    // ('\uE003') <private-use-E003>	[FBC1 E003 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003 0061;	
    // ('\uE003') <private-use-E003>	[FBC1 E003 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC1, 0xE003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_492)
{
    uint32_t const cps[2] = { 0xE003, 0x0041 };

    // E003 0041;	
    // ('\uE003') <private-use-E003>	[FBC1 E003 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003 0041;	
    // ('\uE003') <private-use-E003>	[FBC1 E003 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC1, 0xE003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_493)
{
    uint32_t const cps[2] = { 0xE003, 0x0062 };

    // E003 0062;	
    // ('\uE003') <private-use-E003>	[FBC1 E003 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE003, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003 0062;	
    // ('\uE003') <private-use-E003>	[FBC1 E003 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC1, 0xE003, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_494)
{
    uint32_t const cps[2] = { 0xE004, 0x0021 };

    // E004 0021;	
    // ('\uE004') <private-use-E004>	[FBC1 E004 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE004, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004 0021;	
    // ('\uE004') <private-use-E004>	[FBC1 E004 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFBC1, 0xE004, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_495)
{
    uint32_t const cps[2] = { 0xE004, 0x003F };

    // E004 003F;	
    // ('\uE004') <private-use-E004>	[FBC1 E004 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE004, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004 003F;	
    // ('\uE004') <private-use-E004>	[FBC1 E004 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[10] = { 0xFBC1, 0xE004, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_496)
{
    uint32_t const cps[2] = { 0xE004, 0x0061 };

    // E004 0061;	
    // ('\uE004') <private-use-E004>	[FBC1 E004 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004 0061;	
    // ('\uE004') <private-use-E004>	[FBC1 E004 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC1, 0xE004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_497)
{
    uint32_t const cps[2] = { 0xE004, 0x0041 };

    // E004 0041;	
    // ('\uE004') <private-use-E004>	[FBC1 E004 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004 0041;	
    // ('\uE004') <private-use-E004>	[FBC1 E004 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC1, 0xE004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_498)
{
    uint32_t const cps[2] = { 0xE004, 0x0062 };

    // E004 0062;	
    // ('\uE004') <private-use-E004>	[FBC1 E004 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE004, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004 0062;	
    // ('\uE004') <private-use-E004>	[FBC1 E004 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0xFBC1, 0xE004, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_394_499)
{
    uint32_t const cps[2] = { 0xE005, 0x0021 };

    // E005 0021;	
    // ('\uE005') <private-use-E005>	[FBC1 E005 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0xFBC1, 0xE005, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E005 0021;	
    // ('\uE005') <private-use-E005>	[FBC1 E005 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[10] = { 0xFBC1, 0xE005, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

