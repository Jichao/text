// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_048_000)
{
    // 1D01B 003F;	
    // (ùÄõ) BYZANTINE MUSICAL SYMBOL KENTIMA ARCHAION	[1009 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D01B, 0x003F };
    uint32_t const ces[9] = { 0x1009, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_001)
{
    // 1D01B 0061;	
    // (ùÄõ) BYZANTINE MUSICAL SYMBOL KENTIMA ARCHAION	[1009 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D01B, 0x0061 };
    uint32_t const ces[9] = { 0x1009, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_002)
{
    // 1D01B 0041;	
    // (ùÄõ) BYZANTINE MUSICAL SYMBOL KENTIMA ARCHAION	[1009 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D01B, 0x0041 };
    uint32_t const ces[9] = { 0x1009, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_003)
{
    // 1D01B 0062;	
    // (ùÄõ) BYZANTINE MUSICAL SYMBOL KENTIMA ARCHAION	[1009 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D01B, 0x0062 };
    uint32_t const ces[9] = { 0x1009, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_004)
{
    // 1D01C 0021;	
    // (ùÄú) BYZANTINE MUSICAL SYMBOL KENTIMATA ARCHAION	[100A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D01C, 0x0021 };
    uint32_t const ces[9] = { 0x100A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_005)
{
    // 1D01C 003F;	
    // (ùÄú) BYZANTINE MUSICAL SYMBOL KENTIMATA ARCHAION	[100A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D01C, 0x003F };
    uint32_t const ces[9] = { 0x100A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_006)
{
    // 1D01C 0061;	
    // (ùÄú) BYZANTINE MUSICAL SYMBOL KENTIMATA ARCHAION	[100A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D01C, 0x0061 };
    uint32_t const ces[9] = { 0x100A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_007)
{
    // 1D01C 0041;	
    // (ùÄú) BYZANTINE MUSICAL SYMBOL KENTIMATA ARCHAION	[100A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D01C, 0x0041 };
    uint32_t const ces[9] = { 0x100A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_008)
{
    // 1D01C 0062;	
    // (ùÄú) BYZANTINE MUSICAL SYMBOL KENTIMATA ARCHAION	[100A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D01C, 0x0062 };
    uint32_t const ces[9] = { 0x100A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_009)
{
    // 1D01D 0021;	
    // (ùÄù) BYZANTINE MUSICAL SYMBOL SAXIMATA	[100B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D01D, 0x0021 };
    uint32_t const ces[9] = { 0x100B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_010)
{
    // 1D01D 003F;	
    // (ùÄù) BYZANTINE MUSICAL SYMBOL SAXIMATA	[100B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D01D, 0x003F };
    uint32_t const ces[9] = { 0x100B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_011)
{
    // 1D01D 0061;	
    // (ùÄù) BYZANTINE MUSICAL SYMBOL SAXIMATA	[100B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D01D, 0x0061 };
    uint32_t const ces[9] = { 0x100B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_012)
{
    // 1D01D 0041;	
    // (ùÄù) BYZANTINE MUSICAL SYMBOL SAXIMATA	[100B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D01D, 0x0041 };
    uint32_t const ces[9] = { 0x100B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_013)
{
    // 1D01D 0062;	
    // (ùÄù) BYZANTINE MUSICAL SYMBOL SAXIMATA	[100B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D01D, 0x0062 };
    uint32_t const ces[9] = { 0x100B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_014)
{
    // 1D01E 0021;	
    // (ùÄû) BYZANTINE MUSICAL SYMBOL PARICHON	[100C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D01E, 0x0021 };
    uint32_t const ces[9] = { 0x100C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_015)
{
    // 1D01E 003F;	
    // (ùÄû) BYZANTINE MUSICAL SYMBOL PARICHON	[100C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D01E, 0x003F };
    uint32_t const ces[9] = { 0x100C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_016)
{
    // 1D01E 0061;	
    // (ùÄû) BYZANTINE MUSICAL SYMBOL PARICHON	[100C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D01E, 0x0061 };
    uint32_t const ces[9] = { 0x100C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_017)
{
    // 1D01E 0041;	
    // (ùÄû) BYZANTINE MUSICAL SYMBOL PARICHON	[100C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D01E, 0x0041 };
    uint32_t const ces[9] = { 0x100C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_018)
{
    // 1D01E 0062;	
    // (ùÄû) BYZANTINE MUSICAL SYMBOL PARICHON	[100C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D01E, 0x0062 };
    uint32_t const ces[9] = { 0x100C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_019)
{
    // 1D01F 0021;	
    // (ùÄü) BYZANTINE MUSICAL SYMBOL STAVROS APODEXIA	[100D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D01F, 0x0021 };
    uint32_t const ces[9] = { 0x100D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_020)
{
    // 1D01F 003F;	
    // (ùÄü) BYZANTINE MUSICAL SYMBOL STAVROS APODEXIA	[100D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D01F, 0x003F };
    uint32_t const ces[9] = { 0x100D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_021)
{
    // 1D01F 0061;	
    // (ùÄü) BYZANTINE MUSICAL SYMBOL STAVROS APODEXIA	[100D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D01F, 0x0061 };
    uint32_t const ces[9] = { 0x100D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_022)
{
    // 1D01F 0041;	
    // (ùÄü) BYZANTINE MUSICAL SYMBOL STAVROS APODEXIA	[100D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D01F, 0x0041 };
    uint32_t const ces[9] = { 0x100D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_023)
{
    // 1D01F 0062;	
    // (ùÄü) BYZANTINE MUSICAL SYMBOL STAVROS APODEXIA	[100D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D01F, 0x0062 };
    uint32_t const ces[9] = { 0x100D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_024)
{
    // 1D020 0021;	
    // (ùÄ†) BYZANTINE MUSICAL SYMBOL OXEIAI ARCHAION	[100E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D020, 0x0021 };
    uint32_t const ces[9] = { 0x100E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_025)
{
    // 1D020 003F;	
    // (ùÄ†) BYZANTINE MUSICAL SYMBOL OXEIAI ARCHAION	[100E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D020, 0x003F };
    uint32_t const ces[9] = { 0x100E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_026)
{
    // 1D020 0061;	
    // (ùÄ†) BYZANTINE MUSICAL SYMBOL OXEIAI ARCHAION	[100E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D020, 0x0061 };
    uint32_t const ces[9] = { 0x100E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_027)
{
    // 1D020 0041;	
    // (ùÄ†) BYZANTINE MUSICAL SYMBOL OXEIAI ARCHAION	[100E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D020, 0x0041 };
    uint32_t const ces[9] = { 0x100E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_028)
{
    // 1D020 0062;	
    // (ùÄ†) BYZANTINE MUSICAL SYMBOL OXEIAI ARCHAION	[100E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D020, 0x0062 };
    uint32_t const ces[9] = { 0x100E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_029)
{
    // 1D021 0021;	
    // (ùÄ°) BYZANTINE MUSICAL SYMBOL VAREIAI ARCHAION	[100F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D021, 0x0021 };
    uint32_t const ces[9] = { 0x100F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_030)
{
    // 1D021 003F;	
    // (ùÄ°) BYZANTINE MUSICAL SYMBOL VAREIAI ARCHAION	[100F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D021, 0x003F };
    uint32_t const ces[9] = { 0x100F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_031)
{
    // 1D021 0061;	
    // (ùÄ°) BYZANTINE MUSICAL SYMBOL VAREIAI ARCHAION	[100F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D021, 0x0061 };
    uint32_t const ces[9] = { 0x100F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_032)
{
    // 1D021 0041;	
    // (ùÄ°) BYZANTINE MUSICAL SYMBOL VAREIAI ARCHAION	[100F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D021, 0x0041 };
    uint32_t const ces[9] = { 0x100F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_033)
{
    // 1D021 0062;	
    // (ùÄ°) BYZANTINE MUSICAL SYMBOL VAREIAI ARCHAION	[100F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D021, 0x0062 };
    uint32_t const ces[9] = { 0x100F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_034)
{
    // 1D022 0021;	
    // (ùÄ¢) BYZANTINE MUSICAL SYMBOL APODERMA ARCHAION	[1010 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D022, 0x0021 };
    uint32_t const ces[9] = { 0x1010, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_035)
{
    // 1D022 003F;	
    // (ùÄ¢) BYZANTINE MUSICAL SYMBOL APODERMA ARCHAION	[1010 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D022, 0x003F };
    uint32_t const ces[9] = { 0x1010, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_036)
{
    // 1D022 0061;	
    // (ùÄ¢) BYZANTINE MUSICAL SYMBOL APODERMA ARCHAION	[1010 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D022, 0x0061 };
    uint32_t const ces[9] = { 0x1010, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_037)
{
    // 1D022 0041;	
    // (ùÄ¢) BYZANTINE MUSICAL SYMBOL APODERMA ARCHAION	[1010 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D022, 0x0041 };
    uint32_t const ces[9] = { 0x1010, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_038)
{
    // 1D022 0062;	
    // (ùÄ¢) BYZANTINE MUSICAL SYMBOL APODERMA ARCHAION	[1010 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D022, 0x0062 };
    uint32_t const ces[9] = { 0x1010, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_039)
{
    // 1D023 0021;	
    // (ùÄ£) BYZANTINE MUSICAL SYMBOL APOTHEMA	[1011 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D023, 0x0021 };
    uint32_t const ces[9] = { 0x1011, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_040)
{
    // 1D023 003F;	
    // (ùÄ£) BYZANTINE MUSICAL SYMBOL APOTHEMA	[1011 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D023, 0x003F };
    uint32_t const ces[9] = { 0x1011, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_041)
{
    // 1D023 0061;	
    // (ùÄ£) BYZANTINE MUSICAL SYMBOL APOTHEMA	[1011 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D023, 0x0061 };
    uint32_t const ces[9] = { 0x1011, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_042)
{
    // 1D023 0041;	
    // (ùÄ£) BYZANTINE MUSICAL SYMBOL APOTHEMA	[1011 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D023, 0x0041 };
    uint32_t const ces[9] = { 0x1011, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_043)
{
    // 1D023 0062;	
    // (ùÄ£) BYZANTINE MUSICAL SYMBOL APOTHEMA	[1011 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D023, 0x0062 };
    uint32_t const ces[9] = { 0x1011, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_044)
{
    // 1D024 0021;	
    // (ùÄ§) BYZANTINE MUSICAL SYMBOL KLASMA	[1012 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D024, 0x0021 };
    uint32_t const ces[9] = { 0x1012, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_045)
{
    // 1D024 003F;	
    // (ùÄ§) BYZANTINE MUSICAL SYMBOL KLASMA	[1012 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D024, 0x003F };
    uint32_t const ces[9] = { 0x1012, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_046)
{
    // 1D024 0061;	
    // (ùÄ§) BYZANTINE MUSICAL SYMBOL KLASMA	[1012 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D024, 0x0061 };
    uint32_t const ces[9] = { 0x1012, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_047)
{
    // 1D024 0041;	
    // (ùÄ§) BYZANTINE MUSICAL SYMBOL KLASMA	[1012 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D024, 0x0041 };
    uint32_t const ces[9] = { 0x1012, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_048)
{
    // 1D024 0062;	
    // (ùÄ§) BYZANTINE MUSICAL SYMBOL KLASMA	[1012 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D024, 0x0062 };
    uint32_t const ces[9] = { 0x1012, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_049)
{
    // 1D025 0021;	
    // (ùÄ•) BYZANTINE MUSICAL SYMBOL REVMA	[1013 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D025, 0x0021 };
    uint32_t const ces[9] = { 0x1013, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_050)
{
    // 1D025 003F;	
    // (ùÄ•) BYZANTINE MUSICAL SYMBOL REVMA	[1013 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D025, 0x003F };
    uint32_t const ces[9] = { 0x1013, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_051)
{
    // 1D025 0061;	
    // (ùÄ•) BYZANTINE MUSICAL SYMBOL REVMA	[1013 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D025, 0x0061 };
    uint32_t const ces[9] = { 0x1013, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_052)
{
    // 1D025 0041;	
    // (ùÄ•) BYZANTINE MUSICAL SYMBOL REVMA	[1013 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D025, 0x0041 };
    uint32_t const ces[9] = { 0x1013, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_053)
{
    // 1D025 0062;	
    // (ùÄ•) BYZANTINE MUSICAL SYMBOL REVMA	[1013 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D025, 0x0062 };
    uint32_t const ces[9] = { 0x1013, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_054)
{
    // 1D026 0021;	
    // (ùÄ¶) BYZANTINE MUSICAL SYMBOL PIASMA ARCHAION	[1014 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D026, 0x0021 };
    uint32_t const ces[9] = { 0x1014, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_055)
{
    // 1D026 003F;	
    // (ùÄ¶) BYZANTINE MUSICAL SYMBOL PIASMA ARCHAION	[1014 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D026, 0x003F };
    uint32_t const ces[9] = { 0x1014, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_056)
{
    // 1D026 0061;	
    // (ùÄ¶) BYZANTINE MUSICAL SYMBOL PIASMA ARCHAION	[1014 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D026, 0x0061 };
    uint32_t const ces[9] = { 0x1014, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_057)
{
    // 1D026 0041;	
    // (ùÄ¶) BYZANTINE MUSICAL SYMBOL PIASMA ARCHAION	[1014 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D026, 0x0041 };
    uint32_t const ces[9] = { 0x1014, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_058)
{
    // 1D026 0062;	
    // (ùÄ¶) BYZANTINE MUSICAL SYMBOL PIASMA ARCHAION	[1014 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D026, 0x0062 };
    uint32_t const ces[9] = { 0x1014, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_059)
{
    // 1D027 0021;	
    // (ùÄß) BYZANTINE MUSICAL SYMBOL TINAGMA	[1015 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D027, 0x0021 };
    uint32_t const ces[9] = { 0x1015, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_060)
{
    // 1D027 003F;	
    // (ùÄß) BYZANTINE MUSICAL SYMBOL TINAGMA	[1015 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D027, 0x003F };
    uint32_t const ces[9] = { 0x1015, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_061)
{
    // 1D027 0061;	
    // (ùÄß) BYZANTINE MUSICAL SYMBOL TINAGMA	[1015 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D027, 0x0061 };
    uint32_t const ces[9] = { 0x1015, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_062)
{
    // 1D027 0041;	
    // (ùÄß) BYZANTINE MUSICAL SYMBOL TINAGMA	[1015 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D027, 0x0041 };
    uint32_t const ces[9] = { 0x1015, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_063)
{
    // 1D027 0062;	
    // (ùÄß) BYZANTINE MUSICAL SYMBOL TINAGMA	[1015 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D027, 0x0062 };
    uint32_t const ces[9] = { 0x1015, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_064)
{
    // 1D028 0021;	
    // (ùÄ®) BYZANTINE MUSICAL SYMBOL ANATRICHISMA	[1016 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D028, 0x0021 };
    uint32_t const ces[9] = { 0x1016, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_065)
{
    // 1D028 003F;	
    // (ùÄ®) BYZANTINE MUSICAL SYMBOL ANATRICHISMA	[1016 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D028, 0x003F };
    uint32_t const ces[9] = { 0x1016, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_066)
{
    // 1D028 0061;	
    // (ùÄ®) BYZANTINE MUSICAL SYMBOL ANATRICHISMA	[1016 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D028, 0x0061 };
    uint32_t const ces[9] = { 0x1016, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_067)
{
    // 1D028 0041;	
    // (ùÄ®) BYZANTINE MUSICAL SYMBOL ANATRICHISMA	[1016 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D028, 0x0041 };
    uint32_t const ces[9] = { 0x1016, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_068)
{
    // 1D028 0062;	
    // (ùÄ®) BYZANTINE MUSICAL SYMBOL ANATRICHISMA	[1016 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D028, 0x0062 };
    uint32_t const ces[9] = { 0x1016, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_069)
{
    // 1D029 0021;	
    // (ùÄ©) BYZANTINE MUSICAL SYMBOL SEISMA	[1017 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D029, 0x0021 };
    uint32_t const ces[9] = { 0x1017, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_070)
{
    // 1D029 003F;	
    // (ùÄ©) BYZANTINE MUSICAL SYMBOL SEISMA	[1017 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D029, 0x003F };
    uint32_t const ces[9] = { 0x1017, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_071)
{
    // 1D029 0061;	
    // (ùÄ©) BYZANTINE MUSICAL SYMBOL SEISMA	[1017 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D029, 0x0061 };
    uint32_t const ces[9] = { 0x1017, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_072)
{
    // 1D029 0041;	
    // (ùÄ©) BYZANTINE MUSICAL SYMBOL SEISMA	[1017 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D029, 0x0041 };
    uint32_t const ces[9] = { 0x1017, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_073)
{
    // 1D029 0062;	
    // (ùÄ©) BYZANTINE MUSICAL SYMBOL SEISMA	[1017 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D029, 0x0062 };
    uint32_t const ces[9] = { 0x1017, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_074)
{
    // 1D02A 0021;	
    // (ùÄ™) BYZANTINE MUSICAL SYMBOL SYNAGMA ARCHAION	[1018 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02A, 0x0021 };
    uint32_t const ces[9] = { 0x1018, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_075)
{
    // 1D02A 003F;	
    // (ùÄ™) BYZANTINE MUSICAL SYMBOL SYNAGMA ARCHAION	[1018 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02A, 0x003F };
    uint32_t const ces[9] = { 0x1018, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_076)
{
    // 1D02A 0061;	
    // (ùÄ™) BYZANTINE MUSICAL SYMBOL SYNAGMA ARCHAION	[1018 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02A, 0x0061 };
    uint32_t const ces[9] = { 0x1018, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_077)
{
    // 1D02A 0041;	
    // (ùÄ™) BYZANTINE MUSICAL SYMBOL SYNAGMA ARCHAION	[1018 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D02A, 0x0041 };
    uint32_t const ces[9] = { 0x1018, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_078)
{
    // 1D02A 0062;	
    // (ùÄ™) BYZANTINE MUSICAL SYMBOL SYNAGMA ARCHAION	[1018 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02A, 0x0062 };
    uint32_t const ces[9] = { 0x1018, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_079)
{
    // 1D02B 0021;	
    // (ùÄ´) BYZANTINE MUSICAL SYMBOL SYNAGMA META STAVROU	[1019 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02B, 0x0021 };
    uint32_t const ces[9] = { 0x1019, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_080)
{
    // 1D02B 003F;	
    // (ùÄ´) BYZANTINE MUSICAL SYMBOL SYNAGMA META STAVROU	[1019 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02B, 0x003F };
    uint32_t const ces[9] = { 0x1019, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_081)
{
    // 1D02B 0061;	
    // (ùÄ´) BYZANTINE MUSICAL SYMBOL SYNAGMA META STAVROU	[1019 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02B, 0x0061 };
    uint32_t const ces[9] = { 0x1019, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_082)
{
    // 1D02B 0041;	
    // (ùÄ´) BYZANTINE MUSICAL SYMBOL SYNAGMA META STAVROU	[1019 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D02B, 0x0041 };
    uint32_t const ces[9] = { 0x1019, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_083)
{
    // 1D02B 0062;	
    // (ùÄ´) BYZANTINE MUSICAL SYMBOL SYNAGMA META STAVROU	[1019 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02B, 0x0062 };
    uint32_t const ces[9] = { 0x1019, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_084)
{
    // 1D02C 0021;	
    // (ùÄ¨) BYZANTINE MUSICAL SYMBOL OYRANISMA ARCHAION	[101A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02C, 0x0021 };
    uint32_t const ces[9] = { 0x101A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_085)
{
    // 1D02C 003F;	
    // (ùÄ¨) BYZANTINE MUSICAL SYMBOL OYRANISMA ARCHAION	[101A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02C, 0x003F };
    uint32_t const ces[9] = { 0x101A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_086)
{
    // 1D02C 0061;	
    // (ùÄ¨) BYZANTINE MUSICAL SYMBOL OYRANISMA ARCHAION	[101A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02C, 0x0061 };
    uint32_t const ces[9] = { 0x101A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_087)
{
    // 1D02C 0041;	
    // (ùÄ¨) BYZANTINE MUSICAL SYMBOL OYRANISMA ARCHAION	[101A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D02C, 0x0041 };
    uint32_t const ces[9] = { 0x101A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_088)
{
    // 1D02C 0062;	
    // (ùÄ¨) BYZANTINE MUSICAL SYMBOL OYRANISMA ARCHAION	[101A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02C, 0x0062 };
    uint32_t const ces[9] = { 0x101A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_089)
{
    // 1D02D 0021;	
    // (ùÄ≠) BYZANTINE MUSICAL SYMBOL THEMA	[101B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02D, 0x0021 };
    uint32_t const ces[9] = { 0x101B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_090)
{
    // 1D02D 003F;	
    // (ùÄ≠) BYZANTINE MUSICAL SYMBOL THEMA	[101B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02D, 0x003F };
    uint32_t const ces[9] = { 0x101B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_091)
{
    // 1D02D 0061;	
    // (ùÄ≠) BYZANTINE MUSICAL SYMBOL THEMA	[101B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02D, 0x0061 };
    uint32_t const ces[9] = { 0x101B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_092)
{
    // 1D02D 0041;	
    // (ùÄ≠) BYZANTINE MUSICAL SYMBOL THEMA	[101B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D02D, 0x0041 };
    uint32_t const ces[9] = { 0x101B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_093)
{
    // 1D02D 0062;	
    // (ùÄ≠) BYZANTINE MUSICAL SYMBOL THEMA	[101B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02D, 0x0062 };
    uint32_t const ces[9] = { 0x101B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_094)
{
    // 1D02E 0021;	
    // (ùÄÆ) BYZANTINE MUSICAL SYMBOL LEMOI	[101C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02E, 0x0021 };
    uint32_t const ces[9] = { 0x101C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_095)
{
    // 1D02E 003F;	
    // (ùÄÆ) BYZANTINE MUSICAL SYMBOL LEMOI	[101C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02E, 0x003F };
    uint32_t const ces[9] = { 0x101C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_096)
{
    // 1D02E 0061;	
    // (ùÄÆ) BYZANTINE MUSICAL SYMBOL LEMOI	[101C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02E, 0x0061 };
    uint32_t const ces[9] = { 0x101C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_097)
{
    // 1D02E 0041;	
    // (ùÄÆ) BYZANTINE MUSICAL SYMBOL LEMOI	[101C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D02E, 0x0041 };
    uint32_t const ces[9] = { 0x101C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_098)
{
    // 1D02E 0062;	
    // (ùÄÆ) BYZANTINE MUSICAL SYMBOL LEMOI	[101C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02E, 0x0062 };
    uint32_t const ces[9] = { 0x101C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_099)
{
    // 1D02F 0021;	
    // (ùÄØ) BYZANTINE MUSICAL SYMBOL DYO	[101D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02F, 0x0021 };
    uint32_t const ces[9] = { 0x101D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_100)
{
    // 1D02F 003F;	
    // (ùÄØ) BYZANTINE MUSICAL SYMBOL DYO	[101D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02F, 0x003F };
    uint32_t const ces[9] = { 0x101D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_101)
{
    // 1D02F 0061;	
    // (ùÄØ) BYZANTINE MUSICAL SYMBOL DYO	[101D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02F, 0x0061 };
    uint32_t const ces[9] = { 0x101D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_102)
{
    // 1D02F 0041;	
    // (ùÄØ) BYZANTINE MUSICAL SYMBOL DYO	[101D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D02F, 0x0041 };
    uint32_t const ces[9] = { 0x101D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_103)
{
    // 1D02F 0062;	
    // (ùÄØ) BYZANTINE MUSICAL SYMBOL DYO	[101D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D02F, 0x0062 };
    uint32_t const ces[9] = { 0x101D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_104)
{
    // 1D030 0021;	
    // (ùÄ∞) BYZANTINE MUSICAL SYMBOL TRIA	[101E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D030, 0x0021 };
    uint32_t const ces[9] = { 0x101E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_105)
{
    // 1D030 003F;	
    // (ùÄ∞) BYZANTINE MUSICAL SYMBOL TRIA	[101E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D030, 0x003F };
    uint32_t const ces[9] = { 0x101E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_106)
{
    // 1D030 0061;	
    // (ùÄ∞) BYZANTINE MUSICAL SYMBOL TRIA	[101E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D030, 0x0061 };
    uint32_t const ces[9] = { 0x101E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_107)
{
    // 1D030 0041;	
    // (ùÄ∞) BYZANTINE MUSICAL SYMBOL TRIA	[101E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D030, 0x0041 };
    uint32_t const ces[9] = { 0x101E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_108)
{
    // 1D030 0062;	
    // (ùÄ∞) BYZANTINE MUSICAL SYMBOL TRIA	[101E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D030, 0x0062 };
    uint32_t const ces[9] = { 0x101E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_109)
{
    // 1D031 0021;	
    // (ùÄ±) BYZANTINE MUSICAL SYMBOL TESSERA	[101F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D031, 0x0021 };
    uint32_t const ces[9] = { 0x101F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_110)
{
    // 1D031 003F;	
    // (ùÄ±) BYZANTINE MUSICAL SYMBOL TESSERA	[101F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D031, 0x003F };
    uint32_t const ces[9] = { 0x101F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_111)
{
    // 1D031 0061;	
    // (ùÄ±) BYZANTINE MUSICAL SYMBOL TESSERA	[101F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D031, 0x0061 };
    uint32_t const ces[9] = { 0x101F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_112)
{
    // 1D031 0041;	
    // (ùÄ±) BYZANTINE MUSICAL SYMBOL TESSERA	[101F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D031, 0x0041 };
    uint32_t const ces[9] = { 0x101F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_113)
{
    // 1D031 0062;	
    // (ùÄ±) BYZANTINE MUSICAL SYMBOL TESSERA	[101F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D031, 0x0062 };
    uint32_t const ces[9] = { 0x101F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_114)
{
    // 1D032 0021;	
    // (ùÄ≤) BYZANTINE MUSICAL SYMBOL KRATIMATA	[1020 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D032, 0x0021 };
    uint32_t const ces[9] = { 0x1020, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_115)
{
    // 1D032 003F;	
    // (ùÄ≤) BYZANTINE MUSICAL SYMBOL KRATIMATA	[1020 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D032, 0x003F };
    uint32_t const ces[9] = { 0x1020, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_116)
{
    // 1D032 0061;	
    // (ùÄ≤) BYZANTINE MUSICAL SYMBOL KRATIMATA	[1020 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D032, 0x0061 };
    uint32_t const ces[9] = { 0x1020, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_117)
{
    // 1D032 0041;	
    // (ùÄ≤) BYZANTINE MUSICAL SYMBOL KRATIMATA	[1020 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D032, 0x0041 };
    uint32_t const ces[9] = { 0x1020, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_118)
{
    // 1D032 0062;	
    // (ùÄ≤) BYZANTINE MUSICAL SYMBOL KRATIMATA	[1020 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D032, 0x0062 };
    uint32_t const ces[9] = { 0x1020, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_119)
{
    // 1D033 0021;	
    // (ùÄ≥) BYZANTINE MUSICAL SYMBOL APESO EXO NEO	[1021 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D033, 0x0021 };
    uint32_t const ces[9] = { 0x1021, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_120)
{
    // 1D033 003F;	
    // (ùÄ≥) BYZANTINE MUSICAL SYMBOL APESO EXO NEO	[1021 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D033, 0x003F };
    uint32_t const ces[9] = { 0x1021, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_121)
{
    // 1D033 0061;	
    // (ùÄ≥) BYZANTINE MUSICAL SYMBOL APESO EXO NEO	[1021 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D033, 0x0061 };
    uint32_t const ces[9] = { 0x1021, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_122)
{
    // 1D033 0041;	
    // (ùÄ≥) BYZANTINE MUSICAL SYMBOL APESO EXO NEO	[1021 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D033, 0x0041 };
    uint32_t const ces[9] = { 0x1021, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_123)
{
    // 1D033 0062;	
    // (ùÄ≥) BYZANTINE MUSICAL SYMBOL APESO EXO NEO	[1021 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D033, 0x0062 };
    uint32_t const ces[9] = { 0x1021, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_124)
{
    // 1D034 0021;	
    // (ùÄ¥) BYZANTINE MUSICAL SYMBOL FTHORA ARCHAION	[1022 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D034, 0x0021 };
    uint32_t const ces[9] = { 0x1022, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_125)
{
    // 1D034 003F;	
    // (ùÄ¥) BYZANTINE MUSICAL SYMBOL FTHORA ARCHAION	[1022 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D034, 0x003F };
    uint32_t const ces[9] = { 0x1022, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_126)
{
    // 1D034 0061;	
    // (ùÄ¥) BYZANTINE MUSICAL SYMBOL FTHORA ARCHAION	[1022 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D034, 0x0061 };
    uint32_t const ces[9] = { 0x1022, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_127)
{
    // 1D034 0041;	
    // (ùÄ¥) BYZANTINE MUSICAL SYMBOL FTHORA ARCHAION	[1022 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D034, 0x0041 };
    uint32_t const ces[9] = { 0x1022, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_128)
{
    // 1D034 0062;	
    // (ùÄ¥) BYZANTINE MUSICAL SYMBOL FTHORA ARCHAION	[1022 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D034, 0x0062 };
    uint32_t const ces[9] = { 0x1022, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_129)
{
    // 1D035 0021;	
    // (ùÄµ) BYZANTINE MUSICAL SYMBOL IMIFTHORA	[1023 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D035, 0x0021 };
    uint32_t const ces[9] = { 0x1023, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_130)
{
    // 1D035 003F;	
    // (ùÄµ) BYZANTINE MUSICAL SYMBOL IMIFTHORA	[1023 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D035, 0x003F };
    uint32_t const ces[9] = { 0x1023, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_131)
{
    // 1D035 0061;	
    // (ùÄµ) BYZANTINE MUSICAL SYMBOL IMIFTHORA	[1023 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D035, 0x0061 };
    uint32_t const ces[9] = { 0x1023, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_132)
{
    // 1D035 0041;	
    // (ùÄµ) BYZANTINE MUSICAL SYMBOL IMIFTHORA	[1023 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D035, 0x0041 };
    uint32_t const ces[9] = { 0x1023, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_133)
{
    // 1D035 0062;	
    // (ùÄµ) BYZANTINE MUSICAL SYMBOL IMIFTHORA	[1023 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D035, 0x0062 };
    uint32_t const ces[9] = { 0x1023, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_134)
{
    // 1D036 0021;	
    // (ùÄ∂) BYZANTINE MUSICAL SYMBOL TROMIKON ARCHAION	[1024 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D036, 0x0021 };
    uint32_t const ces[9] = { 0x1024, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_135)
{
    // 1D036 003F;	
    // (ùÄ∂) BYZANTINE MUSICAL SYMBOL TROMIKON ARCHAION	[1024 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D036, 0x003F };
    uint32_t const ces[9] = { 0x1024, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_136)
{
    // 1D036 0061;	
    // (ùÄ∂) BYZANTINE MUSICAL SYMBOL TROMIKON ARCHAION	[1024 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D036, 0x0061 };
    uint32_t const ces[9] = { 0x1024, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_137)
{
    // 1D036 0041;	
    // (ùÄ∂) BYZANTINE MUSICAL SYMBOL TROMIKON ARCHAION	[1024 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D036, 0x0041 };
    uint32_t const ces[9] = { 0x1024, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_138)
{
    // 1D036 0062;	
    // (ùÄ∂) BYZANTINE MUSICAL SYMBOL TROMIKON ARCHAION	[1024 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D036, 0x0062 };
    uint32_t const ces[9] = { 0x1024, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_139)
{
    // 1D037 0021;	
    // (ùÄ∑) BYZANTINE MUSICAL SYMBOL KATAVA TROMIKON	[1025 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D037, 0x0021 };
    uint32_t const ces[9] = { 0x1025, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_140)
{
    // 1D037 003F;	
    // (ùÄ∑) BYZANTINE MUSICAL SYMBOL KATAVA TROMIKON	[1025 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D037, 0x003F };
    uint32_t const ces[9] = { 0x1025, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_141)
{
    // 1D037 0061;	
    // (ùÄ∑) BYZANTINE MUSICAL SYMBOL KATAVA TROMIKON	[1025 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D037, 0x0061 };
    uint32_t const ces[9] = { 0x1025, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_142)
{
    // 1D037 0041;	
    // (ùÄ∑) BYZANTINE MUSICAL SYMBOL KATAVA TROMIKON	[1025 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D037, 0x0041 };
    uint32_t const ces[9] = { 0x1025, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_143)
{
    // 1D037 0062;	
    // (ùÄ∑) BYZANTINE MUSICAL SYMBOL KATAVA TROMIKON	[1025 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D037, 0x0062 };
    uint32_t const ces[9] = { 0x1025, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_144)
{
    // 1D038 0021;	
    // (ùÄ∏) BYZANTINE MUSICAL SYMBOL PELASTON	[1026 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D038, 0x0021 };
    uint32_t const ces[9] = { 0x1026, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_145)
{
    // 1D038 003F;	
    // (ùÄ∏) BYZANTINE MUSICAL SYMBOL PELASTON	[1026 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D038, 0x003F };
    uint32_t const ces[9] = { 0x1026, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_146)
{
    // 1D038 0061;	
    // (ùÄ∏) BYZANTINE MUSICAL SYMBOL PELASTON	[1026 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D038, 0x0061 };
    uint32_t const ces[9] = { 0x1026, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_147)
{
    // 1D038 0041;	
    // (ùÄ∏) BYZANTINE MUSICAL SYMBOL PELASTON	[1026 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D038, 0x0041 };
    uint32_t const ces[9] = { 0x1026, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_148)
{
    // 1D038 0062;	
    // (ùÄ∏) BYZANTINE MUSICAL SYMBOL PELASTON	[1026 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D038, 0x0062 };
    uint32_t const ces[9] = { 0x1026, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_149)
{
    // 1D039 0021;	
    // (ùÄπ) BYZANTINE MUSICAL SYMBOL PSIFISTON	[1027 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D039, 0x0021 };
    uint32_t const ces[9] = { 0x1027, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_150)
{
    // 1D039 003F;	
    // (ùÄπ) BYZANTINE MUSICAL SYMBOL PSIFISTON	[1027 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D039, 0x003F };
    uint32_t const ces[9] = { 0x1027, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_151)
{
    // 1D039 0061;	
    // (ùÄπ) BYZANTINE MUSICAL SYMBOL PSIFISTON	[1027 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D039, 0x0061 };
    uint32_t const ces[9] = { 0x1027, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_152)
{
    // 1D039 0041;	
    // (ùÄπ) BYZANTINE MUSICAL SYMBOL PSIFISTON	[1027 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D039, 0x0041 };
    uint32_t const ces[9] = { 0x1027, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_153)
{
    // 1D039 0062;	
    // (ùÄπ) BYZANTINE MUSICAL SYMBOL PSIFISTON	[1027 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D039, 0x0062 };
    uint32_t const ces[9] = { 0x1027, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_154)
{
    // 1D03A 0021;	
    // (ùÄ∫) BYZANTINE MUSICAL SYMBOL KONTEVMA	[1028 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03A, 0x0021 };
    uint32_t const ces[9] = { 0x1028, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_155)
{
    // 1D03A 003F;	
    // (ùÄ∫) BYZANTINE MUSICAL SYMBOL KONTEVMA	[1028 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03A, 0x003F };
    uint32_t const ces[9] = { 0x1028, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_156)
{
    // 1D03A 0061;	
    // (ùÄ∫) BYZANTINE MUSICAL SYMBOL KONTEVMA	[1028 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03A, 0x0061 };
    uint32_t const ces[9] = { 0x1028, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_157)
{
    // 1D03A 0041;	
    // (ùÄ∫) BYZANTINE MUSICAL SYMBOL KONTEVMA	[1028 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D03A, 0x0041 };
    uint32_t const ces[9] = { 0x1028, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_158)
{
    // 1D03A 0062;	
    // (ùÄ∫) BYZANTINE MUSICAL SYMBOL KONTEVMA	[1028 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03A, 0x0062 };
    uint32_t const ces[9] = { 0x1028, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_159)
{
    // 1D03B 0021;	
    // (ùÄª) BYZANTINE MUSICAL SYMBOL CHOREVMA ARCHAION	[1029 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03B, 0x0021 };
    uint32_t const ces[9] = { 0x1029, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_160)
{
    // 1D03B 003F;	
    // (ùÄª) BYZANTINE MUSICAL SYMBOL CHOREVMA ARCHAION	[1029 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03B, 0x003F };
    uint32_t const ces[9] = { 0x1029, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_161)
{
    // 1D03B 0061;	
    // (ùÄª) BYZANTINE MUSICAL SYMBOL CHOREVMA ARCHAION	[1029 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03B, 0x0061 };
    uint32_t const ces[9] = { 0x1029, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_162)
{
    // 1D03B 0041;	
    // (ùÄª) BYZANTINE MUSICAL SYMBOL CHOREVMA ARCHAION	[1029 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D03B, 0x0041 };
    uint32_t const ces[9] = { 0x1029, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_163)
{
    // 1D03B 0062;	
    // (ùÄª) BYZANTINE MUSICAL SYMBOL CHOREVMA ARCHAION	[1029 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03B, 0x0062 };
    uint32_t const ces[9] = { 0x1029, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_164)
{
    // 1D03C 0021;	
    // (ùÄº) BYZANTINE MUSICAL SYMBOL RAPISMA	[102A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03C, 0x0021 };
    uint32_t const ces[9] = { 0x102A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_165)
{
    // 1D03C 003F;	
    // (ùÄº) BYZANTINE MUSICAL SYMBOL RAPISMA	[102A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03C, 0x003F };
    uint32_t const ces[9] = { 0x102A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_166)
{
    // 1D03C 0061;	
    // (ùÄº) BYZANTINE MUSICAL SYMBOL RAPISMA	[102A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03C, 0x0061 };
    uint32_t const ces[9] = { 0x102A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_167)
{
    // 1D03C 0041;	
    // (ùÄº) BYZANTINE MUSICAL SYMBOL RAPISMA	[102A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D03C, 0x0041 };
    uint32_t const ces[9] = { 0x102A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_168)
{
    // 1D03C 0062;	
    // (ùÄº) BYZANTINE MUSICAL SYMBOL RAPISMA	[102A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03C, 0x0062 };
    uint32_t const ces[9] = { 0x102A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_169)
{
    // 1D03D 0021;	
    // (ùÄΩ) BYZANTINE MUSICAL SYMBOL PARAKALESMA ARCHAION	[102B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03D, 0x0021 };
    uint32_t const ces[9] = { 0x102B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_170)
{
    // 1D03D 003F;	
    // (ùÄΩ) BYZANTINE MUSICAL SYMBOL PARAKALESMA ARCHAION	[102B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03D, 0x003F };
    uint32_t const ces[9] = { 0x102B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_171)
{
    // 1D03D 0061;	
    // (ùÄΩ) BYZANTINE MUSICAL SYMBOL PARAKALESMA ARCHAION	[102B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03D, 0x0061 };
    uint32_t const ces[9] = { 0x102B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_172)
{
    // 1D03D 0041;	
    // (ùÄΩ) BYZANTINE MUSICAL SYMBOL PARAKALESMA ARCHAION	[102B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D03D, 0x0041 };
    uint32_t const ces[9] = { 0x102B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_173)
{
    // 1D03D 0062;	
    // (ùÄΩ) BYZANTINE MUSICAL SYMBOL PARAKALESMA ARCHAION	[102B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03D, 0x0062 };
    uint32_t const ces[9] = { 0x102B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_174)
{
    // 1D03E 0021;	
    // (ùÄæ) BYZANTINE MUSICAL SYMBOL PARAKLITIKI ARCHAION	[102C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03E, 0x0021 };
    uint32_t const ces[9] = { 0x102C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_175)
{
    // 1D03E 003F;	
    // (ùÄæ) BYZANTINE MUSICAL SYMBOL PARAKLITIKI ARCHAION	[102C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03E, 0x003F };
    uint32_t const ces[9] = { 0x102C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_176)
{
    // 1D03E 0061;	
    // (ùÄæ) BYZANTINE MUSICAL SYMBOL PARAKLITIKI ARCHAION	[102C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03E, 0x0061 };
    uint32_t const ces[9] = { 0x102C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_177)
{
    // 1D03E 0041;	
    // (ùÄæ) BYZANTINE MUSICAL SYMBOL PARAKLITIKI ARCHAION	[102C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D03E, 0x0041 };
    uint32_t const ces[9] = { 0x102C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_178)
{
    // 1D03E 0062;	
    // (ùÄæ) BYZANTINE MUSICAL SYMBOL PARAKLITIKI ARCHAION	[102C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03E, 0x0062 };
    uint32_t const ces[9] = { 0x102C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_179)
{
    // 1D03F 0021;	
    // (ùÄø) BYZANTINE MUSICAL SYMBOL ICHADIN	[102D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03F, 0x0021 };
    uint32_t const ces[9] = { 0x102D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_180)
{
    // 1D03F 003F;	
    // (ùÄø) BYZANTINE MUSICAL SYMBOL ICHADIN	[102D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03F, 0x003F };
    uint32_t const ces[9] = { 0x102D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_181)
{
    // 1D03F 0061;	
    // (ùÄø) BYZANTINE MUSICAL SYMBOL ICHADIN	[102D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03F, 0x0061 };
    uint32_t const ces[9] = { 0x102D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_182)
{
    // 1D03F 0041;	
    // (ùÄø) BYZANTINE MUSICAL SYMBOL ICHADIN	[102D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D03F, 0x0041 };
    uint32_t const ces[9] = { 0x102D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_183)
{
    // 1D03F 0062;	
    // (ùÄø) BYZANTINE MUSICAL SYMBOL ICHADIN	[102D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D03F, 0x0062 };
    uint32_t const ces[9] = { 0x102D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_184)
{
    // 1D040 0021;	
    // (ùÅÄ) BYZANTINE MUSICAL SYMBOL NANA	[102E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D040, 0x0021 };
    uint32_t const ces[9] = { 0x102E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_185)
{
    // 1D040 003F;	
    // (ùÅÄ) BYZANTINE MUSICAL SYMBOL NANA	[102E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D040, 0x003F };
    uint32_t const ces[9] = { 0x102E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_186)
{
    // 1D040 0061;	
    // (ùÅÄ) BYZANTINE MUSICAL SYMBOL NANA	[102E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D040, 0x0061 };
    uint32_t const ces[9] = { 0x102E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_187)
{
    // 1D040 0041;	
    // (ùÅÄ) BYZANTINE MUSICAL SYMBOL NANA	[102E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D040, 0x0041 };
    uint32_t const ces[9] = { 0x102E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_188)
{
    // 1D040 0062;	
    // (ùÅÄ) BYZANTINE MUSICAL SYMBOL NANA	[102E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D040, 0x0062 };
    uint32_t const ces[9] = { 0x102E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_189)
{
    // 1D041 0021;	
    // (ùÅÅ) BYZANTINE MUSICAL SYMBOL PETASMA	[102F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D041, 0x0021 };
    uint32_t const ces[9] = { 0x102F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_190)
{
    // 1D041 003F;	
    // (ùÅÅ) BYZANTINE MUSICAL SYMBOL PETASMA	[102F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D041, 0x003F };
    uint32_t const ces[9] = { 0x102F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_191)
{
    // 1D041 0061;	
    // (ùÅÅ) BYZANTINE MUSICAL SYMBOL PETASMA	[102F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D041, 0x0061 };
    uint32_t const ces[9] = { 0x102F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_192)
{
    // 1D041 0041;	
    // (ùÅÅ) BYZANTINE MUSICAL SYMBOL PETASMA	[102F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D041, 0x0041 };
    uint32_t const ces[9] = { 0x102F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_193)
{
    // 1D041 0062;	
    // (ùÅÅ) BYZANTINE MUSICAL SYMBOL PETASMA	[102F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D041, 0x0062 };
    uint32_t const ces[9] = { 0x102F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_194)
{
    // 1D042 0021;	
    // (ùÅÇ) BYZANTINE MUSICAL SYMBOL KONTEVMA ALLO	[1030 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D042, 0x0021 };
    uint32_t const ces[9] = { 0x1030, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_195)
{
    // 1D042 003F;	
    // (ùÅÇ) BYZANTINE MUSICAL SYMBOL KONTEVMA ALLO	[1030 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D042, 0x003F };
    uint32_t const ces[9] = { 0x1030, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_196)
{
    // 1D042 0061;	
    // (ùÅÇ) BYZANTINE MUSICAL SYMBOL KONTEVMA ALLO	[1030 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D042, 0x0061 };
    uint32_t const ces[9] = { 0x1030, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_197)
{
    // 1D042 0041;	
    // (ùÅÇ) BYZANTINE MUSICAL SYMBOL KONTEVMA ALLO	[1030 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D042, 0x0041 };
    uint32_t const ces[9] = { 0x1030, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_198)
{
    // 1D042 0062;	
    // (ùÅÇ) BYZANTINE MUSICAL SYMBOL KONTEVMA ALLO	[1030 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D042, 0x0062 };
    uint32_t const ces[9] = { 0x1030, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_199)
{
    // 1D043 0021;	
    // (ùÅÉ) BYZANTINE MUSICAL SYMBOL TROMIKON ALLO	[1031 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D043, 0x0021 };
    uint32_t const ces[9] = { 0x1031, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_200)
{
    // 1D043 003F;	
    // (ùÅÉ) BYZANTINE MUSICAL SYMBOL TROMIKON ALLO	[1031 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D043, 0x003F };
    uint32_t const ces[9] = { 0x1031, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_201)
{
    // 1D043 0061;	
    // (ùÅÉ) BYZANTINE MUSICAL SYMBOL TROMIKON ALLO	[1031 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D043, 0x0061 };
    uint32_t const ces[9] = { 0x1031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_202)
{
    // 1D043 0041;	
    // (ùÅÉ) BYZANTINE MUSICAL SYMBOL TROMIKON ALLO	[1031 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D043, 0x0041 };
    uint32_t const ces[9] = { 0x1031, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_203)
{
    // 1D043 0062;	
    // (ùÅÉ) BYZANTINE MUSICAL SYMBOL TROMIKON ALLO	[1031 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D043, 0x0062 };
    uint32_t const ces[9] = { 0x1031, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_204)
{
    // 1D044 0021;	
    // (ùÅÑ) BYZANTINE MUSICAL SYMBOL STRAGGISMATA	[1032 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D044, 0x0021 };
    uint32_t const ces[9] = { 0x1032, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_205)
{
    // 1D044 003F;	
    // (ùÅÑ) BYZANTINE MUSICAL SYMBOL STRAGGISMATA	[1032 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D044, 0x003F };
    uint32_t const ces[9] = { 0x1032, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_206)
{
    // 1D044 0061;	
    // (ùÅÑ) BYZANTINE MUSICAL SYMBOL STRAGGISMATA	[1032 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D044, 0x0061 };
    uint32_t const ces[9] = { 0x1032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_207)
{
    // 1D044 0041;	
    // (ùÅÑ) BYZANTINE MUSICAL SYMBOL STRAGGISMATA	[1032 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D044, 0x0041 };
    uint32_t const ces[9] = { 0x1032, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_208)
{
    // 1D044 0062;	
    // (ùÅÑ) BYZANTINE MUSICAL SYMBOL STRAGGISMATA	[1032 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D044, 0x0062 };
    uint32_t const ces[9] = { 0x1032, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_209)
{
    // 1D045 0021;	
    // (ùÅÖ) BYZANTINE MUSICAL SYMBOL GRONTHISMATA	[1033 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D045, 0x0021 };
    uint32_t const ces[9] = { 0x1033, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_210)
{
    // 1D045 003F;	
    // (ùÅÖ) BYZANTINE MUSICAL SYMBOL GRONTHISMATA	[1033 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D045, 0x003F };
    uint32_t const ces[9] = { 0x1033, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_211)
{
    // 1D045 0061;	
    // (ùÅÖ) BYZANTINE MUSICAL SYMBOL GRONTHISMATA	[1033 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D045, 0x0061 };
    uint32_t const ces[9] = { 0x1033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_212)
{
    // 1D045 0041;	
    // (ùÅÖ) BYZANTINE MUSICAL SYMBOL GRONTHISMATA	[1033 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D045, 0x0041 };
    uint32_t const ces[9] = { 0x1033, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_213)
{
    // 1D045 0062;	
    // (ùÅÖ) BYZANTINE MUSICAL SYMBOL GRONTHISMATA	[1033 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D045, 0x0062 };
    uint32_t const ces[9] = { 0x1033, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_214)
{
    // 1D046 0021;	
    // (ùÅÜ) BYZANTINE MUSICAL SYMBOL ISON NEO	[1034 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D046, 0x0021 };
    uint32_t const ces[9] = { 0x1034, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_215)
{
    // 1D046 003F;	
    // (ùÅÜ) BYZANTINE MUSICAL SYMBOL ISON NEO	[1034 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D046, 0x003F };
    uint32_t const ces[9] = { 0x1034, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_216)
{
    // 1D046 0061;	
    // (ùÅÜ) BYZANTINE MUSICAL SYMBOL ISON NEO	[1034 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D046, 0x0061 };
    uint32_t const ces[9] = { 0x1034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_217)
{
    // 1D046 0041;	
    // (ùÅÜ) BYZANTINE MUSICAL SYMBOL ISON NEO	[1034 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D046, 0x0041 };
    uint32_t const ces[9] = { 0x1034, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_218)
{
    // 1D046 0062;	
    // (ùÅÜ) BYZANTINE MUSICAL SYMBOL ISON NEO	[1034 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D046, 0x0062 };
    uint32_t const ces[9] = { 0x1034, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_219)
{
    // 1D047 0021;	
    // (ùÅá) BYZANTINE MUSICAL SYMBOL OLIGON NEO	[1035 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D047, 0x0021 };
    uint32_t const ces[9] = { 0x1035, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_220)
{
    // 1D047 003F;	
    // (ùÅá) BYZANTINE MUSICAL SYMBOL OLIGON NEO	[1035 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D047, 0x003F };
    uint32_t const ces[9] = { 0x1035, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_221)
{
    // 1D047 0061;	
    // (ùÅá) BYZANTINE MUSICAL SYMBOL OLIGON NEO	[1035 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D047, 0x0061 };
    uint32_t const ces[9] = { 0x1035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_222)
{
    // 1D047 0041;	
    // (ùÅá) BYZANTINE MUSICAL SYMBOL OLIGON NEO	[1035 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D047, 0x0041 };
    uint32_t const ces[9] = { 0x1035, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_223)
{
    // 1D047 0062;	
    // (ùÅá) BYZANTINE MUSICAL SYMBOL OLIGON NEO	[1035 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D047, 0x0062 };
    uint32_t const ces[9] = { 0x1035, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_224)
{
    // 1D048 0021;	
    // (ùÅà) BYZANTINE MUSICAL SYMBOL OXEIA NEO	[1036 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D048, 0x0021 };
    uint32_t const ces[9] = { 0x1036, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_225)
{
    // 1D048 003F;	
    // (ùÅà) BYZANTINE MUSICAL SYMBOL OXEIA NEO	[1036 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D048, 0x003F };
    uint32_t const ces[9] = { 0x1036, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_226)
{
    // 1D048 0061;	
    // (ùÅà) BYZANTINE MUSICAL SYMBOL OXEIA NEO	[1036 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D048, 0x0061 };
    uint32_t const ces[9] = { 0x1036, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_227)
{
    // 1D048 0041;	
    // (ùÅà) BYZANTINE MUSICAL SYMBOL OXEIA NEO	[1036 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D048, 0x0041 };
    uint32_t const ces[9] = { 0x1036, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_228)
{
    // 1D048 0062;	
    // (ùÅà) BYZANTINE MUSICAL SYMBOL OXEIA NEO	[1036 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D048, 0x0062 };
    uint32_t const ces[9] = { 0x1036, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_229)
{
    // 1D049 0021;	
    // (ùÅâ) BYZANTINE MUSICAL SYMBOL PETASTI	[1037 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D049, 0x0021 };
    uint32_t const ces[9] = { 0x1037, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_230)
{
    // 1D049 003F;	
    // (ùÅâ) BYZANTINE MUSICAL SYMBOL PETASTI	[1037 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D049, 0x003F };
    uint32_t const ces[9] = { 0x1037, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_231)
{
    // 1D049 0061;	
    // (ùÅâ) BYZANTINE MUSICAL SYMBOL PETASTI	[1037 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D049, 0x0061 };
    uint32_t const ces[9] = { 0x1037, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_232)
{
    // 1D049 0041;	
    // (ùÅâ) BYZANTINE MUSICAL SYMBOL PETASTI	[1037 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D049, 0x0041 };
    uint32_t const ces[9] = { 0x1037, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_233)
{
    // 1D049 0062;	
    // (ùÅâ) BYZANTINE MUSICAL SYMBOL PETASTI	[1037 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D049, 0x0062 };
    uint32_t const ces[9] = { 0x1037, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_234)
{
    // 1D04A 0021;	
    // (ùÅä) BYZANTINE MUSICAL SYMBOL KOUFISMA	[1038 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04A, 0x0021 };
    uint32_t const ces[9] = { 0x1038, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_235)
{
    // 1D04A 003F;	
    // (ùÅä) BYZANTINE MUSICAL SYMBOL KOUFISMA	[1038 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04A, 0x003F };
    uint32_t const ces[9] = { 0x1038, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_236)
{
    // 1D04A 0061;	
    // (ùÅä) BYZANTINE MUSICAL SYMBOL KOUFISMA	[1038 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04A, 0x0061 };
    uint32_t const ces[9] = { 0x1038, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_237)
{
    // 1D04A 0041;	
    // (ùÅä) BYZANTINE MUSICAL SYMBOL KOUFISMA	[1038 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D04A, 0x0041 };
    uint32_t const ces[9] = { 0x1038, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_238)
{
    // 1D04A 0062;	
    // (ùÅä) BYZANTINE MUSICAL SYMBOL KOUFISMA	[1038 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04A, 0x0062 };
    uint32_t const ces[9] = { 0x1038, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_239)
{
    // 1D04B 0021;	
    // (ùÅã) BYZANTINE MUSICAL SYMBOL PETASTOKOUFISMA	[1039 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04B, 0x0021 };
    uint32_t const ces[9] = { 0x1039, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_240)
{
    // 1D04B 003F;	
    // (ùÅã) BYZANTINE MUSICAL SYMBOL PETASTOKOUFISMA	[1039 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04B, 0x003F };
    uint32_t const ces[9] = { 0x1039, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_241)
{
    // 1D04B 0061;	
    // (ùÅã) BYZANTINE MUSICAL SYMBOL PETASTOKOUFISMA	[1039 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04B, 0x0061 };
    uint32_t const ces[9] = { 0x1039, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_242)
{
    // 1D04B 0041;	
    // (ùÅã) BYZANTINE MUSICAL SYMBOL PETASTOKOUFISMA	[1039 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D04B, 0x0041 };
    uint32_t const ces[9] = { 0x1039, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_243)
{
    // 1D04B 0062;	
    // (ùÅã) BYZANTINE MUSICAL SYMBOL PETASTOKOUFISMA	[1039 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04B, 0x0062 };
    uint32_t const ces[9] = { 0x1039, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_244)
{
    // 1D04C 0021;	
    // (ùÅå) BYZANTINE MUSICAL SYMBOL KRATIMOKOUFISMA	[103A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04C, 0x0021 };
    uint32_t const ces[9] = { 0x103A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_245)
{
    // 1D04C 003F;	
    // (ùÅå) BYZANTINE MUSICAL SYMBOL KRATIMOKOUFISMA	[103A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04C, 0x003F };
    uint32_t const ces[9] = { 0x103A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_246)
{
    // 1D04C 0061;	
    // (ùÅå) BYZANTINE MUSICAL SYMBOL KRATIMOKOUFISMA	[103A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04C, 0x0061 };
    uint32_t const ces[9] = { 0x103A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_247)
{
    // 1D04C 0041;	
    // (ùÅå) BYZANTINE MUSICAL SYMBOL KRATIMOKOUFISMA	[103A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D04C, 0x0041 };
    uint32_t const ces[9] = { 0x103A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_248)
{
    // 1D04C 0062;	
    // (ùÅå) BYZANTINE MUSICAL SYMBOL KRATIMOKOUFISMA	[103A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04C, 0x0062 };
    uint32_t const ces[9] = { 0x103A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_249)
{
    // 1D04D 0021;	
    // (ùÅç) BYZANTINE MUSICAL SYMBOL PELASTON NEO	[103B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04D, 0x0021 };
    uint32_t const ces[9] = { 0x103B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_250)
{
    // 1D04D 003F;	
    // (ùÅç) BYZANTINE MUSICAL SYMBOL PELASTON NEO	[103B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04D, 0x003F };
    uint32_t const ces[9] = { 0x103B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_251)
{
    // 1D04D 0061;	
    // (ùÅç) BYZANTINE MUSICAL SYMBOL PELASTON NEO	[103B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04D, 0x0061 };
    uint32_t const ces[9] = { 0x103B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_252)
{
    // 1D04D 0041;	
    // (ùÅç) BYZANTINE MUSICAL SYMBOL PELASTON NEO	[103B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D04D, 0x0041 };
    uint32_t const ces[9] = { 0x103B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_253)
{
    // 1D04D 0062;	
    // (ùÅç) BYZANTINE MUSICAL SYMBOL PELASTON NEO	[103B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04D, 0x0062 };
    uint32_t const ces[9] = { 0x103B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_254)
{
    // 1D04E 0021;	
    // (ùÅé) BYZANTINE MUSICAL SYMBOL KENTIMATA NEO ANO	[103C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04E, 0x0021 };
    uint32_t const ces[9] = { 0x103C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_255)
{
    // 1D04E 003F;	
    // (ùÅé) BYZANTINE MUSICAL SYMBOL KENTIMATA NEO ANO	[103C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04E, 0x003F };
    uint32_t const ces[9] = { 0x103C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_256)
{
    // 1D04E 0061;	
    // (ùÅé) BYZANTINE MUSICAL SYMBOL KENTIMATA NEO ANO	[103C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04E, 0x0061 };
    uint32_t const ces[9] = { 0x103C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_257)
{
    // 1D04E 0041;	
    // (ùÅé) BYZANTINE MUSICAL SYMBOL KENTIMATA NEO ANO	[103C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D04E, 0x0041 };
    uint32_t const ces[9] = { 0x103C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_258)
{
    // 1D04E 0062;	
    // (ùÅé) BYZANTINE MUSICAL SYMBOL KENTIMATA NEO ANO	[103C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04E, 0x0062 };
    uint32_t const ces[9] = { 0x103C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_259)
{
    // 1D04F 0021;	
    // (ùÅè) BYZANTINE MUSICAL SYMBOL KENTIMA NEO ANO	[103D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04F, 0x0021 };
    uint32_t const ces[9] = { 0x103D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_260)
{
    // 1D04F 003F;	
    // (ùÅè) BYZANTINE MUSICAL SYMBOL KENTIMA NEO ANO	[103D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04F, 0x003F };
    uint32_t const ces[9] = { 0x103D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_261)
{
    // 1D04F 0061;	
    // (ùÅè) BYZANTINE MUSICAL SYMBOL KENTIMA NEO ANO	[103D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04F, 0x0061 };
    uint32_t const ces[9] = { 0x103D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_262)
{
    // 1D04F 0041;	
    // (ùÅè) BYZANTINE MUSICAL SYMBOL KENTIMA NEO ANO	[103D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D04F, 0x0041 };
    uint32_t const ces[9] = { 0x103D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_263)
{
    // 1D04F 0062;	
    // (ùÅè) BYZANTINE MUSICAL SYMBOL KENTIMA NEO ANO	[103D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D04F, 0x0062 };
    uint32_t const ces[9] = { 0x103D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_264)
{
    // 1D050 0021;	
    // (ùÅê) BYZANTINE MUSICAL SYMBOL YPSILI	[103E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D050, 0x0021 };
    uint32_t const ces[9] = { 0x103E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_265)
{
    // 1D050 003F;	
    // (ùÅê) BYZANTINE MUSICAL SYMBOL YPSILI	[103E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D050, 0x003F };
    uint32_t const ces[9] = { 0x103E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_266)
{
    // 1D050 0061;	
    // (ùÅê) BYZANTINE MUSICAL SYMBOL YPSILI	[103E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D050, 0x0061 };
    uint32_t const ces[9] = { 0x103E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_267)
{
    // 1D050 0041;	
    // (ùÅê) BYZANTINE MUSICAL SYMBOL YPSILI	[103E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D050, 0x0041 };
    uint32_t const ces[9] = { 0x103E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_268)
{
    // 1D050 0062;	
    // (ùÅê) BYZANTINE MUSICAL SYMBOL YPSILI	[103E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D050, 0x0062 };
    uint32_t const ces[9] = { 0x103E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_269)
{
    // 1D051 0021;	
    // (ùÅë) BYZANTINE MUSICAL SYMBOL APOSTROFOS NEO	[103F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D051, 0x0021 };
    uint32_t const ces[9] = { 0x103F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_270)
{
    // 1D051 003F;	
    // (ùÅë) BYZANTINE MUSICAL SYMBOL APOSTROFOS NEO	[103F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D051, 0x003F };
    uint32_t const ces[9] = { 0x103F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_271)
{
    // 1D051 0061;	
    // (ùÅë) BYZANTINE MUSICAL SYMBOL APOSTROFOS NEO	[103F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D051, 0x0061 };
    uint32_t const ces[9] = { 0x103F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_272)
{
    // 1D051 0041;	
    // (ùÅë) BYZANTINE MUSICAL SYMBOL APOSTROFOS NEO	[103F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D051, 0x0041 };
    uint32_t const ces[9] = { 0x103F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_273)
{
    // 1D051 0062;	
    // (ùÅë) BYZANTINE MUSICAL SYMBOL APOSTROFOS NEO	[103F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D051, 0x0062 };
    uint32_t const ces[9] = { 0x103F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_274)
{
    // 1D052 0021;	
    // (ùÅí) BYZANTINE MUSICAL SYMBOL APOSTROFOI SYNDESMOS NEO	[1040 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D052, 0x0021 };
    uint32_t const ces[9] = { 0x1040, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_275)
{
    // 1D052 003F;	
    // (ùÅí) BYZANTINE MUSICAL SYMBOL APOSTROFOI SYNDESMOS NEO	[1040 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D052, 0x003F };
    uint32_t const ces[9] = { 0x1040, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_276)
{
    // 1D052 0061;	
    // (ùÅí) BYZANTINE MUSICAL SYMBOL APOSTROFOI SYNDESMOS NEO	[1040 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D052, 0x0061 };
    uint32_t const ces[9] = { 0x1040, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_277)
{
    // 1D052 0041;	
    // (ùÅí) BYZANTINE MUSICAL SYMBOL APOSTROFOI SYNDESMOS NEO	[1040 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D052, 0x0041 };
    uint32_t const ces[9] = { 0x1040, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_278)
{
    // 1D052 0062;	
    // (ùÅí) BYZANTINE MUSICAL SYMBOL APOSTROFOI SYNDESMOS NEO	[1040 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D052, 0x0062 };
    uint32_t const ces[9] = { 0x1040, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_279)
{
    // 1D053 0021;	
    // (ùÅì) BYZANTINE MUSICAL SYMBOL YPORROI	[1041 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D053, 0x0021 };
    uint32_t const ces[9] = { 0x1041, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_280)
{
    // 1D053 003F;	
    // (ùÅì) BYZANTINE MUSICAL SYMBOL YPORROI	[1041 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D053, 0x003F };
    uint32_t const ces[9] = { 0x1041, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_281)
{
    // 1D053 0061;	
    // (ùÅì) BYZANTINE MUSICAL SYMBOL YPORROI	[1041 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D053, 0x0061 };
    uint32_t const ces[9] = { 0x1041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_282)
{
    // 1D053 0041;	
    // (ùÅì) BYZANTINE MUSICAL SYMBOL YPORROI	[1041 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D053, 0x0041 };
    uint32_t const ces[9] = { 0x1041, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_283)
{
    // 1D053 0062;	
    // (ùÅì) BYZANTINE MUSICAL SYMBOL YPORROI	[1041 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D053, 0x0062 };
    uint32_t const ces[9] = { 0x1041, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_284)
{
    // 1D054 0021;	
    // (ùÅî) BYZANTINE MUSICAL SYMBOL KRATIMOYPORROON	[1042 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D054, 0x0021 };
    uint32_t const ces[9] = { 0x1042, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_285)
{
    // 1D054 003F;	
    // (ùÅî) BYZANTINE MUSICAL SYMBOL KRATIMOYPORROON	[1042 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D054, 0x003F };
    uint32_t const ces[9] = { 0x1042, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_286)
{
    // 1D054 0061;	
    // (ùÅî) BYZANTINE MUSICAL SYMBOL KRATIMOYPORROON	[1042 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D054, 0x0061 };
    uint32_t const ces[9] = { 0x1042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_287)
{
    // 1D054 0041;	
    // (ùÅî) BYZANTINE MUSICAL SYMBOL KRATIMOYPORROON	[1042 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D054, 0x0041 };
    uint32_t const ces[9] = { 0x1042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_288)
{
    // 1D054 0062;	
    // (ùÅî) BYZANTINE MUSICAL SYMBOL KRATIMOYPORROON	[1042 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D054, 0x0062 };
    uint32_t const ces[9] = { 0x1042, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_289)
{
    // 1D055 0021;	
    // (ùÅï) BYZANTINE MUSICAL SYMBOL ELAFRON	[1043 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D055, 0x0021 };
    uint32_t const ces[9] = { 0x1043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_290)
{
    // 1D055 003F;	
    // (ùÅï) BYZANTINE MUSICAL SYMBOL ELAFRON	[1043 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D055, 0x003F };
    uint32_t const ces[9] = { 0x1043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_291)
{
    // 1D055 0061;	
    // (ùÅï) BYZANTINE MUSICAL SYMBOL ELAFRON	[1043 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D055, 0x0061 };
    uint32_t const ces[9] = { 0x1043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_292)
{
    // 1D055 0041;	
    // (ùÅï) BYZANTINE MUSICAL SYMBOL ELAFRON	[1043 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D055, 0x0041 };
    uint32_t const ces[9] = { 0x1043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_293)
{
    // 1D055 0062;	
    // (ùÅï) BYZANTINE MUSICAL SYMBOL ELAFRON	[1043 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D055, 0x0062 };
    uint32_t const ces[9] = { 0x1043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_294)
{
    // 1D056 0021;	
    // (ùÅñ) BYZANTINE MUSICAL SYMBOL CHAMILI	[1044 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D056, 0x0021 };
    uint32_t const ces[9] = { 0x1044, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_295)
{
    // 1D056 003F;	
    // (ùÅñ) BYZANTINE MUSICAL SYMBOL CHAMILI	[1044 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D056, 0x003F };
    uint32_t const ces[9] = { 0x1044, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_296)
{
    // 1D056 0061;	
    // (ùÅñ) BYZANTINE MUSICAL SYMBOL CHAMILI	[1044 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D056, 0x0061 };
    uint32_t const ces[9] = { 0x1044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_297)
{
    // 1D056 0041;	
    // (ùÅñ) BYZANTINE MUSICAL SYMBOL CHAMILI	[1044 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D056, 0x0041 };
    uint32_t const ces[9] = { 0x1044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_298)
{
    // 1D056 0062;	
    // (ùÅñ) BYZANTINE MUSICAL SYMBOL CHAMILI	[1044 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D056, 0x0062 };
    uint32_t const ces[9] = { 0x1044, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_299)
{
    // 1D057 0021;	
    // (ùÅó) BYZANTINE MUSICAL SYMBOL MIKRON ISON	[1045 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D057, 0x0021 };
    uint32_t const ces[9] = { 0x1045, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_300)
{
    // 1D057 003F;	
    // (ùÅó) BYZANTINE MUSICAL SYMBOL MIKRON ISON	[1045 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D057, 0x003F };
    uint32_t const ces[9] = { 0x1045, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_301)
{
    // 1D057 0061;	
    // (ùÅó) BYZANTINE MUSICAL SYMBOL MIKRON ISON	[1045 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D057, 0x0061 };
    uint32_t const ces[9] = { 0x1045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_302)
{
    // 1D057 0041;	
    // (ùÅó) BYZANTINE MUSICAL SYMBOL MIKRON ISON	[1045 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D057, 0x0041 };
    uint32_t const ces[9] = { 0x1045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_303)
{
    // 1D057 0062;	
    // (ùÅó) BYZANTINE MUSICAL SYMBOL MIKRON ISON	[1045 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D057, 0x0062 };
    uint32_t const ces[9] = { 0x1045, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_304)
{
    // 1D058 0021;	
    // (ùÅò) BYZANTINE MUSICAL SYMBOL VAREIA NEO	[1046 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D058, 0x0021 };
    uint32_t const ces[9] = { 0x1046, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_305)
{
    // 1D058 003F;	
    // (ùÅò) BYZANTINE MUSICAL SYMBOL VAREIA NEO	[1046 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D058, 0x003F };
    uint32_t const ces[9] = { 0x1046, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_306)
{
    // 1D058 0061;	
    // (ùÅò) BYZANTINE MUSICAL SYMBOL VAREIA NEO	[1046 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D058, 0x0061 };
    uint32_t const ces[9] = { 0x1046, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_307)
{
    // 1D058 0041;	
    // (ùÅò) BYZANTINE MUSICAL SYMBOL VAREIA NEO	[1046 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D058, 0x0041 };
    uint32_t const ces[9] = { 0x1046, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_308)
{
    // 1D058 0062;	
    // (ùÅò) BYZANTINE MUSICAL SYMBOL VAREIA NEO	[1046 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D058, 0x0062 };
    uint32_t const ces[9] = { 0x1046, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_309)
{
    // 1D059 0021;	
    // (ùÅô) BYZANTINE MUSICAL SYMBOL PIASMA NEO	[1047 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D059, 0x0021 };
    uint32_t const ces[9] = { 0x1047, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_310)
{
    // 1D059 003F;	
    // (ùÅô) BYZANTINE MUSICAL SYMBOL PIASMA NEO	[1047 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D059, 0x003F };
    uint32_t const ces[9] = { 0x1047, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_311)
{
    // 1D059 0061;	
    // (ùÅô) BYZANTINE MUSICAL SYMBOL PIASMA NEO	[1047 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D059, 0x0061 };
    uint32_t const ces[9] = { 0x1047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_312)
{
    // 1D059 0041;	
    // (ùÅô) BYZANTINE MUSICAL SYMBOL PIASMA NEO	[1047 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D059, 0x0041 };
    uint32_t const ces[9] = { 0x1047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_313)
{
    // 1D059 0062;	
    // (ùÅô) BYZANTINE MUSICAL SYMBOL PIASMA NEO	[1047 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D059, 0x0062 };
    uint32_t const ces[9] = { 0x1047, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_314)
{
    // 1D05A 0021;	
    // (ùÅö) BYZANTINE MUSICAL SYMBOL PSIFISTON NEO	[1048 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05A, 0x0021 };
    uint32_t const ces[9] = { 0x1048, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_315)
{
    // 1D05A 003F;	
    // (ùÅö) BYZANTINE MUSICAL SYMBOL PSIFISTON NEO	[1048 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05A, 0x003F };
    uint32_t const ces[9] = { 0x1048, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_316)
{
    // 1D05A 0061;	
    // (ùÅö) BYZANTINE MUSICAL SYMBOL PSIFISTON NEO	[1048 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05A, 0x0061 };
    uint32_t const ces[9] = { 0x1048, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_317)
{
    // 1D05A 0041;	
    // (ùÅö) BYZANTINE MUSICAL SYMBOL PSIFISTON NEO	[1048 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D05A, 0x0041 };
    uint32_t const ces[9] = { 0x1048, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_318)
{
    // 1D05A 0062;	
    // (ùÅö) BYZANTINE MUSICAL SYMBOL PSIFISTON NEO	[1048 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05A, 0x0062 };
    uint32_t const ces[9] = { 0x1048, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_319)
{
    // 1D05B 0021;	
    // (ùÅõ) BYZANTINE MUSICAL SYMBOL OMALON	[1049 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05B, 0x0021 };
    uint32_t const ces[9] = { 0x1049, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_320)
{
    // 1D05B 003F;	
    // (ùÅõ) BYZANTINE MUSICAL SYMBOL OMALON	[1049 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05B, 0x003F };
    uint32_t const ces[9] = { 0x1049, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_321)
{
    // 1D05B 0061;	
    // (ùÅõ) BYZANTINE MUSICAL SYMBOL OMALON	[1049 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05B, 0x0061 };
    uint32_t const ces[9] = { 0x1049, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_322)
{
    // 1D05B 0041;	
    // (ùÅõ) BYZANTINE MUSICAL SYMBOL OMALON	[1049 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D05B, 0x0041 };
    uint32_t const ces[9] = { 0x1049, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_323)
{
    // 1D05B 0062;	
    // (ùÅõ) BYZANTINE MUSICAL SYMBOL OMALON	[1049 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05B, 0x0062 };
    uint32_t const ces[9] = { 0x1049, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_324)
{
    // 1D05C 0021;	
    // (ùÅú) BYZANTINE MUSICAL SYMBOL ANTIKENOMA	[104A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05C, 0x0021 };
    uint32_t const ces[9] = { 0x104A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_325)
{
    // 1D05C 003F;	
    // (ùÅú) BYZANTINE MUSICAL SYMBOL ANTIKENOMA	[104A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05C, 0x003F };
    uint32_t const ces[9] = { 0x104A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_326)
{
    // 1D05C 0061;	
    // (ùÅú) BYZANTINE MUSICAL SYMBOL ANTIKENOMA	[104A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05C, 0x0061 };
    uint32_t const ces[9] = { 0x104A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_327)
{
    // 1D05C 0041;	
    // (ùÅú) BYZANTINE MUSICAL SYMBOL ANTIKENOMA	[104A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D05C, 0x0041 };
    uint32_t const ces[9] = { 0x104A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_328)
{
    // 1D05C 0062;	
    // (ùÅú) BYZANTINE MUSICAL SYMBOL ANTIKENOMA	[104A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05C, 0x0062 };
    uint32_t const ces[9] = { 0x104A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_329)
{
    // 1D05D 0021;	
    // (ùÅù) BYZANTINE MUSICAL SYMBOL LYGISMA	[104B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05D, 0x0021 };
    uint32_t const ces[9] = { 0x104B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_330)
{
    // 1D05D 003F;	
    // (ùÅù) BYZANTINE MUSICAL SYMBOL LYGISMA	[104B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05D, 0x003F };
    uint32_t const ces[9] = { 0x104B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_331)
{
    // 1D05D 0061;	
    // (ùÅù) BYZANTINE MUSICAL SYMBOL LYGISMA	[104B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05D, 0x0061 };
    uint32_t const ces[9] = { 0x104B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_332)
{
    // 1D05D 0041;	
    // (ùÅù) BYZANTINE MUSICAL SYMBOL LYGISMA	[104B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D05D, 0x0041 };
    uint32_t const ces[9] = { 0x104B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_333)
{
    // 1D05D 0062;	
    // (ùÅù) BYZANTINE MUSICAL SYMBOL LYGISMA	[104B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05D, 0x0062 };
    uint32_t const ces[9] = { 0x104B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_334)
{
    // 1D05E 0021;	
    // (ùÅû) BYZANTINE MUSICAL SYMBOL PARAKLITIKI NEO	[104C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05E, 0x0021 };
    uint32_t const ces[9] = { 0x104C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_335)
{
    // 1D05E 003F;	
    // (ùÅû) BYZANTINE MUSICAL SYMBOL PARAKLITIKI NEO	[104C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05E, 0x003F };
    uint32_t const ces[9] = { 0x104C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_336)
{
    // 1D05E 0061;	
    // (ùÅû) BYZANTINE MUSICAL SYMBOL PARAKLITIKI NEO	[104C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05E, 0x0061 };
    uint32_t const ces[9] = { 0x104C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_337)
{
    // 1D05E 0041;	
    // (ùÅû) BYZANTINE MUSICAL SYMBOL PARAKLITIKI NEO	[104C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D05E, 0x0041 };
    uint32_t const ces[9] = { 0x104C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_338)
{
    // 1D05E 0062;	
    // (ùÅû) BYZANTINE MUSICAL SYMBOL PARAKLITIKI NEO	[104C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05E, 0x0062 };
    uint32_t const ces[9] = { 0x104C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_339)
{
    // 1D05F 0021;	
    // (ùÅü) BYZANTINE MUSICAL SYMBOL PARAKALESMA NEO	[104D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05F, 0x0021 };
    uint32_t const ces[9] = { 0x104D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_340)
{
    // 1D05F 003F;	
    // (ùÅü) BYZANTINE MUSICAL SYMBOL PARAKALESMA NEO	[104D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05F, 0x003F };
    uint32_t const ces[9] = { 0x104D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_341)
{
    // 1D05F 0061;	
    // (ùÅü) BYZANTINE MUSICAL SYMBOL PARAKALESMA NEO	[104D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05F, 0x0061 };
    uint32_t const ces[9] = { 0x104D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_342)
{
    // 1D05F 0041;	
    // (ùÅü) BYZANTINE MUSICAL SYMBOL PARAKALESMA NEO	[104D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D05F, 0x0041 };
    uint32_t const ces[9] = { 0x104D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_343)
{
    // 1D05F 0062;	
    // (ùÅü) BYZANTINE MUSICAL SYMBOL PARAKALESMA NEO	[104D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D05F, 0x0062 };
    uint32_t const ces[9] = { 0x104D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_344)
{
    // 1D060 0021;	
    // (ùÅ†) BYZANTINE MUSICAL SYMBOL ETERON PARAKALESMA	[104E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D060, 0x0021 };
    uint32_t const ces[9] = { 0x104E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_345)
{
    // 1D060 003F;	
    // (ùÅ†) BYZANTINE MUSICAL SYMBOL ETERON PARAKALESMA	[104E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D060, 0x003F };
    uint32_t const ces[9] = { 0x104E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_346)
{
    // 1D060 0061;	
    // (ùÅ†) BYZANTINE MUSICAL SYMBOL ETERON PARAKALESMA	[104E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D060, 0x0061 };
    uint32_t const ces[9] = { 0x104E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_347)
{
    // 1D060 0041;	
    // (ùÅ†) BYZANTINE MUSICAL SYMBOL ETERON PARAKALESMA	[104E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D060, 0x0041 };
    uint32_t const ces[9] = { 0x104E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_348)
{
    // 1D060 0062;	
    // (ùÅ†) BYZANTINE MUSICAL SYMBOL ETERON PARAKALESMA	[104E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D060, 0x0062 };
    uint32_t const ces[9] = { 0x104E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_349)
{
    // 1D061 0021;	
    // (ùÅ°) BYZANTINE MUSICAL SYMBOL KYLISMA	[104F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D061, 0x0021 };
    uint32_t const ces[9] = { 0x104F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_350)
{
    // 1D061 003F;	
    // (ùÅ°) BYZANTINE MUSICAL SYMBOL KYLISMA	[104F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D061, 0x003F };
    uint32_t const ces[9] = { 0x104F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_351)
{
    // 1D061 0061;	
    // (ùÅ°) BYZANTINE MUSICAL SYMBOL KYLISMA	[104F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D061, 0x0061 };
    uint32_t const ces[9] = { 0x104F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_352)
{
    // 1D061 0041;	
    // (ùÅ°) BYZANTINE MUSICAL SYMBOL KYLISMA	[104F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D061, 0x0041 };
    uint32_t const ces[9] = { 0x104F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_353)
{
    // 1D061 0062;	
    // (ùÅ°) BYZANTINE MUSICAL SYMBOL KYLISMA	[104F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D061, 0x0062 };
    uint32_t const ces[9] = { 0x104F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_354)
{
    // 1D062 0021;	
    // (ùÅ¢) BYZANTINE MUSICAL SYMBOL ANTIKENOKYLISMA	[1050 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D062, 0x0021 };
    uint32_t const ces[9] = { 0x1050, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_355)
{
    // 1D062 003F;	
    // (ùÅ¢) BYZANTINE MUSICAL SYMBOL ANTIKENOKYLISMA	[1050 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D062, 0x003F };
    uint32_t const ces[9] = { 0x1050, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_356)
{
    // 1D062 0061;	
    // (ùÅ¢) BYZANTINE MUSICAL SYMBOL ANTIKENOKYLISMA	[1050 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D062, 0x0061 };
    uint32_t const ces[9] = { 0x1050, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_357)
{
    // 1D062 0041;	
    // (ùÅ¢) BYZANTINE MUSICAL SYMBOL ANTIKENOKYLISMA	[1050 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D062, 0x0041 };
    uint32_t const ces[9] = { 0x1050, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_358)
{
    // 1D062 0062;	
    // (ùÅ¢) BYZANTINE MUSICAL SYMBOL ANTIKENOKYLISMA	[1050 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D062, 0x0062 };
    uint32_t const ces[9] = { 0x1050, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_359)
{
    // 1D063 0021;	
    // (ùÅ£) BYZANTINE MUSICAL SYMBOL TROMIKON NEO	[1051 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D063, 0x0021 };
    uint32_t const ces[9] = { 0x1051, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_360)
{
    // 1D063 003F;	
    // (ùÅ£) BYZANTINE MUSICAL SYMBOL TROMIKON NEO	[1051 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D063, 0x003F };
    uint32_t const ces[9] = { 0x1051, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_361)
{
    // 1D063 0061;	
    // (ùÅ£) BYZANTINE MUSICAL SYMBOL TROMIKON NEO	[1051 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D063, 0x0061 };
    uint32_t const ces[9] = { 0x1051, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_362)
{
    // 1D063 0041;	
    // (ùÅ£) BYZANTINE MUSICAL SYMBOL TROMIKON NEO	[1051 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D063, 0x0041 };
    uint32_t const ces[9] = { 0x1051, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_363)
{
    // 1D063 0062;	
    // (ùÅ£) BYZANTINE MUSICAL SYMBOL TROMIKON NEO	[1051 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D063, 0x0062 };
    uint32_t const ces[9] = { 0x1051, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_364)
{
    // 1D064 0021;	
    // (ùÅ§) BYZANTINE MUSICAL SYMBOL EKSTREPTON	[1052 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D064, 0x0021 };
    uint32_t const ces[9] = { 0x1052, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_365)
{
    // 1D064 003F;	
    // (ùÅ§) BYZANTINE MUSICAL SYMBOL EKSTREPTON	[1052 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D064, 0x003F };
    uint32_t const ces[9] = { 0x1052, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_366)
{
    // 1D064 0061;	
    // (ùÅ§) BYZANTINE MUSICAL SYMBOL EKSTREPTON	[1052 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D064, 0x0061 };
    uint32_t const ces[9] = { 0x1052, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_367)
{
    // 1D064 0041;	
    // (ùÅ§) BYZANTINE MUSICAL SYMBOL EKSTREPTON	[1052 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D064, 0x0041 };
    uint32_t const ces[9] = { 0x1052, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_368)
{
    // 1D064 0062;	
    // (ùÅ§) BYZANTINE MUSICAL SYMBOL EKSTREPTON	[1052 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D064, 0x0062 };
    uint32_t const ces[9] = { 0x1052, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_369)
{
    // 1D065 0021;	
    // (ùÅ•) BYZANTINE MUSICAL SYMBOL SYNAGMA NEO	[1053 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D065, 0x0021 };
    uint32_t const ces[9] = { 0x1053, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_370)
{
    // 1D065 003F;	
    // (ùÅ•) BYZANTINE MUSICAL SYMBOL SYNAGMA NEO	[1053 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D065, 0x003F };
    uint32_t const ces[9] = { 0x1053, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_371)
{
    // 1D065 0061;	
    // (ùÅ•) BYZANTINE MUSICAL SYMBOL SYNAGMA NEO	[1053 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D065, 0x0061 };
    uint32_t const ces[9] = { 0x1053, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_372)
{
    // 1D065 0041;	
    // (ùÅ•) BYZANTINE MUSICAL SYMBOL SYNAGMA NEO	[1053 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D065, 0x0041 };
    uint32_t const ces[9] = { 0x1053, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_373)
{
    // 1D065 0062;	
    // (ùÅ•) BYZANTINE MUSICAL SYMBOL SYNAGMA NEO	[1053 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D065, 0x0062 };
    uint32_t const ces[9] = { 0x1053, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_374)
{
    // 1D066 0021;	
    // (ùÅ¶) BYZANTINE MUSICAL SYMBOL SYRMA	[1054 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D066, 0x0021 };
    uint32_t const ces[9] = { 0x1054, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_375)
{
    // 1D066 003F;	
    // (ùÅ¶) BYZANTINE MUSICAL SYMBOL SYRMA	[1054 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D066, 0x003F };
    uint32_t const ces[9] = { 0x1054, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_376)
{
    // 1D066 0061;	
    // (ùÅ¶) BYZANTINE MUSICAL SYMBOL SYRMA	[1054 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D066, 0x0061 };
    uint32_t const ces[9] = { 0x1054, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_377)
{
    // 1D066 0041;	
    // (ùÅ¶) BYZANTINE MUSICAL SYMBOL SYRMA	[1054 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D066, 0x0041 };
    uint32_t const ces[9] = { 0x1054, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_378)
{
    // 1D066 0062;	
    // (ùÅ¶) BYZANTINE MUSICAL SYMBOL SYRMA	[1054 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D066, 0x0062 };
    uint32_t const ces[9] = { 0x1054, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_379)
{
    // 1D067 0021;	
    // (ùÅß) BYZANTINE MUSICAL SYMBOL CHOREVMA NEO	[1055 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D067, 0x0021 };
    uint32_t const ces[9] = { 0x1055, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_380)
{
    // 1D067 003F;	
    // (ùÅß) BYZANTINE MUSICAL SYMBOL CHOREVMA NEO	[1055 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D067, 0x003F };
    uint32_t const ces[9] = { 0x1055, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_381)
{
    // 1D067 0061;	
    // (ùÅß) BYZANTINE MUSICAL SYMBOL CHOREVMA NEO	[1055 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D067, 0x0061 };
    uint32_t const ces[9] = { 0x1055, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_382)
{
    // 1D067 0041;	
    // (ùÅß) BYZANTINE MUSICAL SYMBOL CHOREVMA NEO	[1055 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D067, 0x0041 };
    uint32_t const ces[9] = { 0x1055, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_383)
{
    // 1D067 0062;	
    // (ùÅß) BYZANTINE MUSICAL SYMBOL CHOREVMA NEO	[1055 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D067, 0x0062 };
    uint32_t const ces[9] = { 0x1055, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_384)
{
    // 1D068 0021;	
    // (ùÅ®) BYZANTINE MUSICAL SYMBOL EPEGERMA	[1056 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D068, 0x0021 };
    uint32_t const ces[9] = { 0x1056, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_385)
{
    // 1D068 003F;	
    // (ùÅ®) BYZANTINE MUSICAL SYMBOL EPEGERMA	[1056 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D068, 0x003F };
    uint32_t const ces[9] = { 0x1056, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_386)
{
    // 1D068 0061;	
    // (ùÅ®) BYZANTINE MUSICAL SYMBOL EPEGERMA	[1056 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D068, 0x0061 };
    uint32_t const ces[9] = { 0x1056, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_387)
{
    // 1D068 0041;	
    // (ùÅ®) BYZANTINE MUSICAL SYMBOL EPEGERMA	[1056 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D068, 0x0041 };
    uint32_t const ces[9] = { 0x1056, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_388)
{
    // 1D068 0062;	
    // (ùÅ®) BYZANTINE MUSICAL SYMBOL EPEGERMA	[1056 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D068, 0x0062 };
    uint32_t const ces[9] = { 0x1056, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_389)
{
    // 1D069 0021;	
    // (ùÅ©) BYZANTINE MUSICAL SYMBOL SEISMA NEO	[1057 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D069, 0x0021 };
    uint32_t const ces[9] = { 0x1057, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_390)
{
    // 1D069 003F;	
    // (ùÅ©) BYZANTINE MUSICAL SYMBOL SEISMA NEO	[1057 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D069, 0x003F };
    uint32_t const ces[9] = { 0x1057, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_391)
{
    // 1D069 0061;	
    // (ùÅ©) BYZANTINE MUSICAL SYMBOL SEISMA NEO	[1057 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D069, 0x0061 };
    uint32_t const ces[9] = { 0x1057, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_392)
{
    // 1D069 0041;	
    // (ùÅ©) BYZANTINE MUSICAL SYMBOL SEISMA NEO	[1057 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D069, 0x0041 };
    uint32_t const ces[9] = { 0x1057, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_393)
{
    // 1D069 0062;	
    // (ùÅ©) BYZANTINE MUSICAL SYMBOL SEISMA NEO	[1057 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D069, 0x0062 };
    uint32_t const ces[9] = { 0x1057, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_394)
{
    // 1D06A 0021;	
    // (ùÅ™) BYZANTINE MUSICAL SYMBOL XIRON KLASMA	[1058 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06A, 0x0021 };
    uint32_t const ces[9] = { 0x1058, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_395)
{
    // 1D06A 003F;	
    // (ùÅ™) BYZANTINE MUSICAL SYMBOL XIRON KLASMA	[1058 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06A, 0x003F };
    uint32_t const ces[9] = { 0x1058, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_396)
{
    // 1D06A 0061;	
    // (ùÅ™) BYZANTINE MUSICAL SYMBOL XIRON KLASMA	[1058 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06A, 0x0061 };
    uint32_t const ces[9] = { 0x1058, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_397)
{
    // 1D06A 0041;	
    // (ùÅ™) BYZANTINE MUSICAL SYMBOL XIRON KLASMA	[1058 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D06A, 0x0041 };
    uint32_t const ces[9] = { 0x1058, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_398)
{
    // 1D06A 0062;	
    // (ùÅ™) BYZANTINE MUSICAL SYMBOL XIRON KLASMA	[1058 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06A, 0x0062 };
    uint32_t const ces[9] = { 0x1058, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_399)
{
    // 1D06B 0021;	
    // (ùÅ´) BYZANTINE MUSICAL SYMBOL TROMIKOPSIFISTON	[1059 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06B, 0x0021 };
    uint32_t const ces[9] = { 0x1059, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_400)
{
    // 1D06B 003F;	
    // (ùÅ´) BYZANTINE MUSICAL SYMBOL TROMIKOPSIFISTON	[1059 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06B, 0x003F };
    uint32_t const ces[9] = { 0x1059, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_401)
{
    // 1D06B 0061;	
    // (ùÅ´) BYZANTINE MUSICAL SYMBOL TROMIKOPSIFISTON	[1059 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06B, 0x0061 };
    uint32_t const ces[9] = { 0x1059, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_402)
{
    // 1D06B 0041;	
    // (ùÅ´) BYZANTINE MUSICAL SYMBOL TROMIKOPSIFISTON	[1059 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D06B, 0x0041 };
    uint32_t const ces[9] = { 0x1059, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_403)
{
    // 1D06B 0062;	
    // (ùÅ´) BYZANTINE MUSICAL SYMBOL TROMIKOPSIFISTON	[1059 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06B, 0x0062 };
    uint32_t const ces[9] = { 0x1059, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_404)
{
    // 1D06C 0021;	
    // (ùÅ¨) BYZANTINE MUSICAL SYMBOL PSIFISTOLYGISMA	[105A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06C, 0x0021 };
    uint32_t const ces[9] = { 0x105A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_405)
{
    // 1D06C 003F;	
    // (ùÅ¨) BYZANTINE MUSICAL SYMBOL PSIFISTOLYGISMA	[105A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06C, 0x003F };
    uint32_t const ces[9] = { 0x105A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_406)
{
    // 1D06C 0061;	
    // (ùÅ¨) BYZANTINE MUSICAL SYMBOL PSIFISTOLYGISMA	[105A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06C, 0x0061 };
    uint32_t const ces[9] = { 0x105A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_407)
{
    // 1D06C 0041;	
    // (ùÅ¨) BYZANTINE MUSICAL SYMBOL PSIFISTOLYGISMA	[105A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D06C, 0x0041 };
    uint32_t const ces[9] = { 0x105A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_408)
{
    // 1D06C 0062;	
    // (ùÅ¨) BYZANTINE MUSICAL SYMBOL PSIFISTOLYGISMA	[105A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06C, 0x0062 };
    uint32_t const ces[9] = { 0x105A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_409)
{
    // 1D06D 0021;	
    // (ùÅ≠) BYZANTINE MUSICAL SYMBOL TROMIKOLYGISMA	[105B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06D, 0x0021 };
    uint32_t const ces[9] = { 0x105B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_410)
{
    // 1D06D 003F;	
    // (ùÅ≠) BYZANTINE MUSICAL SYMBOL TROMIKOLYGISMA	[105B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06D, 0x003F };
    uint32_t const ces[9] = { 0x105B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_411)
{
    // 1D06D 0061;	
    // (ùÅ≠) BYZANTINE MUSICAL SYMBOL TROMIKOLYGISMA	[105B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06D, 0x0061 };
    uint32_t const ces[9] = { 0x105B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_412)
{
    // 1D06D 0041;	
    // (ùÅ≠) BYZANTINE MUSICAL SYMBOL TROMIKOLYGISMA	[105B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D06D, 0x0041 };
    uint32_t const ces[9] = { 0x105B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_413)
{
    // 1D06D 0062;	
    // (ùÅ≠) BYZANTINE MUSICAL SYMBOL TROMIKOLYGISMA	[105B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06D, 0x0062 };
    uint32_t const ces[9] = { 0x105B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_414)
{
    // 1D06E 0021;	
    // (ùÅÆ) BYZANTINE MUSICAL SYMBOL TROMIKOPARAKALESMA	[105C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06E, 0x0021 };
    uint32_t const ces[9] = { 0x105C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_415)
{
    // 1D06E 003F;	
    // (ùÅÆ) BYZANTINE MUSICAL SYMBOL TROMIKOPARAKALESMA	[105C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06E, 0x003F };
    uint32_t const ces[9] = { 0x105C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_416)
{
    // 1D06E 0061;	
    // (ùÅÆ) BYZANTINE MUSICAL SYMBOL TROMIKOPARAKALESMA	[105C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06E, 0x0061 };
    uint32_t const ces[9] = { 0x105C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_417)
{
    // 1D06E 0041;	
    // (ùÅÆ) BYZANTINE MUSICAL SYMBOL TROMIKOPARAKALESMA	[105C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D06E, 0x0041 };
    uint32_t const ces[9] = { 0x105C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_418)
{
    // 1D06E 0062;	
    // (ùÅÆ) BYZANTINE MUSICAL SYMBOL TROMIKOPARAKALESMA	[105C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06E, 0x0062 };
    uint32_t const ces[9] = { 0x105C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_419)
{
    // 1D06F 0021;	
    // (ùÅØ) BYZANTINE MUSICAL SYMBOL PSIFISTOPARAKALESMA	[105D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06F, 0x0021 };
    uint32_t const ces[9] = { 0x105D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_420)
{
    // 1D06F 003F;	
    // (ùÅØ) BYZANTINE MUSICAL SYMBOL PSIFISTOPARAKALESMA	[105D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06F, 0x003F };
    uint32_t const ces[9] = { 0x105D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_421)
{
    // 1D06F 0061;	
    // (ùÅØ) BYZANTINE MUSICAL SYMBOL PSIFISTOPARAKALESMA	[105D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06F, 0x0061 };
    uint32_t const ces[9] = { 0x105D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_422)
{
    // 1D06F 0041;	
    // (ùÅØ) BYZANTINE MUSICAL SYMBOL PSIFISTOPARAKALESMA	[105D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D06F, 0x0041 };
    uint32_t const ces[9] = { 0x105D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_423)
{
    // 1D06F 0062;	
    // (ùÅØ) BYZANTINE MUSICAL SYMBOL PSIFISTOPARAKALESMA	[105D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D06F, 0x0062 };
    uint32_t const ces[9] = { 0x105D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_424)
{
    // 1D070 0021;	
    // (ùÅ∞) BYZANTINE MUSICAL SYMBOL TROMIKOSYNAGMA	[105E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D070, 0x0021 };
    uint32_t const ces[9] = { 0x105E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_425)
{
    // 1D070 003F;	
    // (ùÅ∞) BYZANTINE MUSICAL SYMBOL TROMIKOSYNAGMA	[105E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D070, 0x003F };
    uint32_t const ces[9] = { 0x105E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_426)
{
    // 1D070 0061;	
    // (ùÅ∞) BYZANTINE MUSICAL SYMBOL TROMIKOSYNAGMA	[105E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D070, 0x0061 };
    uint32_t const ces[9] = { 0x105E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_427)
{
    // 1D070 0041;	
    // (ùÅ∞) BYZANTINE MUSICAL SYMBOL TROMIKOSYNAGMA	[105E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D070, 0x0041 };
    uint32_t const ces[9] = { 0x105E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_428)
{
    // 1D070 0062;	
    // (ùÅ∞) BYZANTINE MUSICAL SYMBOL TROMIKOSYNAGMA	[105E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D070, 0x0062 };
    uint32_t const ces[9] = { 0x105E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_429)
{
    // 1D071 0021;	
    // (ùÅ±) BYZANTINE MUSICAL SYMBOL PSIFISTOSYNAGMA	[105F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D071, 0x0021 };
    uint32_t const ces[9] = { 0x105F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_430)
{
    // 1D071 003F;	
    // (ùÅ±) BYZANTINE MUSICAL SYMBOL PSIFISTOSYNAGMA	[105F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D071, 0x003F };
    uint32_t const ces[9] = { 0x105F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_431)
{
    // 1D071 0061;	
    // (ùÅ±) BYZANTINE MUSICAL SYMBOL PSIFISTOSYNAGMA	[105F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D071, 0x0061 };
    uint32_t const ces[9] = { 0x105F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_432)
{
    // 1D071 0041;	
    // (ùÅ±) BYZANTINE MUSICAL SYMBOL PSIFISTOSYNAGMA	[105F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D071, 0x0041 };
    uint32_t const ces[9] = { 0x105F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_433)
{
    // 1D071 0062;	
    // (ùÅ±) BYZANTINE MUSICAL SYMBOL PSIFISTOSYNAGMA	[105F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D071, 0x0062 };
    uint32_t const ces[9] = { 0x105F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_434)
{
    // 1D072 0021;	
    // (ùÅ≤) BYZANTINE MUSICAL SYMBOL GORGOSYNTHETON	[1060 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D072, 0x0021 };
    uint32_t const ces[9] = { 0x1060, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_435)
{
    // 1D072 003F;	
    // (ùÅ≤) BYZANTINE MUSICAL SYMBOL GORGOSYNTHETON	[1060 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D072, 0x003F };
    uint32_t const ces[9] = { 0x1060, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_436)
{
    // 1D072 0061;	
    // (ùÅ≤) BYZANTINE MUSICAL SYMBOL GORGOSYNTHETON	[1060 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D072, 0x0061 };
    uint32_t const ces[9] = { 0x1060, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_437)
{
    // 1D072 0041;	
    // (ùÅ≤) BYZANTINE MUSICAL SYMBOL GORGOSYNTHETON	[1060 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D072, 0x0041 };
    uint32_t const ces[9] = { 0x1060, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_438)
{
    // 1D072 0062;	
    // (ùÅ≤) BYZANTINE MUSICAL SYMBOL GORGOSYNTHETON	[1060 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D072, 0x0062 };
    uint32_t const ces[9] = { 0x1060, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_439)
{
    // 1D073 0021;	
    // (ùÅ≥) BYZANTINE MUSICAL SYMBOL ARGOSYNTHETON	[1061 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D073, 0x0021 };
    uint32_t const ces[9] = { 0x1061, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_440)
{
    // 1D073 003F;	
    // (ùÅ≥) BYZANTINE MUSICAL SYMBOL ARGOSYNTHETON	[1061 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D073, 0x003F };
    uint32_t const ces[9] = { 0x1061, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_441)
{
    // 1D073 0061;	
    // (ùÅ≥) BYZANTINE MUSICAL SYMBOL ARGOSYNTHETON	[1061 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D073, 0x0061 };
    uint32_t const ces[9] = { 0x1061, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_442)
{
    // 1D073 0041;	
    // (ùÅ≥) BYZANTINE MUSICAL SYMBOL ARGOSYNTHETON	[1061 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D073, 0x0041 };
    uint32_t const ces[9] = { 0x1061, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_443)
{
    // 1D073 0062;	
    // (ùÅ≥) BYZANTINE MUSICAL SYMBOL ARGOSYNTHETON	[1061 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D073, 0x0062 };
    uint32_t const ces[9] = { 0x1061, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_444)
{
    // 1D074 0021;	
    // (ùÅ¥) BYZANTINE MUSICAL SYMBOL ETERON ARGOSYNTHETON	[1062 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D074, 0x0021 };
    uint32_t const ces[9] = { 0x1062, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_445)
{
    // 1D074 003F;	
    // (ùÅ¥) BYZANTINE MUSICAL SYMBOL ETERON ARGOSYNTHETON	[1062 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D074, 0x003F };
    uint32_t const ces[9] = { 0x1062, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_446)
{
    // 1D074 0061;	
    // (ùÅ¥) BYZANTINE MUSICAL SYMBOL ETERON ARGOSYNTHETON	[1062 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D074, 0x0061 };
    uint32_t const ces[9] = { 0x1062, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_447)
{
    // 1D074 0041;	
    // (ùÅ¥) BYZANTINE MUSICAL SYMBOL ETERON ARGOSYNTHETON	[1062 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D074, 0x0041 };
    uint32_t const ces[9] = { 0x1062, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_448)
{
    // 1D074 0062;	
    // (ùÅ¥) BYZANTINE MUSICAL SYMBOL ETERON ARGOSYNTHETON	[1062 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D074, 0x0062 };
    uint32_t const ces[9] = { 0x1062, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_449)
{
    // 1D075 0021;	
    // (ùÅµ) BYZANTINE MUSICAL SYMBOL OYRANISMA NEO	[1063 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D075, 0x0021 };
    uint32_t const ces[9] = { 0x1063, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_450)
{
    // 1D075 003F;	
    // (ùÅµ) BYZANTINE MUSICAL SYMBOL OYRANISMA NEO	[1063 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D075, 0x003F };
    uint32_t const ces[9] = { 0x1063, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_451)
{
    // 1D075 0061;	
    // (ùÅµ) BYZANTINE MUSICAL SYMBOL OYRANISMA NEO	[1063 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D075, 0x0061 };
    uint32_t const ces[9] = { 0x1063, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_452)
{
    // 1D075 0041;	
    // (ùÅµ) BYZANTINE MUSICAL SYMBOL OYRANISMA NEO	[1063 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D075, 0x0041 };
    uint32_t const ces[9] = { 0x1063, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_453)
{
    // 1D075 0062;	
    // (ùÅµ) BYZANTINE MUSICAL SYMBOL OYRANISMA NEO	[1063 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D075, 0x0062 };
    uint32_t const ces[9] = { 0x1063, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_454)
{
    // 1D076 0021;	
    // (ùÅ∂) BYZANTINE MUSICAL SYMBOL THEMATISMOS ESO	[1064 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D076, 0x0021 };
    uint32_t const ces[9] = { 0x1064, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_455)
{
    // 1D076 003F;	
    // (ùÅ∂) BYZANTINE MUSICAL SYMBOL THEMATISMOS ESO	[1064 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D076, 0x003F };
    uint32_t const ces[9] = { 0x1064, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_456)
{
    // 1D076 0061;	
    // (ùÅ∂) BYZANTINE MUSICAL SYMBOL THEMATISMOS ESO	[1064 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D076, 0x0061 };
    uint32_t const ces[9] = { 0x1064, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_457)
{
    // 1D076 0041;	
    // (ùÅ∂) BYZANTINE MUSICAL SYMBOL THEMATISMOS ESO	[1064 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D076, 0x0041 };
    uint32_t const ces[9] = { 0x1064, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_458)
{
    // 1D076 0062;	
    // (ùÅ∂) BYZANTINE MUSICAL SYMBOL THEMATISMOS ESO	[1064 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D076, 0x0062 };
    uint32_t const ces[9] = { 0x1064, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_459)
{
    // 1D077 0021;	
    // (ùÅ∑) BYZANTINE MUSICAL SYMBOL THEMATISMOS EXO	[1065 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D077, 0x0021 };
    uint32_t const ces[9] = { 0x1065, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_460)
{
    // 1D077 003F;	
    // (ùÅ∑) BYZANTINE MUSICAL SYMBOL THEMATISMOS EXO	[1065 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D077, 0x003F };
    uint32_t const ces[9] = { 0x1065, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_461)
{
    // 1D077 0061;	
    // (ùÅ∑) BYZANTINE MUSICAL SYMBOL THEMATISMOS EXO	[1065 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D077, 0x0061 };
    uint32_t const ces[9] = { 0x1065, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_462)
{
    // 1D077 0041;	
    // (ùÅ∑) BYZANTINE MUSICAL SYMBOL THEMATISMOS EXO	[1065 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D077, 0x0041 };
    uint32_t const ces[9] = { 0x1065, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_463)
{
    // 1D077 0062;	
    // (ùÅ∑) BYZANTINE MUSICAL SYMBOL THEMATISMOS EXO	[1065 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D077, 0x0062 };
    uint32_t const ces[9] = { 0x1065, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_464)
{
    // 1D078 0021;	
    // (ùÅ∏) BYZANTINE MUSICAL SYMBOL THEMA APLOUN	[1066 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D078, 0x0021 };
    uint32_t const ces[9] = { 0x1066, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_465)
{
    // 1D078 003F;	
    // (ùÅ∏) BYZANTINE MUSICAL SYMBOL THEMA APLOUN	[1066 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D078, 0x003F };
    uint32_t const ces[9] = { 0x1066, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_466)
{
    // 1D078 0061;	
    // (ùÅ∏) BYZANTINE MUSICAL SYMBOL THEMA APLOUN	[1066 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D078, 0x0061 };
    uint32_t const ces[9] = { 0x1066, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_467)
{
    // 1D078 0041;	
    // (ùÅ∏) BYZANTINE MUSICAL SYMBOL THEMA APLOUN	[1066 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D078, 0x0041 };
    uint32_t const ces[9] = { 0x1066, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_468)
{
    // 1D078 0062;	
    // (ùÅ∏) BYZANTINE MUSICAL SYMBOL THEMA APLOUN	[1066 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D078, 0x0062 };
    uint32_t const ces[9] = { 0x1066, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_469)
{
    // 1D079 0021;	
    // (ùÅπ) BYZANTINE MUSICAL SYMBOL THES KAI APOTHES	[1067 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D079, 0x0021 };
    uint32_t const ces[9] = { 0x1067, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_470)
{
    // 1D079 003F;	
    // (ùÅπ) BYZANTINE MUSICAL SYMBOL THES KAI APOTHES	[1067 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D079, 0x003F };
    uint32_t const ces[9] = { 0x1067, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_471)
{
    // 1D079 0061;	
    // (ùÅπ) BYZANTINE MUSICAL SYMBOL THES KAI APOTHES	[1067 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D079, 0x0061 };
    uint32_t const ces[9] = { 0x1067, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_472)
{
    // 1D079 0041;	
    // (ùÅπ) BYZANTINE MUSICAL SYMBOL THES KAI APOTHES	[1067 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D079, 0x0041 };
    uint32_t const ces[9] = { 0x1067, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_473)
{
    // 1D079 0062;	
    // (ùÅπ) BYZANTINE MUSICAL SYMBOL THES KAI APOTHES	[1067 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D079, 0x0062 };
    uint32_t const ces[9] = { 0x1067, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_474)
{
    // 1D07A 0021;	
    // (ùÅ∫) BYZANTINE MUSICAL SYMBOL KATAVASMA	[1068 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07A, 0x0021 };
    uint32_t const ces[9] = { 0x1068, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_475)
{
    // 1D07A 003F;	
    // (ùÅ∫) BYZANTINE MUSICAL SYMBOL KATAVASMA	[1068 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07A, 0x003F };
    uint32_t const ces[9] = { 0x1068, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_476)
{
    // 1D07A 0061;	
    // (ùÅ∫) BYZANTINE MUSICAL SYMBOL KATAVASMA	[1068 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07A, 0x0061 };
    uint32_t const ces[9] = { 0x1068, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_477)
{
    // 1D07A 0041;	
    // (ùÅ∫) BYZANTINE MUSICAL SYMBOL KATAVASMA	[1068 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D07A, 0x0041 };
    uint32_t const ces[9] = { 0x1068, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_478)
{
    // 1D07A 0062;	
    // (ùÅ∫) BYZANTINE MUSICAL SYMBOL KATAVASMA	[1068 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07A, 0x0062 };
    uint32_t const ces[9] = { 0x1068, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_479)
{
    // 1D07B 0021;	
    // (ùÅª) BYZANTINE MUSICAL SYMBOL ENDOFONON	[1069 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07B, 0x0021 };
    uint32_t const ces[9] = { 0x1069, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_480)
{
    // 1D07B 003F;	
    // (ùÅª) BYZANTINE MUSICAL SYMBOL ENDOFONON	[1069 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07B, 0x003F };
    uint32_t const ces[9] = { 0x1069, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_481)
{
    // 1D07B 0061;	
    // (ùÅª) BYZANTINE MUSICAL SYMBOL ENDOFONON	[1069 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07B, 0x0061 };
    uint32_t const ces[9] = { 0x1069, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_482)
{
    // 1D07B 0041;	
    // (ùÅª) BYZANTINE MUSICAL SYMBOL ENDOFONON	[1069 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D07B, 0x0041 };
    uint32_t const ces[9] = { 0x1069, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_483)
{
    // 1D07B 0062;	
    // (ùÅª) BYZANTINE MUSICAL SYMBOL ENDOFONON	[1069 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07B, 0x0062 };
    uint32_t const ces[9] = { 0x1069, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_484)
{
    // 1D07C 0021;	
    // (ùÅº) BYZANTINE MUSICAL SYMBOL YFEN KATO	[106A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07C, 0x0021 };
    uint32_t const ces[9] = { 0x106A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_485)
{
    // 1D07C 003F;	
    // (ùÅº) BYZANTINE MUSICAL SYMBOL YFEN KATO	[106A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07C, 0x003F };
    uint32_t const ces[9] = { 0x106A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_486)
{
    // 1D07C 0061;	
    // (ùÅº) BYZANTINE MUSICAL SYMBOL YFEN KATO	[106A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07C, 0x0061 };
    uint32_t const ces[9] = { 0x106A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_487)
{
    // 1D07C 0041;	
    // (ùÅº) BYZANTINE MUSICAL SYMBOL YFEN KATO	[106A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D07C, 0x0041 };
    uint32_t const ces[9] = { 0x106A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_488)
{
    // 1D07C 0062;	
    // (ùÅº) BYZANTINE MUSICAL SYMBOL YFEN KATO	[106A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07C, 0x0062 };
    uint32_t const ces[9] = { 0x106A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_489)
{
    // 1D07D 0021;	
    // (ùÅΩ) BYZANTINE MUSICAL SYMBOL YFEN ANO	[106B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07D, 0x0021 };
    uint32_t const ces[9] = { 0x106B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_490)
{
    // 1D07D 003F;	
    // (ùÅΩ) BYZANTINE MUSICAL SYMBOL YFEN ANO	[106B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07D, 0x003F };
    uint32_t const ces[9] = { 0x106B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_491)
{
    // 1D07D 0061;	
    // (ùÅΩ) BYZANTINE MUSICAL SYMBOL YFEN ANO	[106B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07D, 0x0061 };
    uint32_t const ces[9] = { 0x106B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_492)
{
    // 1D07D 0041;	
    // (ùÅΩ) BYZANTINE MUSICAL SYMBOL YFEN ANO	[106B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D07D, 0x0041 };
    uint32_t const ces[9] = { 0x106B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_493)
{
    // 1D07D 0062;	
    // (ùÅΩ) BYZANTINE MUSICAL SYMBOL YFEN ANO	[106B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07D, 0x0062 };
    uint32_t const ces[9] = { 0x106B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_494)
{
    // 1D07E 0021;	
    // (ùÅæ) BYZANTINE MUSICAL SYMBOL STAVROS	[106C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07E, 0x0021 };
    uint32_t const ces[9] = { 0x106C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_495)
{
    // 1D07E 003F;	
    // (ùÅæ) BYZANTINE MUSICAL SYMBOL STAVROS	[106C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07E, 0x003F };
    uint32_t const ces[9] = { 0x106C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_496)
{
    // 1D07E 0061;	
    // (ùÅæ) BYZANTINE MUSICAL SYMBOL STAVROS	[106C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07E, 0x0061 };
    uint32_t const ces[9] = { 0x106C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_497)
{
    // 1D07E 0041;	
    // (ùÅæ) BYZANTINE MUSICAL SYMBOL STAVROS	[106C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D07E, 0x0041 };
    uint32_t const ces[9] = { 0x106C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_498)
{
    // 1D07E 0062;	
    // (ùÅæ) BYZANTINE MUSICAL SYMBOL STAVROS	[106C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07E, 0x0062 };
    uint32_t const ces[9] = { 0x106C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_048_499)
{
    // 1D07F 0021;	
    // (ùÅø) BYZANTINE MUSICAL SYMBOL KLASMA ANO	[106D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07F, 0x0021 };
    uint32_t const ces[9] = { 0x106D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

