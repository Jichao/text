// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_041_000)
{
    // 2B6E 003F;	
    // (⭮) CLOCKWISE TRIANGLE-HEADED OPEN CIRCLE ARROW	[0D4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6E, 0x003F };
    uint32_t const ces[9] = { 0x0D4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_001)
{
    // 2B6E 0061;	
    // (⭮) CLOCKWISE TRIANGLE-HEADED OPEN CIRCLE ARROW	[0D4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6E, 0x0061 };
    uint32_t const ces[9] = { 0x0D4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_002)
{
    // 2B6E 0041;	
    // (⭮) CLOCKWISE TRIANGLE-HEADED OPEN CIRCLE ARROW	[0D4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B6E, 0x0041 };
    uint32_t const ces[9] = { 0x0D4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_003)
{
    // 2B6E 0062;	
    // (⭮) CLOCKWISE TRIANGLE-HEADED OPEN CIRCLE ARROW	[0D4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6E, 0x0062 };
    uint32_t const ces[9] = { 0x0D4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_004)
{
    // 2B6F 0021;	
    // (⭯) ANTICLOCKWISE TRIANGLE-HEADED OPEN CIRCLE ARROW	[0D4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6F, 0x0021 };
    uint32_t const ces[9] = { 0x0D4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_005)
{
    // 2B6F 003F;	
    // (⭯) ANTICLOCKWISE TRIANGLE-HEADED OPEN CIRCLE ARROW	[0D4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6F, 0x003F };
    uint32_t const ces[9] = { 0x0D4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_006)
{
    // 2B6F 0061;	
    // (⭯) ANTICLOCKWISE TRIANGLE-HEADED OPEN CIRCLE ARROW	[0D4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6F, 0x0061 };
    uint32_t const ces[9] = { 0x0D4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_007)
{
    // 2B6F 0041;	
    // (⭯) ANTICLOCKWISE TRIANGLE-HEADED OPEN CIRCLE ARROW	[0D4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B6F, 0x0041 };
    uint32_t const ces[9] = { 0x0D4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_008)
{
    // 2B6F 0062;	
    // (⭯) ANTICLOCKWISE TRIANGLE-HEADED OPEN CIRCLE ARROW	[0D4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B6F, 0x0062 };
    uint32_t const ces[9] = { 0x0D4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_009)
{
    // 2B70 0021;	
    // (⭰) LEFTWARDS TRIANGLE-HEADED ARROW TO BAR	[0D4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B70, 0x0021 };
    uint32_t const ces[9] = { 0x0D4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_010)
{
    // 2B70 003F;	
    // (⭰) LEFTWARDS TRIANGLE-HEADED ARROW TO BAR	[0D4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B70, 0x003F };
    uint32_t const ces[9] = { 0x0D4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_011)
{
    // 2B70 0061;	
    // (⭰) LEFTWARDS TRIANGLE-HEADED ARROW TO BAR	[0D4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B70, 0x0061 };
    uint32_t const ces[9] = { 0x0D4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_012)
{
    // 2B70 0041;	
    // (⭰) LEFTWARDS TRIANGLE-HEADED ARROW TO BAR	[0D4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B70, 0x0041 };
    uint32_t const ces[9] = { 0x0D4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_013)
{
    // 2B70 0062;	
    // (⭰) LEFTWARDS TRIANGLE-HEADED ARROW TO BAR	[0D4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B70, 0x0062 };
    uint32_t const ces[9] = { 0x0D4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_014)
{
    // 2B71 0021;	
    // (⭱) UPWARDS TRIANGLE-HEADED ARROW TO BAR	[0D50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B71, 0x0021 };
    uint32_t const ces[9] = { 0x0D50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_015)
{
    // 2B71 003F;	
    // (⭱) UPWARDS TRIANGLE-HEADED ARROW TO BAR	[0D50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B71, 0x003F };
    uint32_t const ces[9] = { 0x0D50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_016)
{
    // 2B71 0061;	
    // (⭱) UPWARDS TRIANGLE-HEADED ARROW TO BAR	[0D50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B71, 0x0061 };
    uint32_t const ces[9] = { 0x0D50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_017)
{
    // 2B71 0041;	
    // (⭱) UPWARDS TRIANGLE-HEADED ARROW TO BAR	[0D50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B71, 0x0041 };
    uint32_t const ces[9] = { 0x0D50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_018)
{
    // 2B71 0062;	
    // (⭱) UPWARDS TRIANGLE-HEADED ARROW TO BAR	[0D50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B71, 0x0062 };
    uint32_t const ces[9] = { 0x0D50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_019)
{
    // 2B72 0021;	
    // (⭲) RIGHTWARDS TRIANGLE-HEADED ARROW TO BAR	[0D51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B72, 0x0021 };
    uint32_t const ces[9] = { 0x0D51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_020)
{
    // 2B72 003F;	
    // (⭲) RIGHTWARDS TRIANGLE-HEADED ARROW TO BAR	[0D51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B72, 0x003F };
    uint32_t const ces[9] = { 0x0D51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_021)
{
    // 2B72 0061;	
    // (⭲) RIGHTWARDS TRIANGLE-HEADED ARROW TO BAR	[0D51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B72, 0x0061 };
    uint32_t const ces[9] = { 0x0D51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_022)
{
    // 2B72 0041;	
    // (⭲) RIGHTWARDS TRIANGLE-HEADED ARROW TO BAR	[0D51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B72, 0x0041 };
    uint32_t const ces[9] = { 0x0D51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_023)
{
    // 2B72 0062;	
    // (⭲) RIGHTWARDS TRIANGLE-HEADED ARROW TO BAR	[0D51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B72, 0x0062 };
    uint32_t const ces[9] = { 0x0D51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_024)
{
    // 2B73 0021;	
    // (⭳) DOWNWARDS TRIANGLE-HEADED ARROW TO BAR	[0D52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B73, 0x0021 };
    uint32_t const ces[9] = { 0x0D52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_025)
{
    // 2B73 003F;	
    // (⭳) DOWNWARDS TRIANGLE-HEADED ARROW TO BAR	[0D52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B73, 0x003F };
    uint32_t const ces[9] = { 0x0D52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_026)
{
    // 2B73 0061;	
    // (⭳) DOWNWARDS TRIANGLE-HEADED ARROW TO BAR	[0D52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B73, 0x0061 };
    uint32_t const ces[9] = { 0x0D52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_027)
{
    // 2B73 0041;	
    // (⭳) DOWNWARDS TRIANGLE-HEADED ARROW TO BAR	[0D52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B73, 0x0041 };
    uint32_t const ces[9] = { 0x0D52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_028)
{
    // 2B73 0062;	
    // (⭳) DOWNWARDS TRIANGLE-HEADED ARROW TO BAR	[0D52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B73, 0x0062 };
    uint32_t const ces[9] = { 0x0D52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_029)
{
    // 2B76 0021;	
    // (⭶) NORTH WEST TRIANGLE-HEADED ARROW TO BAR	[0D53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B76, 0x0021 };
    uint32_t const ces[9] = { 0x0D53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_030)
{
    // 2B76 003F;	
    // (⭶) NORTH WEST TRIANGLE-HEADED ARROW TO BAR	[0D53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B76, 0x003F };
    uint32_t const ces[9] = { 0x0D53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_031)
{
    // 2B76 0061;	
    // (⭶) NORTH WEST TRIANGLE-HEADED ARROW TO BAR	[0D53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B76, 0x0061 };
    uint32_t const ces[9] = { 0x0D53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_032)
{
    // 2B76 0041;	
    // (⭶) NORTH WEST TRIANGLE-HEADED ARROW TO BAR	[0D53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B76, 0x0041 };
    uint32_t const ces[9] = { 0x0D53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_033)
{
    // 2B76 0062;	
    // (⭶) NORTH WEST TRIANGLE-HEADED ARROW TO BAR	[0D53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B76, 0x0062 };
    uint32_t const ces[9] = { 0x0D53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_034)
{
    // 2B77 0021;	
    // (⭷) NORTH EAST TRIANGLE-HEADED ARROW TO BAR	[0D54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B77, 0x0021 };
    uint32_t const ces[9] = { 0x0D54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_035)
{
    // 2B77 003F;	
    // (⭷) NORTH EAST TRIANGLE-HEADED ARROW TO BAR	[0D54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B77, 0x003F };
    uint32_t const ces[9] = { 0x0D54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_036)
{
    // 2B77 0061;	
    // (⭷) NORTH EAST TRIANGLE-HEADED ARROW TO BAR	[0D54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B77, 0x0061 };
    uint32_t const ces[9] = { 0x0D54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_037)
{
    // 2B77 0041;	
    // (⭷) NORTH EAST TRIANGLE-HEADED ARROW TO BAR	[0D54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B77, 0x0041 };
    uint32_t const ces[9] = { 0x0D54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_038)
{
    // 2B77 0062;	
    // (⭷) NORTH EAST TRIANGLE-HEADED ARROW TO BAR	[0D54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B77, 0x0062 };
    uint32_t const ces[9] = { 0x0D54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_039)
{
    // 2B78 0021;	
    // (⭸) SOUTH EAST TRIANGLE-HEADED ARROW TO BAR	[0D55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B78, 0x0021 };
    uint32_t const ces[9] = { 0x0D55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_040)
{
    // 2B78 003F;	
    // (⭸) SOUTH EAST TRIANGLE-HEADED ARROW TO BAR	[0D55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B78, 0x003F };
    uint32_t const ces[9] = { 0x0D55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_041)
{
    // 2B78 0061;	
    // (⭸) SOUTH EAST TRIANGLE-HEADED ARROW TO BAR	[0D55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B78, 0x0061 };
    uint32_t const ces[9] = { 0x0D55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_042)
{
    // 2B78 0041;	
    // (⭸) SOUTH EAST TRIANGLE-HEADED ARROW TO BAR	[0D55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B78, 0x0041 };
    uint32_t const ces[9] = { 0x0D55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_043)
{
    // 2B78 0062;	
    // (⭸) SOUTH EAST TRIANGLE-HEADED ARROW TO BAR	[0D55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B78, 0x0062 };
    uint32_t const ces[9] = { 0x0D55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_044)
{
    // 2B79 0021;	
    // (⭹) SOUTH WEST TRIANGLE-HEADED ARROW TO BAR	[0D56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B79, 0x0021 };
    uint32_t const ces[9] = { 0x0D56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_045)
{
    // 2B79 003F;	
    // (⭹) SOUTH WEST TRIANGLE-HEADED ARROW TO BAR	[0D56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B79, 0x003F };
    uint32_t const ces[9] = { 0x0D56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_046)
{
    // 2B79 0061;	
    // (⭹) SOUTH WEST TRIANGLE-HEADED ARROW TO BAR	[0D56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B79, 0x0061 };
    uint32_t const ces[9] = { 0x0D56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_047)
{
    // 2B79 0041;	
    // (⭹) SOUTH WEST TRIANGLE-HEADED ARROW TO BAR	[0D56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B79, 0x0041 };
    uint32_t const ces[9] = { 0x0D56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_048)
{
    // 2B79 0062;	
    // (⭹) SOUTH WEST TRIANGLE-HEADED ARROW TO BAR	[0D56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B79, 0x0062 };
    uint32_t const ces[9] = { 0x0D56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_049)
{
    // 2B7A 0021;	
    // (⭺) LEFTWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE	[0D57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7A, 0x0021 };
    uint32_t const ces[9] = { 0x0D57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_050)
{
    // 2B7A 003F;	
    // (⭺) LEFTWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE	[0D57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7A, 0x003F };
    uint32_t const ces[9] = { 0x0D57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_051)
{
    // 2B7A 0061;	
    // (⭺) LEFTWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE	[0D57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7A, 0x0061 };
    uint32_t const ces[9] = { 0x0D57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_052)
{
    // 2B7A 0041;	
    // (⭺) LEFTWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE	[0D57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B7A, 0x0041 };
    uint32_t const ces[9] = { 0x0D57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_053)
{
    // 2B7A 0062;	
    // (⭺) LEFTWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE	[0D57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7A, 0x0062 };
    uint32_t const ces[9] = { 0x0D57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_054)
{
    // 2B7B 0021;	
    // (⭻) UPWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE	[0D58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7B, 0x0021 };
    uint32_t const ces[9] = { 0x0D58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_055)
{
    // 2B7B 003F;	
    // (⭻) UPWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE	[0D58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7B, 0x003F };
    uint32_t const ces[9] = { 0x0D58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_056)
{
    // 2B7B 0061;	
    // (⭻) UPWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE	[0D58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7B, 0x0061 };
    uint32_t const ces[9] = { 0x0D58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_057)
{
    // 2B7B 0041;	
    // (⭻) UPWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE	[0D58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B7B, 0x0041 };
    uint32_t const ces[9] = { 0x0D58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_058)
{
    // 2B7B 0062;	
    // (⭻) UPWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE	[0D58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7B, 0x0062 };
    uint32_t const ces[9] = { 0x0D58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_059)
{
    // 2B7C 0021;	
    // (⭼) RIGHTWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE	[0D59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7C, 0x0021 };
    uint32_t const ces[9] = { 0x0D59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_060)
{
    // 2B7C 003F;	
    // (⭼) RIGHTWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE	[0D59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7C, 0x003F };
    uint32_t const ces[9] = { 0x0D59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_061)
{
    // 2B7C 0061;	
    // (⭼) RIGHTWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE	[0D59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7C, 0x0061 };
    uint32_t const ces[9] = { 0x0D59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_062)
{
    // 2B7C 0041;	
    // (⭼) RIGHTWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE	[0D59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B7C, 0x0041 };
    uint32_t const ces[9] = { 0x0D59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_063)
{
    // 2B7C 0062;	
    // (⭼) RIGHTWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE	[0D59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7C, 0x0062 };
    uint32_t const ces[9] = { 0x0D59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_064)
{
    // 2B7D 0021;	
    // (⭽) DOWNWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE	[0D5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7D, 0x0021 };
    uint32_t const ces[9] = { 0x0D5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_065)
{
    // 2B7D 003F;	
    // (⭽) DOWNWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE	[0D5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7D, 0x003F };
    uint32_t const ces[9] = { 0x0D5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_066)
{
    // 2B7D 0061;	
    // (⭽) DOWNWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE	[0D5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7D, 0x0061 };
    uint32_t const ces[9] = { 0x0D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_067)
{
    // 2B7D 0041;	
    // (⭽) DOWNWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE	[0D5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B7D, 0x0041 };
    uint32_t const ces[9] = { 0x0D5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_068)
{
    // 2B7D 0062;	
    // (⭽) DOWNWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE	[0D5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7D, 0x0062 };
    uint32_t const ces[9] = { 0x0D5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_069)
{
    // 2B7E 0021;	
    // (⭾) HORIZONTAL TAB KEY	[0D5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7E, 0x0021 };
    uint32_t const ces[9] = { 0x0D5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_070)
{
    // 2B7E 003F;	
    // (⭾) HORIZONTAL TAB KEY	[0D5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7E, 0x003F };
    uint32_t const ces[9] = { 0x0D5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_071)
{
    // 2B7E 0061;	
    // (⭾) HORIZONTAL TAB KEY	[0D5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7E, 0x0061 };
    uint32_t const ces[9] = { 0x0D5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_072)
{
    // 2B7E 0041;	
    // (⭾) HORIZONTAL TAB KEY	[0D5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B7E, 0x0041 };
    uint32_t const ces[9] = { 0x0D5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_073)
{
    // 2B7E 0062;	
    // (⭾) HORIZONTAL TAB KEY	[0D5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7E, 0x0062 };
    uint32_t const ces[9] = { 0x0D5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_074)
{
    // 2B7F 0021;	
    // (⭿) VERTICAL TAB KEY	[0D5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7F, 0x0021 };
    uint32_t const ces[9] = { 0x0D5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_075)
{
    // 2B7F 003F;	
    // (⭿) VERTICAL TAB KEY	[0D5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7F, 0x003F };
    uint32_t const ces[9] = { 0x0D5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_076)
{
    // 2B7F 0061;	
    // (⭿) VERTICAL TAB KEY	[0D5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7F, 0x0061 };
    uint32_t const ces[9] = { 0x0D5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_077)
{
    // 2B7F 0041;	
    // (⭿) VERTICAL TAB KEY	[0D5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B7F, 0x0041 };
    uint32_t const ces[9] = { 0x0D5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_078)
{
    // 2B7F 0062;	
    // (⭿) VERTICAL TAB KEY	[0D5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B7F, 0x0062 };
    uint32_t const ces[9] = { 0x0D5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_079)
{
    // 2B80 0021;	
    // (⮀) LEFTWARDS TRIANGLE-HEADED ARROW OVER RIGHTWARDS TRIANGLE-HEADED ARROW	[0D5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B80, 0x0021 };
    uint32_t const ces[9] = { 0x0D5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_080)
{
    // 2B80 003F;	
    // (⮀) LEFTWARDS TRIANGLE-HEADED ARROW OVER RIGHTWARDS TRIANGLE-HEADED ARROW	[0D5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B80, 0x003F };
    uint32_t const ces[9] = { 0x0D5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_081)
{
    // 2B80 0061;	
    // (⮀) LEFTWARDS TRIANGLE-HEADED ARROW OVER RIGHTWARDS TRIANGLE-HEADED ARROW	[0D5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B80, 0x0061 };
    uint32_t const ces[9] = { 0x0D5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_082)
{
    // 2B80 0041;	
    // (⮀) LEFTWARDS TRIANGLE-HEADED ARROW OVER RIGHTWARDS TRIANGLE-HEADED ARROW	[0D5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B80, 0x0041 };
    uint32_t const ces[9] = { 0x0D5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_083)
{
    // 2B80 0062;	
    // (⮀) LEFTWARDS TRIANGLE-HEADED ARROW OVER RIGHTWARDS TRIANGLE-HEADED ARROW	[0D5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B80, 0x0062 };
    uint32_t const ces[9] = { 0x0D5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_084)
{
    // 2B81 0021;	
    // (⮁) UPWARDS TRIANGLE-HEADED ARROW LEFTWARDS OF DOWNWARDS TRIANGLE-HEADED ARROW	[0D5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B81, 0x0021 };
    uint32_t const ces[9] = { 0x0D5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_085)
{
    // 2B81 003F;	
    // (⮁) UPWARDS TRIANGLE-HEADED ARROW LEFTWARDS OF DOWNWARDS TRIANGLE-HEADED ARROW	[0D5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B81, 0x003F };
    uint32_t const ces[9] = { 0x0D5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_086)
{
    // 2B81 0061;	
    // (⮁) UPWARDS TRIANGLE-HEADED ARROW LEFTWARDS OF DOWNWARDS TRIANGLE-HEADED ARROW	[0D5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B81, 0x0061 };
    uint32_t const ces[9] = { 0x0D5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_087)
{
    // 2B81 0041;	
    // (⮁) UPWARDS TRIANGLE-HEADED ARROW LEFTWARDS OF DOWNWARDS TRIANGLE-HEADED ARROW	[0D5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B81, 0x0041 };
    uint32_t const ces[9] = { 0x0D5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_088)
{
    // 2B81 0062;	
    // (⮁) UPWARDS TRIANGLE-HEADED ARROW LEFTWARDS OF DOWNWARDS TRIANGLE-HEADED ARROW	[0D5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B81, 0x0062 };
    uint32_t const ces[9] = { 0x0D5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_089)
{
    // 2B82 0021;	
    // (⮂) RIGHTWARDS TRIANGLE-HEADED ARROW OVER LEFTWARDS TRIANGLE-HEADED ARROW	[0D5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B82, 0x0021 };
    uint32_t const ces[9] = { 0x0D5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_090)
{
    // 2B82 003F;	
    // (⮂) RIGHTWARDS TRIANGLE-HEADED ARROW OVER LEFTWARDS TRIANGLE-HEADED ARROW	[0D5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B82, 0x003F };
    uint32_t const ces[9] = { 0x0D5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_091)
{
    // 2B82 0061;	
    // (⮂) RIGHTWARDS TRIANGLE-HEADED ARROW OVER LEFTWARDS TRIANGLE-HEADED ARROW	[0D5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B82, 0x0061 };
    uint32_t const ces[9] = { 0x0D5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_092)
{
    // 2B82 0041;	
    // (⮂) RIGHTWARDS TRIANGLE-HEADED ARROW OVER LEFTWARDS TRIANGLE-HEADED ARROW	[0D5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B82, 0x0041 };
    uint32_t const ces[9] = { 0x0D5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_093)
{
    // 2B82 0062;	
    // (⮂) RIGHTWARDS TRIANGLE-HEADED ARROW OVER LEFTWARDS TRIANGLE-HEADED ARROW	[0D5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B82, 0x0062 };
    uint32_t const ces[9] = { 0x0D5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_094)
{
    // 2B83 0021;	
    // (⮃) DOWNWARDS TRIANGLE-HEADED ARROW LEFTWARDS OF UPWARDS TRIANGLE-HEADED ARROW	[0D60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B83, 0x0021 };
    uint32_t const ces[9] = { 0x0D60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_095)
{
    // 2B83 003F;	
    // (⮃) DOWNWARDS TRIANGLE-HEADED ARROW LEFTWARDS OF UPWARDS TRIANGLE-HEADED ARROW	[0D60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B83, 0x003F };
    uint32_t const ces[9] = { 0x0D60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_096)
{
    // 2B83 0061;	
    // (⮃) DOWNWARDS TRIANGLE-HEADED ARROW LEFTWARDS OF UPWARDS TRIANGLE-HEADED ARROW	[0D60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B83, 0x0061 };
    uint32_t const ces[9] = { 0x0D60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_097)
{
    // 2B83 0041;	
    // (⮃) DOWNWARDS TRIANGLE-HEADED ARROW LEFTWARDS OF UPWARDS TRIANGLE-HEADED ARROW	[0D60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B83, 0x0041 };
    uint32_t const ces[9] = { 0x0D60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_098)
{
    // 2B83 0062;	
    // (⮃) DOWNWARDS TRIANGLE-HEADED ARROW LEFTWARDS OF UPWARDS TRIANGLE-HEADED ARROW	[0D60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B83, 0x0062 };
    uint32_t const ces[9] = { 0x0D60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_099)
{
    // 2B84 0021;	
    // (⮄) LEFTWARDS TRIANGLE-HEADED PAIRED ARROWS	[0D61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B84, 0x0021 };
    uint32_t const ces[9] = { 0x0D61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_100)
{
    // 2B84 003F;	
    // (⮄) LEFTWARDS TRIANGLE-HEADED PAIRED ARROWS	[0D61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B84, 0x003F };
    uint32_t const ces[9] = { 0x0D61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_101)
{
    // 2B84 0061;	
    // (⮄) LEFTWARDS TRIANGLE-HEADED PAIRED ARROWS	[0D61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B84, 0x0061 };
    uint32_t const ces[9] = { 0x0D61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_102)
{
    // 2B84 0041;	
    // (⮄) LEFTWARDS TRIANGLE-HEADED PAIRED ARROWS	[0D61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B84, 0x0041 };
    uint32_t const ces[9] = { 0x0D61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_103)
{
    // 2B84 0062;	
    // (⮄) LEFTWARDS TRIANGLE-HEADED PAIRED ARROWS	[0D61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B84, 0x0062 };
    uint32_t const ces[9] = { 0x0D61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_104)
{
    // 2B85 0021;	
    // (⮅) UPWARDS TRIANGLE-HEADED PAIRED ARROWS	[0D62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B85, 0x0021 };
    uint32_t const ces[9] = { 0x0D62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_105)
{
    // 2B85 003F;	
    // (⮅) UPWARDS TRIANGLE-HEADED PAIRED ARROWS	[0D62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B85, 0x003F };
    uint32_t const ces[9] = { 0x0D62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_106)
{
    // 2B85 0061;	
    // (⮅) UPWARDS TRIANGLE-HEADED PAIRED ARROWS	[0D62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B85, 0x0061 };
    uint32_t const ces[9] = { 0x0D62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_107)
{
    // 2B85 0041;	
    // (⮅) UPWARDS TRIANGLE-HEADED PAIRED ARROWS	[0D62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B85, 0x0041 };
    uint32_t const ces[9] = { 0x0D62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_108)
{
    // 2B85 0062;	
    // (⮅) UPWARDS TRIANGLE-HEADED PAIRED ARROWS	[0D62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B85, 0x0062 };
    uint32_t const ces[9] = { 0x0D62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_109)
{
    // 2B86 0021;	
    // (⮆) RIGHTWARDS TRIANGLE-HEADED PAIRED ARROWS	[0D63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B86, 0x0021 };
    uint32_t const ces[9] = { 0x0D63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_110)
{
    // 2B86 003F;	
    // (⮆) RIGHTWARDS TRIANGLE-HEADED PAIRED ARROWS	[0D63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B86, 0x003F };
    uint32_t const ces[9] = { 0x0D63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_111)
{
    // 2B86 0061;	
    // (⮆) RIGHTWARDS TRIANGLE-HEADED PAIRED ARROWS	[0D63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B86, 0x0061 };
    uint32_t const ces[9] = { 0x0D63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_112)
{
    // 2B86 0041;	
    // (⮆) RIGHTWARDS TRIANGLE-HEADED PAIRED ARROWS	[0D63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B86, 0x0041 };
    uint32_t const ces[9] = { 0x0D63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_113)
{
    // 2B86 0062;	
    // (⮆) RIGHTWARDS TRIANGLE-HEADED PAIRED ARROWS	[0D63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B86, 0x0062 };
    uint32_t const ces[9] = { 0x0D63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_114)
{
    // 2B87 0021;	
    // (⮇) DOWNWARDS TRIANGLE-HEADED PAIRED ARROWS	[0D64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B87, 0x0021 };
    uint32_t const ces[9] = { 0x0D64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_115)
{
    // 2B87 003F;	
    // (⮇) DOWNWARDS TRIANGLE-HEADED PAIRED ARROWS	[0D64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B87, 0x003F };
    uint32_t const ces[9] = { 0x0D64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_116)
{
    // 2B87 0061;	
    // (⮇) DOWNWARDS TRIANGLE-HEADED PAIRED ARROWS	[0D64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B87, 0x0061 };
    uint32_t const ces[9] = { 0x0D64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_117)
{
    // 2B87 0041;	
    // (⮇) DOWNWARDS TRIANGLE-HEADED PAIRED ARROWS	[0D64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B87, 0x0041 };
    uint32_t const ces[9] = { 0x0D64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_118)
{
    // 2B87 0062;	
    // (⮇) DOWNWARDS TRIANGLE-HEADED PAIRED ARROWS	[0D64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B87, 0x0062 };
    uint32_t const ces[9] = { 0x0D64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_119)
{
    // 2B88 0021;	
    // (⮈) LEFTWARDS BLACK CIRCLED WHITE ARROW	[0D65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B88, 0x0021 };
    uint32_t const ces[9] = { 0x0D65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_120)
{
    // 2B88 003F;	
    // (⮈) LEFTWARDS BLACK CIRCLED WHITE ARROW	[0D65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B88, 0x003F };
    uint32_t const ces[9] = { 0x0D65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_121)
{
    // 2B88 0061;	
    // (⮈) LEFTWARDS BLACK CIRCLED WHITE ARROW	[0D65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B88, 0x0061 };
    uint32_t const ces[9] = { 0x0D65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_122)
{
    // 2B88 0041;	
    // (⮈) LEFTWARDS BLACK CIRCLED WHITE ARROW	[0D65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B88, 0x0041 };
    uint32_t const ces[9] = { 0x0D65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_123)
{
    // 2B88 0062;	
    // (⮈) LEFTWARDS BLACK CIRCLED WHITE ARROW	[0D65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B88, 0x0062 };
    uint32_t const ces[9] = { 0x0D65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_124)
{
    // 2B89 0021;	
    // (⮉) UPWARDS BLACK CIRCLED WHITE ARROW	[0D66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B89, 0x0021 };
    uint32_t const ces[9] = { 0x0D66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_125)
{
    // 2B89 003F;	
    // (⮉) UPWARDS BLACK CIRCLED WHITE ARROW	[0D66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B89, 0x003F };
    uint32_t const ces[9] = { 0x0D66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_126)
{
    // 2B89 0061;	
    // (⮉) UPWARDS BLACK CIRCLED WHITE ARROW	[0D66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B89, 0x0061 };
    uint32_t const ces[9] = { 0x0D66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_127)
{
    // 2B89 0041;	
    // (⮉) UPWARDS BLACK CIRCLED WHITE ARROW	[0D66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B89, 0x0041 };
    uint32_t const ces[9] = { 0x0D66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_128)
{
    // 2B89 0062;	
    // (⮉) UPWARDS BLACK CIRCLED WHITE ARROW	[0D66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B89, 0x0062 };
    uint32_t const ces[9] = { 0x0D66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_129)
{
    // 2B8A 0021;	
    // (⮊) RIGHTWARDS BLACK CIRCLED WHITE ARROW	[0D67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8A, 0x0021 };
    uint32_t const ces[9] = { 0x0D67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_130)
{
    // 2B8A 003F;	
    // (⮊) RIGHTWARDS BLACK CIRCLED WHITE ARROW	[0D67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8A, 0x003F };
    uint32_t const ces[9] = { 0x0D67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_131)
{
    // 2B8A 0061;	
    // (⮊) RIGHTWARDS BLACK CIRCLED WHITE ARROW	[0D67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8A, 0x0061 };
    uint32_t const ces[9] = { 0x0D67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_132)
{
    // 2B8A 0041;	
    // (⮊) RIGHTWARDS BLACK CIRCLED WHITE ARROW	[0D67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B8A, 0x0041 };
    uint32_t const ces[9] = { 0x0D67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_133)
{
    // 2B8A 0062;	
    // (⮊) RIGHTWARDS BLACK CIRCLED WHITE ARROW	[0D67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8A, 0x0062 };
    uint32_t const ces[9] = { 0x0D67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_134)
{
    // 2B8B 0021;	
    // (⮋) DOWNWARDS BLACK CIRCLED WHITE ARROW	[0D68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8B, 0x0021 };
    uint32_t const ces[9] = { 0x0D68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_135)
{
    // 2B8B 003F;	
    // (⮋) DOWNWARDS BLACK CIRCLED WHITE ARROW	[0D68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8B, 0x003F };
    uint32_t const ces[9] = { 0x0D68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_136)
{
    // 2B8B 0061;	
    // (⮋) DOWNWARDS BLACK CIRCLED WHITE ARROW	[0D68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8B, 0x0061 };
    uint32_t const ces[9] = { 0x0D68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_137)
{
    // 2B8B 0041;	
    // (⮋) DOWNWARDS BLACK CIRCLED WHITE ARROW	[0D68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B8B, 0x0041 };
    uint32_t const ces[9] = { 0x0D68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_138)
{
    // 2B8B 0062;	
    // (⮋) DOWNWARDS BLACK CIRCLED WHITE ARROW	[0D68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8B, 0x0062 };
    uint32_t const ces[9] = { 0x0D68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_139)
{
    // 2B8C 0021;	
    // (⮌) ANTICLOCKWISE TRIANGLE-HEADED RIGHT U-SHAPED ARROW	[0D69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8C, 0x0021 };
    uint32_t const ces[9] = { 0x0D69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_140)
{
    // 2B8C 003F;	
    // (⮌) ANTICLOCKWISE TRIANGLE-HEADED RIGHT U-SHAPED ARROW	[0D69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8C, 0x003F };
    uint32_t const ces[9] = { 0x0D69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_141)
{
    // 2B8C 0061;	
    // (⮌) ANTICLOCKWISE TRIANGLE-HEADED RIGHT U-SHAPED ARROW	[0D69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8C, 0x0061 };
    uint32_t const ces[9] = { 0x0D69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_142)
{
    // 2B8C 0041;	
    // (⮌) ANTICLOCKWISE TRIANGLE-HEADED RIGHT U-SHAPED ARROW	[0D69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B8C, 0x0041 };
    uint32_t const ces[9] = { 0x0D69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_143)
{
    // 2B8C 0062;	
    // (⮌) ANTICLOCKWISE TRIANGLE-HEADED RIGHT U-SHAPED ARROW	[0D69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8C, 0x0062 };
    uint32_t const ces[9] = { 0x0D69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_144)
{
    // 2B8D 0021;	
    // (⮍) ANTICLOCKWISE TRIANGLE-HEADED BOTTOM U-SHAPED ARROW	[0D6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8D, 0x0021 };
    uint32_t const ces[9] = { 0x0D6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_145)
{
    // 2B8D 003F;	
    // (⮍) ANTICLOCKWISE TRIANGLE-HEADED BOTTOM U-SHAPED ARROW	[0D6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8D, 0x003F };
    uint32_t const ces[9] = { 0x0D6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_146)
{
    // 2B8D 0061;	
    // (⮍) ANTICLOCKWISE TRIANGLE-HEADED BOTTOM U-SHAPED ARROW	[0D6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8D, 0x0061 };
    uint32_t const ces[9] = { 0x0D6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_147)
{
    // 2B8D 0041;	
    // (⮍) ANTICLOCKWISE TRIANGLE-HEADED BOTTOM U-SHAPED ARROW	[0D6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B8D, 0x0041 };
    uint32_t const ces[9] = { 0x0D6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_148)
{
    // 2B8D 0062;	
    // (⮍) ANTICLOCKWISE TRIANGLE-HEADED BOTTOM U-SHAPED ARROW	[0D6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8D, 0x0062 };
    uint32_t const ces[9] = { 0x0D6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_149)
{
    // 2B8E 0021;	
    // (⮎) ANTICLOCKWISE TRIANGLE-HEADED LEFT U-SHAPED ARROW	[0D6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8E, 0x0021 };
    uint32_t const ces[9] = { 0x0D6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_150)
{
    // 2B8E 003F;	
    // (⮎) ANTICLOCKWISE TRIANGLE-HEADED LEFT U-SHAPED ARROW	[0D6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8E, 0x003F };
    uint32_t const ces[9] = { 0x0D6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_151)
{
    // 2B8E 0061;	
    // (⮎) ANTICLOCKWISE TRIANGLE-HEADED LEFT U-SHAPED ARROW	[0D6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8E, 0x0061 };
    uint32_t const ces[9] = { 0x0D6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_152)
{
    // 2B8E 0041;	
    // (⮎) ANTICLOCKWISE TRIANGLE-HEADED LEFT U-SHAPED ARROW	[0D6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B8E, 0x0041 };
    uint32_t const ces[9] = { 0x0D6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_153)
{
    // 2B8E 0062;	
    // (⮎) ANTICLOCKWISE TRIANGLE-HEADED LEFT U-SHAPED ARROW	[0D6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8E, 0x0062 };
    uint32_t const ces[9] = { 0x0D6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_154)
{
    // 2B8F 0021;	
    // (⮏) ANTICLOCKWISE TRIANGLE-HEADED TOP U-SHAPED ARROW	[0D6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8F, 0x0021 };
    uint32_t const ces[9] = { 0x0D6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_155)
{
    // 2B8F 003F;	
    // (⮏) ANTICLOCKWISE TRIANGLE-HEADED TOP U-SHAPED ARROW	[0D6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8F, 0x003F };
    uint32_t const ces[9] = { 0x0D6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_156)
{
    // 2B8F 0061;	
    // (⮏) ANTICLOCKWISE TRIANGLE-HEADED TOP U-SHAPED ARROW	[0D6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8F, 0x0061 };
    uint32_t const ces[9] = { 0x0D6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_157)
{
    // 2B8F 0041;	
    // (⮏) ANTICLOCKWISE TRIANGLE-HEADED TOP U-SHAPED ARROW	[0D6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B8F, 0x0041 };
    uint32_t const ces[9] = { 0x0D6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_158)
{
    // 2B8F 0062;	
    // (⮏) ANTICLOCKWISE TRIANGLE-HEADED TOP U-SHAPED ARROW	[0D6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B8F, 0x0062 };
    uint32_t const ces[9] = { 0x0D6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_159)
{
    // 2B90 0021;	
    // (⮐) RETURN LEFT	[0D6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B90, 0x0021 };
    uint32_t const ces[9] = { 0x0D6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_160)
{
    // 2B90 003F;	
    // (⮐) RETURN LEFT	[0D6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B90, 0x003F };
    uint32_t const ces[9] = { 0x0D6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_161)
{
    // 2B90 0061;	
    // (⮐) RETURN LEFT	[0D6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B90, 0x0061 };
    uint32_t const ces[9] = { 0x0D6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_162)
{
    // 2B90 0041;	
    // (⮐) RETURN LEFT	[0D6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B90, 0x0041 };
    uint32_t const ces[9] = { 0x0D6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_163)
{
    // 2B90 0062;	
    // (⮐) RETURN LEFT	[0D6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B90, 0x0062 };
    uint32_t const ces[9] = { 0x0D6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_164)
{
    // 2B91 0021;	
    // (⮑) RETURN RIGHT	[0D6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B91, 0x0021 };
    uint32_t const ces[9] = { 0x0D6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_165)
{
    // 2B91 003F;	
    // (⮑) RETURN RIGHT	[0D6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B91, 0x003F };
    uint32_t const ces[9] = { 0x0D6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_166)
{
    // 2B91 0061;	
    // (⮑) RETURN RIGHT	[0D6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B91, 0x0061 };
    uint32_t const ces[9] = { 0x0D6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_167)
{
    // 2B91 0041;	
    // (⮑) RETURN RIGHT	[0D6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B91, 0x0041 };
    uint32_t const ces[9] = { 0x0D6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_168)
{
    // 2B91 0062;	
    // (⮑) RETURN RIGHT	[0D6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B91, 0x0062 };
    uint32_t const ces[9] = { 0x0D6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_169)
{
    // 2B92 0021;	
    // (⮒) NEWLINE LEFT	[0D6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B92, 0x0021 };
    uint32_t const ces[9] = { 0x0D6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_170)
{
    // 2B92 003F;	
    // (⮒) NEWLINE LEFT	[0D6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B92, 0x003F };
    uint32_t const ces[9] = { 0x0D6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_171)
{
    // 2B92 0061;	
    // (⮒) NEWLINE LEFT	[0D6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B92, 0x0061 };
    uint32_t const ces[9] = { 0x0D6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_172)
{
    // 2B92 0041;	
    // (⮒) NEWLINE LEFT	[0D6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B92, 0x0041 };
    uint32_t const ces[9] = { 0x0D6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_173)
{
    // 2B92 0062;	
    // (⮒) NEWLINE LEFT	[0D6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B92, 0x0062 };
    uint32_t const ces[9] = { 0x0D6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_174)
{
    // 2B93 0021;	
    // (⮓) NEWLINE RIGHT	[0D70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B93, 0x0021 };
    uint32_t const ces[9] = { 0x0D70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_175)
{
    // 2B93 003F;	
    // (⮓) NEWLINE RIGHT	[0D70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B93, 0x003F };
    uint32_t const ces[9] = { 0x0D70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_176)
{
    // 2B93 0061;	
    // (⮓) NEWLINE RIGHT	[0D70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B93, 0x0061 };
    uint32_t const ces[9] = { 0x0D70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_177)
{
    // 2B93 0041;	
    // (⮓) NEWLINE RIGHT	[0D70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B93, 0x0041 };
    uint32_t const ces[9] = { 0x0D70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_178)
{
    // 2B93 0062;	
    // (⮓) NEWLINE RIGHT	[0D70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B93, 0x0062 };
    uint32_t const ces[9] = { 0x0D70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_179)
{
    // 2B94 0021;	
    // (⮔) FOUR CORNER ARROWS CIRCLING ANTICLOCKWISE	[0D71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B94, 0x0021 };
    uint32_t const ces[9] = { 0x0D71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_180)
{
    // 2B94 003F;	
    // (⮔) FOUR CORNER ARROWS CIRCLING ANTICLOCKWISE	[0D71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B94, 0x003F };
    uint32_t const ces[9] = { 0x0D71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_181)
{
    // 2B94 0061;	
    // (⮔) FOUR CORNER ARROWS CIRCLING ANTICLOCKWISE	[0D71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B94, 0x0061 };
    uint32_t const ces[9] = { 0x0D71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_182)
{
    // 2B94 0041;	
    // (⮔) FOUR CORNER ARROWS CIRCLING ANTICLOCKWISE	[0D71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B94, 0x0041 };
    uint32_t const ces[9] = { 0x0D71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_183)
{
    // 2B94 0062;	
    // (⮔) FOUR CORNER ARROWS CIRCLING ANTICLOCKWISE	[0D71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B94, 0x0062 };
    uint32_t const ces[9] = { 0x0D71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_184)
{
    // 2B95 0021;	
    // (⮕) RIGHTWARDS BLACK ARROW	[0D72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B95, 0x0021 };
    uint32_t const ces[9] = { 0x0D72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_185)
{
    // 2B95 003F;	
    // (⮕) RIGHTWARDS BLACK ARROW	[0D72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B95, 0x003F };
    uint32_t const ces[9] = { 0x0D72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_186)
{
    // 2B95 0061;	
    // (⮕) RIGHTWARDS BLACK ARROW	[0D72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B95, 0x0061 };
    uint32_t const ces[9] = { 0x0D72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_187)
{
    // 2B95 0041;	
    // (⮕) RIGHTWARDS BLACK ARROW	[0D72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B95, 0x0041 };
    uint32_t const ces[9] = { 0x0D72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_188)
{
    // 2B95 0062;	
    // (⮕) RIGHTWARDS BLACK ARROW	[0D72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B95, 0x0062 };
    uint32_t const ces[9] = { 0x0D72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_189)
{
    // 2B98 0021;	
    // (⮘) THREE-D TOP-LIGHTED LEFTWARDS EQUILATERAL ARROWHEAD	[0D73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B98, 0x0021 };
    uint32_t const ces[9] = { 0x0D73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_190)
{
    // 2B98 003F;	
    // (⮘) THREE-D TOP-LIGHTED LEFTWARDS EQUILATERAL ARROWHEAD	[0D73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B98, 0x003F };
    uint32_t const ces[9] = { 0x0D73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_191)
{
    // 2B98 0061;	
    // (⮘) THREE-D TOP-LIGHTED LEFTWARDS EQUILATERAL ARROWHEAD	[0D73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B98, 0x0061 };
    uint32_t const ces[9] = { 0x0D73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_192)
{
    // 2B98 0041;	
    // (⮘) THREE-D TOP-LIGHTED LEFTWARDS EQUILATERAL ARROWHEAD	[0D73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B98, 0x0041 };
    uint32_t const ces[9] = { 0x0D73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_193)
{
    // 2B98 0062;	
    // (⮘) THREE-D TOP-LIGHTED LEFTWARDS EQUILATERAL ARROWHEAD	[0D73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B98, 0x0062 };
    uint32_t const ces[9] = { 0x0D73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_194)
{
    // 2B99 0021;	
    // (⮙) THREE-D RIGHT-LIGHTED UPWARDS EQUILATERAL ARROWHEAD	[0D74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B99, 0x0021 };
    uint32_t const ces[9] = { 0x0D74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_195)
{
    // 2B99 003F;	
    // (⮙) THREE-D RIGHT-LIGHTED UPWARDS EQUILATERAL ARROWHEAD	[0D74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B99, 0x003F };
    uint32_t const ces[9] = { 0x0D74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_196)
{
    // 2B99 0061;	
    // (⮙) THREE-D RIGHT-LIGHTED UPWARDS EQUILATERAL ARROWHEAD	[0D74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B99, 0x0061 };
    uint32_t const ces[9] = { 0x0D74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_197)
{
    // 2B99 0041;	
    // (⮙) THREE-D RIGHT-LIGHTED UPWARDS EQUILATERAL ARROWHEAD	[0D74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B99, 0x0041 };
    uint32_t const ces[9] = { 0x0D74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_198)
{
    // 2B99 0062;	
    // (⮙) THREE-D RIGHT-LIGHTED UPWARDS EQUILATERAL ARROWHEAD	[0D74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B99, 0x0062 };
    uint32_t const ces[9] = { 0x0D74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_199)
{
    // 2B9A 0021;	
    // (⮚) THREE-D TOP-LIGHTED RIGHTWARDS EQUILATERAL ARROWHEAD	[0D75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9A, 0x0021 };
    uint32_t const ces[9] = { 0x0D75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_200)
{
    // 2B9A 003F;	
    // (⮚) THREE-D TOP-LIGHTED RIGHTWARDS EQUILATERAL ARROWHEAD	[0D75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9A, 0x003F };
    uint32_t const ces[9] = { 0x0D75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_201)
{
    // 2B9A 0061;	
    // (⮚) THREE-D TOP-LIGHTED RIGHTWARDS EQUILATERAL ARROWHEAD	[0D75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9A, 0x0061 };
    uint32_t const ces[9] = { 0x0D75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_202)
{
    // 2B9A 0041;	
    // (⮚) THREE-D TOP-LIGHTED RIGHTWARDS EQUILATERAL ARROWHEAD	[0D75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B9A, 0x0041 };
    uint32_t const ces[9] = { 0x0D75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_203)
{
    // 2B9A 0062;	
    // (⮚) THREE-D TOP-LIGHTED RIGHTWARDS EQUILATERAL ARROWHEAD	[0D75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9A, 0x0062 };
    uint32_t const ces[9] = { 0x0D75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_204)
{
    // 2B9B 0021;	
    // (⮛) THREE-D LEFT-LIGHTED DOWNWARDS EQUILATERAL ARROWHEAD	[0D76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9B, 0x0021 };
    uint32_t const ces[9] = { 0x0D76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_205)
{
    // 2B9B 003F;	
    // (⮛) THREE-D LEFT-LIGHTED DOWNWARDS EQUILATERAL ARROWHEAD	[0D76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9B, 0x003F };
    uint32_t const ces[9] = { 0x0D76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_206)
{
    // 2B9B 0061;	
    // (⮛) THREE-D LEFT-LIGHTED DOWNWARDS EQUILATERAL ARROWHEAD	[0D76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9B, 0x0061 };
    uint32_t const ces[9] = { 0x0D76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_207)
{
    // 2B9B 0041;	
    // (⮛) THREE-D LEFT-LIGHTED DOWNWARDS EQUILATERAL ARROWHEAD	[0D76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B9B, 0x0041 };
    uint32_t const ces[9] = { 0x0D76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_208)
{
    // 2B9B 0062;	
    // (⮛) THREE-D LEFT-LIGHTED DOWNWARDS EQUILATERAL ARROWHEAD	[0D76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9B, 0x0062 };
    uint32_t const ces[9] = { 0x0D76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_209)
{
    // 2B9C 0021;	
    // (⮜) BLACK LEFTWARDS EQUILATERAL ARROWHEAD	[0D77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9C, 0x0021 };
    uint32_t const ces[9] = { 0x0D77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_210)
{
    // 2B9C 003F;	
    // (⮜) BLACK LEFTWARDS EQUILATERAL ARROWHEAD	[0D77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9C, 0x003F };
    uint32_t const ces[9] = { 0x0D77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_211)
{
    // 2B9C 0061;	
    // (⮜) BLACK LEFTWARDS EQUILATERAL ARROWHEAD	[0D77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9C, 0x0061 };
    uint32_t const ces[9] = { 0x0D77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_212)
{
    // 2B9C 0041;	
    // (⮜) BLACK LEFTWARDS EQUILATERAL ARROWHEAD	[0D77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B9C, 0x0041 };
    uint32_t const ces[9] = { 0x0D77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_213)
{
    // 2B9C 0062;	
    // (⮜) BLACK LEFTWARDS EQUILATERAL ARROWHEAD	[0D77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9C, 0x0062 };
    uint32_t const ces[9] = { 0x0D77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_214)
{
    // 2B9D 0021;	
    // (⮝) BLACK UPWARDS EQUILATERAL ARROWHEAD	[0D78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9D, 0x0021 };
    uint32_t const ces[9] = { 0x0D78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_215)
{
    // 2B9D 003F;	
    // (⮝) BLACK UPWARDS EQUILATERAL ARROWHEAD	[0D78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9D, 0x003F };
    uint32_t const ces[9] = { 0x0D78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_216)
{
    // 2B9D 0061;	
    // (⮝) BLACK UPWARDS EQUILATERAL ARROWHEAD	[0D78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9D, 0x0061 };
    uint32_t const ces[9] = { 0x0D78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_217)
{
    // 2B9D 0041;	
    // (⮝) BLACK UPWARDS EQUILATERAL ARROWHEAD	[0D78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B9D, 0x0041 };
    uint32_t const ces[9] = { 0x0D78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_218)
{
    // 2B9D 0062;	
    // (⮝) BLACK UPWARDS EQUILATERAL ARROWHEAD	[0D78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9D, 0x0062 };
    uint32_t const ces[9] = { 0x0D78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_219)
{
    // 2B9E 0021;	
    // (⮞) BLACK RIGHTWARDS EQUILATERAL ARROWHEAD	[0D79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9E, 0x0021 };
    uint32_t const ces[9] = { 0x0D79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_220)
{
    // 2B9E 003F;	
    // (⮞) BLACK RIGHTWARDS EQUILATERAL ARROWHEAD	[0D79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9E, 0x003F };
    uint32_t const ces[9] = { 0x0D79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_221)
{
    // 2B9E 0061;	
    // (⮞) BLACK RIGHTWARDS EQUILATERAL ARROWHEAD	[0D79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9E, 0x0061 };
    uint32_t const ces[9] = { 0x0D79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_222)
{
    // 2B9E 0041;	
    // (⮞) BLACK RIGHTWARDS EQUILATERAL ARROWHEAD	[0D79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B9E, 0x0041 };
    uint32_t const ces[9] = { 0x0D79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_223)
{
    // 2B9E 0062;	
    // (⮞) BLACK RIGHTWARDS EQUILATERAL ARROWHEAD	[0D79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9E, 0x0062 };
    uint32_t const ces[9] = { 0x0D79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_224)
{
    // 2B9F 0021;	
    // (⮟) BLACK DOWNWARDS EQUILATERAL ARROWHEAD	[0D7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9F, 0x0021 };
    uint32_t const ces[9] = { 0x0D7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_225)
{
    // 2B9F 003F;	
    // (⮟) BLACK DOWNWARDS EQUILATERAL ARROWHEAD	[0D7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9F, 0x003F };
    uint32_t const ces[9] = { 0x0D7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_226)
{
    // 2B9F 0061;	
    // (⮟) BLACK DOWNWARDS EQUILATERAL ARROWHEAD	[0D7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9F, 0x0061 };
    uint32_t const ces[9] = { 0x0D7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_227)
{
    // 2B9F 0041;	
    // (⮟) BLACK DOWNWARDS EQUILATERAL ARROWHEAD	[0D7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B9F, 0x0041 };
    uint32_t const ces[9] = { 0x0D7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_228)
{
    // 2B9F 0062;	
    // (⮟) BLACK DOWNWARDS EQUILATERAL ARROWHEAD	[0D7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B9F, 0x0062 };
    uint32_t const ces[9] = { 0x0D7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_229)
{
    // 2BA0 0021;	
    // (⮠) DOWNWARDS TRIANGLE-HEADED ARROW WITH LONG TIP LEFTWARDS	[0D7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA0, 0x0021 };
    uint32_t const ces[9] = { 0x0D7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_230)
{
    // 2BA0 003F;	
    // (⮠) DOWNWARDS TRIANGLE-HEADED ARROW WITH LONG TIP LEFTWARDS	[0D7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA0, 0x003F };
    uint32_t const ces[9] = { 0x0D7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_231)
{
    // 2BA0 0061;	
    // (⮠) DOWNWARDS TRIANGLE-HEADED ARROW WITH LONG TIP LEFTWARDS	[0D7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA0, 0x0061 };
    uint32_t const ces[9] = { 0x0D7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_232)
{
    // 2BA0 0041;	
    // (⮠) DOWNWARDS TRIANGLE-HEADED ARROW WITH LONG TIP LEFTWARDS	[0D7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BA0, 0x0041 };
    uint32_t const ces[9] = { 0x0D7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_233)
{
    // 2BA0 0062;	
    // (⮠) DOWNWARDS TRIANGLE-HEADED ARROW WITH LONG TIP LEFTWARDS	[0D7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA0, 0x0062 };
    uint32_t const ces[9] = { 0x0D7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_234)
{
    // 2BA1 0021;	
    // (⮡) DOWNWARDS TRIANGLE-HEADED ARROW WITH LONG TIP RIGHTWARDS	[0D7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA1, 0x0021 };
    uint32_t const ces[9] = { 0x0D7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_235)
{
    // 2BA1 003F;	
    // (⮡) DOWNWARDS TRIANGLE-HEADED ARROW WITH LONG TIP RIGHTWARDS	[0D7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA1, 0x003F };
    uint32_t const ces[9] = { 0x0D7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_236)
{
    // 2BA1 0061;	
    // (⮡) DOWNWARDS TRIANGLE-HEADED ARROW WITH LONG TIP RIGHTWARDS	[0D7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA1, 0x0061 };
    uint32_t const ces[9] = { 0x0D7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_237)
{
    // 2BA1 0041;	
    // (⮡) DOWNWARDS TRIANGLE-HEADED ARROW WITH LONG TIP RIGHTWARDS	[0D7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BA1, 0x0041 };
    uint32_t const ces[9] = { 0x0D7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_238)
{
    // 2BA1 0062;	
    // (⮡) DOWNWARDS TRIANGLE-HEADED ARROW WITH LONG TIP RIGHTWARDS	[0D7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA1, 0x0062 };
    uint32_t const ces[9] = { 0x0D7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_239)
{
    // 2BA2 0021;	
    // (⮢) UPWARDS TRIANGLE-HEADED ARROW WITH LONG TIP LEFTWARDS	[0D7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA2, 0x0021 };
    uint32_t const ces[9] = { 0x0D7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_240)
{
    // 2BA2 003F;	
    // (⮢) UPWARDS TRIANGLE-HEADED ARROW WITH LONG TIP LEFTWARDS	[0D7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA2, 0x003F };
    uint32_t const ces[9] = { 0x0D7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_241)
{
    // 2BA2 0061;	
    // (⮢) UPWARDS TRIANGLE-HEADED ARROW WITH LONG TIP LEFTWARDS	[0D7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA2, 0x0061 };
    uint32_t const ces[9] = { 0x0D7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_242)
{
    // 2BA2 0041;	
    // (⮢) UPWARDS TRIANGLE-HEADED ARROW WITH LONG TIP LEFTWARDS	[0D7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BA2, 0x0041 };
    uint32_t const ces[9] = { 0x0D7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_243)
{
    // 2BA2 0062;	
    // (⮢) UPWARDS TRIANGLE-HEADED ARROW WITH LONG TIP LEFTWARDS	[0D7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA2, 0x0062 };
    uint32_t const ces[9] = { 0x0D7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_244)
{
    // 2BA3 0021;	
    // (⮣) UPWARDS TRIANGLE-HEADED ARROW WITH LONG TIP RIGHTWARDS	[0D7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA3, 0x0021 };
    uint32_t const ces[9] = { 0x0D7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_245)
{
    // 2BA3 003F;	
    // (⮣) UPWARDS TRIANGLE-HEADED ARROW WITH LONG TIP RIGHTWARDS	[0D7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA3, 0x003F };
    uint32_t const ces[9] = { 0x0D7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_246)
{
    // 2BA3 0061;	
    // (⮣) UPWARDS TRIANGLE-HEADED ARROW WITH LONG TIP RIGHTWARDS	[0D7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA3, 0x0061 };
    uint32_t const ces[9] = { 0x0D7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_247)
{
    // 2BA3 0041;	
    // (⮣) UPWARDS TRIANGLE-HEADED ARROW WITH LONG TIP RIGHTWARDS	[0D7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BA3, 0x0041 };
    uint32_t const ces[9] = { 0x0D7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_248)
{
    // 2BA3 0062;	
    // (⮣) UPWARDS TRIANGLE-HEADED ARROW WITH LONG TIP RIGHTWARDS	[0D7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA3, 0x0062 };
    uint32_t const ces[9] = { 0x0D7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_249)
{
    // 2BA4 0021;	
    // (⮤) LEFTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP UPWARDS	[0D7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA4, 0x0021 };
    uint32_t const ces[9] = { 0x0D7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_250)
{
    // 2BA4 003F;	
    // (⮤) LEFTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP UPWARDS	[0D7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA4, 0x003F };
    uint32_t const ces[9] = { 0x0D7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_251)
{
    // 2BA4 0061;	
    // (⮤) LEFTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP UPWARDS	[0D7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA4, 0x0061 };
    uint32_t const ces[9] = { 0x0D7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_252)
{
    // 2BA4 0041;	
    // (⮤) LEFTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP UPWARDS	[0D7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BA4, 0x0041 };
    uint32_t const ces[9] = { 0x0D7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_253)
{
    // 2BA4 0062;	
    // (⮤) LEFTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP UPWARDS	[0D7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA4, 0x0062 };
    uint32_t const ces[9] = { 0x0D7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_254)
{
    // 2BA5 0021;	
    // (⮥) RIGHTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP UPWARDS	[0D80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA5, 0x0021 };
    uint32_t const ces[9] = { 0x0D80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_255)
{
    // 2BA5 003F;	
    // (⮥) RIGHTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP UPWARDS	[0D80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA5, 0x003F };
    uint32_t const ces[9] = { 0x0D80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_256)
{
    // 2BA5 0061;	
    // (⮥) RIGHTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP UPWARDS	[0D80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA5, 0x0061 };
    uint32_t const ces[9] = { 0x0D80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_257)
{
    // 2BA5 0041;	
    // (⮥) RIGHTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP UPWARDS	[0D80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BA5, 0x0041 };
    uint32_t const ces[9] = { 0x0D80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_258)
{
    // 2BA5 0062;	
    // (⮥) RIGHTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP UPWARDS	[0D80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA5, 0x0062 };
    uint32_t const ces[9] = { 0x0D80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_259)
{
    // 2BA6 0021;	
    // (⮦) LEFTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP DOWNWARDS	[0D81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA6, 0x0021 };
    uint32_t const ces[9] = { 0x0D81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_260)
{
    // 2BA6 003F;	
    // (⮦) LEFTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP DOWNWARDS	[0D81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA6, 0x003F };
    uint32_t const ces[9] = { 0x0D81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_261)
{
    // 2BA6 0061;	
    // (⮦) LEFTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP DOWNWARDS	[0D81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA6, 0x0061 };
    uint32_t const ces[9] = { 0x0D81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_262)
{
    // 2BA6 0041;	
    // (⮦) LEFTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP DOWNWARDS	[0D81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BA6, 0x0041 };
    uint32_t const ces[9] = { 0x0D81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_263)
{
    // 2BA6 0062;	
    // (⮦) LEFTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP DOWNWARDS	[0D81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA6, 0x0062 };
    uint32_t const ces[9] = { 0x0D81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_264)
{
    // 2BA7 0021;	
    // (⮧) RIGHTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP DOWNWARDS	[0D82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA7, 0x0021 };
    uint32_t const ces[9] = { 0x0D82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_265)
{
    // 2BA7 003F;	
    // (⮧) RIGHTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP DOWNWARDS	[0D82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA7, 0x003F };
    uint32_t const ces[9] = { 0x0D82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_266)
{
    // 2BA7 0061;	
    // (⮧) RIGHTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP DOWNWARDS	[0D82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA7, 0x0061 };
    uint32_t const ces[9] = { 0x0D82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_267)
{
    // 2BA7 0041;	
    // (⮧) RIGHTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP DOWNWARDS	[0D82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BA7, 0x0041 };
    uint32_t const ces[9] = { 0x0D82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_268)
{
    // 2BA7 0062;	
    // (⮧) RIGHTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP DOWNWARDS	[0D82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA7, 0x0062 };
    uint32_t const ces[9] = { 0x0D82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_269)
{
    // 2BA8 0021;	
    // (⮨) BLACK CURVED DOWNWARDS AND LEFTWARDS ARROW	[0D83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA8, 0x0021 };
    uint32_t const ces[9] = { 0x0D83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_270)
{
    // 2BA8 003F;	
    // (⮨) BLACK CURVED DOWNWARDS AND LEFTWARDS ARROW	[0D83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA8, 0x003F };
    uint32_t const ces[9] = { 0x0D83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_271)
{
    // 2BA8 0061;	
    // (⮨) BLACK CURVED DOWNWARDS AND LEFTWARDS ARROW	[0D83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA8, 0x0061 };
    uint32_t const ces[9] = { 0x0D83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_272)
{
    // 2BA8 0041;	
    // (⮨) BLACK CURVED DOWNWARDS AND LEFTWARDS ARROW	[0D83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BA8, 0x0041 };
    uint32_t const ces[9] = { 0x0D83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_273)
{
    // 2BA8 0062;	
    // (⮨) BLACK CURVED DOWNWARDS AND LEFTWARDS ARROW	[0D83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA8, 0x0062 };
    uint32_t const ces[9] = { 0x0D83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_274)
{
    // 2BA9 0021;	
    // (⮩) BLACK CURVED DOWNWARDS AND RIGHTWARDS ARROW	[0D84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA9, 0x0021 };
    uint32_t const ces[9] = { 0x0D84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_275)
{
    // 2BA9 003F;	
    // (⮩) BLACK CURVED DOWNWARDS AND RIGHTWARDS ARROW	[0D84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA9, 0x003F };
    uint32_t const ces[9] = { 0x0D84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_276)
{
    // 2BA9 0061;	
    // (⮩) BLACK CURVED DOWNWARDS AND RIGHTWARDS ARROW	[0D84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA9, 0x0061 };
    uint32_t const ces[9] = { 0x0D84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_277)
{
    // 2BA9 0041;	
    // (⮩) BLACK CURVED DOWNWARDS AND RIGHTWARDS ARROW	[0D84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BA9, 0x0041 };
    uint32_t const ces[9] = { 0x0D84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_278)
{
    // 2BA9 0062;	
    // (⮩) BLACK CURVED DOWNWARDS AND RIGHTWARDS ARROW	[0D84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BA9, 0x0062 };
    uint32_t const ces[9] = { 0x0D84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_279)
{
    // 2BAA 0021;	
    // (⮪) BLACK CURVED UPWARDS AND LEFTWARDS ARROW	[0D85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAA, 0x0021 };
    uint32_t const ces[9] = { 0x0D85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_280)
{
    // 2BAA 003F;	
    // (⮪) BLACK CURVED UPWARDS AND LEFTWARDS ARROW	[0D85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAA, 0x003F };
    uint32_t const ces[9] = { 0x0D85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_281)
{
    // 2BAA 0061;	
    // (⮪) BLACK CURVED UPWARDS AND LEFTWARDS ARROW	[0D85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAA, 0x0061 };
    uint32_t const ces[9] = { 0x0D85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_282)
{
    // 2BAA 0041;	
    // (⮪) BLACK CURVED UPWARDS AND LEFTWARDS ARROW	[0D85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BAA, 0x0041 };
    uint32_t const ces[9] = { 0x0D85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_283)
{
    // 2BAA 0062;	
    // (⮪) BLACK CURVED UPWARDS AND LEFTWARDS ARROW	[0D85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAA, 0x0062 };
    uint32_t const ces[9] = { 0x0D85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_284)
{
    // 2BAB 0021;	
    // (⮫) BLACK CURVED UPWARDS AND RIGHTWARDS ARROW	[0D86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAB, 0x0021 };
    uint32_t const ces[9] = { 0x0D86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_285)
{
    // 2BAB 003F;	
    // (⮫) BLACK CURVED UPWARDS AND RIGHTWARDS ARROW	[0D86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAB, 0x003F };
    uint32_t const ces[9] = { 0x0D86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_286)
{
    // 2BAB 0061;	
    // (⮫) BLACK CURVED UPWARDS AND RIGHTWARDS ARROW	[0D86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAB, 0x0061 };
    uint32_t const ces[9] = { 0x0D86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_287)
{
    // 2BAB 0041;	
    // (⮫) BLACK CURVED UPWARDS AND RIGHTWARDS ARROW	[0D86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BAB, 0x0041 };
    uint32_t const ces[9] = { 0x0D86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_288)
{
    // 2BAB 0062;	
    // (⮫) BLACK CURVED UPWARDS AND RIGHTWARDS ARROW	[0D86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAB, 0x0062 };
    uint32_t const ces[9] = { 0x0D86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_289)
{
    // 2BAC 0021;	
    // (⮬) BLACK CURVED LEFTWARDS AND UPWARDS ARROW	[0D87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAC, 0x0021 };
    uint32_t const ces[9] = { 0x0D87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_290)
{
    // 2BAC 003F;	
    // (⮬) BLACK CURVED LEFTWARDS AND UPWARDS ARROW	[0D87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAC, 0x003F };
    uint32_t const ces[9] = { 0x0D87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_291)
{
    // 2BAC 0061;	
    // (⮬) BLACK CURVED LEFTWARDS AND UPWARDS ARROW	[0D87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAC, 0x0061 };
    uint32_t const ces[9] = { 0x0D87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_292)
{
    // 2BAC 0041;	
    // (⮬) BLACK CURVED LEFTWARDS AND UPWARDS ARROW	[0D87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BAC, 0x0041 };
    uint32_t const ces[9] = { 0x0D87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_293)
{
    // 2BAC 0062;	
    // (⮬) BLACK CURVED LEFTWARDS AND UPWARDS ARROW	[0D87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAC, 0x0062 };
    uint32_t const ces[9] = { 0x0D87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_294)
{
    // 2BAD 0021;	
    // (⮭) BLACK CURVED RIGHTWARDS AND UPWARDS ARROW	[0D88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAD, 0x0021 };
    uint32_t const ces[9] = { 0x0D88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_295)
{
    // 2BAD 003F;	
    // (⮭) BLACK CURVED RIGHTWARDS AND UPWARDS ARROW	[0D88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAD, 0x003F };
    uint32_t const ces[9] = { 0x0D88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_296)
{
    // 2BAD 0061;	
    // (⮭) BLACK CURVED RIGHTWARDS AND UPWARDS ARROW	[0D88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAD, 0x0061 };
    uint32_t const ces[9] = { 0x0D88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_297)
{
    // 2BAD 0041;	
    // (⮭) BLACK CURVED RIGHTWARDS AND UPWARDS ARROW	[0D88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BAD, 0x0041 };
    uint32_t const ces[9] = { 0x0D88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_298)
{
    // 2BAD 0062;	
    // (⮭) BLACK CURVED RIGHTWARDS AND UPWARDS ARROW	[0D88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAD, 0x0062 };
    uint32_t const ces[9] = { 0x0D88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_299)
{
    // 2BAE 0021;	
    // (⮮) BLACK CURVED LEFTWARDS AND DOWNWARDS ARROW	[0D89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAE, 0x0021 };
    uint32_t const ces[9] = { 0x0D89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_300)
{
    // 2BAE 003F;	
    // (⮮) BLACK CURVED LEFTWARDS AND DOWNWARDS ARROW	[0D89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAE, 0x003F };
    uint32_t const ces[9] = { 0x0D89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_301)
{
    // 2BAE 0061;	
    // (⮮) BLACK CURVED LEFTWARDS AND DOWNWARDS ARROW	[0D89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAE, 0x0061 };
    uint32_t const ces[9] = { 0x0D89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_302)
{
    // 2BAE 0041;	
    // (⮮) BLACK CURVED LEFTWARDS AND DOWNWARDS ARROW	[0D89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BAE, 0x0041 };
    uint32_t const ces[9] = { 0x0D89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_303)
{
    // 2BAE 0062;	
    // (⮮) BLACK CURVED LEFTWARDS AND DOWNWARDS ARROW	[0D89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAE, 0x0062 };
    uint32_t const ces[9] = { 0x0D89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_304)
{
    // 2BAF 0021;	
    // (⮯) BLACK CURVED RIGHTWARDS AND DOWNWARDS ARROW	[0D8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAF, 0x0021 };
    uint32_t const ces[9] = { 0x0D8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_305)
{
    // 2BAF 003F;	
    // (⮯) BLACK CURVED RIGHTWARDS AND DOWNWARDS ARROW	[0D8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAF, 0x003F };
    uint32_t const ces[9] = { 0x0D8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_306)
{
    // 2BAF 0061;	
    // (⮯) BLACK CURVED RIGHTWARDS AND DOWNWARDS ARROW	[0D8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAF, 0x0061 };
    uint32_t const ces[9] = { 0x0D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_307)
{
    // 2BAF 0041;	
    // (⮯) BLACK CURVED RIGHTWARDS AND DOWNWARDS ARROW	[0D8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BAF, 0x0041 };
    uint32_t const ces[9] = { 0x0D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_308)
{
    // 2BAF 0062;	
    // (⮯) BLACK CURVED RIGHTWARDS AND DOWNWARDS ARROW	[0D8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BAF, 0x0062 };
    uint32_t const ces[9] = { 0x0D8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_309)
{
    // 2BB0 0021;	
    // (⮰) RIBBON ARROW DOWN LEFT	[0D8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB0, 0x0021 };
    uint32_t const ces[9] = { 0x0D8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_310)
{
    // 2BB0 003F;	
    // (⮰) RIBBON ARROW DOWN LEFT	[0D8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB0, 0x003F };
    uint32_t const ces[9] = { 0x0D8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_311)
{
    // 2BB0 0061;	
    // (⮰) RIBBON ARROW DOWN LEFT	[0D8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB0, 0x0061 };
    uint32_t const ces[9] = { 0x0D8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_312)
{
    // 2BB0 0041;	
    // (⮰) RIBBON ARROW DOWN LEFT	[0D8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BB0, 0x0041 };
    uint32_t const ces[9] = { 0x0D8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_313)
{
    // 2BB0 0062;	
    // (⮰) RIBBON ARROW DOWN LEFT	[0D8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB0, 0x0062 };
    uint32_t const ces[9] = { 0x0D8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_314)
{
    // 2BB1 0021;	
    // (⮱) RIBBON ARROW DOWN RIGHT	[0D8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB1, 0x0021 };
    uint32_t const ces[9] = { 0x0D8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_315)
{
    // 2BB1 003F;	
    // (⮱) RIBBON ARROW DOWN RIGHT	[0D8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB1, 0x003F };
    uint32_t const ces[9] = { 0x0D8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_316)
{
    // 2BB1 0061;	
    // (⮱) RIBBON ARROW DOWN RIGHT	[0D8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB1, 0x0061 };
    uint32_t const ces[9] = { 0x0D8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_317)
{
    // 2BB1 0041;	
    // (⮱) RIBBON ARROW DOWN RIGHT	[0D8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BB1, 0x0041 };
    uint32_t const ces[9] = { 0x0D8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_318)
{
    // 2BB1 0062;	
    // (⮱) RIBBON ARROW DOWN RIGHT	[0D8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB1, 0x0062 };
    uint32_t const ces[9] = { 0x0D8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_319)
{
    // 2BB2 0021;	
    // (⮲) RIBBON ARROW UP LEFT	[0D8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB2, 0x0021 };
    uint32_t const ces[9] = { 0x0D8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_320)
{
    // 2BB2 003F;	
    // (⮲) RIBBON ARROW UP LEFT	[0D8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB2, 0x003F };
    uint32_t const ces[9] = { 0x0D8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_321)
{
    // 2BB2 0061;	
    // (⮲) RIBBON ARROW UP LEFT	[0D8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB2, 0x0061 };
    uint32_t const ces[9] = { 0x0D8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_322)
{
    // 2BB2 0041;	
    // (⮲) RIBBON ARROW UP LEFT	[0D8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BB2, 0x0041 };
    uint32_t const ces[9] = { 0x0D8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_323)
{
    // 2BB2 0062;	
    // (⮲) RIBBON ARROW UP LEFT	[0D8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB2, 0x0062 };
    uint32_t const ces[9] = { 0x0D8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_324)
{
    // 2BB3 0021;	
    // (⮳) RIBBON ARROW UP RIGHT	[0D8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB3, 0x0021 };
    uint32_t const ces[9] = { 0x0D8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_325)
{
    // 2BB3 003F;	
    // (⮳) RIBBON ARROW UP RIGHT	[0D8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB3, 0x003F };
    uint32_t const ces[9] = { 0x0D8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_326)
{
    // 2BB3 0061;	
    // (⮳) RIBBON ARROW UP RIGHT	[0D8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB3, 0x0061 };
    uint32_t const ces[9] = { 0x0D8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_327)
{
    // 2BB3 0041;	
    // (⮳) RIBBON ARROW UP RIGHT	[0D8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BB3, 0x0041 };
    uint32_t const ces[9] = { 0x0D8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_328)
{
    // 2BB3 0062;	
    // (⮳) RIBBON ARROW UP RIGHT	[0D8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB3, 0x0062 };
    uint32_t const ces[9] = { 0x0D8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_329)
{
    // 2BB4 0021;	
    // (⮴) RIBBON ARROW LEFT UP	[0D8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB4, 0x0021 };
    uint32_t const ces[9] = { 0x0D8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_330)
{
    // 2BB4 003F;	
    // (⮴) RIBBON ARROW LEFT UP	[0D8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB4, 0x003F };
    uint32_t const ces[9] = { 0x0D8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_331)
{
    // 2BB4 0061;	
    // (⮴) RIBBON ARROW LEFT UP	[0D8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB4, 0x0061 };
    uint32_t const ces[9] = { 0x0D8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_332)
{
    // 2BB4 0041;	
    // (⮴) RIBBON ARROW LEFT UP	[0D8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BB4, 0x0041 };
    uint32_t const ces[9] = { 0x0D8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_333)
{
    // 2BB4 0062;	
    // (⮴) RIBBON ARROW LEFT UP	[0D8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB4, 0x0062 };
    uint32_t const ces[9] = { 0x0D8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_334)
{
    // 2BB5 0021;	
    // (⮵) RIBBON ARROW RIGHT UP	[0D90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB5, 0x0021 };
    uint32_t const ces[9] = { 0x0D90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_335)
{
    // 2BB5 003F;	
    // (⮵) RIBBON ARROW RIGHT UP	[0D90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB5, 0x003F };
    uint32_t const ces[9] = { 0x0D90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_336)
{
    // 2BB5 0061;	
    // (⮵) RIBBON ARROW RIGHT UP	[0D90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB5, 0x0061 };
    uint32_t const ces[9] = { 0x0D90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_337)
{
    // 2BB5 0041;	
    // (⮵) RIBBON ARROW RIGHT UP	[0D90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BB5, 0x0041 };
    uint32_t const ces[9] = { 0x0D90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_338)
{
    // 2BB5 0062;	
    // (⮵) RIBBON ARROW RIGHT UP	[0D90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB5, 0x0062 };
    uint32_t const ces[9] = { 0x0D90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_339)
{
    // 2BB6 0021;	
    // (⮶) RIBBON ARROW LEFT DOWN	[0D91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB6, 0x0021 };
    uint32_t const ces[9] = { 0x0D91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_340)
{
    // 2BB6 003F;	
    // (⮶) RIBBON ARROW LEFT DOWN	[0D91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB6, 0x003F };
    uint32_t const ces[9] = { 0x0D91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_341)
{
    // 2BB6 0061;	
    // (⮶) RIBBON ARROW LEFT DOWN	[0D91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB6, 0x0061 };
    uint32_t const ces[9] = { 0x0D91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_342)
{
    // 2BB6 0041;	
    // (⮶) RIBBON ARROW LEFT DOWN	[0D91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BB6, 0x0041 };
    uint32_t const ces[9] = { 0x0D91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_343)
{
    // 2BB6 0062;	
    // (⮶) RIBBON ARROW LEFT DOWN	[0D91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB6, 0x0062 };
    uint32_t const ces[9] = { 0x0D91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_344)
{
    // 2BB7 0021;	
    // (⮷) RIBBON ARROW RIGHT DOWN	[0D92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB7, 0x0021 };
    uint32_t const ces[9] = { 0x0D92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_345)
{
    // 2BB7 003F;	
    // (⮷) RIBBON ARROW RIGHT DOWN	[0D92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB7, 0x003F };
    uint32_t const ces[9] = { 0x0D92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_346)
{
    // 2BB7 0061;	
    // (⮷) RIBBON ARROW RIGHT DOWN	[0D92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB7, 0x0061 };
    uint32_t const ces[9] = { 0x0D92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_347)
{
    // 2BB7 0041;	
    // (⮷) RIBBON ARROW RIGHT DOWN	[0D92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BB7, 0x0041 };
    uint32_t const ces[9] = { 0x0D92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_348)
{
    // 2BB7 0062;	
    // (⮷) RIBBON ARROW RIGHT DOWN	[0D92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB7, 0x0062 };
    uint32_t const ces[9] = { 0x0D92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_349)
{
    // 2BB8 0021;	
    // (⮸) UPWARDS WHITE ARROW FROM BAR WITH HORIZONTAL BAR	[0D93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB8, 0x0021 };
    uint32_t const ces[9] = { 0x0D93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_350)
{
    // 2BB8 003F;	
    // (⮸) UPWARDS WHITE ARROW FROM BAR WITH HORIZONTAL BAR	[0D93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB8, 0x003F };
    uint32_t const ces[9] = { 0x0D93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_351)
{
    // 2BB8 0061;	
    // (⮸) UPWARDS WHITE ARROW FROM BAR WITH HORIZONTAL BAR	[0D93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB8, 0x0061 };
    uint32_t const ces[9] = { 0x0D93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_352)
{
    // 2BB8 0041;	
    // (⮸) UPWARDS WHITE ARROW FROM BAR WITH HORIZONTAL BAR	[0D93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BB8, 0x0041 };
    uint32_t const ces[9] = { 0x0D93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_353)
{
    // 2BB8 0062;	
    // (⮸) UPWARDS WHITE ARROW FROM BAR WITH HORIZONTAL BAR	[0D93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB8, 0x0062 };
    uint32_t const ces[9] = { 0x0D93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_354)
{
    // 2BB9 0021;	
    // (⮹) UP ARROWHEAD IN A RECTANGLE BOX	[0D94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB9, 0x0021 };
    uint32_t const ces[9] = { 0x0D94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_355)
{
    // 2BB9 003F;	
    // (⮹) UP ARROWHEAD IN A RECTANGLE BOX	[0D94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB9, 0x003F };
    uint32_t const ces[9] = { 0x0D94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_356)
{
    // 2BB9 0061;	
    // (⮹) UP ARROWHEAD IN A RECTANGLE BOX	[0D94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB9, 0x0061 };
    uint32_t const ces[9] = { 0x0D94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_357)
{
    // 2BB9 0041;	
    // (⮹) UP ARROWHEAD IN A RECTANGLE BOX	[0D94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BB9, 0x0041 };
    uint32_t const ces[9] = { 0x0D94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_358)
{
    // 2BB9 0062;	
    // (⮹) UP ARROWHEAD IN A RECTANGLE BOX	[0D94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BB9, 0x0062 };
    uint32_t const ces[9] = { 0x0D94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_359)
{
    // 2BBD 0021;	
    // (⮽) BALLOT BOX WITH LIGHT X	[0D95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BBD, 0x0021 };
    uint32_t const ces[9] = { 0x0D95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_360)
{
    // 2BBD 003F;	
    // (⮽) BALLOT BOX WITH LIGHT X	[0D95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BBD, 0x003F };
    uint32_t const ces[9] = { 0x0D95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_361)
{
    // 2BBD 0061;	
    // (⮽) BALLOT BOX WITH LIGHT X	[0D95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BBD, 0x0061 };
    uint32_t const ces[9] = { 0x0D95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_362)
{
    // 2BBD 0041;	
    // (⮽) BALLOT BOX WITH LIGHT X	[0D95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BBD, 0x0041 };
    uint32_t const ces[9] = { 0x0D95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_363)
{
    // 2BBD 0062;	
    // (⮽) BALLOT BOX WITH LIGHT X	[0D95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BBD, 0x0062 };
    uint32_t const ces[9] = { 0x0D95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_364)
{
    // 2BBE 0021;	
    // (⮾) CIRCLED X	[0D96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BBE, 0x0021 };
    uint32_t const ces[9] = { 0x0D96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_365)
{
    // 2BBE 003F;	
    // (⮾) CIRCLED X	[0D96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BBE, 0x003F };
    uint32_t const ces[9] = { 0x0D96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_366)
{
    // 2BBE 0061;	
    // (⮾) CIRCLED X	[0D96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BBE, 0x0061 };
    uint32_t const ces[9] = { 0x0D96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_367)
{
    // 2BBE 0041;	
    // (⮾) CIRCLED X	[0D96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BBE, 0x0041 };
    uint32_t const ces[9] = { 0x0D96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_368)
{
    // 2BBE 0062;	
    // (⮾) CIRCLED X	[0D96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BBE, 0x0062 };
    uint32_t const ces[9] = { 0x0D96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_369)
{
    // 2BBF 0021;	
    // (⮿) CIRCLED BOLD X	[0D97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BBF, 0x0021 };
    uint32_t const ces[9] = { 0x0D97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_370)
{
    // 2BBF 003F;	
    // (⮿) CIRCLED BOLD X	[0D97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BBF, 0x003F };
    uint32_t const ces[9] = { 0x0D97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_371)
{
    // 2BBF 0061;	
    // (⮿) CIRCLED BOLD X	[0D97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BBF, 0x0061 };
    uint32_t const ces[9] = { 0x0D97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_372)
{
    // 2BBF 0041;	
    // (⮿) CIRCLED BOLD X	[0D97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BBF, 0x0041 };
    uint32_t const ces[9] = { 0x0D97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_373)
{
    // 2BBF 0062;	
    // (⮿) CIRCLED BOLD X	[0D97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BBF, 0x0062 };
    uint32_t const ces[9] = { 0x0D97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_374)
{
    // 2BC0 0021;	
    // (⯀) BLACK SQUARE CENTRED	[0D98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC0, 0x0021 };
    uint32_t const ces[9] = { 0x0D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_375)
{
    // 2BC0 003F;	
    // (⯀) BLACK SQUARE CENTRED	[0D98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC0, 0x003F };
    uint32_t const ces[9] = { 0x0D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_376)
{
    // 2BC0 0061;	
    // (⯀) BLACK SQUARE CENTRED	[0D98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC0, 0x0061 };
    uint32_t const ces[9] = { 0x0D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_377)
{
    // 2BC0 0041;	
    // (⯀) BLACK SQUARE CENTRED	[0D98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BC0, 0x0041 };
    uint32_t const ces[9] = { 0x0D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_378)
{
    // 2BC0 0062;	
    // (⯀) BLACK SQUARE CENTRED	[0D98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC0, 0x0062 };
    uint32_t const ces[9] = { 0x0D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_379)
{
    // 2BC1 0021;	
    // (⯁) BLACK DIAMOND CENTRED	[0D99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC1, 0x0021 };
    uint32_t const ces[9] = { 0x0D99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_380)
{
    // 2BC1 003F;	
    // (⯁) BLACK DIAMOND CENTRED	[0D99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC1, 0x003F };
    uint32_t const ces[9] = { 0x0D99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_381)
{
    // 2BC1 0061;	
    // (⯁) BLACK DIAMOND CENTRED	[0D99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC1, 0x0061 };
    uint32_t const ces[9] = { 0x0D99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_382)
{
    // 2BC1 0041;	
    // (⯁) BLACK DIAMOND CENTRED	[0D99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BC1, 0x0041 };
    uint32_t const ces[9] = { 0x0D99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_383)
{
    // 2BC1 0062;	
    // (⯁) BLACK DIAMOND CENTRED	[0D99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC1, 0x0062 };
    uint32_t const ces[9] = { 0x0D99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_384)
{
    // 2BC2 0021;	
    // (⯂) TURNED BLACK PENTAGON	[0D9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC2, 0x0021 };
    uint32_t const ces[9] = { 0x0D9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_385)
{
    // 2BC2 003F;	
    // (⯂) TURNED BLACK PENTAGON	[0D9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC2, 0x003F };
    uint32_t const ces[9] = { 0x0D9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_386)
{
    // 2BC2 0061;	
    // (⯂) TURNED BLACK PENTAGON	[0D9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC2, 0x0061 };
    uint32_t const ces[9] = { 0x0D9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_387)
{
    // 2BC2 0041;	
    // (⯂) TURNED BLACK PENTAGON	[0D9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BC2, 0x0041 };
    uint32_t const ces[9] = { 0x0D9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_388)
{
    // 2BC2 0062;	
    // (⯂) TURNED BLACK PENTAGON	[0D9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC2, 0x0062 };
    uint32_t const ces[9] = { 0x0D9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_389)
{
    // 2BC3 0021;	
    // (⯃) HORIZONTAL BLACK OCTAGON	[0D9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC3, 0x0021 };
    uint32_t const ces[9] = { 0x0D9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_390)
{
    // 2BC3 003F;	
    // (⯃) HORIZONTAL BLACK OCTAGON	[0D9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC3, 0x003F };
    uint32_t const ces[9] = { 0x0D9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_391)
{
    // 2BC3 0061;	
    // (⯃) HORIZONTAL BLACK OCTAGON	[0D9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC3, 0x0061 };
    uint32_t const ces[9] = { 0x0D9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_392)
{
    // 2BC3 0041;	
    // (⯃) HORIZONTAL BLACK OCTAGON	[0D9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BC3, 0x0041 };
    uint32_t const ces[9] = { 0x0D9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_393)
{
    // 2BC3 0062;	
    // (⯃) HORIZONTAL BLACK OCTAGON	[0D9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC3, 0x0062 };
    uint32_t const ces[9] = { 0x0D9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_394)
{
    // 2BC4 0021;	
    // (⯄) BLACK OCTAGON	[0D9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC4, 0x0021 };
    uint32_t const ces[9] = { 0x0D9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_395)
{
    // 2BC4 003F;	
    // (⯄) BLACK OCTAGON	[0D9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC4, 0x003F };
    uint32_t const ces[9] = { 0x0D9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_396)
{
    // 2BC4 0061;	
    // (⯄) BLACK OCTAGON	[0D9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC4, 0x0061 };
    uint32_t const ces[9] = { 0x0D9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_397)
{
    // 2BC4 0041;	
    // (⯄) BLACK OCTAGON	[0D9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BC4, 0x0041 };
    uint32_t const ces[9] = { 0x0D9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_398)
{
    // 2BC4 0062;	
    // (⯄) BLACK OCTAGON	[0D9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC4, 0x0062 };
    uint32_t const ces[9] = { 0x0D9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_399)
{
    // 2BC5 0021;	
    // (⯅) BLACK MEDIUM UP-POINTING TRIANGLE CENTRED	[0D9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC5, 0x0021 };
    uint32_t const ces[9] = { 0x0D9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_400)
{
    // 2BC5 003F;	
    // (⯅) BLACK MEDIUM UP-POINTING TRIANGLE CENTRED	[0D9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC5, 0x003F };
    uint32_t const ces[9] = { 0x0D9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_401)
{
    // 2BC5 0061;	
    // (⯅) BLACK MEDIUM UP-POINTING TRIANGLE CENTRED	[0D9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC5, 0x0061 };
    uint32_t const ces[9] = { 0x0D9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_402)
{
    // 2BC5 0041;	
    // (⯅) BLACK MEDIUM UP-POINTING TRIANGLE CENTRED	[0D9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BC5, 0x0041 };
    uint32_t const ces[9] = { 0x0D9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_403)
{
    // 2BC5 0062;	
    // (⯅) BLACK MEDIUM UP-POINTING TRIANGLE CENTRED	[0D9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC5, 0x0062 };
    uint32_t const ces[9] = { 0x0D9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_404)
{
    // 2BC6 0021;	
    // (⯆) BLACK MEDIUM DOWN-POINTING TRIANGLE CENTRED	[0D9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC6, 0x0021 };
    uint32_t const ces[9] = { 0x0D9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_405)
{
    // 2BC6 003F;	
    // (⯆) BLACK MEDIUM DOWN-POINTING TRIANGLE CENTRED	[0D9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC6, 0x003F };
    uint32_t const ces[9] = { 0x0D9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_406)
{
    // 2BC6 0061;	
    // (⯆) BLACK MEDIUM DOWN-POINTING TRIANGLE CENTRED	[0D9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC6, 0x0061 };
    uint32_t const ces[9] = { 0x0D9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_407)
{
    // 2BC6 0041;	
    // (⯆) BLACK MEDIUM DOWN-POINTING TRIANGLE CENTRED	[0D9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BC6, 0x0041 };
    uint32_t const ces[9] = { 0x0D9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_408)
{
    // 2BC6 0062;	
    // (⯆) BLACK MEDIUM DOWN-POINTING TRIANGLE CENTRED	[0D9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC6, 0x0062 };
    uint32_t const ces[9] = { 0x0D9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_409)
{
    // 2BC7 0021;	
    // (⯇) BLACK MEDIUM LEFT-POINTING TRIANGLE CENTRED	[0D9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC7, 0x0021 };
    uint32_t const ces[9] = { 0x0D9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_410)
{
    // 2BC7 003F;	
    // (⯇) BLACK MEDIUM LEFT-POINTING TRIANGLE CENTRED	[0D9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC7, 0x003F };
    uint32_t const ces[9] = { 0x0D9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_411)
{
    // 2BC7 0061;	
    // (⯇) BLACK MEDIUM LEFT-POINTING TRIANGLE CENTRED	[0D9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC7, 0x0061 };
    uint32_t const ces[9] = { 0x0D9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_412)
{
    // 2BC7 0041;	
    // (⯇) BLACK MEDIUM LEFT-POINTING TRIANGLE CENTRED	[0D9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BC7, 0x0041 };
    uint32_t const ces[9] = { 0x0D9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_413)
{
    // 2BC7 0062;	
    // (⯇) BLACK MEDIUM LEFT-POINTING TRIANGLE CENTRED	[0D9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC7, 0x0062 };
    uint32_t const ces[9] = { 0x0D9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_414)
{
    // 2BC8 0021;	
    // (⯈) BLACK MEDIUM RIGHT-POINTING TRIANGLE CENTRED	[0DA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC8, 0x0021 };
    uint32_t const ces[9] = { 0x0DA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_415)
{
    // 2BC8 003F;	
    // (⯈) BLACK MEDIUM RIGHT-POINTING TRIANGLE CENTRED	[0DA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC8, 0x003F };
    uint32_t const ces[9] = { 0x0DA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_416)
{
    // 2BC8 0061;	
    // (⯈) BLACK MEDIUM RIGHT-POINTING TRIANGLE CENTRED	[0DA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC8, 0x0061 };
    uint32_t const ces[9] = { 0x0DA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_417)
{
    // 2BC8 0041;	
    // (⯈) BLACK MEDIUM RIGHT-POINTING TRIANGLE CENTRED	[0DA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BC8, 0x0041 };
    uint32_t const ces[9] = { 0x0DA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_418)
{
    // 2BC8 0062;	
    // (⯈) BLACK MEDIUM RIGHT-POINTING TRIANGLE CENTRED	[0DA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BC8, 0x0062 };
    uint32_t const ces[9] = { 0x0DA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_419)
{
    // 2BCA 0021;	
    // (⯊) TOP HALF BLACK CIRCLE	[0DA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCA, 0x0021 };
    uint32_t const ces[9] = { 0x0DA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_420)
{
    // 2BCA 003F;	
    // (⯊) TOP HALF BLACK CIRCLE	[0DA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCA, 0x003F };
    uint32_t const ces[9] = { 0x0DA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_421)
{
    // 2BCA 0061;	
    // (⯊) TOP HALF BLACK CIRCLE	[0DA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCA, 0x0061 };
    uint32_t const ces[9] = { 0x0DA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_422)
{
    // 2BCA 0041;	
    // (⯊) TOP HALF BLACK CIRCLE	[0DA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BCA, 0x0041 };
    uint32_t const ces[9] = { 0x0DA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_423)
{
    // 2BCA 0062;	
    // (⯊) TOP HALF BLACK CIRCLE	[0DA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCA, 0x0062 };
    uint32_t const ces[9] = { 0x0DA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_424)
{
    // 2BCB 0021;	
    // (⯋) BOTTOM HALF BLACK CIRCLE	[0DA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCB, 0x0021 };
    uint32_t const ces[9] = { 0x0DA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_425)
{
    // 2BCB 003F;	
    // (⯋) BOTTOM HALF BLACK CIRCLE	[0DA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCB, 0x003F };
    uint32_t const ces[9] = { 0x0DA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_426)
{
    // 2BCB 0061;	
    // (⯋) BOTTOM HALF BLACK CIRCLE	[0DA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCB, 0x0061 };
    uint32_t const ces[9] = { 0x0DA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_427)
{
    // 2BCB 0041;	
    // (⯋) BOTTOM HALF BLACK CIRCLE	[0DA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BCB, 0x0041 };
    uint32_t const ces[9] = { 0x0DA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_428)
{
    // 2BCB 0062;	
    // (⯋) BOTTOM HALF BLACK CIRCLE	[0DA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCB, 0x0062 };
    uint32_t const ces[9] = { 0x0DA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_429)
{
    // 2BCC 0021;	
    // (⯌) LIGHT FOUR POINTED BLACK CUSP	[0DA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCC, 0x0021 };
    uint32_t const ces[9] = { 0x0DA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_430)
{
    // 2BCC 003F;	
    // (⯌) LIGHT FOUR POINTED BLACK CUSP	[0DA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCC, 0x003F };
    uint32_t const ces[9] = { 0x0DA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_431)
{
    // 2BCC 0061;	
    // (⯌) LIGHT FOUR POINTED BLACK CUSP	[0DA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCC, 0x0061 };
    uint32_t const ces[9] = { 0x0DA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_432)
{
    // 2BCC 0041;	
    // (⯌) LIGHT FOUR POINTED BLACK CUSP	[0DA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BCC, 0x0041 };
    uint32_t const ces[9] = { 0x0DA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_433)
{
    // 2BCC 0062;	
    // (⯌) LIGHT FOUR POINTED BLACK CUSP	[0DA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCC, 0x0062 };
    uint32_t const ces[9] = { 0x0DA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_434)
{
    // 2BCD 0021;	
    // (⯍) ROTATED LIGHT FOUR POINTED BLACK CUSP	[0DA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCD, 0x0021 };
    uint32_t const ces[9] = { 0x0DA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_435)
{
    // 2BCD 003F;	
    // (⯍) ROTATED LIGHT FOUR POINTED BLACK CUSP	[0DA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCD, 0x003F };
    uint32_t const ces[9] = { 0x0DA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_436)
{
    // 2BCD 0061;	
    // (⯍) ROTATED LIGHT FOUR POINTED BLACK CUSP	[0DA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCD, 0x0061 };
    uint32_t const ces[9] = { 0x0DA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_437)
{
    // 2BCD 0041;	
    // (⯍) ROTATED LIGHT FOUR POINTED BLACK CUSP	[0DA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BCD, 0x0041 };
    uint32_t const ces[9] = { 0x0DA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_438)
{
    // 2BCD 0062;	
    // (⯍) ROTATED LIGHT FOUR POINTED BLACK CUSP	[0DA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCD, 0x0062 };
    uint32_t const ces[9] = { 0x0DA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_439)
{
    // 2BCE 0021;	
    // (⯎) WHITE FOUR POINTED CUSP	[0DA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCE, 0x0021 };
    uint32_t const ces[9] = { 0x0DA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_440)
{
    // 2BCE 003F;	
    // (⯎) WHITE FOUR POINTED CUSP	[0DA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCE, 0x003F };
    uint32_t const ces[9] = { 0x0DA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_441)
{
    // 2BCE 0061;	
    // (⯎) WHITE FOUR POINTED CUSP	[0DA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCE, 0x0061 };
    uint32_t const ces[9] = { 0x0DA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_442)
{
    // 2BCE 0041;	
    // (⯎) WHITE FOUR POINTED CUSP	[0DA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BCE, 0x0041 };
    uint32_t const ces[9] = { 0x0DA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_443)
{
    // 2BCE 0062;	
    // (⯎) WHITE FOUR POINTED CUSP	[0DA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCE, 0x0062 };
    uint32_t const ces[9] = { 0x0DA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_444)
{
    // 2BCF 0021;	
    // (⯏) ROTATED WHITE FOUR POINTED CUSP	[0DA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCF, 0x0021 };
    uint32_t const ces[9] = { 0x0DA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_445)
{
    // 2BCF 003F;	
    // (⯏) ROTATED WHITE FOUR POINTED CUSP	[0DA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCF, 0x003F };
    uint32_t const ces[9] = { 0x0DA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_446)
{
    // 2BCF 0061;	
    // (⯏) ROTATED WHITE FOUR POINTED CUSP	[0DA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCF, 0x0061 };
    uint32_t const ces[9] = { 0x0DA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_447)
{
    // 2BCF 0041;	
    // (⯏) ROTATED WHITE FOUR POINTED CUSP	[0DA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BCF, 0x0041 };
    uint32_t const ces[9] = { 0x0DA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_448)
{
    // 2BCF 0062;	
    // (⯏) ROTATED WHITE FOUR POINTED CUSP	[0DA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BCF, 0x0062 };
    uint32_t const ces[9] = { 0x0DA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_449)
{
    // 2BD0 0021;	
    // (⯐) SQUARE POSITION INDICATOR	[0DA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BD0, 0x0021 };
    uint32_t const ces[9] = { 0x0DA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_450)
{
    // 2BD0 003F;	
    // (⯐) SQUARE POSITION INDICATOR	[0DA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BD0, 0x003F };
    uint32_t const ces[9] = { 0x0DA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_451)
{
    // 2BD0 0061;	
    // (⯐) SQUARE POSITION INDICATOR	[0DA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BD0, 0x0061 };
    uint32_t const ces[9] = { 0x0DA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_452)
{
    // 2BD0 0041;	
    // (⯐) SQUARE POSITION INDICATOR	[0DA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BD0, 0x0041 };
    uint32_t const ces[9] = { 0x0DA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_453)
{
    // 2BD0 0062;	
    // (⯐) SQUARE POSITION INDICATOR	[0DA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BD0, 0x0062 };
    uint32_t const ces[9] = { 0x0DA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_454)
{
    // 2BD1 0021;	
    // (⯑) UNCERTAINTY SIGN	[0DA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BD1, 0x0021 };
    uint32_t const ces[9] = { 0x0DA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_455)
{
    // 2BD1 003F;	
    // (⯑) UNCERTAINTY SIGN	[0DA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BD1, 0x003F };
    uint32_t const ces[9] = { 0x0DA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_456)
{
    // 2BD1 0061;	
    // (⯑) UNCERTAINTY SIGN	[0DA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BD1, 0x0061 };
    uint32_t const ces[9] = { 0x0DA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_457)
{
    // 2BD1 0041;	
    // (⯑) UNCERTAINTY SIGN	[0DA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BD1, 0x0041 };
    uint32_t const ces[9] = { 0x0DA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_458)
{
    // 2BD1 0062;	
    // (⯑) UNCERTAINTY SIGN	[0DA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BD1, 0x0062 };
    uint32_t const ces[9] = { 0x0DA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_459)
{
    // 2BD2 0021;	
    // (⯒) GROUP MARK	[0DA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BD2, 0x0021 };
    uint32_t const ces[9] = { 0x0DA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_460)
{
    // 2BD2 003F;	
    // (⯒) GROUP MARK	[0DA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BD2, 0x003F };
    uint32_t const ces[9] = { 0x0DA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_461)
{
    // 2BD2 0061;	
    // (⯒) GROUP MARK	[0DA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BD2, 0x0061 };
    uint32_t const ces[9] = { 0x0DA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_462)
{
    // 2BD2 0041;	
    // (⯒) GROUP MARK	[0DA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BD2, 0x0041 };
    uint32_t const ces[9] = { 0x0DA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_463)
{
    // 2BD2 0062;	
    // (⯒) GROUP MARK	[0DA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BD2, 0x0062 };
    uint32_t const ces[9] = { 0x0DA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_464)
{
    // 2BEC 0021;	
    // (⯬) LEFTWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS	[0DAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BEC, 0x0021 };
    uint32_t const ces[9] = { 0x0DAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_465)
{
    // 2BEC 003F;	
    // (⯬) LEFTWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS	[0DAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BEC, 0x003F };
    uint32_t const ces[9] = { 0x0DAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_466)
{
    // 2BEC 0061;	
    // (⯬) LEFTWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS	[0DAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BEC, 0x0061 };
    uint32_t const ces[9] = { 0x0DAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_467)
{
    // 2BEC 0041;	
    // (⯬) LEFTWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS	[0DAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BEC, 0x0041 };
    uint32_t const ces[9] = { 0x0DAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_468)
{
    // 2BEC 0062;	
    // (⯬) LEFTWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS	[0DAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BEC, 0x0062 };
    uint32_t const ces[9] = { 0x0DAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_469)
{
    // 2BED 0021;	
    // (⯭) UPWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS	[0DAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BED, 0x0021 };
    uint32_t const ces[9] = { 0x0DAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_470)
{
    // 2BED 003F;	
    // (⯭) UPWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS	[0DAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BED, 0x003F };
    uint32_t const ces[9] = { 0x0DAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_471)
{
    // 2BED 0061;	
    // (⯭) UPWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS	[0DAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BED, 0x0061 };
    uint32_t const ces[9] = { 0x0DAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_472)
{
    // 2BED 0041;	
    // (⯭) UPWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS	[0DAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BED, 0x0041 };
    uint32_t const ces[9] = { 0x0DAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_473)
{
    // 2BED 0062;	
    // (⯭) UPWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS	[0DAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BED, 0x0062 };
    uint32_t const ces[9] = { 0x0DAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_474)
{
    // 2BEE 0021;	
    // (⯮) RIGHTWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS	[0DAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BEE, 0x0021 };
    uint32_t const ces[9] = { 0x0DAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_475)
{
    // 2BEE 003F;	
    // (⯮) RIGHTWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS	[0DAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BEE, 0x003F };
    uint32_t const ces[9] = { 0x0DAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_476)
{
    // 2BEE 0061;	
    // (⯮) RIGHTWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS	[0DAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BEE, 0x0061 };
    uint32_t const ces[9] = { 0x0DAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_477)
{
    // 2BEE 0041;	
    // (⯮) RIGHTWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS	[0DAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BEE, 0x0041 };
    uint32_t const ces[9] = { 0x0DAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_478)
{
    // 2BEE 0062;	
    // (⯮) RIGHTWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS	[0DAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BEE, 0x0062 };
    uint32_t const ces[9] = { 0x0DAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_479)
{
    // 2BEF 0021;	
    // (⯯) DOWNWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS	[0DAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BEF, 0x0021 };
    uint32_t const ces[9] = { 0x0DAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_480)
{
    // 2BEF 003F;	
    // (⯯) DOWNWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS	[0DAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BEF, 0x003F };
    uint32_t const ces[9] = { 0x0DAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_481)
{
    // 2BEF 0061;	
    // (⯯) DOWNWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS	[0DAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BEF, 0x0061 };
    uint32_t const ces[9] = { 0x0DAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_482)
{
    // 2BEF 0041;	
    // (⯯) DOWNWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS	[0DAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2BEF, 0x0041 };
    uint32_t const ces[9] = { 0x0DAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_483)
{
    // 2BEF 0062;	
    // (⯯) DOWNWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS	[0DAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2BEF, 0x0062 };
    uint32_t const ces[9] = { 0x0DAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_484)
{
    // 2CE5 0021;	
    // (⳥) COPTIC SYMBOL MI RO	[0DAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CE5, 0x0021 };
    uint32_t const ces[9] = { 0x0DAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_485)
{
    // 2CE5 003F;	
    // (⳥) COPTIC SYMBOL MI RO	[0DAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CE5, 0x003F };
    uint32_t const ces[9] = { 0x0DAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_486)
{
    // 2CE5 0061;	
    // (⳥) COPTIC SYMBOL MI RO	[0DAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CE5, 0x0061 };
    uint32_t const ces[9] = { 0x0DAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_487)
{
    // 2CE5 0041;	
    // (⳥) COPTIC SYMBOL MI RO	[0DAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2CE5, 0x0041 };
    uint32_t const ces[9] = { 0x0DAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_488)
{
    // 2CE5 0062;	
    // (⳥) COPTIC SYMBOL MI RO	[0DAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CE5, 0x0062 };
    uint32_t const ces[9] = { 0x0DAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_489)
{
    // 2CE6 0021;	
    // (⳦) COPTIC SYMBOL PI RO	[0DAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CE6, 0x0021 };
    uint32_t const ces[9] = { 0x0DAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_490)
{
    // 2CE6 003F;	
    // (⳦) COPTIC SYMBOL PI RO	[0DAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CE6, 0x003F };
    uint32_t const ces[9] = { 0x0DAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_491)
{
    // 2CE6 0061;	
    // (⳦) COPTIC SYMBOL PI RO	[0DAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CE6, 0x0061 };
    uint32_t const ces[9] = { 0x0DAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_492)
{
    // 2CE6 0041;	
    // (⳦) COPTIC SYMBOL PI RO	[0DAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2CE6, 0x0041 };
    uint32_t const ces[9] = { 0x0DAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_493)
{
    // 2CE6 0062;	
    // (⳦) COPTIC SYMBOL PI RO	[0DAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CE6, 0x0062 };
    uint32_t const ces[9] = { 0x0DAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_494)
{
    // 2CE7 0021;	
    // (⳧) COPTIC SYMBOL STAUROS	[0DB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CE7, 0x0021 };
    uint32_t const ces[9] = { 0x0DB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_495)
{
    // 2CE7 003F;	
    // (⳧) COPTIC SYMBOL STAUROS	[0DB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CE7, 0x003F };
    uint32_t const ces[9] = { 0x0DB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_496)
{
    // 2CE7 0061;	
    // (⳧) COPTIC SYMBOL STAUROS	[0DB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CE7, 0x0061 };
    uint32_t const ces[9] = { 0x0DB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_497)
{
    // 2CE7 0041;	
    // (⳧) COPTIC SYMBOL STAUROS	[0DB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2CE7, 0x0041 };
    uint32_t const ces[9] = { 0x0DB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_498)
{
    // 2CE7 0062;	
    // (⳧) COPTIC SYMBOL STAUROS	[0DB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CE7, 0x0062 };
    uint32_t const ces[9] = { 0x0DB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_041_499)
{
    // 2CE8 0021;	
    // (⳨) COPTIC SYMBOL TAU RO	[0DB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CE8, 0x0021 };
    uint32_t const ces[9] = { 0x0DB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

