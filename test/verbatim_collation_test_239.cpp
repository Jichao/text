// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, verbatim_239_000)
{
    uint32_t const cps[2] = { 0x1E877, 0x0041 };

    // 1E877 0041;	
    // (‎‎𞡷‎‎) MENDE KIKAKUI SYLLABLE M090 NGGI	[3C9C 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3C9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E877 0041;	
    // (‎‎𞡷‎‎) MENDE KIKAKUI SYLLABLE M090 NGGI	[3C9C 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3C9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_001)
{
    uint32_t const cps[2] = { 0x1E877, 0x0062 };

    // 1E877 0062;	
    // (‎‎𞡷‎‎) MENDE KIKAKUI SYLLABLE M090 NGGI	[3C9C 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3C9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E877 0062;	
    // (‎‎𞡷‎‎) MENDE KIKAKUI SYLLABLE M090 NGGI	[3C9C 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3C9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_002)
{
    uint32_t const cps[2] = { 0x1E878, 0x0021 };

    // 1E878 0021;	
    // (‎‎𞡸‎‎) MENDE KIKAKUI SYLLABLE M043 NGGA	[3C9D 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3C9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E878 0021;	
    // (‎‎𞡸‎‎) MENDE KIKAKUI SYLLABLE M043 NGGA	[3C9D | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3C9D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_003)
{
    uint32_t const cps[2] = { 0x1E878, 0x003F };

    // 1E878 003F;	
    // (‎‎𞡸‎‎) MENDE KIKAKUI SYLLABLE M043 NGGA	[3C9D 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3C9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E878 003F;	
    // (‎‎𞡸‎‎) MENDE KIKAKUI SYLLABLE M043 NGGA	[3C9D | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3C9D, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_004)
{
    uint32_t const cps[2] = { 0x1E878, 0x0061 };

    // 1E878 0061;	
    // (‎‎𞡸‎‎) MENDE KIKAKUI SYLLABLE M043 NGGA	[3C9D 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3C9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E878 0061;	
    // (‎‎𞡸‎‎) MENDE KIKAKUI SYLLABLE M043 NGGA	[3C9D 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3C9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_005)
{
    uint32_t const cps[2] = { 0x1E878, 0x0041 };

    // 1E878 0041;	
    // (‎‎𞡸‎‎) MENDE KIKAKUI SYLLABLE M043 NGGA	[3C9D 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3C9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E878 0041;	
    // (‎‎𞡸‎‎) MENDE KIKAKUI SYLLABLE M043 NGGA	[3C9D 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3C9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_006)
{
    uint32_t const cps[2] = { 0x1E878, 0x0062 };

    // 1E878 0062;	
    // (‎‎𞡸‎‎) MENDE KIKAKUI SYLLABLE M043 NGGA	[3C9D 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3C9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E878 0062;	
    // (‎‎𞡸‎‎) MENDE KIKAKUI SYLLABLE M043 NGGA	[3C9D 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3C9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_007)
{
    uint32_t const cps[2] = { 0x1E879, 0x0021 };

    // 1E879 0021;	
    // (‎‎𞡹‎‎) MENDE KIKAKUI SYLLABLE M082 NGGU	[3C9E 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3C9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E879 0021;	
    // (‎‎𞡹‎‎) MENDE KIKAKUI SYLLABLE M082 NGGU	[3C9E | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3C9E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_008)
{
    uint32_t const cps[2] = { 0x1E879, 0x003F };

    // 1E879 003F;	
    // (‎‎𞡹‎‎) MENDE KIKAKUI SYLLABLE M082 NGGU	[3C9E 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3C9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E879 003F;	
    // (‎‎𞡹‎‎) MENDE KIKAKUI SYLLABLE M082 NGGU	[3C9E | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3C9E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_009)
{
    uint32_t const cps[2] = { 0x1E879, 0x0061 };

    // 1E879 0061;	
    // (‎‎𞡹‎‎) MENDE KIKAKUI SYLLABLE M082 NGGU	[3C9E 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3C9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E879 0061;	
    // (‎‎𞡹‎‎) MENDE KIKAKUI SYLLABLE M082 NGGU	[3C9E 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3C9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_010)
{
    uint32_t const cps[2] = { 0x1E879, 0x0041 };

    // 1E879 0041;	
    // (‎‎𞡹‎‎) MENDE KIKAKUI SYLLABLE M082 NGGU	[3C9E 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3C9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E879 0041;	
    // (‎‎𞡹‎‎) MENDE KIKAKUI SYLLABLE M082 NGGU	[3C9E 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3C9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_011)
{
    uint32_t const cps[2] = { 0x1E879, 0x0062 };

    // 1E879 0062;	
    // (‎‎𞡹‎‎) MENDE KIKAKUI SYLLABLE M082 NGGU	[3C9E 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3C9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E879 0062;	
    // (‎‎𞡹‎‎) MENDE KIKAKUI SYLLABLE M082 NGGU	[3C9E 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3C9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_012)
{
    uint32_t const cps[2] = { 0x1E87A, 0x0021 };

    // 1E87A 0021;	
    // (‎‎𞡺‎‎) MENDE KIKAKUI SYLLABLE M115 NGGEE	[3C9F 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3C9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87A 0021;	
    // (‎‎𞡺‎‎) MENDE KIKAKUI SYLLABLE M115 NGGEE	[3C9F | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3C9F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_013)
{
    uint32_t const cps[2] = { 0x1E87A, 0x003F };

    // 1E87A 003F;	
    // (‎‎𞡺‎‎) MENDE KIKAKUI SYLLABLE M115 NGGEE	[3C9F 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3C9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87A 003F;	
    // (‎‎𞡺‎‎) MENDE KIKAKUI SYLLABLE M115 NGGEE	[3C9F | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3C9F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_014)
{
    uint32_t const cps[2] = { 0x1E87A, 0x0061 };

    // 1E87A 0061;	
    // (‎‎𞡺‎‎) MENDE KIKAKUI SYLLABLE M115 NGGEE	[3C9F 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3C9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87A 0061;	
    // (‎‎𞡺‎‎) MENDE KIKAKUI SYLLABLE M115 NGGEE	[3C9F 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3C9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_015)
{
    uint32_t const cps[2] = { 0x1E87A, 0x0041 };

    // 1E87A 0041;	
    // (‎‎𞡺‎‎) MENDE KIKAKUI SYLLABLE M115 NGGEE	[3C9F 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3C9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87A 0041;	
    // (‎‎𞡺‎‎) MENDE KIKAKUI SYLLABLE M115 NGGEE	[3C9F 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3C9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_016)
{
    uint32_t const cps[2] = { 0x1E87A, 0x0062 };

    // 1E87A 0062;	
    // (‎‎𞡺‎‎) MENDE KIKAKUI SYLLABLE M115 NGGEE	[3C9F 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3C9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87A 0062;	
    // (‎‎𞡺‎‎) MENDE KIKAKUI SYLLABLE M115 NGGEE	[3C9F 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3C9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_017)
{
    uint32_t const cps[2] = { 0x1E87B, 0x0021 };

    // 1E87B 0021;	
    // (‎‎𞡻‎‎) MENDE KIKAKUI SYLLABLE M146 NGGE	[3CA0 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87B 0021;	
    // (‎‎𞡻‎‎) MENDE KIKAKUI SYLLABLE M146 NGGE	[3CA0 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CA0, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_018)
{
    uint32_t const cps[2] = { 0x1E87B, 0x003F };

    // 1E87B 003F;	
    // (‎‎𞡻‎‎) MENDE KIKAKUI SYLLABLE M146 NGGE	[3CA0 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87B 003F;	
    // (‎‎𞡻‎‎) MENDE KIKAKUI SYLLABLE M146 NGGE	[3CA0 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CA0, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_019)
{
    uint32_t const cps[2] = { 0x1E87B, 0x0061 };

    // 1E87B 0061;	
    // (‎‎𞡻‎‎) MENDE KIKAKUI SYLLABLE M146 NGGE	[3CA0 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87B 0061;	
    // (‎‎𞡻‎‎) MENDE KIKAKUI SYLLABLE M146 NGGE	[3CA0 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_020)
{
    uint32_t const cps[2] = { 0x1E87B, 0x0041 };

    // 1E87B 0041;	
    // (‎‎𞡻‎‎) MENDE KIKAKUI SYLLABLE M146 NGGE	[3CA0 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87B 0041;	
    // (‎‎𞡻‎‎) MENDE KIKAKUI SYLLABLE M146 NGGE	[3CA0 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_021)
{
    uint32_t const cps[2] = { 0x1E87B, 0x0062 };

    // 1E87B 0062;	
    // (‎‎𞡻‎‎) MENDE KIKAKUI SYLLABLE M146 NGGE	[3CA0 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87B 0062;	
    // (‎‎𞡻‎‎) MENDE KIKAKUI SYLLABLE M146 NGGE	[3CA0 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_022)
{
    uint32_t const cps[2] = { 0x1E87C, 0x0021 };

    // 1E87C 0021;	
    // (‎‎𞡼‎‎) MENDE KIKAKUI SYLLABLE M156 NGGOO	[3CA1 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87C 0021;	
    // (‎‎𞡼‎‎) MENDE KIKAKUI SYLLABLE M156 NGGOO	[3CA1 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CA1, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_023)
{
    uint32_t const cps[2] = { 0x1E87C, 0x003F };

    // 1E87C 003F;	
    // (‎‎𞡼‎‎) MENDE KIKAKUI SYLLABLE M156 NGGOO	[3CA1 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87C 003F;	
    // (‎‎𞡼‎‎) MENDE KIKAKUI SYLLABLE M156 NGGOO	[3CA1 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CA1, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_024)
{
    uint32_t const cps[2] = { 0x1E87C, 0x0061 };

    // 1E87C 0061;	
    // (‎‎𞡼‎‎) MENDE KIKAKUI SYLLABLE M156 NGGOO	[3CA1 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87C 0061;	
    // (‎‎𞡼‎‎) MENDE KIKAKUI SYLLABLE M156 NGGOO	[3CA1 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_025)
{
    uint32_t const cps[2] = { 0x1E87C, 0x0041 };

    // 1E87C 0041;	
    // (‎‎𞡼‎‎) MENDE KIKAKUI SYLLABLE M156 NGGOO	[3CA1 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87C 0041;	
    // (‎‎𞡼‎‎) MENDE KIKAKUI SYLLABLE M156 NGGOO	[3CA1 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_026)
{
    uint32_t const cps[2] = { 0x1E87C, 0x0062 };

    // 1E87C 0062;	
    // (‎‎𞡼‎‎) MENDE KIKAKUI SYLLABLE M156 NGGOO	[3CA1 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87C 0062;	
    // (‎‎𞡼‎‎) MENDE KIKAKUI SYLLABLE M156 NGGOO	[3CA1 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_027)
{
    uint32_t const cps[2] = { 0x1E87D, 0x0021 };

    // 1E87D 0021;	
    // (‎‎𞡽‎‎) MENDE KIKAKUI SYLLABLE M120 NGGO	[3CA2 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87D 0021;	
    // (‎‎𞡽‎‎) MENDE KIKAKUI SYLLABLE M120 NGGO	[3CA2 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CA2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_028)
{
    uint32_t const cps[2] = { 0x1E87D, 0x003F };

    // 1E87D 003F;	
    // (‎‎𞡽‎‎) MENDE KIKAKUI SYLLABLE M120 NGGO	[3CA2 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87D 003F;	
    // (‎‎𞡽‎‎) MENDE KIKAKUI SYLLABLE M120 NGGO	[3CA2 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CA2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_029)
{
    uint32_t const cps[2] = { 0x1E87D, 0x0061 };

    // 1E87D 0061;	
    // (‎‎𞡽‎‎) MENDE KIKAKUI SYLLABLE M120 NGGO	[3CA2 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87D 0061;	
    // (‎‎𞡽‎‎) MENDE KIKAKUI SYLLABLE M120 NGGO	[3CA2 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_030)
{
    uint32_t const cps[2] = { 0x1E87D, 0x0041 };

    // 1E87D 0041;	
    // (‎‎𞡽‎‎) MENDE KIKAKUI SYLLABLE M120 NGGO	[3CA2 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87D 0041;	
    // (‎‎𞡽‎‎) MENDE KIKAKUI SYLLABLE M120 NGGO	[3CA2 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_031)
{
    uint32_t const cps[2] = { 0x1E87D, 0x0062 };

    // 1E87D 0062;	
    // (‎‎𞡽‎‎) MENDE KIKAKUI SYLLABLE M120 NGGO	[3CA2 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87D 0062;	
    // (‎‎𞡽‎‎) MENDE KIKAKUI SYLLABLE M120 NGGO	[3CA2 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_032)
{
    uint32_t const cps[2] = { 0x1E87E, 0x0021 };

    // 1E87E 0021;	
    // (‎‎𞡾‎‎) MENDE KIKAKUI SYLLABLE M159 NGGAA	[3CA3 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87E 0021;	
    // (‎‎𞡾‎‎) MENDE KIKAKUI SYLLABLE M159 NGGAA	[3CA3 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CA3, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_033)
{
    uint32_t const cps[2] = { 0x1E87E, 0x003F };

    // 1E87E 003F;	
    // (‎‎𞡾‎‎) MENDE KIKAKUI SYLLABLE M159 NGGAA	[3CA3 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87E 003F;	
    // (‎‎𞡾‎‎) MENDE KIKAKUI SYLLABLE M159 NGGAA	[3CA3 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CA3, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_034)
{
    uint32_t const cps[2] = { 0x1E87E, 0x0061 };

    // 1E87E 0061;	
    // (‎‎𞡾‎‎) MENDE KIKAKUI SYLLABLE M159 NGGAA	[3CA3 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87E 0061;	
    // (‎‎𞡾‎‎) MENDE KIKAKUI SYLLABLE M159 NGGAA	[3CA3 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_035)
{
    uint32_t const cps[2] = { 0x1E87E, 0x0041 };

    // 1E87E 0041;	
    // (‎‎𞡾‎‎) MENDE KIKAKUI SYLLABLE M159 NGGAA	[3CA3 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87E 0041;	
    // (‎‎𞡾‎‎) MENDE KIKAKUI SYLLABLE M159 NGGAA	[3CA3 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_036)
{
    uint32_t const cps[2] = { 0x1E87E, 0x0062 };

    // 1E87E 0062;	
    // (‎‎𞡾‎‎) MENDE KIKAKUI SYLLABLE M159 NGGAA	[3CA3 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87E 0062;	
    // (‎‎𞡾‎‎) MENDE KIKAKUI SYLLABLE M159 NGGAA	[3CA3 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_037)
{
    uint32_t const cps[2] = { 0x1E87F, 0x0021 };

    // 1E87F 0021;	
    // (‎‎𞡿‎‎) MENDE KIKAKUI SYLLABLE M127 NGGUA	[3CA4 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87F 0021;	
    // (‎‎𞡿‎‎) MENDE KIKAKUI SYLLABLE M127 NGGUA	[3CA4 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CA4, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_038)
{
    uint32_t const cps[2] = { 0x1E87F, 0x003F };

    // 1E87F 003F;	
    // (‎‎𞡿‎‎) MENDE KIKAKUI SYLLABLE M127 NGGUA	[3CA4 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87F 003F;	
    // (‎‎𞡿‎‎) MENDE KIKAKUI SYLLABLE M127 NGGUA	[3CA4 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CA4, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_039)
{
    uint32_t const cps[2] = { 0x1E87F, 0x0061 };

    // 1E87F 0061;	
    // (‎‎𞡿‎‎) MENDE KIKAKUI SYLLABLE M127 NGGUA	[3CA4 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87F 0061;	
    // (‎‎𞡿‎‎) MENDE KIKAKUI SYLLABLE M127 NGGUA	[3CA4 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_040)
{
    uint32_t const cps[2] = { 0x1E87F, 0x0041 };

    // 1E87F 0041;	
    // (‎‎𞡿‎‎) MENDE KIKAKUI SYLLABLE M127 NGGUA	[3CA4 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87F 0041;	
    // (‎‎𞡿‎‎) MENDE KIKAKUI SYLLABLE M127 NGGUA	[3CA4 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_041)
{
    uint32_t const cps[2] = { 0x1E87F, 0x0062 };

    // 1E87F 0062;	
    // (‎‎𞡿‎‎) MENDE KIKAKUI SYLLABLE M127 NGGUA	[3CA4 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E87F 0062;	
    // (‎‎𞡿‎‎) MENDE KIKAKUI SYLLABLE M127 NGGUA	[3CA4 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_042)
{
    uint32_t const cps[2] = { 0x1E880, 0x0021 };

    // 1E880 0021;	
    // (‎‎𞢀‎‎) MENDE KIKAKUI SYLLABLE M086 LONG NGGE	[3CA5 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E880 0021;	
    // (‎‎𞢀‎‎) MENDE KIKAKUI SYLLABLE M086 LONG NGGE	[3CA5 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CA5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_043)
{
    uint32_t const cps[2] = { 0x1E880, 0x003F };

    // 1E880 003F;	
    // (‎‎𞢀‎‎) MENDE KIKAKUI SYLLABLE M086 LONG NGGE	[3CA5 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E880 003F;	
    // (‎‎𞢀‎‎) MENDE KIKAKUI SYLLABLE M086 LONG NGGE	[3CA5 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CA5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_044)
{
    uint32_t const cps[2] = { 0x1E880, 0x0061 };

    // 1E880 0061;	
    // (‎‎𞢀‎‎) MENDE KIKAKUI SYLLABLE M086 LONG NGGE	[3CA5 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E880 0061;	
    // (‎‎𞢀‎‎) MENDE KIKAKUI SYLLABLE M086 LONG NGGE	[3CA5 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_045)
{
    uint32_t const cps[2] = { 0x1E880, 0x0041 };

    // 1E880 0041;	
    // (‎‎𞢀‎‎) MENDE KIKAKUI SYLLABLE M086 LONG NGGE	[3CA5 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E880 0041;	
    // (‎‎𞢀‎‎) MENDE KIKAKUI SYLLABLE M086 LONG NGGE	[3CA5 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_046)
{
    uint32_t const cps[2] = { 0x1E880, 0x0062 };

    // 1E880 0062;	
    // (‎‎𞢀‎‎) MENDE KIKAKUI SYLLABLE M086 LONG NGGE	[3CA5 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E880 0062;	
    // (‎‎𞢀‎‎) MENDE KIKAKUI SYLLABLE M086 LONG NGGE	[3CA5 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_047)
{
    uint32_t const cps[2] = { 0x1E881, 0x0021 };

    // 1E881 0021;	
    // (‎‎𞢁‎‎) MENDE KIKAKUI SYLLABLE M106 LONG NGGOO	[3CA6 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E881 0021;	
    // (‎‎𞢁‎‎) MENDE KIKAKUI SYLLABLE M106 LONG NGGOO	[3CA6 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CA6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_048)
{
    uint32_t const cps[2] = { 0x1E881, 0x003F };

    // 1E881 003F;	
    // (‎‎𞢁‎‎) MENDE KIKAKUI SYLLABLE M106 LONG NGGOO	[3CA6 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E881 003F;	
    // (‎‎𞢁‎‎) MENDE KIKAKUI SYLLABLE M106 LONG NGGOO	[3CA6 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CA6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_049)
{
    uint32_t const cps[2] = { 0x1E881, 0x0061 };

    // 1E881 0061;	
    // (‎‎𞢁‎‎) MENDE KIKAKUI SYLLABLE M106 LONG NGGOO	[3CA6 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E881 0061;	
    // (‎‎𞢁‎‎) MENDE KIKAKUI SYLLABLE M106 LONG NGGOO	[3CA6 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_050)
{
    uint32_t const cps[2] = { 0x1E881, 0x0041 };

    // 1E881 0041;	
    // (‎‎𞢁‎‎) MENDE KIKAKUI SYLLABLE M106 LONG NGGOO	[3CA6 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E881 0041;	
    // (‎‎𞢁‎‎) MENDE KIKAKUI SYLLABLE M106 LONG NGGOO	[3CA6 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_051)
{
    uint32_t const cps[2] = { 0x1E881, 0x0062 };

    // 1E881 0062;	
    // (‎‎𞢁‎‎) MENDE KIKAKUI SYLLABLE M106 LONG NGGOO	[3CA6 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E881 0062;	
    // (‎‎𞢁‎‎) MENDE KIKAKUI SYLLABLE M106 LONG NGGOO	[3CA6 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_052)
{
    uint32_t const cps[2] = { 0x1E882, 0x0021 };

    // 1E882 0021;	
    // (‎‎𞢂‎‎) MENDE KIKAKUI SYLLABLE M183 LONG NGGO	[3CA7 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E882 0021;	
    // (‎‎𞢂‎‎) MENDE KIKAKUI SYLLABLE M183 LONG NGGO	[3CA7 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_053)
{
    uint32_t const cps[2] = { 0x1E882, 0x003F };

    // 1E882 003F;	
    // (‎‎𞢂‎‎) MENDE KIKAKUI SYLLABLE M183 LONG NGGO	[3CA7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E882 003F;	
    // (‎‎𞢂‎‎) MENDE KIKAKUI SYLLABLE M183 LONG NGGO	[3CA7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CA7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_054)
{
    uint32_t const cps[2] = { 0x1E882, 0x0061 };

    // 1E882 0061;	
    // (‎‎𞢂‎‎) MENDE KIKAKUI SYLLABLE M183 LONG NGGO	[3CA7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E882 0061;	
    // (‎‎𞢂‎‎) MENDE KIKAKUI SYLLABLE M183 LONG NGGO	[3CA7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_055)
{
    uint32_t const cps[2] = { 0x1E882, 0x0041 };

    // 1E882 0041;	
    // (‎‎𞢂‎‎) MENDE KIKAKUI SYLLABLE M183 LONG NGGO	[3CA7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E882 0041;	
    // (‎‎𞢂‎‎) MENDE KIKAKUI SYLLABLE M183 LONG NGGO	[3CA7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_056)
{
    uint32_t const cps[2] = { 0x1E882, 0x0062 };

    // 1E882 0062;	
    // (‎‎𞢂‎‎) MENDE KIKAKUI SYLLABLE M183 LONG NGGO	[3CA7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E882 0062;	
    // (‎‎𞢂‎‎) MENDE KIKAKUI SYLLABLE M183 LONG NGGO	[3CA7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_057)
{
    uint32_t const cps[2] = { 0x1E883, 0x0021 };

    // 1E883 0021;	
    // (‎‎𞢃‎‎) MENDE KIKAKUI SYLLABLE M155 GI	[3CA8 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E883 0021;	
    // (‎‎𞢃‎‎) MENDE KIKAKUI SYLLABLE M155 GI	[3CA8 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CA8, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_058)
{
    uint32_t const cps[2] = { 0x1E883, 0x003F };

    // 1E883 003F;	
    // (‎‎𞢃‎‎) MENDE KIKAKUI SYLLABLE M155 GI	[3CA8 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E883 003F;	
    // (‎‎𞢃‎‎) MENDE KIKAKUI SYLLABLE M155 GI	[3CA8 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CA8, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_059)
{
    uint32_t const cps[2] = { 0x1E883, 0x0061 };

    // 1E883 0061;	
    // (‎‎𞢃‎‎) MENDE KIKAKUI SYLLABLE M155 GI	[3CA8 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E883 0061;	
    // (‎‎𞢃‎‎) MENDE KIKAKUI SYLLABLE M155 GI	[3CA8 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_060)
{
    uint32_t const cps[2] = { 0x1E883, 0x0041 };

    // 1E883 0041;	
    // (‎‎𞢃‎‎) MENDE KIKAKUI SYLLABLE M155 GI	[3CA8 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E883 0041;	
    // (‎‎𞢃‎‎) MENDE KIKAKUI SYLLABLE M155 GI	[3CA8 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_061)
{
    uint32_t const cps[2] = { 0x1E883, 0x0062 };

    // 1E883 0062;	
    // (‎‎𞢃‎‎) MENDE KIKAKUI SYLLABLE M155 GI	[3CA8 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E883 0062;	
    // (‎‎𞢃‎‎) MENDE KIKAKUI SYLLABLE M155 GI	[3CA8 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_062)
{
    uint32_t const cps[2] = { 0x1E884, 0x0021 };

    // 1E884 0021;	
    // (‎‎𞢄‎‎) MENDE KIKAKUI SYLLABLE M111 GA	[3CA9 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E884 0021;	
    // (‎‎𞢄‎‎) MENDE KIKAKUI SYLLABLE M111 GA	[3CA9 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CA9, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_063)
{
    uint32_t const cps[2] = { 0x1E884, 0x003F };

    // 1E884 003F;	
    // (‎‎𞢄‎‎) MENDE KIKAKUI SYLLABLE M111 GA	[3CA9 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E884 003F;	
    // (‎‎𞢄‎‎) MENDE KIKAKUI SYLLABLE M111 GA	[3CA9 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CA9, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_064)
{
    uint32_t const cps[2] = { 0x1E884, 0x0061 };

    // 1E884 0061;	
    // (‎‎𞢄‎‎) MENDE KIKAKUI SYLLABLE M111 GA	[3CA9 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E884 0061;	
    // (‎‎𞢄‎‎) MENDE KIKAKUI SYLLABLE M111 GA	[3CA9 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_065)
{
    uint32_t const cps[2] = { 0x1E884, 0x0041 };

    // 1E884 0041;	
    // (‎‎𞢄‎‎) MENDE KIKAKUI SYLLABLE M111 GA	[3CA9 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E884 0041;	
    // (‎‎𞢄‎‎) MENDE KIKAKUI SYLLABLE M111 GA	[3CA9 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_066)
{
    uint32_t const cps[2] = { 0x1E884, 0x0062 };

    // 1E884 0062;	
    // (‎‎𞢄‎‎) MENDE KIKAKUI SYLLABLE M111 GA	[3CA9 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E884 0062;	
    // (‎‎𞢄‎‎) MENDE KIKAKUI SYLLABLE M111 GA	[3CA9 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_067)
{
    uint32_t const cps[2] = { 0x1E885, 0x0021 };

    // 1E885 0021;	
    // (‎‎𞢅‎‎) MENDE KIKAKUI SYLLABLE M168 GU	[3CAA 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E885 0021;	
    // (‎‎𞢅‎‎) MENDE KIKAKUI SYLLABLE M168 GU	[3CAA | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CAA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_068)
{
    uint32_t const cps[2] = { 0x1E885, 0x003F };

    // 1E885 003F;	
    // (‎‎𞢅‎‎) MENDE KIKAKUI SYLLABLE M168 GU	[3CAA 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E885 003F;	
    // (‎‎𞢅‎‎) MENDE KIKAKUI SYLLABLE M168 GU	[3CAA | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CAA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_069)
{
    uint32_t const cps[2] = { 0x1E885, 0x0061 };

    // 1E885 0061;	
    // (‎‎𞢅‎‎) MENDE KIKAKUI SYLLABLE M168 GU	[3CAA 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E885 0061;	
    // (‎‎𞢅‎‎) MENDE KIKAKUI SYLLABLE M168 GU	[3CAA 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_070)
{
    uint32_t const cps[2] = { 0x1E885, 0x0041 };

    // 1E885 0041;	
    // (‎‎𞢅‎‎) MENDE KIKAKUI SYLLABLE M168 GU	[3CAA 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E885 0041;	
    // (‎‎𞢅‎‎) MENDE KIKAKUI SYLLABLE M168 GU	[3CAA 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_071)
{
    uint32_t const cps[2] = { 0x1E885, 0x0062 };

    // 1E885 0062;	
    // (‎‎𞢅‎‎) MENDE KIKAKUI SYLLABLE M168 GU	[3CAA 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E885 0062;	
    // (‎‎𞢅‎‎) MENDE KIKAKUI SYLLABLE M168 GU	[3CAA 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_072)
{
    uint32_t const cps[2] = { 0x1E886, 0x0021 };

    // 1E886 0021;	
    // (‎‎𞢆‎‎) MENDE KIKAKUI SYLLABLE M190 GEE	[3CAB 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E886 0021;	
    // (‎‎𞢆‎‎) MENDE KIKAKUI SYLLABLE M190 GEE	[3CAB | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CAB, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_073)
{
    uint32_t const cps[2] = { 0x1E886, 0x003F };

    // 1E886 003F;	
    // (‎‎𞢆‎‎) MENDE KIKAKUI SYLLABLE M190 GEE	[3CAB 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E886 003F;	
    // (‎‎𞢆‎‎) MENDE KIKAKUI SYLLABLE M190 GEE	[3CAB | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CAB, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_074)
{
    uint32_t const cps[2] = { 0x1E886, 0x0061 };

    // 1E886 0061;	
    // (‎‎𞢆‎‎) MENDE KIKAKUI SYLLABLE M190 GEE	[3CAB 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E886 0061;	
    // (‎‎𞢆‎‎) MENDE KIKAKUI SYLLABLE M190 GEE	[3CAB 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_075)
{
    uint32_t const cps[2] = { 0x1E886, 0x0041 };

    // 1E886 0041;	
    // (‎‎𞢆‎‎) MENDE KIKAKUI SYLLABLE M190 GEE	[3CAB 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E886 0041;	
    // (‎‎𞢆‎‎) MENDE KIKAKUI SYLLABLE M190 GEE	[3CAB 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_076)
{
    uint32_t const cps[2] = { 0x1E886, 0x0062 };

    // 1E886 0062;	
    // (‎‎𞢆‎‎) MENDE KIKAKUI SYLLABLE M190 GEE	[3CAB 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E886 0062;	
    // (‎‎𞢆‎‎) MENDE KIKAKUI SYLLABLE M190 GEE	[3CAB 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_077)
{
    uint32_t const cps[2] = { 0x1E887, 0x0021 };

    // 1E887 0021;	
    // (‎‎𞢇‎‎) MENDE KIKAKUI SYLLABLE M166 GUEI	[3CAC 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E887 0021;	
    // (‎‎𞢇‎‎) MENDE KIKAKUI SYLLABLE M166 GUEI	[3CAC | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CAC, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_078)
{
    uint32_t const cps[2] = { 0x1E887, 0x003F };

    // 1E887 003F;	
    // (‎‎𞢇‎‎) MENDE KIKAKUI SYLLABLE M166 GUEI	[3CAC 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E887 003F;	
    // (‎‎𞢇‎‎) MENDE KIKAKUI SYLLABLE M166 GUEI	[3CAC | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CAC, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_079)
{
    uint32_t const cps[2] = { 0x1E887, 0x0061 };

    // 1E887 0061;	
    // (‎‎𞢇‎‎) MENDE KIKAKUI SYLLABLE M166 GUEI	[3CAC 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E887 0061;	
    // (‎‎𞢇‎‎) MENDE KIKAKUI SYLLABLE M166 GUEI	[3CAC 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_080)
{
    uint32_t const cps[2] = { 0x1E887, 0x0041 };

    // 1E887 0041;	
    // (‎‎𞢇‎‎) MENDE KIKAKUI SYLLABLE M166 GUEI	[3CAC 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E887 0041;	
    // (‎‎𞢇‎‎) MENDE KIKAKUI SYLLABLE M166 GUEI	[3CAC 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_081)
{
    uint32_t const cps[2] = { 0x1E887, 0x0062 };

    // 1E887 0062;	
    // (‎‎𞢇‎‎) MENDE KIKAKUI SYLLABLE M166 GUEI	[3CAC 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E887 0062;	
    // (‎‎𞢇‎‎) MENDE KIKAKUI SYLLABLE M166 GUEI	[3CAC 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_082)
{
    uint32_t const cps[2] = { 0x1E888, 0x0021 };

    // 1E888 0021;	
    // (‎‎𞢈‎‎) MENDE KIKAKUI SYLLABLE M167 GUAN	[3CAD 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E888 0021;	
    // (‎‎𞢈‎‎) MENDE KIKAKUI SYLLABLE M167 GUAN	[3CAD | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_083)
{
    uint32_t const cps[2] = { 0x1E888, 0x003F };

    // 1E888 003F;	
    // (‎‎𞢈‎‎) MENDE KIKAKUI SYLLABLE M167 GUAN	[3CAD 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E888 003F;	
    // (‎‎𞢈‎‎) MENDE KIKAKUI SYLLABLE M167 GUAN	[3CAD | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_084)
{
    uint32_t const cps[2] = { 0x1E888, 0x0061 };

    // 1E888 0061;	
    // (‎‎𞢈‎‎) MENDE KIKAKUI SYLLABLE M167 GUAN	[3CAD 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E888 0061;	
    // (‎‎𞢈‎‎) MENDE KIKAKUI SYLLABLE M167 GUAN	[3CAD 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_085)
{
    uint32_t const cps[2] = { 0x1E888, 0x0041 };

    // 1E888 0041;	
    // (‎‎𞢈‎‎) MENDE KIKAKUI SYLLABLE M167 GUAN	[3CAD 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E888 0041;	
    // (‎‎𞢈‎‎) MENDE KIKAKUI SYLLABLE M167 GUAN	[3CAD 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_086)
{
    uint32_t const cps[2] = { 0x1E888, 0x0062 };

    // 1E888 0062;	
    // (‎‎𞢈‎‎) MENDE KIKAKUI SYLLABLE M167 GUAN	[3CAD 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E888 0062;	
    // (‎‎𞢈‎‎) MENDE KIKAKUI SYLLABLE M167 GUAN	[3CAD 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_087)
{
    uint32_t const cps[2] = { 0x1E889, 0x0021 };

    // 1E889 0021;	
    // (‎‎𞢉‎‎) MENDE KIKAKUI SYLLABLE M184 NGEN	[3CAE 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E889 0021;	
    // (‎‎𞢉‎‎) MENDE KIKAKUI SYLLABLE M184 NGEN	[3CAE | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CAE, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_088)
{
    uint32_t const cps[2] = { 0x1E889, 0x003F };

    // 1E889 003F;	
    // (‎‎𞢉‎‎) MENDE KIKAKUI SYLLABLE M184 NGEN	[3CAE 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E889 003F;	
    // (‎‎𞢉‎‎) MENDE KIKAKUI SYLLABLE M184 NGEN	[3CAE | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CAE, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_089)
{
    uint32_t const cps[2] = { 0x1E889, 0x0061 };

    // 1E889 0061;	
    // (‎‎𞢉‎‎) MENDE KIKAKUI SYLLABLE M184 NGEN	[3CAE 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E889 0061;	
    // (‎‎𞢉‎‎) MENDE KIKAKUI SYLLABLE M184 NGEN	[3CAE 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_090)
{
    uint32_t const cps[2] = { 0x1E889, 0x0041 };

    // 1E889 0041;	
    // (‎‎𞢉‎‎) MENDE KIKAKUI SYLLABLE M184 NGEN	[3CAE 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E889 0041;	
    // (‎‎𞢉‎‎) MENDE KIKAKUI SYLLABLE M184 NGEN	[3CAE 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_091)
{
    uint32_t const cps[2] = { 0x1E889, 0x0062 };

    // 1E889 0062;	
    // (‎‎𞢉‎‎) MENDE KIKAKUI SYLLABLE M184 NGEN	[3CAE 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E889 0062;	
    // (‎‎𞢉‎‎) MENDE KIKAKUI SYLLABLE M184 NGEN	[3CAE 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_092)
{
    uint32_t const cps[2] = { 0x1E88A, 0x0021 };

    // 1E88A 0021;	
    // (‎‎𞢊‎‎) MENDE KIKAKUI SYLLABLE M057 NGON	[3CAF 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88A 0021;	
    // (‎‎𞢊‎‎) MENDE KIKAKUI SYLLABLE M057 NGON	[3CAF | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CAF, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_093)
{
    uint32_t const cps[2] = { 0x1E88A, 0x003F };

    // 1E88A 003F;	
    // (‎‎𞢊‎‎) MENDE KIKAKUI SYLLABLE M057 NGON	[3CAF 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88A 003F;	
    // (‎‎𞢊‎‎) MENDE KIKAKUI SYLLABLE M057 NGON	[3CAF | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CAF, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_094)
{
    uint32_t const cps[2] = { 0x1E88A, 0x0061 };

    // 1E88A 0061;	
    // (‎‎𞢊‎‎) MENDE KIKAKUI SYLLABLE M057 NGON	[3CAF 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88A 0061;	
    // (‎‎𞢊‎‎) MENDE KIKAKUI SYLLABLE M057 NGON	[3CAF 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_095)
{
    uint32_t const cps[2] = { 0x1E88A, 0x0041 };

    // 1E88A 0041;	
    // (‎‎𞢊‎‎) MENDE KIKAKUI SYLLABLE M057 NGON	[3CAF 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88A 0041;	
    // (‎‎𞢊‎‎) MENDE KIKAKUI SYLLABLE M057 NGON	[3CAF 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_096)
{
    uint32_t const cps[2] = { 0x1E88A, 0x0062 };

    // 1E88A 0062;	
    // (‎‎𞢊‎‎) MENDE KIKAKUI SYLLABLE M057 NGON	[3CAF 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88A 0062;	
    // (‎‎𞢊‎‎) MENDE KIKAKUI SYLLABLE M057 NGON	[3CAF 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_097)
{
    uint32_t const cps[2] = { 0x1E88B, 0x0021 };

    // 1E88B 0021;	
    // (‎‎𞢋‎‎) MENDE KIKAKUI SYLLABLE M177 NGUAN	[3CB0 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88B 0021;	
    // (‎‎𞢋‎‎) MENDE KIKAKUI SYLLABLE M177 NGUAN	[3CB0 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CB0, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_098)
{
    uint32_t const cps[2] = { 0x1E88B, 0x003F };

    // 1E88B 003F;	
    // (‎‎𞢋‎‎) MENDE KIKAKUI SYLLABLE M177 NGUAN	[3CB0 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88B 003F;	
    // (‎‎𞢋‎‎) MENDE KIKAKUI SYLLABLE M177 NGUAN	[3CB0 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CB0, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_099)
{
    uint32_t const cps[2] = { 0x1E88B, 0x0061 };

    // 1E88B 0061;	
    // (‎‎𞢋‎‎) MENDE KIKAKUI SYLLABLE M177 NGUAN	[3CB0 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88B 0061;	
    // (‎‎𞢋‎‎) MENDE KIKAKUI SYLLABLE M177 NGUAN	[3CB0 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_100)
{
    uint32_t const cps[2] = { 0x1E88B, 0x0041 };

    // 1E88B 0041;	
    // (‎‎𞢋‎‎) MENDE KIKAKUI SYLLABLE M177 NGUAN	[3CB0 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88B 0041;	
    // (‎‎𞢋‎‎) MENDE KIKAKUI SYLLABLE M177 NGUAN	[3CB0 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_101)
{
    uint32_t const cps[2] = { 0x1E88B, 0x0062 };

    // 1E88B 0062;	
    // (‎‎𞢋‎‎) MENDE KIKAKUI SYLLABLE M177 NGUAN	[3CB0 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88B 0062;	
    // (‎‎𞢋‎‎) MENDE KIKAKUI SYLLABLE M177 NGUAN	[3CB0 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_102)
{
    uint32_t const cps[2] = { 0x1E88C, 0x0021 };

    // 1E88C 0021;	
    // (‎‎𞢌‎‎) MENDE KIKAKUI SYLLABLE M068 PI	[3CB1 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88C 0021;	
    // (‎‎𞢌‎‎) MENDE KIKAKUI SYLLABLE M068 PI	[3CB1 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CB1, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_103)
{
    uint32_t const cps[2] = { 0x1E88C, 0x003F };

    // 1E88C 003F;	
    // (‎‎𞢌‎‎) MENDE KIKAKUI SYLLABLE M068 PI	[3CB1 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88C 003F;	
    // (‎‎𞢌‎‎) MENDE KIKAKUI SYLLABLE M068 PI	[3CB1 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CB1, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_104)
{
    uint32_t const cps[2] = { 0x1E88C, 0x0061 };

    // 1E88C 0061;	
    // (‎‎𞢌‎‎) MENDE KIKAKUI SYLLABLE M068 PI	[3CB1 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88C 0061;	
    // (‎‎𞢌‎‎) MENDE KIKAKUI SYLLABLE M068 PI	[3CB1 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_105)
{
    uint32_t const cps[2] = { 0x1E88C, 0x0041 };

    // 1E88C 0041;	
    // (‎‎𞢌‎‎) MENDE KIKAKUI SYLLABLE M068 PI	[3CB1 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88C 0041;	
    // (‎‎𞢌‎‎) MENDE KIKAKUI SYLLABLE M068 PI	[3CB1 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_106)
{
    uint32_t const cps[2] = { 0x1E88C, 0x0062 };

    // 1E88C 0062;	
    // (‎‎𞢌‎‎) MENDE KIKAKUI SYLLABLE M068 PI	[3CB1 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88C 0062;	
    // (‎‎𞢌‎‎) MENDE KIKAKUI SYLLABLE M068 PI	[3CB1 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_107)
{
    uint32_t const cps[2] = { 0x1E88D, 0x0021 };

    // 1E88D 0021;	
    // (‎‎𞢍‎‎) MENDE KIKAKUI SYLLABLE M099 PA	[3CB2 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88D 0021;	
    // (‎‎𞢍‎‎) MENDE KIKAKUI SYLLABLE M099 PA	[3CB2 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CB2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_108)
{
    uint32_t const cps[2] = { 0x1E88D, 0x003F };

    // 1E88D 003F;	
    // (‎‎𞢍‎‎) MENDE KIKAKUI SYLLABLE M099 PA	[3CB2 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88D 003F;	
    // (‎‎𞢍‎‎) MENDE KIKAKUI SYLLABLE M099 PA	[3CB2 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CB2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_109)
{
    uint32_t const cps[2] = { 0x1E88D, 0x0061 };

    // 1E88D 0061;	
    // (‎‎𞢍‎‎) MENDE KIKAKUI SYLLABLE M099 PA	[3CB2 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88D 0061;	
    // (‎‎𞢍‎‎) MENDE KIKAKUI SYLLABLE M099 PA	[3CB2 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_110)
{
    uint32_t const cps[2] = { 0x1E88D, 0x0041 };

    // 1E88D 0041;	
    // (‎‎𞢍‎‎) MENDE KIKAKUI SYLLABLE M099 PA	[3CB2 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88D 0041;	
    // (‎‎𞢍‎‎) MENDE KIKAKUI SYLLABLE M099 PA	[3CB2 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_111)
{
    uint32_t const cps[2] = { 0x1E88D, 0x0062 };

    // 1E88D 0062;	
    // (‎‎𞢍‎‎) MENDE KIKAKUI SYLLABLE M099 PA	[3CB2 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88D 0062;	
    // (‎‎𞢍‎‎) MENDE KIKAKUI SYLLABLE M099 PA	[3CB2 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_112)
{
    uint32_t const cps[2] = { 0x1E88E, 0x0021 };

    // 1E88E 0021;	
    // (‎‎𞢎‎‎) MENDE KIKAKUI SYLLABLE M050 PU	[3CB3 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88E 0021;	
    // (‎‎𞢎‎‎) MENDE KIKAKUI SYLLABLE M050 PU	[3CB3 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CB3, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_113)
{
    uint32_t const cps[2] = { 0x1E88E, 0x003F };

    // 1E88E 003F;	
    // (‎‎𞢎‎‎) MENDE KIKAKUI SYLLABLE M050 PU	[3CB3 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88E 003F;	
    // (‎‎𞢎‎‎) MENDE KIKAKUI SYLLABLE M050 PU	[3CB3 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CB3, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_114)
{
    uint32_t const cps[2] = { 0x1E88E, 0x0061 };

    // 1E88E 0061;	
    // (‎‎𞢎‎‎) MENDE KIKAKUI SYLLABLE M050 PU	[3CB3 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88E 0061;	
    // (‎‎𞢎‎‎) MENDE KIKAKUI SYLLABLE M050 PU	[3CB3 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_115)
{
    uint32_t const cps[2] = { 0x1E88E, 0x0041 };

    // 1E88E 0041;	
    // (‎‎𞢎‎‎) MENDE KIKAKUI SYLLABLE M050 PU	[3CB3 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88E 0041;	
    // (‎‎𞢎‎‎) MENDE KIKAKUI SYLLABLE M050 PU	[3CB3 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_116)
{
    uint32_t const cps[2] = { 0x1E88E, 0x0062 };

    // 1E88E 0062;	
    // (‎‎𞢎‎‎) MENDE KIKAKUI SYLLABLE M050 PU	[3CB3 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88E 0062;	
    // (‎‎𞢎‎‎) MENDE KIKAKUI SYLLABLE M050 PU	[3CB3 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_117)
{
    uint32_t const cps[2] = { 0x1E88F, 0x0021 };

    // 1E88F 0021;	
    // (‎‎𞢏‎‎) MENDE KIKAKUI SYLLABLE M081 PEE	[3CB4 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88F 0021;	
    // (‎‎𞢏‎‎) MENDE KIKAKUI SYLLABLE M081 PEE	[3CB4 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CB4, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_118)
{
    uint32_t const cps[2] = { 0x1E88F, 0x003F };

    // 1E88F 003F;	
    // (‎‎𞢏‎‎) MENDE KIKAKUI SYLLABLE M081 PEE	[3CB4 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88F 003F;	
    // (‎‎𞢏‎‎) MENDE KIKAKUI SYLLABLE M081 PEE	[3CB4 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CB4, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_119)
{
    uint32_t const cps[2] = { 0x1E88F, 0x0061 };

    // 1E88F 0061;	
    // (‎‎𞢏‎‎) MENDE KIKAKUI SYLLABLE M081 PEE	[3CB4 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88F 0061;	
    // (‎‎𞢏‎‎) MENDE KIKAKUI SYLLABLE M081 PEE	[3CB4 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_120)
{
    uint32_t const cps[2] = { 0x1E88F, 0x0041 };

    // 1E88F 0041;	
    // (‎‎𞢏‎‎) MENDE KIKAKUI SYLLABLE M081 PEE	[3CB4 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88F 0041;	
    // (‎‎𞢏‎‎) MENDE KIKAKUI SYLLABLE M081 PEE	[3CB4 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_121)
{
    uint32_t const cps[2] = { 0x1E88F, 0x0062 };

    // 1E88F 0062;	
    // (‎‎𞢏‎‎) MENDE KIKAKUI SYLLABLE M081 PEE	[3CB4 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E88F 0062;	
    // (‎‎𞢏‎‎) MENDE KIKAKUI SYLLABLE M081 PEE	[3CB4 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_122)
{
    uint32_t const cps[2] = { 0x1E890, 0x0021 };

    // 1E890 0021;	
    // (‎‎𞢐‎‎) MENDE KIKAKUI SYLLABLE M051 PE	[3CB5 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E890 0021;	
    // (‎‎𞢐‎‎) MENDE KIKAKUI SYLLABLE M051 PE	[3CB5 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CB5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_123)
{
    uint32_t const cps[2] = { 0x1E890, 0x003F };

    // 1E890 003F;	
    // (‎‎𞢐‎‎) MENDE KIKAKUI SYLLABLE M051 PE	[3CB5 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E890 003F;	
    // (‎‎𞢐‎‎) MENDE KIKAKUI SYLLABLE M051 PE	[3CB5 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CB5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_124)
{
    uint32_t const cps[2] = { 0x1E890, 0x0061 };

    // 1E890 0061;	
    // (‎‎𞢐‎‎) MENDE KIKAKUI SYLLABLE M051 PE	[3CB5 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E890 0061;	
    // (‎‎𞢐‎‎) MENDE KIKAKUI SYLLABLE M051 PE	[3CB5 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_125)
{
    uint32_t const cps[2] = { 0x1E890, 0x0041 };

    // 1E890 0041;	
    // (‎‎𞢐‎‎) MENDE KIKAKUI SYLLABLE M051 PE	[3CB5 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E890 0041;	
    // (‎‎𞢐‎‎) MENDE KIKAKUI SYLLABLE M051 PE	[3CB5 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_126)
{
    uint32_t const cps[2] = { 0x1E890, 0x0062 };

    // 1E890 0062;	
    // (‎‎𞢐‎‎) MENDE KIKAKUI SYLLABLE M051 PE	[3CB5 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E890 0062;	
    // (‎‎𞢐‎‎) MENDE KIKAKUI SYLLABLE M051 PE	[3CB5 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_127)
{
    uint32_t const cps[2] = { 0x1E891, 0x0021 };

    // 1E891 0021;	
    // (‎‎𞢑‎‎) MENDE KIKAKUI SYLLABLE M102 POO	[3CB6 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E891 0021;	
    // (‎‎𞢑‎‎) MENDE KIKAKUI SYLLABLE M102 POO	[3CB6 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CB6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_128)
{
    uint32_t const cps[2] = { 0x1E891, 0x003F };

    // 1E891 003F;	
    // (‎‎𞢑‎‎) MENDE KIKAKUI SYLLABLE M102 POO	[3CB6 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E891 003F;	
    // (‎‎𞢑‎‎) MENDE KIKAKUI SYLLABLE M102 POO	[3CB6 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CB6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_129)
{
    uint32_t const cps[2] = { 0x1E891, 0x0061 };

    // 1E891 0061;	
    // (‎‎𞢑‎‎) MENDE KIKAKUI SYLLABLE M102 POO	[3CB6 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E891 0061;	
    // (‎‎𞢑‎‎) MENDE KIKAKUI SYLLABLE M102 POO	[3CB6 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_130)
{
    uint32_t const cps[2] = { 0x1E891, 0x0041 };

    // 1E891 0041;	
    // (‎‎𞢑‎‎) MENDE KIKAKUI SYLLABLE M102 POO	[3CB6 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E891 0041;	
    // (‎‎𞢑‎‎) MENDE KIKAKUI SYLLABLE M102 POO	[3CB6 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_131)
{
    uint32_t const cps[2] = { 0x1E891, 0x0062 };

    // 1E891 0062;	
    // (‎‎𞢑‎‎) MENDE KIKAKUI SYLLABLE M102 POO	[3CB6 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E891 0062;	
    // (‎‎𞢑‎‎) MENDE KIKAKUI SYLLABLE M102 POO	[3CB6 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_132)
{
    uint32_t const cps[2] = { 0x1E892, 0x0021 };

    // 1E892 0021;	
    // (‎‎𞢒‎‎) MENDE KIKAKUI SYLLABLE M066 PO	[3CB7 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E892 0021;	
    // (‎‎𞢒‎‎) MENDE KIKAKUI SYLLABLE M066 PO	[3CB7 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CB7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_133)
{
    uint32_t const cps[2] = { 0x1E892, 0x003F };

    // 1E892 003F;	
    // (‎‎𞢒‎‎) MENDE KIKAKUI SYLLABLE M066 PO	[3CB7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E892 003F;	
    // (‎‎𞢒‎‎) MENDE KIKAKUI SYLLABLE M066 PO	[3CB7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CB7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_134)
{
    uint32_t const cps[2] = { 0x1E892, 0x0061 };

    // 1E892 0061;	
    // (‎‎𞢒‎‎) MENDE KIKAKUI SYLLABLE M066 PO	[3CB7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E892 0061;	
    // (‎‎𞢒‎‎) MENDE KIKAKUI SYLLABLE M066 PO	[3CB7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_135)
{
    uint32_t const cps[2] = { 0x1E892, 0x0041 };

    // 1E892 0041;	
    // (‎‎𞢒‎‎) MENDE KIKAKUI SYLLABLE M066 PO	[3CB7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E892 0041;	
    // (‎‎𞢒‎‎) MENDE KIKAKUI SYLLABLE M066 PO	[3CB7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_136)
{
    uint32_t const cps[2] = { 0x1E892, 0x0062 };

    // 1E892 0062;	
    // (‎‎𞢒‎‎) MENDE KIKAKUI SYLLABLE M066 PO	[3CB7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E892 0062;	
    // (‎‎𞢒‎‎) MENDE KIKAKUI SYLLABLE M066 PO	[3CB7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_137)
{
    uint32_t const cps[2] = { 0x1E893, 0x0021 };

    // 1E893 0021;	
    // (‎‎𞢓‎‎) MENDE KIKAKUI SYLLABLE M145 MBI	[3CB8 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E893 0021;	
    // (‎‎𞢓‎‎) MENDE KIKAKUI SYLLABLE M145 MBI	[3CB8 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CB8, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_138)
{
    uint32_t const cps[2] = { 0x1E893, 0x003F };

    // 1E893 003F;	
    // (‎‎𞢓‎‎) MENDE KIKAKUI SYLLABLE M145 MBI	[3CB8 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E893 003F;	
    // (‎‎𞢓‎‎) MENDE KIKAKUI SYLLABLE M145 MBI	[3CB8 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CB8, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_139)
{
    uint32_t const cps[2] = { 0x1E893, 0x0061 };

    // 1E893 0061;	
    // (‎‎𞢓‎‎) MENDE KIKAKUI SYLLABLE M145 MBI	[3CB8 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E893 0061;	
    // (‎‎𞢓‎‎) MENDE KIKAKUI SYLLABLE M145 MBI	[3CB8 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_140)
{
    uint32_t const cps[2] = { 0x1E893, 0x0041 };

    // 1E893 0041;	
    // (‎‎𞢓‎‎) MENDE KIKAKUI SYLLABLE M145 MBI	[3CB8 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E893 0041;	
    // (‎‎𞢓‎‎) MENDE KIKAKUI SYLLABLE M145 MBI	[3CB8 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_141)
{
    uint32_t const cps[2] = { 0x1E893, 0x0062 };

    // 1E893 0062;	
    // (‎‎𞢓‎‎) MENDE KIKAKUI SYLLABLE M145 MBI	[3CB8 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E893 0062;	
    // (‎‎𞢓‎‎) MENDE KIKAKUI SYLLABLE M145 MBI	[3CB8 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_142)
{
    uint32_t const cps[2] = { 0x1E894, 0x0021 };

    // 1E894 0021;	
    // (‎‎𞢔‎‎) MENDE KIKAKUI SYLLABLE M062 MBA	[3CB9 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E894 0021;	
    // (‎‎𞢔‎‎) MENDE KIKAKUI SYLLABLE M062 MBA	[3CB9 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CB9, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_143)
{
    uint32_t const cps[2] = { 0x1E894, 0x003F };

    // 1E894 003F;	
    // (‎‎𞢔‎‎) MENDE KIKAKUI SYLLABLE M062 MBA	[3CB9 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E894 003F;	
    // (‎‎𞢔‎‎) MENDE KIKAKUI SYLLABLE M062 MBA	[3CB9 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CB9, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_144)
{
    uint32_t const cps[2] = { 0x1E894, 0x0061 };

    // 1E894 0061;	
    // (‎‎𞢔‎‎) MENDE KIKAKUI SYLLABLE M062 MBA	[3CB9 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E894 0061;	
    // (‎‎𞢔‎‎) MENDE KIKAKUI SYLLABLE M062 MBA	[3CB9 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_145)
{
    uint32_t const cps[2] = { 0x1E894, 0x0041 };

    // 1E894 0041;	
    // (‎‎𞢔‎‎) MENDE KIKAKUI SYLLABLE M062 MBA	[3CB9 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E894 0041;	
    // (‎‎𞢔‎‎) MENDE KIKAKUI SYLLABLE M062 MBA	[3CB9 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_146)
{
    uint32_t const cps[2] = { 0x1E894, 0x0062 };

    // 1E894 0062;	
    // (‎‎𞢔‎‎) MENDE KIKAKUI SYLLABLE M062 MBA	[3CB9 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E894 0062;	
    // (‎‎𞢔‎‎) MENDE KIKAKUI SYLLABLE M062 MBA	[3CB9 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_147)
{
    uint32_t const cps[2] = { 0x1E895, 0x0021 };

    // 1E895 0021;	
    // (‎‎𞢕‎‎) MENDE KIKAKUI SYLLABLE M122 MBU	[3CBA 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E895 0021;	
    // (‎‎𞢕‎‎) MENDE KIKAKUI SYLLABLE M122 MBU	[3CBA | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CBA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_148)
{
    uint32_t const cps[2] = { 0x1E895, 0x003F };

    // 1E895 003F;	
    // (‎‎𞢕‎‎) MENDE KIKAKUI SYLLABLE M122 MBU	[3CBA 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E895 003F;	
    // (‎‎𞢕‎‎) MENDE KIKAKUI SYLLABLE M122 MBU	[3CBA | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CBA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_149)
{
    uint32_t const cps[2] = { 0x1E895, 0x0061 };

    // 1E895 0061;	
    // (‎‎𞢕‎‎) MENDE KIKAKUI SYLLABLE M122 MBU	[3CBA 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E895 0061;	
    // (‎‎𞢕‎‎) MENDE KIKAKUI SYLLABLE M122 MBU	[3CBA 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_150)
{
    uint32_t const cps[2] = { 0x1E895, 0x0041 };

    // 1E895 0041;	
    // (‎‎𞢕‎‎) MENDE KIKAKUI SYLLABLE M122 MBU	[3CBA 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E895 0041;	
    // (‎‎𞢕‎‎) MENDE KIKAKUI SYLLABLE M122 MBU	[3CBA 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_151)
{
    uint32_t const cps[2] = { 0x1E895, 0x0062 };

    // 1E895 0062;	
    // (‎‎𞢕‎‎) MENDE KIKAKUI SYLLABLE M122 MBU	[3CBA 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E895 0062;	
    // (‎‎𞢕‎‎) MENDE KIKAKUI SYLLABLE M122 MBU	[3CBA 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_152)
{
    uint32_t const cps[2] = { 0x1E896, 0x0021 };

    // 1E896 0021;	
    // (‎‎𞢖‎‎) MENDE KIKAKUI SYLLABLE M047 MBEE	[3CBB 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E896 0021;	
    // (‎‎𞢖‎‎) MENDE KIKAKUI SYLLABLE M047 MBEE	[3CBB | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CBB, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_153)
{
    uint32_t const cps[2] = { 0x1E896, 0x003F };

    // 1E896 003F;	
    // (‎‎𞢖‎‎) MENDE KIKAKUI SYLLABLE M047 MBEE	[3CBB 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E896 003F;	
    // (‎‎𞢖‎‎) MENDE KIKAKUI SYLLABLE M047 MBEE	[3CBB | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CBB, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_154)
{
    uint32_t const cps[2] = { 0x1E896, 0x0061 };

    // 1E896 0061;	
    // (‎‎𞢖‎‎) MENDE KIKAKUI SYLLABLE M047 MBEE	[3CBB 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E896 0061;	
    // (‎‎𞢖‎‎) MENDE KIKAKUI SYLLABLE M047 MBEE	[3CBB 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_155)
{
    uint32_t const cps[2] = { 0x1E896, 0x0041 };

    // 1E896 0041;	
    // (‎‎𞢖‎‎) MENDE KIKAKUI SYLLABLE M047 MBEE	[3CBB 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E896 0041;	
    // (‎‎𞢖‎‎) MENDE KIKAKUI SYLLABLE M047 MBEE	[3CBB 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_156)
{
    uint32_t const cps[2] = { 0x1E896, 0x0062 };

    // 1E896 0062;	
    // (‎‎𞢖‎‎) MENDE KIKAKUI SYLLABLE M047 MBEE	[3CBB 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E896 0062;	
    // (‎‎𞢖‎‎) MENDE KIKAKUI SYLLABLE M047 MBEE	[3CBB 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_157)
{
    uint32_t const cps[2] = { 0x1E897, 0x0021 };

    // 1E897 0021;	
    // (‎‎𞢗‎‎) MENDE KIKAKUI SYLLABLE M188 MBEE	[3CBC 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E897 0021;	
    // (‎‎𞢗‎‎) MENDE KIKAKUI SYLLABLE M188 MBEE	[3CBC | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CBC, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_158)
{
    uint32_t const cps[2] = { 0x1E897, 0x003F };

    // 1E897 003F;	
    // (‎‎𞢗‎‎) MENDE KIKAKUI SYLLABLE M188 MBEE	[3CBC 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E897 003F;	
    // (‎‎𞢗‎‎) MENDE KIKAKUI SYLLABLE M188 MBEE	[3CBC | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CBC, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_159)
{
    uint32_t const cps[2] = { 0x1E897, 0x0061 };

    // 1E897 0061;	
    // (‎‎𞢗‎‎) MENDE KIKAKUI SYLLABLE M188 MBEE	[3CBC 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E897 0061;	
    // (‎‎𞢗‎‎) MENDE KIKAKUI SYLLABLE M188 MBEE	[3CBC 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_160)
{
    uint32_t const cps[2] = { 0x1E897, 0x0041 };

    // 1E897 0041;	
    // (‎‎𞢗‎‎) MENDE KIKAKUI SYLLABLE M188 MBEE	[3CBC 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E897 0041;	
    // (‎‎𞢗‎‎) MENDE KIKAKUI SYLLABLE M188 MBEE	[3CBC 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_161)
{
    uint32_t const cps[2] = { 0x1E897, 0x0062 };

    // 1E897 0062;	
    // (‎‎𞢗‎‎) MENDE KIKAKUI SYLLABLE M188 MBEE	[3CBC 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E897 0062;	
    // (‎‎𞢗‎‎) MENDE KIKAKUI SYLLABLE M188 MBEE	[3CBC 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_162)
{
    uint32_t const cps[2] = { 0x1E898, 0x0021 };

    // 1E898 0021;	
    // (‎‎𞢘‎‎) MENDE KIKAKUI SYLLABLE M072 MBE	[3CBD 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E898 0021;	
    // (‎‎𞢘‎‎) MENDE KIKAKUI SYLLABLE M072 MBE	[3CBD | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CBD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_163)
{
    uint32_t const cps[2] = { 0x1E898, 0x003F };

    // 1E898 003F;	
    // (‎‎𞢘‎‎) MENDE KIKAKUI SYLLABLE M072 MBE	[3CBD 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E898 003F;	
    // (‎‎𞢘‎‎) MENDE KIKAKUI SYLLABLE M072 MBE	[3CBD | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CBD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_164)
{
    uint32_t const cps[2] = { 0x1E898, 0x0061 };

    // 1E898 0061;	
    // (‎‎𞢘‎‎) MENDE KIKAKUI SYLLABLE M072 MBE	[3CBD 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E898 0061;	
    // (‎‎𞢘‎‎) MENDE KIKAKUI SYLLABLE M072 MBE	[3CBD 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_165)
{
    uint32_t const cps[2] = { 0x1E898, 0x0041 };

    // 1E898 0041;	
    // (‎‎𞢘‎‎) MENDE KIKAKUI SYLLABLE M072 MBE	[3CBD 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E898 0041;	
    // (‎‎𞢘‎‎) MENDE KIKAKUI SYLLABLE M072 MBE	[3CBD 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_166)
{
    uint32_t const cps[2] = { 0x1E898, 0x0062 };

    // 1E898 0062;	
    // (‎‎𞢘‎‎) MENDE KIKAKUI SYLLABLE M072 MBE	[3CBD 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E898 0062;	
    // (‎‎𞢘‎‎) MENDE KIKAKUI SYLLABLE M072 MBE	[3CBD 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_167)
{
    uint32_t const cps[2] = { 0x1E899, 0x0021 };

    // 1E899 0021;	
    // (‎‎𞢙‎‎) MENDE KIKAKUI SYLLABLE M172 MBOO	[3CBE 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E899 0021;	
    // (‎‎𞢙‎‎) MENDE KIKAKUI SYLLABLE M172 MBOO	[3CBE | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CBE, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_168)
{
    uint32_t const cps[2] = { 0x1E899, 0x003F };

    // 1E899 003F;	
    // (‎‎𞢙‎‎) MENDE KIKAKUI SYLLABLE M172 MBOO	[3CBE 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E899 003F;	
    // (‎‎𞢙‎‎) MENDE KIKAKUI SYLLABLE M172 MBOO	[3CBE | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CBE, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_169)
{
    uint32_t const cps[2] = { 0x1E899, 0x0061 };

    // 1E899 0061;	
    // (‎‎𞢙‎‎) MENDE KIKAKUI SYLLABLE M172 MBOO	[3CBE 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E899 0061;	
    // (‎‎𞢙‎‎) MENDE KIKAKUI SYLLABLE M172 MBOO	[3CBE 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_170)
{
    uint32_t const cps[2] = { 0x1E899, 0x0041 };

    // 1E899 0041;	
    // (‎‎𞢙‎‎) MENDE KIKAKUI SYLLABLE M172 MBOO	[3CBE 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E899 0041;	
    // (‎‎𞢙‎‎) MENDE KIKAKUI SYLLABLE M172 MBOO	[3CBE 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_171)
{
    uint32_t const cps[2] = { 0x1E899, 0x0062 };

    // 1E899 0062;	
    // (‎‎𞢙‎‎) MENDE KIKAKUI SYLLABLE M172 MBOO	[3CBE 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E899 0062;	
    // (‎‎𞢙‎‎) MENDE KIKAKUI SYLLABLE M172 MBOO	[3CBE 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_172)
{
    uint32_t const cps[2] = { 0x1E89A, 0x0021 };

    // 1E89A 0021;	
    // (‎‎𞢚‎‎) MENDE KIKAKUI SYLLABLE M174 MBO	[3CBF 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89A 0021;	
    // (‎‎𞢚‎‎) MENDE KIKAKUI SYLLABLE M174 MBO	[3CBF | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CBF, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_173)
{
    uint32_t const cps[2] = { 0x1E89A, 0x003F };

    // 1E89A 003F;	
    // (‎‎𞢚‎‎) MENDE KIKAKUI SYLLABLE M174 MBO	[3CBF 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89A 003F;	
    // (‎‎𞢚‎‎) MENDE KIKAKUI SYLLABLE M174 MBO	[3CBF | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CBF, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_174)
{
    uint32_t const cps[2] = { 0x1E89A, 0x0061 };

    // 1E89A 0061;	
    // (‎‎𞢚‎‎) MENDE KIKAKUI SYLLABLE M174 MBO	[3CBF 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89A 0061;	
    // (‎‎𞢚‎‎) MENDE KIKAKUI SYLLABLE M174 MBO	[3CBF 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_175)
{
    uint32_t const cps[2] = { 0x1E89A, 0x0041 };

    // 1E89A 0041;	
    // (‎‎𞢚‎‎) MENDE KIKAKUI SYLLABLE M174 MBO	[3CBF 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89A 0041;	
    // (‎‎𞢚‎‎) MENDE KIKAKUI SYLLABLE M174 MBO	[3CBF 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_176)
{
    uint32_t const cps[2] = { 0x1E89A, 0x0062 };

    // 1E89A 0062;	
    // (‎‎𞢚‎‎) MENDE KIKAKUI SYLLABLE M174 MBO	[3CBF 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89A 0062;	
    // (‎‎𞢚‎‎) MENDE KIKAKUI SYLLABLE M174 MBO	[3CBF 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_177)
{
    uint32_t const cps[2] = { 0x1E89B, 0x0021 };

    // 1E89B 0021;	
    // (‎‎𞢛‎‎) MENDE KIKAKUI SYLLABLE M187 MBUU	[3CC0 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89B 0021;	
    // (‎‎𞢛‎‎) MENDE KIKAKUI SYLLABLE M187 MBUU	[3CC0 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CC0, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_178)
{
    uint32_t const cps[2] = { 0x1E89B, 0x003F };

    // 1E89B 003F;	
    // (‎‎𞢛‎‎) MENDE KIKAKUI SYLLABLE M187 MBUU	[3CC0 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89B 003F;	
    // (‎‎𞢛‎‎) MENDE KIKAKUI SYLLABLE M187 MBUU	[3CC0 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CC0, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_179)
{
    uint32_t const cps[2] = { 0x1E89B, 0x0061 };

    // 1E89B 0061;	
    // (‎‎𞢛‎‎) MENDE KIKAKUI SYLLABLE M187 MBUU	[3CC0 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89B 0061;	
    // (‎‎𞢛‎‎) MENDE KIKAKUI SYLLABLE M187 MBUU	[3CC0 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_180)
{
    uint32_t const cps[2] = { 0x1E89B, 0x0041 };

    // 1E89B 0041;	
    // (‎‎𞢛‎‎) MENDE KIKAKUI SYLLABLE M187 MBUU	[3CC0 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89B 0041;	
    // (‎‎𞢛‎‎) MENDE KIKAKUI SYLLABLE M187 MBUU	[3CC0 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_181)
{
    uint32_t const cps[2] = { 0x1E89B, 0x0062 };

    // 1E89B 0062;	
    // (‎‎𞢛‎‎) MENDE KIKAKUI SYLLABLE M187 MBUU	[3CC0 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89B 0062;	
    // (‎‎𞢛‎‎) MENDE KIKAKUI SYLLABLE M187 MBUU	[3CC0 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_182)
{
    uint32_t const cps[2] = { 0x1E89C, 0x0021 };

    // 1E89C 0021;	
    // (‎‎𞢜‎‎) MENDE KIKAKUI SYLLABLE M161 LONG MBE	[3CC1 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89C 0021;	
    // (‎‎𞢜‎‎) MENDE KIKAKUI SYLLABLE M161 LONG MBE	[3CC1 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CC1, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_183)
{
    uint32_t const cps[2] = { 0x1E89C, 0x003F };

    // 1E89C 003F;	
    // (‎‎𞢜‎‎) MENDE KIKAKUI SYLLABLE M161 LONG MBE	[3CC1 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89C 003F;	
    // (‎‎𞢜‎‎) MENDE KIKAKUI SYLLABLE M161 LONG MBE	[3CC1 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CC1, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_184)
{
    uint32_t const cps[2] = { 0x1E89C, 0x0061 };

    // 1E89C 0061;	
    // (‎‎𞢜‎‎) MENDE KIKAKUI SYLLABLE M161 LONG MBE	[3CC1 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89C 0061;	
    // (‎‎𞢜‎‎) MENDE KIKAKUI SYLLABLE M161 LONG MBE	[3CC1 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_185)
{
    uint32_t const cps[2] = { 0x1E89C, 0x0041 };

    // 1E89C 0041;	
    // (‎‎𞢜‎‎) MENDE KIKAKUI SYLLABLE M161 LONG MBE	[3CC1 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89C 0041;	
    // (‎‎𞢜‎‎) MENDE KIKAKUI SYLLABLE M161 LONG MBE	[3CC1 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_186)
{
    uint32_t const cps[2] = { 0x1E89C, 0x0062 };

    // 1E89C 0062;	
    // (‎‎𞢜‎‎) MENDE KIKAKUI SYLLABLE M161 LONG MBE	[3CC1 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89C 0062;	
    // (‎‎𞢜‎‎) MENDE KIKAKUI SYLLABLE M161 LONG MBE	[3CC1 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_187)
{
    uint32_t const cps[2] = { 0x1E89D, 0x0021 };

    // 1E89D 0021;	
    // (‎‎𞢝‎‎) MENDE KIKAKUI SYLLABLE M105 LONG MBOO	[3CC2 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89D 0021;	
    // (‎‎𞢝‎‎) MENDE KIKAKUI SYLLABLE M105 LONG MBOO	[3CC2 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CC2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_188)
{
    uint32_t const cps[2] = { 0x1E89D, 0x003F };

    // 1E89D 003F;	
    // (‎‎𞢝‎‎) MENDE KIKAKUI SYLLABLE M105 LONG MBOO	[3CC2 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89D 003F;	
    // (‎‎𞢝‎‎) MENDE KIKAKUI SYLLABLE M105 LONG MBOO	[3CC2 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CC2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_189)
{
    uint32_t const cps[2] = { 0x1E89D, 0x0061 };

    // 1E89D 0061;	
    // (‎‎𞢝‎‎) MENDE KIKAKUI SYLLABLE M105 LONG MBOO	[3CC2 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89D 0061;	
    // (‎‎𞢝‎‎) MENDE KIKAKUI SYLLABLE M105 LONG MBOO	[3CC2 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_190)
{
    uint32_t const cps[2] = { 0x1E89D, 0x0041 };

    // 1E89D 0041;	
    // (‎‎𞢝‎‎) MENDE KIKAKUI SYLLABLE M105 LONG MBOO	[3CC2 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89D 0041;	
    // (‎‎𞢝‎‎) MENDE KIKAKUI SYLLABLE M105 LONG MBOO	[3CC2 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_191)
{
    uint32_t const cps[2] = { 0x1E89D, 0x0062 };

    // 1E89D 0062;	
    // (‎‎𞢝‎‎) MENDE KIKAKUI SYLLABLE M105 LONG MBOO	[3CC2 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89D 0062;	
    // (‎‎𞢝‎‎) MENDE KIKAKUI SYLLABLE M105 LONG MBOO	[3CC2 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_192)
{
    uint32_t const cps[2] = { 0x1E89E, 0x0021 };

    // 1E89E 0021;	
    // (‎‎𞢞‎‎) MENDE KIKAKUI SYLLABLE M142 LONG MBO	[3CC3 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89E 0021;	
    // (‎‎𞢞‎‎) MENDE KIKAKUI SYLLABLE M142 LONG MBO	[3CC3 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CC3, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_193)
{
    uint32_t const cps[2] = { 0x1E89E, 0x003F };

    // 1E89E 003F;	
    // (‎‎𞢞‎‎) MENDE KIKAKUI SYLLABLE M142 LONG MBO	[3CC3 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89E 003F;	
    // (‎‎𞢞‎‎) MENDE KIKAKUI SYLLABLE M142 LONG MBO	[3CC3 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CC3, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_194)
{
    uint32_t const cps[2] = { 0x1E89E, 0x0061 };

    // 1E89E 0061;	
    // (‎‎𞢞‎‎) MENDE KIKAKUI SYLLABLE M142 LONG MBO	[3CC3 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89E 0061;	
    // (‎‎𞢞‎‎) MENDE KIKAKUI SYLLABLE M142 LONG MBO	[3CC3 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_195)
{
    uint32_t const cps[2] = { 0x1E89E, 0x0041 };

    // 1E89E 0041;	
    // (‎‎𞢞‎‎) MENDE KIKAKUI SYLLABLE M142 LONG MBO	[3CC3 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89E 0041;	
    // (‎‎𞢞‎‎) MENDE KIKAKUI SYLLABLE M142 LONG MBO	[3CC3 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_196)
{
    uint32_t const cps[2] = { 0x1E89E, 0x0062 };

    // 1E89E 0062;	
    // (‎‎𞢞‎‎) MENDE KIKAKUI SYLLABLE M142 LONG MBO	[3CC3 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89E 0062;	
    // (‎‎𞢞‎‎) MENDE KIKAKUI SYLLABLE M142 LONG MBO	[3CC3 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_197)
{
    uint32_t const cps[2] = { 0x1E89F, 0x0021 };

    // 1E89F 0021;	
    // (‎‎𞢟‎‎) MENDE KIKAKUI SYLLABLE M132 KPI	[3CC4 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89F 0021;	
    // (‎‎𞢟‎‎) MENDE KIKAKUI SYLLABLE M132 KPI	[3CC4 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CC4, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_198)
{
    uint32_t const cps[2] = { 0x1E89F, 0x003F };

    // 1E89F 003F;	
    // (‎‎𞢟‎‎) MENDE KIKAKUI SYLLABLE M132 KPI	[3CC4 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89F 003F;	
    // (‎‎𞢟‎‎) MENDE KIKAKUI SYLLABLE M132 KPI	[3CC4 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CC4, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_199)
{
    uint32_t const cps[2] = { 0x1E89F, 0x0061 };

    // 1E89F 0061;	
    // (‎‎𞢟‎‎) MENDE KIKAKUI SYLLABLE M132 KPI	[3CC4 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89F 0061;	
    // (‎‎𞢟‎‎) MENDE KIKAKUI SYLLABLE M132 KPI	[3CC4 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_200)
{
    uint32_t const cps[2] = { 0x1E89F, 0x0041 };

    // 1E89F 0041;	
    // (‎‎𞢟‎‎) MENDE KIKAKUI SYLLABLE M132 KPI	[3CC4 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89F 0041;	
    // (‎‎𞢟‎‎) MENDE KIKAKUI SYLLABLE M132 KPI	[3CC4 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_201)
{
    uint32_t const cps[2] = { 0x1E89F, 0x0062 };

    // 1E89F 0062;	
    // (‎‎𞢟‎‎) MENDE KIKAKUI SYLLABLE M132 KPI	[3CC4 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E89F 0062;	
    // (‎‎𞢟‎‎) MENDE KIKAKUI SYLLABLE M132 KPI	[3CC4 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_202)
{
    uint32_t const cps[2] = { 0x1E8A0, 0x0021 };

    // 1E8A0 0021;	
    // (‎‎𞢠‎‎) MENDE KIKAKUI SYLLABLE M092 KPA	[3CC5 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A0 0021;	
    // (‎‎𞢠‎‎) MENDE KIKAKUI SYLLABLE M092 KPA	[3CC5 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CC5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_203)
{
    uint32_t const cps[2] = { 0x1E8A0, 0x003F };

    // 1E8A0 003F;	
    // (‎‎𞢠‎‎) MENDE KIKAKUI SYLLABLE M092 KPA	[3CC5 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A0 003F;	
    // (‎‎𞢠‎‎) MENDE KIKAKUI SYLLABLE M092 KPA	[3CC5 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CC5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_204)
{
    uint32_t const cps[2] = { 0x1E8A0, 0x0061 };

    // 1E8A0 0061;	
    // (‎‎𞢠‎‎) MENDE KIKAKUI SYLLABLE M092 KPA	[3CC5 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A0 0061;	
    // (‎‎𞢠‎‎) MENDE KIKAKUI SYLLABLE M092 KPA	[3CC5 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_205)
{
    uint32_t const cps[2] = { 0x1E8A0, 0x0041 };

    // 1E8A0 0041;	
    // (‎‎𞢠‎‎) MENDE KIKAKUI SYLLABLE M092 KPA	[3CC5 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A0 0041;	
    // (‎‎𞢠‎‎) MENDE KIKAKUI SYLLABLE M092 KPA	[3CC5 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_206)
{
    uint32_t const cps[2] = { 0x1E8A0, 0x0062 };

    // 1E8A0 0062;	
    // (‎‎𞢠‎‎) MENDE KIKAKUI SYLLABLE M092 KPA	[3CC5 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A0 0062;	
    // (‎‎𞢠‎‎) MENDE KIKAKUI SYLLABLE M092 KPA	[3CC5 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_207)
{
    uint32_t const cps[2] = { 0x1E8A1, 0x0021 };

    // 1E8A1 0021;	
    // (‎‎𞢡‎‎) MENDE KIKAKUI SYLLABLE M074 KPU	[3CC6 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A1 0021;	
    // (‎‎𞢡‎‎) MENDE KIKAKUI SYLLABLE M074 KPU	[3CC6 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_208)
{
    uint32_t const cps[2] = { 0x1E8A1, 0x003F };

    // 1E8A1 003F;	
    // (‎‎𞢡‎‎) MENDE KIKAKUI SYLLABLE M074 KPU	[3CC6 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A1 003F;	
    // (‎‎𞢡‎‎) MENDE KIKAKUI SYLLABLE M074 KPU	[3CC6 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_209)
{
    uint32_t const cps[2] = { 0x1E8A1, 0x0061 };

    // 1E8A1 0061;	
    // (‎‎𞢡‎‎) MENDE KIKAKUI SYLLABLE M074 KPU	[3CC6 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A1 0061;	
    // (‎‎𞢡‎‎) MENDE KIKAKUI SYLLABLE M074 KPU	[3CC6 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_210)
{
    uint32_t const cps[2] = { 0x1E8A1, 0x0041 };

    // 1E8A1 0041;	
    // (‎‎𞢡‎‎) MENDE KIKAKUI SYLLABLE M074 KPU	[3CC6 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A1 0041;	
    // (‎‎𞢡‎‎) MENDE KIKAKUI SYLLABLE M074 KPU	[3CC6 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_211)
{
    uint32_t const cps[2] = { 0x1E8A1, 0x0062 };

    // 1E8A1 0062;	
    // (‎‎𞢡‎‎) MENDE KIKAKUI SYLLABLE M074 KPU	[3CC6 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A1 0062;	
    // (‎‎𞢡‎‎) MENDE KIKAKUI SYLLABLE M074 KPU	[3CC6 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_212)
{
    uint32_t const cps[2] = { 0x1E8A2, 0x0021 };

    // 1E8A2 0021;	
    // (‎‎𞢢‎‎) MENDE KIKAKUI SYLLABLE M044 KPEE	[3CC7 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A2 0021;	
    // (‎‎𞢢‎‎) MENDE KIKAKUI SYLLABLE M044 KPEE	[3CC7 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CC7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_213)
{
    uint32_t const cps[2] = { 0x1E8A2, 0x003F };

    // 1E8A2 003F;	
    // (‎‎𞢢‎‎) MENDE KIKAKUI SYLLABLE M044 KPEE	[3CC7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A2 003F;	
    // (‎‎𞢢‎‎) MENDE KIKAKUI SYLLABLE M044 KPEE	[3CC7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CC7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_214)
{
    uint32_t const cps[2] = { 0x1E8A2, 0x0061 };

    // 1E8A2 0061;	
    // (‎‎𞢢‎‎) MENDE KIKAKUI SYLLABLE M044 KPEE	[3CC7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A2 0061;	
    // (‎‎𞢢‎‎) MENDE KIKAKUI SYLLABLE M044 KPEE	[3CC7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_215)
{
    uint32_t const cps[2] = { 0x1E8A2, 0x0041 };

    // 1E8A2 0041;	
    // (‎‎𞢢‎‎) MENDE KIKAKUI SYLLABLE M044 KPEE	[3CC7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A2 0041;	
    // (‎‎𞢢‎‎) MENDE KIKAKUI SYLLABLE M044 KPEE	[3CC7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_216)
{
    uint32_t const cps[2] = { 0x1E8A2, 0x0062 };

    // 1E8A2 0062;	
    // (‎‎𞢢‎‎) MENDE KIKAKUI SYLLABLE M044 KPEE	[3CC7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A2 0062;	
    // (‎‎𞢢‎‎) MENDE KIKAKUI SYLLABLE M044 KPEE	[3CC7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_217)
{
    uint32_t const cps[2] = { 0x1E8A3, 0x0021 };

    // 1E8A3 0021;	
    // (‎‎𞢣‎‎) MENDE KIKAKUI SYLLABLE M108 KPE	[3CC8 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A3 0021;	
    // (‎‎𞢣‎‎) MENDE KIKAKUI SYLLABLE M108 KPE	[3CC8 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CC8, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_218)
{
    uint32_t const cps[2] = { 0x1E8A3, 0x003F };

    // 1E8A3 003F;	
    // (‎‎𞢣‎‎) MENDE KIKAKUI SYLLABLE M108 KPE	[3CC8 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A3 003F;	
    // (‎‎𞢣‎‎) MENDE KIKAKUI SYLLABLE M108 KPE	[3CC8 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CC8, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_219)
{
    uint32_t const cps[2] = { 0x1E8A3, 0x0061 };

    // 1E8A3 0061;	
    // (‎‎𞢣‎‎) MENDE KIKAKUI SYLLABLE M108 KPE	[3CC8 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A3 0061;	
    // (‎‎𞢣‎‎) MENDE KIKAKUI SYLLABLE M108 KPE	[3CC8 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_220)
{
    uint32_t const cps[2] = { 0x1E8A3, 0x0041 };

    // 1E8A3 0041;	
    // (‎‎𞢣‎‎) MENDE KIKAKUI SYLLABLE M108 KPE	[3CC8 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A3 0041;	
    // (‎‎𞢣‎‎) MENDE KIKAKUI SYLLABLE M108 KPE	[3CC8 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_221)
{
    uint32_t const cps[2] = { 0x1E8A3, 0x0062 };

    // 1E8A3 0062;	
    // (‎‎𞢣‎‎) MENDE KIKAKUI SYLLABLE M108 KPE	[3CC8 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A3 0062;	
    // (‎‎𞢣‎‎) MENDE KIKAKUI SYLLABLE M108 KPE	[3CC8 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_222)
{
    uint32_t const cps[2] = { 0x1E8A4, 0x0021 };

    // 1E8A4 0021;	
    // (‎‎𞢤‎‎) MENDE KIKAKUI SYLLABLE M112 KPOO	[3CC9 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A4 0021;	
    // (‎‎𞢤‎‎) MENDE KIKAKUI SYLLABLE M112 KPOO	[3CC9 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CC9, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_223)
{
    uint32_t const cps[2] = { 0x1E8A4, 0x003F };

    // 1E8A4 003F;	
    // (‎‎𞢤‎‎) MENDE KIKAKUI SYLLABLE M112 KPOO	[3CC9 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A4 003F;	
    // (‎‎𞢤‎‎) MENDE KIKAKUI SYLLABLE M112 KPOO	[3CC9 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CC9, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_224)
{
    uint32_t const cps[2] = { 0x1E8A4, 0x0061 };

    // 1E8A4 0061;	
    // (‎‎𞢤‎‎) MENDE KIKAKUI SYLLABLE M112 KPOO	[3CC9 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A4 0061;	
    // (‎‎𞢤‎‎) MENDE KIKAKUI SYLLABLE M112 KPOO	[3CC9 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_225)
{
    uint32_t const cps[2] = { 0x1E8A4, 0x0041 };

    // 1E8A4 0041;	
    // (‎‎𞢤‎‎) MENDE KIKAKUI SYLLABLE M112 KPOO	[3CC9 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A4 0041;	
    // (‎‎𞢤‎‎) MENDE KIKAKUI SYLLABLE M112 KPOO	[3CC9 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_226)
{
    uint32_t const cps[2] = { 0x1E8A4, 0x0062 };

    // 1E8A4 0062;	
    // (‎‎𞢤‎‎) MENDE KIKAKUI SYLLABLE M112 KPOO	[3CC9 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A4 0062;	
    // (‎‎𞢤‎‎) MENDE KIKAKUI SYLLABLE M112 KPOO	[3CC9 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_227)
{
    uint32_t const cps[2] = { 0x1E8A5, 0x0021 };

    // 1E8A5 0021;	
    // (‎‎𞢥‎‎) MENDE KIKAKUI SYLLABLE M158 KPO	[3CCA 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A5 0021;	
    // (‎‎𞢥‎‎) MENDE KIKAKUI SYLLABLE M158 KPO	[3CCA | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CCA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_228)
{
    uint32_t const cps[2] = { 0x1E8A5, 0x003F };

    // 1E8A5 003F;	
    // (‎‎𞢥‎‎) MENDE KIKAKUI SYLLABLE M158 KPO	[3CCA 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A5 003F;	
    // (‎‎𞢥‎‎) MENDE KIKAKUI SYLLABLE M158 KPO	[3CCA | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CCA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_229)
{
    uint32_t const cps[2] = { 0x1E8A5, 0x0061 };

    // 1E8A5 0061;	
    // (‎‎𞢥‎‎) MENDE KIKAKUI SYLLABLE M158 KPO	[3CCA 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A5 0061;	
    // (‎‎𞢥‎‎) MENDE KIKAKUI SYLLABLE M158 KPO	[3CCA 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_230)
{
    uint32_t const cps[2] = { 0x1E8A5, 0x0041 };

    // 1E8A5 0041;	
    // (‎‎𞢥‎‎) MENDE KIKAKUI SYLLABLE M158 KPO	[3CCA 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A5 0041;	
    // (‎‎𞢥‎‎) MENDE KIKAKUI SYLLABLE M158 KPO	[3CCA 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_231)
{
    uint32_t const cps[2] = { 0x1E8A5, 0x0062 };

    // 1E8A5 0062;	
    // (‎‎𞢥‎‎) MENDE KIKAKUI SYLLABLE M158 KPO	[3CCA 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A5 0062;	
    // (‎‎𞢥‎‎) MENDE KIKAKUI SYLLABLE M158 KPO	[3CCA 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CCA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_232)
{
    uint32_t const cps[2] = { 0x1E8A6, 0x0021 };

    // 1E8A6 0021;	
    // (‎‎𞢦‎‎) MENDE KIKAKUI SYLLABLE M124 GBI	[3CCB 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A6 0021;	
    // (‎‎𞢦‎‎) MENDE KIKAKUI SYLLABLE M124 GBI	[3CCB | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CCB, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_233)
{
    uint32_t const cps[2] = { 0x1E8A6, 0x003F };

    // 1E8A6 003F;	
    // (‎‎𞢦‎‎) MENDE KIKAKUI SYLLABLE M124 GBI	[3CCB 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A6 003F;	
    // (‎‎𞢦‎‎) MENDE KIKAKUI SYLLABLE M124 GBI	[3CCB | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CCB, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_234)
{
    uint32_t const cps[2] = { 0x1E8A6, 0x0061 };

    // 1E8A6 0061;	
    // (‎‎𞢦‎‎) MENDE KIKAKUI SYLLABLE M124 GBI	[3CCB 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A6 0061;	
    // (‎‎𞢦‎‎) MENDE KIKAKUI SYLLABLE M124 GBI	[3CCB 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_235)
{
    uint32_t const cps[2] = { 0x1E8A6, 0x0041 };

    // 1E8A6 0041;	
    // (‎‎𞢦‎‎) MENDE KIKAKUI SYLLABLE M124 GBI	[3CCB 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A6 0041;	
    // (‎‎𞢦‎‎) MENDE KIKAKUI SYLLABLE M124 GBI	[3CCB 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_236)
{
    uint32_t const cps[2] = { 0x1E8A6, 0x0062 };

    // 1E8A6 0062;	
    // (‎‎𞢦‎‎) MENDE KIKAKUI SYLLABLE M124 GBI	[3CCB 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A6 0062;	
    // (‎‎𞢦‎‎) MENDE KIKAKUI SYLLABLE M124 GBI	[3CCB 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_237)
{
    uint32_t const cps[2] = { 0x1E8A7, 0x0021 };

    // 1E8A7 0021;	
    // (‎‎𞢧‎‎) MENDE KIKAKUI SYLLABLE M056 GBA	[3CCC 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A7 0021;	
    // (‎‎𞢧‎‎) MENDE KIKAKUI SYLLABLE M056 GBA	[3CCC | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CCC, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_238)
{
    uint32_t const cps[2] = { 0x1E8A7, 0x003F };

    // 1E8A7 003F;	
    // (‎‎𞢧‎‎) MENDE KIKAKUI SYLLABLE M056 GBA	[3CCC 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A7 003F;	
    // (‎‎𞢧‎‎) MENDE KIKAKUI SYLLABLE M056 GBA	[3CCC | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CCC, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_239)
{
    uint32_t const cps[2] = { 0x1E8A7, 0x0061 };

    // 1E8A7 0061;	
    // (‎‎𞢧‎‎) MENDE KIKAKUI SYLLABLE M056 GBA	[3CCC 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A7 0061;	
    // (‎‎𞢧‎‎) MENDE KIKAKUI SYLLABLE M056 GBA	[3CCC 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_240)
{
    uint32_t const cps[2] = { 0x1E8A7, 0x0041 };

    // 1E8A7 0041;	
    // (‎‎𞢧‎‎) MENDE KIKAKUI SYLLABLE M056 GBA	[3CCC 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A7 0041;	
    // (‎‎𞢧‎‎) MENDE KIKAKUI SYLLABLE M056 GBA	[3CCC 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_241)
{
    uint32_t const cps[2] = { 0x1E8A7, 0x0062 };

    // 1E8A7 0062;	
    // (‎‎𞢧‎‎) MENDE KIKAKUI SYLLABLE M056 GBA	[3CCC 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A7 0062;	
    // (‎‎𞢧‎‎) MENDE KIKAKUI SYLLABLE M056 GBA	[3CCC 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CCC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_242)
{
    uint32_t const cps[2] = { 0x1E8A8, 0x0021 };

    // 1E8A8 0021;	
    // (‎‎𞢨‎‎) MENDE KIKAKUI SYLLABLE M148 GBU	[3CCD 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A8 0021;	
    // (‎‎𞢨‎‎) MENDE KIKAKUI SYLLABLE M148 GBU	[3CCD | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CCD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_243)
{
    uint32_t const cps[2] = { 0x1E8A8, 0x003F };

    // 1E8A8 003F;	
    // (‎‎𞢨‎‎) MENDE KIKAKUI SYLLABLE M148 GBU	[3CCD 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A8 003F;	
    // (‎‎𞢨‎‎) MENDE KIKAKUI SYLLABLE M148 GBU	[3CCD | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CCD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_244)
{
    uint32_t const cps[2] = { 0x1E8A8, 0x0061 };

    // 1E8A8 0061;	
    // (‎‎𞢨‎‎) MENDE KIKAKUI SYLLABLE M148 GBU	[3CCD 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A8 0061;	
    // (‎‎𞢨‎‎) MENDE KIKAKUI SYLLABLE M148 GBU	[3CCD 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_245)
{
    uint32_t const cps[2] = { 0x1E8A8, 0x0041 };

    // 1E8A8 0041;	
    // (‎‎𞢨‎‎) MENDE KIKAKUI SYLLABLE M148 GBU	[3CCD 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A8 0041;	
    // (‎‎𞢨‎‎) MENDE KIKAKUI SYLLABLE M148 GBU	[3CCD 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_246)
{
    uint32_t const cps[2] = { 0x1E8A8, 0x0062 };

    // 1E8A8 0062;	
    // (‎‎𞢨‎‎) MENDE KIKAKUI SYLLABLE M148 GBU	[3CCD 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A8 0062;	
    // (‎‎𞢨‎‎) MENDE KIKAKUI SYLLABLE M148 GBU	[3CCD 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_247)
{
    uint32_t const cps[2] = { 0x1E8A9, 0x0021 };

    // 1E8A9 0021;	
    // (‎‎𞢩‎‎) MENDE KIKAKUI SYLLABLE M093 GBEE	[3CCE 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A9 0021;	
    // (‎‎𞢩‎‎) MENDE KIKAKUI SYLLABLE M093 GBEE	[3CCE | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CCE, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_248)
{
    uint32_t const cps[2] = { 0x1E8A9, 0x003F };

    // 1E8A9 003F;	
    // (‎‎𞢩‎‎) MENDE KIKAKUI SYLLABLE M093 GBEE	[3CCE 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A9 003F;	
    // (‎‎𞢩‎‎) MENDE KIKAKUI SYLLABLE M093 GBEE	[3CCE | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CCE, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_249)
{
    uint32_t const cps[2] = { 0x1E8A9, 0x0061 };

    // 1E8A9 0061;	
    // (‎‎𞢩‎‎) MENDE KIKAKUI SYLLABLE M093 GBEE	[3CCE 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A9 0061;	
    // (‎‎𞢩‎‎) MENDE KIKAKUI SYLLABLE M093 GBEE	[3CCE 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_250)
{
    uint32_t const cps[2] = { 0x1E8A9, 0x0041 };

    // 1E8A9 0041;	
    // (‎‎𞢩‎‎) MENDE KIKAKUI SYLLABLE M093 GBEE	[3CCE 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A9 0041;	
    // (‎‎𞢩‎‎) MENDE KIKAKUI SYLLABLE M093 GBEE	[3CCE 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_251)
{
    uint32_t const cps[2] = { 0x1E8A9, 0x0062 };

    // 1E8A9 0062;	
    // (‎‎𞢩‎‎) MENDE KIKAKUI SYLLABLE M093 GBEE	[3CCE 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8A9 0062;	
    // (‎‎𞢩‎‎) MENDE KIKAKUI SYLLABLE M093 GBEE	[3CCE 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_252)
{
    uint32_t const cps[2] = { 0x1E8AA, 0x0021 };

    // 1E8AA 0021;	
    // (‎‎𞢪‎‎) MENDE KIKAKUI SYLLABLE M107 GBE	[3CCF 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AA 0021;	
    // (‎‎𞢪‎‎) MENDE KIKAKUI SYLLABLE M107 GBE	[3CCF | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CCF, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_253)
{
    uint32_t const cps[2] = { 0x1E8AA, 0x003F };

    // 1E8AA 003F;	
    // (‎‎𞢪‎‎) MENDE KIKAKUI SYLLABLE M107 GBE	[3CCF 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AA 003F;	
    // (‎‎𞢪‎‎) MENDE KIKAKUI SYLLABLE M107 GBE	[3CCF | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CCF, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_254)
{
    uint32_t const cps[2] = { 0x1E8AA, 0x0061 };

    // 1E8AA 0061;	
    // (‎‎𞢪‎‎) MENDE KIKAKUI SYLLABLE M107 GBE	[3CCF 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AA 0061;	
    // (‎‎𞢪‎‎) MENDE KIKAKUI SYLLABLE M107 GBE	[3CCF 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_255)
{
    uint32_t const cps[2] = { 0x1E8AA, 0x0041 };

    // 1E8AA 0041;	
    // (‎‎𞢪‎‎) MENDE KIKAKUI SYLLABLE M107 GBE	[3CCF 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AA 0041;	
    // (‎‎𞢪‎‎) MENDE KIKAKUI SYLLABLE M107 GBE	[3CCF 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_256)
{
    uint32_t const cps[2] = { 0x1E8AA, 0x0062 };

    // 1E8AA 0062;	
    // (‎‎𞢪‎‎) MENDE KIKAKUI SYLLABLE M107 GBE	[3CCF 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CCF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AA 0062;	
    // (‎‎𞢪‎‎) MENDE KIKAKUI SYLLABLE M107 GBE	[3CCF 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CCF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_257)
{
    uint32_t const cps[2] = { 0x1E8AB, 0x0021 };

    // 1E8AB 0021;	
    // (‎‎𞢫‎‎) MENDE KIKAKUI SYLLABLE M071 GBOO	[3CD0 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AB 0021;	
    // (‎‎𞢫‎‎) MENDE KIKAKUI SYLLABLE M071 GBOO	[3CD0 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CD0, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_258)
{
    uint32_t const cps[2] = { 0x1E8AB, 0x003F };

    // 1E8AB 003F;	
    // (‎‎𞢫‎‎) MENDE KIKAKUI SYLLABLE M071 GBOO	[3CD0 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AB 003F;	
    // (‎‎𞢫‎‎) MENDE KIKAKUI SYLLABLE M071 GBOO	[3CD0 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CD0, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_259)
{
    uint32_t const cps[2] = { 0x1E8AB, 0x0061 };

    // 1E8AB 0061;	
    // (‎‎𞢫‎‎) MENDE KIKAKUI SYLLABLE M071 GBOO	[3CD0 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AB 0061;	
    // (‎‎𞢫‎‎) MENDE KIKAKUI SYLLABLE M071 GBOO	[3CD0 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_260)
{
    uint32_t const cps[2] = { 0x1E8AB, 0x0041 };

    // 1E8AB 0041;	
    // (‎‎𞢫‎‎) MENDE KIKAKUI SYLLABLE M071 GBOO	[3CD0 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AB 0041;	
    // (‎‎𞢫‎‎) MENDE KIKAKUI SYLLABLE M071 GBOO	[3CD0 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_261)
{
    uint32_t const cps[2] = { 0x1E8AB, 0x0062 };

    // 1E8AB 0062;	
    // (‎‎𞢫‎‎) MENDE KIKAKUI SYLLABLE M071 GBOO	[3CD0 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AB 0062;	
    // (‎‎𞢫‎‎) MENDE KIKAKUI SYLLABLE M071 GBOO	[3CD0 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_262)
{
    uint32_t const cps[2] = { 0x1E8AC, 0x0021 };

    // 1E8AC 0021;	
    // (‎‎𞢬‎‎) MENDE KIKAKUI SYLLABLE M070 GBO	[3CD1 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AC 0021;	
    // (‎‎𞢬‎‎) MENDE KIKAKUI SYLLABLE M070 GBO	[3CD1 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CD1, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_263)
{
    uint32_t const cps[2] = { 0x1E8AC, 0x003F };

    // 1E8AC 003F;	
    // (‎‎𞢬‎‎) MENDE KIKAKUI SYLLABLE M070 GBO	[3CD1 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AC 003F;	
    // (‎‎𞢬‎‎) MENDE KIKAKUI SYLLABLE M070 GBO	[3CD1 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CD1, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_264)
{
    uint32_t const cps[2] = { 0x1E8AC, 0x0061 };

    // 1E8AC 0061;	
    // (‎‎𞢬‎‎) MENDE KIKAKUI SYLLABLE M070 GBO	[3CD1 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AC 0061;	
    // (‎‎𞢬‎‎) MENDE KIKAKUI SYLLABLE M070 GBO	[3CD1 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_265)
{
    uint32_t const cps[2] = { 0x1E8AC, 0x0041 };

    // 1E8AC 0041;	
    // (‎‎𞢬‎‎) MENDE KIKAKUI SYLLABLE M070 GBO	[3CD1 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AC 0041;	
    // (‎‎𞢬‎‎) MENDE KIKAKUI SYLLABLE M070 GBO	[3CD1 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_266)
{
    uint32_t const cps[2] = { 0x1E8AC, 0x0062 };

    // 1E8AC 0062;	
    // (‎‎𞢬‎‎) MENDE KIKAKUI SYLLABLE M070 GBO	[3CD1 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AC 0062;	
    // (‎‎𞢬‎‎) MENDE KIKAKUI SYLLABLE M070 GBO	[3CD1 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_267)
{
    uint32_t const cps[2] = { 0x1E8AD, 0x0021 };

    // 1E8AD 0021;	
    // (‎‎𞢭‎‎) MENDE KIKAKUI SYLLABLE M171 RA	[3CD2 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AD 0021;	
    // (‎‎𞢭‎‎) MENDE KIKAKUI SYLLABLE M171 RA	[3CD2 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CD2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_268)
{
    uint32_t const cps[2] = { 0x1E8AD, 0x003F };

    // 1E8AD 003F;	
    // (‎‎𞢭‎‎) MENDE KIKAKUI SYLLABLE M171 RA	[3CD2 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AD 003F;	
    // (‎‎𞢭‎‎) MENDE KIKAKUI SYLLABLE M171 RA	[3CD2 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CD2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_269)
{
    uint32_t const cps[2] = { 0x1E8AD, 0x0061 };

    // 1E8AD 0061;	
    // (‎‎𞢭‎‎) MENDE KIKAKUI SYLLABLE M171 RA	[3CD2 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AD 0061;	
    // (‎‎𞢭‎‎) MENDE KIKAKUI SYLLABLE M171 RA	[3CD2 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_270)
{
    uint32_t const cps[2] = { 0x1E8AD, 0x0041 };

    // 1E8AD 0041;	
    // (‎‎𞢭‎‎) MENDE KIKAKUI SYLLABLE M171 RA	[3CD2 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AD 0041;	
    // (‎‎𞢭‎‎) MENDE KIKAKUI SYLLABLE M171 RA	[3CD2 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_271)
{
    uint32_t const cps[2] = { 0x1E8AD, 0x0062 };

    // 1E8AD 0062;	
    // (‎‎𞢭‎‎) MENDE KIKAKUI SYLLABLE M171 RA	[3CD2 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AD 0062;	
    // (‎‎𞢭‎‎) MENDE KIKAKUI SYLLABLE M171 RA	[3CD2 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_272)
{
    uint32_t const cps[2] = { 0x1E8AE, 0x0021 };

    // 1E8AE 0021;	
    // (‎‎𞢮‎‎) MENDE KIKAKUI SYLLABLE M123 NDI	[3CD3 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AE 0021;	
    // (‎‎𞢮‎‎) MENDE KIKAKUI SYLLABLE M123 NDI	[3CD3 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CD3, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_273)
{
    uint32_t const cps[2] = { 0x1E8AE, 0x003F };

    // 1E8AE 003F;	
    // (‎‎𞢮‎‎) MENDE KIKAKUI SYLLABLE M123 NDI	[3CD3 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AE 003F;	
    // (‎‎𞢮‎‎) MENDE KIKAKUI SYLLABLE M123 NDI	[3CD3 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CD3, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_274)
{
    uint32_t const cps[2] = { 0x1E8AE, 0x0061 };

    // 1E8AE 0061;	
    // (‎‎𞢮‎‎) MENDE KIKAKUI SYLLABLE M123 NDI	[3CD3 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AE 0061;	
    // (‎‎𞢮‎‎) MENDE KIKAKUI SYLLABLE M123 NDI	[3CD3 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_275)
{
    uint32_t const cps[2] = { 0x1E8AE, 0x0041 };

    // 1E8AE 0041;	
    // (‎‎𞢮‎‎) MENDE KIKAKUI SYLLABLE M123 NDI	[3CD3 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AE 0041;	
    // (‎‎𞢮‎‎) MENDE KIKAKUI SYLLABLE M123 NDI	[3CD3 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_276)
{
    uint32_t const cps[2] = { 0x1E8AE, 0x0062 };

    // 1E8AE 0062;	
    // (‎‎𞢮‎‎) MENDE KIKAKUI SYLLABLE M123 NDI	[3CD3 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AE 0062;	
    // (‎‎𞢮‎‎) MENDE KIKAKUI SYLLABLE M123 NDI	[3CD3 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_277)
{
    uint32_t const cps[2] = { 0x1E8AF, 0x0021 };

    // 1E8AF 0021;	
    // (‎‎𞢯‎‎) MENDE KIKAKUI SYLLABLE M129 NDA	[3CD4 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AF 0021;	
    // (‎‎𞢯‎‎) MENDE KIKAKUI SYLLABLE M129 NDA	[3CD4 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CD4, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_278)
{
    uint32_t const cps[2] = { 0x1E8AF, 0x003F };

    // 1E8AF 003F;	
    // (‎‎𞢯‎‎) MENDE KIKAKUI SYLLABLE M129 NDA	[3CD4 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AF 003F;	
    // (‎‎𞢯‎‎) MENDE KIKAKUI SYLLABLE M129 NDA	[3CD4 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CD4, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_279)
{
    uint32_t const cps[2] = { 0x1E8AF, 0x0061 };

    // 1E8AF 0061;	
    // (‎‎𞢯‎‎) MENDE KIKAKUI SYLLABLE M129 NDA	[3CD4 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AF 0061;	
    // (‎‎𞢯‎‎) MENDE KIKAKUI SYLLABLE M129 NDA	[3CD4 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_280)
{
    uint32_t const cps[2] = { 0x1E8AF, 0x0041 };

    // 1E8AF 0041;	
    // (‎‎𞢯‎‎) MENDE KIKAKUI SYLLABLE M129 NDA	[3CD4 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AF 0041;	
    // (‎‎𞢯‎‎) MENDE KIKAKUI SYLLABLE M129 NDA	[3CD4 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_281)
{
    uint32_t const cps[2] = { 0x1E8AF, 0x0062 };

    // 1E8AF 0062;	
    // (‎‎𞢯‎‎) MENDE KIKAKUI SYLLABLE M129 NDA	[3CD4 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8AF 0062;	
    // (‎‎𞢯‎‎) MENDE KIKAKUI SYLLABLE M129 NDA	[3CD4 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_282)
{
    uint32_t const cps[2] = { 0x1E8B0, 0x0021 };

    // 1E8B0 0021;	
    // (‎‎𞢰‎‎) MENDE KIKAKUI SYLLABLE M125 NDU	[3CD5 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B0 0021;	
    // (‎‎𞢰‎‎) MENDE KIKAKUI SYLLABLE M125 NDU	[3CD5 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CD5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_283)
{
    uint32_t const cps[2] = { 0x1E8B0, 0x003F };

    // 1E8B0 003F;	
    // (‎‎𞢰‎‎) MENDE KIKAKUI SYLLABLE M125 NDU	[3CD5 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B0 003F;	
    // (‎‎𞢰‎‎) MENDE KIKAKUI SYLLABLE M125 NDU	[3CD5 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CD5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_284)
{
    uint32_t const cps[2] = { 0x1E8B0, 0x0061 };

    // 1E8B0 0061;	
    // (‎‎𞢰‎‎) MENDE KIKAKUI SYLLABLE M125 NDU	[3CD5 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B0 0061;	
    // (‎‎𞢰‎‎) MENDE KIKAKUI SYLLABLE M125 NDU	[3CD5 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_285)
{
    uint32_t const cps[2] = { 0x1E8B0, 0x0041 };

    // 1E8B0 0041;	
    // (‎‎𞢰‎‎) MENDE KIKAKUI SYLLABLE M125 NDU	[3CD5 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B0 0041;	
    // (‎‎𞢰‎‎) MENDE KIKAKUI SYLLABLE M125 NDU	[3CD5 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_286)
{
    uint32_t const cps[2] = { 0x1E8B0, 0x0062 };

    // 1E8B0 0062;	
    // (‎‎𞢰‎‎) MENDE KIKAKUI SYLLABLE M125 NDU	[3CD5 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B0 0062;	
    // (‎‎𞢰‎‎) MENDE KIKAKUI SYLLABLE M125 NDU	[3CD5 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_287)
{
    uint32_t const cps[2] = { 0x1E8B1, 0x0021 };

    // 1E8B1 0021;	
    // (‎‎𞢱‎‎) MENDE KIKAKUI SYLLABLE M191 NDEE	[3CD6 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B1 0021;	
    // (‎‎𞢱‎‎) MENDE KIKAKUI SYLLABLE M191 NDEE	[3CD6 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CD6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_288)
{
    uint32_t const cps[2] = { 0x1E8B1, 0x003F };

    // 1E8B1 003F;	
    // (‎‎𞢱‎‎) MENDE KIKAKUI SYLLABLE M191 NDEE	[3CD6 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B1 003F;	
    // (‎‎𞢱‎‎) MENDE KIKAKUI SYLLABLE M191 NDEE	[3CD6 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CD6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_289)
{
    uint32_t const cps[2] = { 0x1E8B1, 0x0061 };

    // 1E8B1 0061;	
    // (‎‎𞢱‎‎) MENDE KIKAKUI SYLLABLE M191 NDEE	[3CD6 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B1 0061;	
    // (‎‎𞢱‎‎) MENDE KIKAKUI SYLLABLE M191 NDEE	[3CD6 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_290)
{
    uint32_t const cps[2] = { 0x1E8B1, 0x0041 };

    // 1E8B1 0041;	
    // (‎‎𞢱‎‎) MENDE KIKAKUI SYLLABLE M191 NDEE	[3CD6 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B1 0041;	
    // (‎‎𞢱‎‎) MENDE KIKAKUI SYLLABLE M191 NDEE	[3CD6 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_291)
{
    uint32_t const cps[2] = { 0x1E8B1, 0x0062 };

    // 1E8B1 0062;	
    // (‎‎𞢱‎‎) MENDE KIKAKUI SYLLABLE M191 NDEE	[3CD6 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B1 0062;	
    // (‎‎𞢱‎‎) MENDE KIKAKUI SYLLABLE M191 NDEE	[3CD6 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_292)
{
    uint32_t const cps[2] = { 0x1E8B2, 0x0021 };

    // 1E8B2 0021;	
    // (‎‎𞢲‎‎) MENDE KIKAKUI SYLLABLE M119 NDE	[3CD7 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B2 0021;	
    // (‎‎𞢲‎‎) MENDE KIKAKUI SYLLABLE M119 NDE	[3CD7 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CD7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_293)
{
    uint32_t const cps[2] = { 0x1E8B2, 0x003F };

    // 1E8B2 003F;	
    // (‎‎𞢲‎‎) MENDE KIKAKUI SYLLABLE M119 NDE	[3CD7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B2 003F;	
    // (‎‎𞢲‎‎) MENDE KIKAKUI SYLLABLE M119 NDE	[3CD7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CD7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_294)
{
    uint32_t const cps[2] = { 0x1E8B2, 0x0061 };

    // 1E8B2 0061;	
    // (‎‎𞢲‎‎) MENDE KIKAKUI SYLLABLE M119 NDE	[3CD7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B2 0061;	
    // (‎‎𞢲‎‎) MENDE KIKAKUI SYLLABLE M119 NDE	[3CD7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_295)
{
    uint32_t const cps[2] = { 0x1E8B2, 0x0041 };

    // 1E8B2 0041;	
    // (‎‎𞢲‎‎) MENDE KIKAKUI SYLLABLE M119 NDE	[3CD7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B2 0041;	
    // (‎‎𞢲‎‎) MENDE KIKAKUI SYLLABLE M119 NDE	[3CD7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_296)
{
    uint32_t const cps[2] = { 0x1E8B2, 0x0062 };

    // 1E8B2 0062;	
    // (‎‎𞢲‎‎) MENDE KIKAKUI SYLLABLE M119 NDE	[3CD7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B2 0062;	
    // (‎‎𞢲‎‎) MENDE KIKAKUI SYLLABLE M119 NDE	[3CD7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_297)
{
    uint32_t const cps[2] = { 0x1E8B3, 0x0021 };

    // 1E8B3 0021;	
    // (‎‎𞢳‎‎) MENDE KIKAKUI SYLLABLE M067 NDOO	[3CD8 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B3 0021;	
    // (‎‎𞢳‎‎) MENDE KIKAKUI SYLLABLE M067 NDOO	[3CD8 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CD8, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_298)
{
    uint32_t const cps[2] = { 0x1E8B3, 0x003F };

    // 1E8B3 003F;	
    // (‎‎𞢳‎‎) MENDE KIKAKUI SYLLABLE M067 NDOO	[3CD8 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B3 003F;	
    // (‎‎𞢳‎‎) MENDE KIKAKUI SYLLABLE M067 NDOO	[3CD8 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CD8, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_299)
{
    uint32_t const cps[2] = { 0x1E8B3, 0x0061 };

    // 1E8B3 0061;	
    // (‎‎𞢳‎‎) MENDE KIKAKUI SYLLABLE M067 NDOO	[3CD8 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B3 0061;	
    // (‎‎𞢳‎‎) MENDE KIKAKUI SYLLABLE M067 NDOO	[3CD8 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_300)
{
    uint32_t const cps[2] = { 0x1E8B3, 0x0041 };

    // 1E8B3 0041;	
    // (‎‎𞢳‎‎) MENDE KIKAKUI SYLLABLE M067 NDOO	[3CD8 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B3 0041;	
    // (‎‎𞢳‎‎) MENDE KIKAKUI SYLLABLE M067 NDOO	[3CD8 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_301)
{
    uint32_t const cps[2] = { 0x1E8B3, 0x0062 };

    // 1E8B3 0062;	
    // (‎‎𞢳‎‎) MENDE KIKAKUI SYLLABLE M067 NDOO	[3CD8 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B3 0062;	
    // (‎‎𞢳‎‎) MENDE KIKAKUI SYLLABLE M067 NDOO	[3CD8 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_302)
{
    uint32_t const cps[2] = { 0x1E8B4, 0x0021 };

    // 1E8B4 0021;	
    // (‎‎𞢴‎‎) MENDE KIKAKUI SYLLABLE M064 NDO	[3CD9 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B4 0021;	
    // (‎‎𞢴‎‎) MENDE KIKAKUI SYLLABLE M064 NDO	[3CD9 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CD9, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_303)
{
    uint32_t const cps[2] = { 0x1E8B4, 0x003F };

    // 1E8B4 003F;	
    // (‎‎𞢴‎‎) MENDE KIKAKUI SYLLABLE M064 NDO	[3CD9 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B4 003F;	
    // (‎‎𞢴‎‎) MENDE KIKAKUI SYLLABLE M064 NDO	[3CD9 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CD9, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_304)
{
    uint32_t const cps[2] = { 0x1E8B4, 0x0061 };

    // 1E8B4 0061;	
    // (‎‎𞢴‎‎) MENDE KIKAKUI SYLLABLE M064 NDO	[3CD9 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B4 0061;	
    // (‎‎𞢴‎‎) MENDE KIKAKUI SYLLABLE M064 NDO	[3CD9 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_305)
{
    uint32_t const cps[2] = { 0x1E8B4, 0x0041 };

    // 1E8B4 0041;	
    // (‎‎𞢴‎‎) MENDE KIKAKUI SYLLABLE M064 NDO	[3CD9 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B4 0041;	
    // (‎‎𞢴‎‎) MENDE KIKAKUI SYLLABLE M064 NDO	[3CD9 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_306)
{
    uint32_t const cps[2] = { 0x1E8B4, 0x0062 };

    // 1E8B4 0062;	
    // (‎‎𞢴‎‎) MENDE KIKAKUI SYLLABLE M064 NDO	[3CD9 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B4 0062;	
    // (‎‎𞢴‎‎) MENDE KIKAKUI SYLLABLE M064 NDO	[3CD9 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_307)
{
    uint32_t const cps[2] = { 0x1E8B5, 0x0021 };

    // 1E8B5 0021;	
    // (‎‎𞢵‎‎) MENDE KIKAKUI SYLLABLE M152 NJA	[3CDA 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B5 0021;	
    // (‎‎𞢵‎‎) MENDE KIKAKUI SYLLABLE M152 NJA	[3CDA | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CDA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_308)
{
    uint32_t const cps[2] = { 0x1E8B5, 0x003F };

    // 1E8B5 003F;	
    // (‎‎𞢵‎‎) MENDE KIKAKUI SYLLABLE M152 NJA	[3CDA 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B5 003F;	
    // (‎‎𞢵‎‎) MENDE KIKAKUI SYLLABLE M152 NJA	[3CDA | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CDA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_309)
{
    uint32_t const cps[2] = { 0x1E8B5, 0x0061 };

    // 1E8B5 0061;	
    // (‎‎𞢵‎‎) MENDE KIKAKUI SYLLABLE M152 NJA	[3CDA 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B5 0061;	
    // (‎‎𞢵‎‎) MENDE KIKAKUI SYLLABLE M152 NJA	[3CDA 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_310)
{
    uint32_t const cps[2] = { 0x1E8B5, 0x0041 };

    // 1E8B5 0041;	
    // (‎‎𞢵‎‎) MENDE KIKAKUI SYLLABLE M152 NJA	[3CDA 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B5 0041;	
    // (‎‎𞢵‎‎) MENDE KIKAKUI SYLLABLE M152 NJA	[3CDA 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_311)
{
    uint32_t const cps[2] = { 0x1E8B5, 0x0062 };

    // 1E8B5 0062;	
    // (‎‎𞢵‎‎) MENDE KIKAKUI SYLLABLE M152 NJA	[3CDA 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B5 0062;	
    // (‎‎𞢵‎‎) MENDE KIKAKUI SYLLABLE M152 NJA	[3CDA 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_312)
{
    uint32_t const cps[2] = { 0x1E8B6, 0x0021 };

    // 1E8B6 0021;	
    // (‎‎𞢶‎‎) MENDE KIKAKUI SYLLABLE M192 NJU	[3CDB 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B6 0021;	
    // (‎‎𞢶‎‎) MENDE KIKAKUI SYLLABLE M192 NJU	[3CDB | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CDB, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_313)
{
    uint32_t const cps[2] = { 0x1E8B6, 0x003F };

    // 1E8B6 003F;	
    // (‎‎𞢶‎‎) MENDE KIKAKUI SYLLABLE M192 NJU	[3CDB 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B6 003F;	
    // (‎‎𞢶‎‎) MENDE KIKAKUI SYLLABLE M192 NJU	[3CDB | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CDB, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_314)
{
    uint32_t const cps[2] = { 0x1E8B6, 0x0061 };

    // 1E8B6 0061;	
    // (‎‎𞢶‎‎) MENDE KIKAKUI SYLLABLE M192 NJU	[3CDB 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B6 0061;	
    // (‎‎𞢶‎‎) MENDE KIKAKUI SYLLABLE M192 NJU	[3CDB 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_315)
{
    uint32_t const cps[2] = { 0x1E8B6, 0x0041 };

    // 1E8B6 0041;	
    // (‎‎𞢶‎‎) MENDE KIKAKUI SYLLABLE M192 NJU	[3CDB 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B6 0041;	
    // (‎‎𞢶‎‎) MENDE KIKAKUI SYLLABLE M192 NJU	[3CDB 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_316)
{
    uint32_t const cps[2] = { 0x1E8B6, 0x0062 };

    // 1E8B6 0062;	
    // (‎‎𞢶‎‎) MENDE KIKAKUI SYLLABLE M192 NJU	[3CDB 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B6 0062;	
    // (‎‎𞢶‎‎) MENDE KIKAKUI SYLLABLE M192 NJU	[3CDB 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_317)
{
    uint32_t const cps[2] = { 0x1E8B7, 0x0021 };

    // 1E8B7 0021;	
    // (‎‎𞢷‎‎) MENDE KIKAKUI SYLLABLE M149 NJEE	[3CDC 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B7 0021;	
    // (‎‎𞢷‎‎) MENDE KIKAKUI SYLLABLE M149 NJEE	[3CDC | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CDC, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_318)
{
    uint32_t const cps[2] = { 0x1E8B7, 0x003F };

    // 1E8B7 003F;	
    // (‎‎𞢷‎‎) MENDE KIKAKUI SYLLABLE M149 NJEE	[3CDC 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B7 003F;	
    // (‎‎𞢷‎‎) MENDE KIKAKUI SYLLABLE M149 NJEE	[3CDC | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CDC, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_319)
{
    uint32_t const cps[2] = { 0x1E8B7, 0x0061 };

    // 1E8B7 0061;	
    // (‎‎𞢷‎‎) MENDE KIKAKUI SYLLABLE M149 NJEE	[3CDC 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B7 0061;	
    // (‎‎𞢷‎‎) MENDE KIKAKUI SYLLABLE M149 NJEE	[3CDC 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_320)
{
    uint32_t const cps[2] = { 0x1E8B7, 0x0041 };

    // 1E8B7 0041;	
    // (‎‎𞢷‎‎) MENDE KIKAKUI SYLLABLE M149 NJEE	[3CDC 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B7 0041;	
    // (‎‎𞢷‎‎) MENDE KIKAKUI SYLLABLE M149 NJEE	[3CDC 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_321)
{
    uint32_t const cps[2] = { 0x1E8B7, 0x0062 };

    // 1E8B7 0062;	
    // (‎‎𞢷‎‎) MENDE KIKAKUI SYLLABLE M149 NJEE	[3CDC 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B7 0062;	
    // (‎‎𞢷‎‎) MENDE KIKAKUI SYLLABLE M149 NJEE	[3CDC 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_322)
{
    uint32_t const cps[2] = { 0x1E8B8, 0x0021 };

    // 1E8B8 0021;	
    // (‎‎𞢸‎‎) MENDE KIKAKUI SYLLABLE M134 NJOO	[3CDD 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B8 0021;	
    // (‎‎𞢸‎‎) MENDE KIKAKUI SYLLABLE M134 NJOO	[3CDD | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CDD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_323)
{
    uint32_t const cps[2] = { 0x1E8B8, 0x003F };

    // 1E8B8 003F;	
    // (‎‎𞢸‎‎) MENDE KIKAKUI SYLLABLE M134 NJOO	[3CDD 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B8 003F;	
    // (‎‎𞢸‎‎) MENDE KIKAKUI SYLLABLE M134 NJOO	[3CDD | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CDD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_324)
{
    uint32_t const cps[2] = { 0x1E8B8, 0x0061 };

    // 1E8B8 0061;	
    // (‎‎𞢸‎‎) MENDE KIKAKUI SYLLABLE M134 NJOO	[3CDD 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B8 0061;	
    // (‎‎𞢸‎‎) MENDE KIKAKUI SYLLABLE M134 NJOO	[3CDD 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_325)
{
    uint32_t const cps[2] = { 0x1E8B8, 0x0041 };

    // 1E8B8 0041;	
    // (‎‎𞢸‎‎) MENDE KIKAKUI SYLLABLE M134 NJOO	[3CDD 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B8 0041;	
    // (‎‎𞢸‎‎) MENDE KIKAKUI SYLLABLE M134 NJOO	[3CDD 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_326)
{
    uint32_t const cps[2] = { 0x1E8B8, 0x0062 };

    // 1E8B8 0062;	
    // (‎‎𞢸‎‎) MENDE KIKAKUI SYLLABLE M134 NJOO	[3CDD 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B8 0062;	
    // (‎‎𞢸‎‎) MENDE KIKAKUI SYLLABLE M134 NJOO	[3CDD 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_327)
{
    uint32_t const cps[2] = { 0x1E8B9, 0x0021 };

    // 1E8B9 0021;	
    // (‎‎𞢹‎‎) MENDE KIKAKUI SYLLABLE M182 VI	[3CDE 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B9 0021;	
    // (‎‎𞢹‎‎) MENDE KIKAKUI SYLLABLE M182 VI	[3CDE | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CDE, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_328)
{
    uint32_t const cps[2] = { 0x1E8B9, 0x003F };

    // 1E8B9 003F;	
    // (‎‎𞢹‎‎) MENDE KIKAKUI SYLLABLE M182 VI	[3CDE 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B9 003F;	
    // (‎‎𞢹‎‎) MENDE KIKAKUI SYLLABLE M182 VI	[3CDE | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CDE, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_329)
{
    uint32_t const cps[2] = { 0x1E8B9, 0x0061 };

    // 1E8B9 0061;	
    // (‎‎𞢹‎‎) MENDE KIKAKUI SYLLABLE M182 VI	[3CDE 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B9 0061;	
    // (‎‎𞢹‎‎) MENDE KIKAKUI SYLLABLE M182 VI	[3CDE 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_330)
{
    uint32_t const cps[2] = { 0x1E8B9, 0x0041 };

    // 1E8B9 0041;	
    // (‎‎𞢹‎‎) MENDE KIKAKUI SYLLABLE M182 VI	[3CDE 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B9 0041;	
    // (‎‎𞢹‎‎) MENDE KIKAKUI SYLLABLE M182 VI	[3CDE 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_331)
{
    uint32_t const cps[2] = { 0x1E8B9, 0x0062 };

    // 1E8B9 0062;	
    // (‎‎𞢹‎‎) MENDE KIKAKUI SYLLABLE M182 VI	[3CDE 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8B9 0062;	
    // (‎‎𞢹‎‎) MENDE KIKAKUI SYLLABLE M182 VI	[3CDE 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_332)
{
    uint32_t const cps[2] = { 0x1E8BA, 0x0021 };

    // 1E8BA 0021;	
    // (‎‎𞢺‎‎) MENDE KIKAKUI SYLLABLE M185 VA	[3CDF 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BA 0021;	
    // (‎‎𞢺‎‎) MENDE KIKAKUI SYLLABLE M185 VA	[3CDF | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CDF, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_333)
{
    uint32_t const cps[2] = { 0x1E8BA, 0x003F };

    // 1E8BA 003F;	
    // (‎‎𞢺‎‎) MENDE KIKAKUI SYLLABLE M185 VA	[3CDF 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BA 003F;	
    // (‎‎𞢺‎‎) MENDE KIKAKUI SYLLABLE M185 VA	[3CDF | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CDF, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_334)
{
    uint32_t const cps[2] = { 0x1E8BA, 0x0061 };

    // 1E8BA 0061;	
    // (‎‎𞢺‎‎) MENDE KIKAKUI SYLLABLE M185 VA	[3CDF 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BA 0061;	
    // (‎‎𞢺‎‎) MENDE KIKAKUI SYLLABLE M185 VA	[3CDF 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_335)
{
    uint32_t const cps[2] = { 0x1E8BA, 0x0041 };

    // 1E8BA 0041;	
    // (‎‎𞢺‎‎) MENDE KIKAKUI SYLLABLE M185 VA	[3CDF 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BA 0041;	
    // (‎‎𞢺‎‎) MENDE KIKAKUI SYLLABLE M185 VA	[3CDF 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_336)
{
    uint32_t const cps[2] = { 0x1E8BA, 0x0062 };

    // 1E8BA 0062;	
    // (‎‎𞢺‎‎) MENDE KIKAKUI SYLLABLE M185 VA	[3CDF 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BA 0062;	
    // (‎‎𞢺‎‎) MENDE KIKAKUI SYLLABLE M185 VA	[3CDF 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_337)
{
    uint32_t const cps[2] = { 0x1E8BB, 0x0021 };

    // 1E8BB 0021;	
    // (‎‎𞢻‎‎) MENDE KIKAKUI SYLLABLE M151 VU	[3CE0 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BB 0021;	
    // (‎‎𞢻‎‎) MENDE KIKAKUI SYLLABLE M151 VU	[3CE0 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CE0, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_338)
{
    uint32_t const cps[2] = { 0x1E8BB, 0x003F };

    // 1E8BB 003F;	
    // (‎‎𞢻‎‎) MENDE KIKAKUI SYLLABLE M151 VU	[3CE0 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BB 003F;	
    // (‎‎𞢻‎‎) MENDE KIKAKUI SYLLABLE M151 VU	[3CE0 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CE0, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_339)
{
    uint32_t const cps[2] = { 0x1E8BB, 0x0061 };

    // 1E8BB 0061;	
    // (‎‎𞢻‎‎) MENDE KIKAKUI SYLLABLE M151 VU	[3CE0 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BB 0061;	
    // (‎‎𞢻‎‎) MENDE KIKAKUI SYLLABLE M151 VU	[3CE0 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_340)
{
    uint32_t const cps[2] = { 0x1E8BB, 0x0041 };

    // 1E8BB 0041;	
    // (‎‎𞢻‎‎) MENDE KIKAKUI SYLLABLE M151 VU	[3CE0 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BB 0041;	
    // (‎‎𞢻‎‎) MENDE KIKAKUI SYLLABLE M151 VU	[3CE0 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_341)
{
    uint32_t const cps[2] = { 0x1E8BB, 0x0062 };

    // 1E8BB 0062;	
    // (‎‎𞢻‎‎) MENDE KIKAKUI SYLLABLE M151 VU	[3CE0 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BB 0062;	
    // (‎‎𞢻‎‎) MENDE KIKAKUI SYLLABLE M151 VU	[3CE0 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_342)
{
    uint32_t const cps[2] = { 0x1E8BC, 0x0021 };

    // 1E8BC 0021;	
    // (‎‎𞢼‎‎) MENDE KIKAKUI SYLLABLE M173 VEE	[3CE1 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BC 0021;	
    // (‎‎𞢼‎‎) MENDE KIKAKUI SYLLABLE M173 VEE	[3CE1 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CE1, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_343)
{
    uint32_t const cps[2] = { 0x1E8BC, 0x003F };

    // 1E8BC 003F;	
    // (‎‎𞢼‎‎) MENDE KIKAKUI SYLLABLE M173 VEE	[3CE1 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BC 003F;	
    // (‎‎𞢼‎‎) MENDE KIKAKUI SYLLABLE M173 VEE	[3CE1 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CE1, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_344)
{
    uint32_t const cps[2] = { 0x1E8BC, 0x0061 };

    // 1E8BC 0061;	
    // (‎‎𞢼‎‎) MENDE KIKAKUI SYLLABLE M173 VEE	[3CE1 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BC 0061;	
    // (‎‎𞢼‎‎) MENDE KIKAKUI SYLLABLE M173 VEE	[3CE1 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_345)
{
    uint32_t const cps[2] = { 0x1E8BC, 0x0041 };

    // 1E8BC 0041;	
    // (‎‎𞢼‎‎) MENDE KIKAKUI SYLLABLE M173 VEE	[3CE1 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BC 0041;	
    // (‎‎𞢼‎‎) MENDE KIKAKUI SYLLABLE M173 VEE	[3CE1 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_346)
{
    uint32_t const cps[2] = { 0x1E8BC, 0x0062 };

    // 1E8BC 0062;	
    // (‎‎𞢼‎‎) MENDE KIKAKUI SYLLABLE M173 VEE	[3CE1 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BC 0062;	
    // (‎‎𞢼‎‎) MENDE KIKAKUI SYLLABLE M173 VEE	[3CE1 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_347)
{
    uint32_t const cps[2] = { 0x1E8BD, 0x0021 };

    // 1E8BD 0021;	
    // (‎‎𞢽‎‎) MENDE KIKAKUI SYLLABLE M085 VE	[3CE2 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BD 0021;	
    // (‎‎𞢽‎‎) MENDE KIKAKUI SYLLABLE M085 VE	[3CE2 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CE2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_348)
{
    uint32_t const cps[2] = { 0x1E8BD, 0x003F };

    // 1E8BD 003F;	
    // (‎‎𞢽‎‎) MENDE KIKAKUI SYLLABLE M085 VE	[3CE2 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BD 003F;	
    // (‎‎𞢽‎‎) MENDE KIKAKUI SYLLABLE M085 VE	[3CE2 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CE2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_349)
{
    uint32_t const cps[2] = { 0x1E8BD, 0x0061 };

    // 1E8BD 0061;	
    // (‎‎𞢽‎‎) MENDE KIKAKUI SYLLABLE M085 VE	[3CE2 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BD 0061;	
    // (‎‎𞢽‎‎) MENDE KIKAKUI SYLLABLE M085 VE	[3CE2 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_350)
{
    uint32_t const cps[2] = { 0x1E8BD, 0x0041 };

    // 1E8BD 0041;	
    // (‎‎𞢽‎‎) MENDE KIKAKUI SYLLABLE M085 VE	[3CE2 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BD 0041;	
    // (‎‎𞢽‎‎) MENDE KIKAKUI SYLLABLE M085 VE	[3CE2 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_351)
{
    uint32_t const cps[2] = { 0x1E8BD, 0x0062 };

    // 1E8BD 0062;	
    // (‎‎𞢽‎‎) MENDE KIKAKUI SYLLABLE M085 VE	[3CE2 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BD 0062;	
    // (‎‎𞢽‎‎) MENDE KIKAKUI SYLLABLE M085 VE	[3CE2 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_352)
{
    uint32_t const cps[2] = { 0x1E8BE, 0x0021 };

    // 1E8BE 0021;	
    // (‎‎𞢾‎‎) MENDE KIKAKUI SYLLABLE M144 VOO	[3CE3 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BE 0021;	
    // (‎‎𞢾‎‎) MENDE KIKAKUI SYLLABLE M144 VOO	[3CE3 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CE3, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_353)
{
    uint32_t const cps[2] = { 0x1E8BE, 0x003F };

    // 1E8BE 003F;	
    // (‎‎𞢾‎‎) MENDE KIKAKUI SYLLABLE M144 VOO	[3CE3 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BE 003F;	
    // (‎‎𞢾‎‎) MENDE KIKAKUI SYLLABLE M144 VOO	[3CE3 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CE3, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_354)
{
    uint32_t const cps[2] = { 0x1E8BE, 0x0061 };

    // 1E8BE 0061;	
    // (‎‎𞢾‎‎) MENDE KIKAKUI SYLLABLE M144 VOO	[3CE3 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BE 0061;	
    // (‎‎𞢾‎‎) MENDE KIKAKUI SYLLABLE M144 VOO	[3CE3 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_355)
{
    uint32_t const cps[2] = { 0x1E8BE, 0x0041 };

    // 1E8BE 0041;	
    // (‎‎𞢾‎‎) MENDE KIKAKUI SYLLABLE M144 VOO	[3CE3 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BE 0041;	
    // (‎‎𞢾‎‎) MENDE KIKAKUI SYLLABLE M144 VOO	[3CE3 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_356)
{
    uint32_t const cps[2] = { 0x1E8BE, 0x0062 };

    // 1E8BE 0062;	
    // (‎‎𞢾‎‎) MENDE KIKAKUI SYLLABLE M144 VOO	[3CE3 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BE 0062;	
    // (‎‎𞢾‎‎) MENDE KIKAKUI SYLLABLE M144 VOO	[3CE3 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_357)
{
    uint32_t const cps[2] = { 0x1E8BF, 0x0021 };

    // 1E8BF 0021;	
    // (‎‎𞢿‎‎) MENDE KIKAKUI SYLLABLE M077 VO	[3CE4 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BF 0021;	
    // (‎‎𞢿‎‎) MENDE KIKAKUI SYLLABLE M077 VO	[3CE4 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CE4, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_358)
{
    uint32_t const cps[2] = { 0x1E8BF, 0x003F };

    // 1E8BF 003F;	
    // (‎‎𞢿‎‎) MENDE KIKAKUI SYLLABLE M077 VO	[3CE4 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BF 003F;	
    // (‎‎𞢿‎‎) MENDE KIKAKUI SYLLABLE M077 VO	[3CE4 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CE4, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_359)
{
    uint32_t const cps[2] = { 0x1E8BF, 0x0061 };

    // 1E8BF 0061;	
    // (‎‎𞢿‎‎) MENDE KIKAKUI SYLLABLE M077 VO	[3CE4 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BF 0061;	
    // (‎‎𞢿‎‎) MENDE KIKAKUI SYLLABLE M077 VO	[3CE4 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_360)
{
    uint32_t const cps[2] = { 0x1E8BF, 0x0041 };

    // 1E8BF 0041;	
    // (‎‎𞢿‎‎) MENDE KIKAKUI SYLLABLE M077 VO	[3CE4 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BF 0041;	
    // (‎‎𞢿‎‎) MENDE KIKAKUI SYLLABLE M077 VO	[3CE4 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_361)
{
    uint32_t const cps[2] = { 0x1E8BF, 0x0062 };

    // 1E8BF 0062;	
    // (‎‎𞢿‎‎) MENDE KIKAKUI SYLLABLE M077 VO	[3CE4 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8BF 0062;	
    // (‎‎𞢿‎‎) MENDE KIKAKUI SYLLABLE M077 VO	[3CE4 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_362)
{
    uint32_t const cps[2] = { 0x1E8C0, 0x0021 };

    // 1E8C0 0021;	
    // (‎‎𞣀‎‎) MENDE KIKAKUI SYLLABLE M164 NYIN	[3CE5 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C0 0021;	
    // (‎‎𞣀‎‎) MENDE KIKAKUI SYLLABLE M164 NYIN	[3CE5 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CE5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_363)
{
    uint32_t const cps[2] = { 0x1E8C0, 0x003F };

    // 1E8C0 003F;	
    // (‎‎𞣀‎‎) MENDE KIKAKUI SYLLABLE M164 NYIN	[3CE5 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C0 003F;	
    // (‎‎𞣀‎‎) MENDE KIKAKUI SYLLABLE M164 NYIN	[3CE5 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CE5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_364)
{
    uint32_t const cps[2] = { 0x1E8C0, 0x0061 };

    // 1E8C0 0061;	
    // (‎‎𞣀‎‎) MENDE KIKAKUI SYLLABLE M164 NYIN	[3CE5 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C0 0061;	
    // (‎‎𞣀‎‎) MENDE KIKAKUI SYLLABLE M164 NYIN	[3CE5 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_365)
{
    uint32_t const cps[2] = { 0x1E8C0, 0x0041 };

    // 1E8C0 0041;	
    // (‎‎𞣀‎‎) MENDE KIKAKUI SYLLABLE M164 NYIN	[3CE5 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C0 0041;	
    // (‎‎𞣀‎‎) MENDE KIKAKUI SYLLABLE M164 NYIN	[3CE5 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_366)
{
    uint32_t const cps[2] = { 0x1E8C0, 0x0062 };

    // 1E8C0 0062;	
    // (‎‎𞣀‎‎) MENDE KIKAKUI SYLLABLE M164 NYIN	[3CE5 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C0 0062;	
    // (‎‎𞣀‎‎) MENDE KIKAKUI SYLLABLE M164 NYIN	[3CE5 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_367)
{
    uint32_t const cps[2] = { 0x1E8C1, 0x0021 };

    // 1E8C1 0021;	
    // (‎‎𞣁‎‎) MENDE KIKAKUI SYLLABLE M058 NYAN	[3CE6 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C1 0021;	
    // (‎‎𞣁‎‎) MENDE KIKAKUI SYLLABLE M058 NYAN	[3CE6 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CE6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_368)
{
    uint32_t const cps[2] = { 0x1E8C1, 0x003F };

    // 1E8C1 003F;	
    // (‎‎𞣁‎‎) MENDE KIKAKUI SYLLABLE M058 NYAN	[3CE6 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C1 003F;	
    // (‎‎𞣁‎‎) MENDE KIKAKUI SYLLABLE M058 NYAN	[3CE6 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CE6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_369)
{
    uint32_t const cps[2] = { 0x1E8C1, 0x0061 };

    // 1E8C1 0061;	
    // (‎‎𞣁‎‎) MENDE KIKAKUI SYLLABLE M058 NYAN	[3CE6 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C1 0061;	
    // (‎‎𞣁‎‎) MENDE KIKAKUI SYLLABLE M058 NYAN	[3CE6 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_370)
{
    uint32_t const cps[2] = { 0x1E8C1, 0x0041 };

    // 1E8C1 0041;	
    // (‎‎𞣁‎‎) MENDE KIKAKUI SYLLABLE M058 NYAN	[3CE6 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C1 0041;	
    // (‎‎𞣁‎‎) MENDE KIKAKUI SYLLABLE M058 NYAN	[3CE6 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_371)
{
    uint32_t const cps[2] = { 0x1E8C1, 0x0062 };

    // 1E8C1 0062;	
    // (‎‎𞣁‎‎) MENDE KIKAKUI SYLLABLE M058 NYAN	[3CE6 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C1 0062;	
    // (‎‎𞣁‎‎) MENDE KIKAKUI SYLLABLE M058 NYAN	[3CE6 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_372)
{
    uint32_t const cps[2] = { 0x1E8C2, 0x0021 };

    // 1E8C2 0021;	
    // (‎‎𞣂‎‎) MENDE KIKAKUI SYLLABLE M170 NYUN	[3CE7 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C2 0021;	
    // (‎‎𞣂‎‎) MENDE KIKAKUI SYLLABLE M170 NYUN	[3CE7 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CE7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_373)
{
    uint32_t const cps[2] = { 0x1E8C2, 0x003F };

    // 1E8C2 003F;	
    // (‎‎𞣂‎‎) MENDE KIKAKUI SYLLABLE M170 NYUN	[3CE7 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C2 003F;	
    // (‎‎𞣂‎‎) MENDE KIKAKUI SYLLABLE M170 NYUN	[3CE7 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CE7, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_374)
{
    uint32_t const cps[2] = { 0x1E8C2, 0x0061 };

    // 1E8C2 0061;	
    // (‎‎𞣂‎‎) MENDE KIKAKUI SYLLABLE M170 NYUN	[3CE7 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C2 0061;	
    // (‎‎𞣂‎‎) MENDE KIKAKUI SYLLABLE M170 NYUN	[3CE7 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_375)
{
    uint32_t const cps[2] = { 0x1E8C2, 0x0041 };

    // 1E8C2 0041;	
    // (‎‎𞣂‎‎) MENDE KIKAKUI SYLLABLE M170 NYUN	[3CE7 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C2 0041;	
    // (‎‎𞣂‎‎) MENDE KIKAKUI SYLLABLE M170 NYUN	[3CE7 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_376)
{
    uint32_t const cps[2] = { 0x1E8C2, 0x0062 };

    // 1E8C2 0062;	
    // (‎‎𞣂‎‎) MENDE KIKAKUI SYLLABLE M170 NYUN	[3CE7 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C2 0062;	
    // (‎‎𞣂‎‎) MENDE KIKAKUI SYLLABLE M170 NYUN	[3CE7 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_377)
{
    uint32_t const cps[2] = { 0x1E8C3, 0x0021 };

    // 1E8C3 0021;	
    // (‎‎𞣃‎‎) MENDE KIKAKUI SYLLABLE M098 NYEN	[3CE8 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C3 0021;	
    // (‎‎𞣃‎‎) MENDE KIKAKUI SYLLABLE M098 NYEN	[3CE8 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CE8, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_378)
{
    uint32_t const cps[2] = { 0x1E8C3, 0x003F };

    // 1E8C3 003F;	
    // (‎‎𞣃‎‎) MENDE KIKAKUI SYLLABLE M098 NYEN	[3CE8 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C3 003F;	
    // (‎‎𞣃‎‎) MENDE KIKAKUI SYLLABLE M098 NYEN	[3CE8 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CE8, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_379)
{
    uint32_t const cps[2] = { 0x1E8C3, 0x0061 };

    // 1E8C3 0061;	
    // (‎‎𞣃‎‎) MENDE KIKAKUI SYLLABLE M098 NYEN	[3CE8 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C3 0061;	
    // (‎‎𞣃‎‎) MENDE KIKAKUI SYLLABLE M098 NYEN	[3CE8 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_380)
{
    uint32_t const cps[2] = { 0x1E8C3, 0x0041 };

    // 1E8C3 0041;	
    // (‎‎𞣃‎‎) MENDE KIKAKUI SYLLABLE M098 NYEN	[3CE8 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C3 0041;	
    // (‎‎𞣃‎‎) MENDE KIKAKUI SYLLABLE M098 NYEN	[3CE8 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_381)
{
    uint32_t const cps[2] = { 0x1E8C3, 0x0062 };

    // 1E8C3 0062;	
    // (‎‎𞣃‎‎) MENDE KIKAKUI SYLLABLE M098 NYEN	[3CE8 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C3 0062;	
    // (‎‎𞣃‎‎) MENDE KIKAKUI SYLLABLE M098 NYEN	[3CE8 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_382)
{
    uint32_t const cps[2] = { 0x1E8C4, 0x0021 };

    // 1E8C4 0021;	
    // (‎‎𞣄‎‎) MENDE KIKAKUI SYLLABLE M060 NYON	[3CE9 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C4 0021;	
    // (‎‎𞣄‎‎) MENDE KIKAKUI SYLLABLE M060 NYON	[3CE9 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CE9, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_383)
{
    uint32_t const cps[2] = { 0x1E8C4, 0x003F };

    // 1E8C4 003F;	
    // (‎‎𞣄‎‎) MENDE KIKAKUI SYLLABLE M060 NYON	[3CE9 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C4 003F;	
    // (‎‎𞣄‎‎) MENDE KIKAKUI SYLLABLE M060 NYON	[3CE9 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CE9, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_384)
{
    uint32_t const cps[2] = { 0x1E8C4, 0x0061 };

    // 1E8C4 0061;	
    // (‎‎𞣄‎‎) MENDE KIKAKUI SYLLABLE M060 NYON	[3CE9 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C4 0061;	
    // (‎‎𞣄‎‎) MENDE KIKAKUI SYLLABLE M060 NYON	[3CE9 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_385)
{
    uint32_t const cps[2] = { 0x1E8C4, 0x0041 };

    // 1E8C4 0041;	
    // (‎‎𞣄‎‎) MENDE KIKAKUI SYLLABLE M060 NYON	[3CE9 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C4 0041;	
    // (‎‎𞣄‎‎) MENDE KIKAKUI SYLLABLE M060 NYON	[3CE9 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_386)
{
    uint32_t const cps[2] = { 0x1E8C4, 0x0062 };

    // 1E8C4 0062;	
    // (‎‎𞣄‎‎) MENDE KIKAKUI SYLLABLE M060 NYON	[3CE9 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8C4 0062;	
    // (‎‎𞣄‎‎) MENDE KIKAKUI SYLLABLE M060 NYON	[3CE9 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_387)
{
    uint32_t const cps[2] = { 0x1E922, 0x0021 };

    // 1E922 0021;	
    // (‎‎𞤢‎‎) ADLAM SMALL LETTER ALIF	[3CEA 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E922 0021;	
    // (‎‎𞤢‎‎) ADLAM SMALL LETTER ALIF	[3CEA | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CEA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_388)
{
    uint32_t const cps[2] = { 0x1E900, 0x0021 };

    // 1E900 0021;	
    // (‎‎𞤀‎‎) ADLAM CAPITAL LETTER ALIF	[3CEA 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E900 0021;	
    // (‎‎𞤀‎‎) ADLAM CAPITAL LETTER ALIF	[3CEA | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CEA, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_389)
{
    uint32_t const cps[2] = { 0x1E922, 0x003F };

    // 1E922 003F;	
    // (‎‎𞤢‎‎) ADLAM SMALL LETTER ALIF	[3CEA 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E922 003F;	
    // (‎‎𞤢‎‎) ADLAM SMALL LETTER ALIF	[3CEA | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CEA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_390)
{
    uint32_t const cps[2] = { 0x1E900, 0x003F };

    // 1E900 003F;	
    // (‎‎𞤀‎‎) ADLAM CAPITAL LETTER ALIF	[3CEA 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E900 003F;	
    // (‎‎𞤀‎‎) ADLAM CAPITAL LETTER ALIF	[3CEA | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CEA, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_391)
{
    uint32_t const cps[2] = { 0x1E922, 0x0061 };

    // 1E922 0061;	
    // (‎‎𞤢‎‎) ADLAM SMALL LETTER ALIF	[3CEA 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E922 0061;	
    // (‎‎𞤢‎‎) ADLAM SMALL LETTER ALIF	[3CEA 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_392)
{
    uint32_t const cps[2] = { 0x1E922, 0x0041 };

    // 1E922 0041;	
    // (‎‎𞤢‎‎) ADLAM SMALL LETTER ALIF	[3CEA 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E922 0041;	
    // (‎‎𞤢‎‎) ADLAM SMALL LETTER ALIF	[3CEA 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_393)
{
    uint32_t const cps[2] = { 0x1E900, 0x0061 };

    // 1E900 0061;	
    // (‎‎𞤀‎‎) ADLAM CAPITAL LETTER ALIF	[3CEA 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E900 0061;	
    // (‎‎𞤀‎‎) ADLAM CAPITAL LETTER ALIF	[3CEA 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_394)
{
    uint32_t const cps[2] = { 0x1E900, 0x0041 };

    // 1E900 0041;	
    // (‎‎𞤀‎‎) ADLAM CAPITAL LETTER ALIF	[3CEA 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E900 0041;	
    // (‎‎𞤀‎‎) ADLAM CAPITAL LETTER ALIF	[3CEA 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_395)
{
    uint32_t const cps[2] = { 0x1E922, 0x0062 };

    // 1E922 0062;	
    // (‎‎𞤢‎‎) ADLAM SMALL LETTER ALIF	[3CEA 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E922 0062;	
    // (‎‎𞤢‎‎) ADLAM SMALL LETTER ALIF	[3CEA 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_396)
{
    uint32_t const cps[2] = { 0x1E900, 0x0062 };

    // 1E900 0062;	
    // (‎‎𞤀‎‎) ADLAM CAPITAL LETTER ALIF	[3CEA 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E900 0062;	
    // (‎‎𞤀‎‎) ADLAM CAPITAL LETTER ALIF	[3CEA 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_397)
{
    uint32_t const cps[2] = { 0x1E923, 0x0021 };

    // 1E923 0021;	
    // (‎‎𞤣‎‎) ADLAM SMALL LETTER DAALI	[3CEB 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E923 0021;	
    // (‎‎𞤣‎‎) ADLAM SMALL LETTER DAALI	[3CEB | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CEB, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_398)
{
    uint32_t const cps[2] = { 0x1E901, 0x0021 };

    // 1E901 0021;	
    // (‎‎𞤁‎‎) ADLAM CAPITAL LETTER DAALI	[3CEB 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E901 0021;	
    // (‎‎𞤁‎‎) ADLAM CAPITAL LETTER DAALI	[3CEB | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CEB, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_399)
{
    uint32_t const cps[2] = { 0x1E923, 0x003F };

    // 1E923 003F;	
    // (‎‎𞤣‎‎) ADLAM SMALL LETTER DAALI	[3CEB 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E923 003F;	
    // (‎‎𞤣‎‎) ADLAM SMALL LETTER DAALI	[3CEB | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CEB, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_400)
{
    uint32_t const cps[2] = { 0x1E901, 0x003F };

    // 1E901 003F;	
    // (‎‎𞤁‎‎) ADLAM CAPITAL LETTER DAALI	[3CEB 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E901 003F;	
    // (‎‎𞤁‎‎) ADLAM CAPITAL LETTER DAALI	[3CEB | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CEB, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_401)
{
    uint32_t const cps[2] = { 0x1E923, 0x0061 };

    // 1E923 0061;	
    // (‎‎𞤣‎‎) ADLAM SMALL LETTER DAALI	[3CEB 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E923 0061;	
    // (‎‎𞤣‎‎) ADLAM SMALL LETTER DAALI	[3CEB 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_402)
{
    uint32_t const cps[2] = { 0x1E923, 0x0041 };

    // 1E923 0041;	
    // (‎‎𞤣‎‎) ADLAM SMALL LETTER DAALI	[3CEB 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E923 0041;	
    // (‎‎𞤣‎‎) ADLAM SMALL LETTER DAALI	[3CEB 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_403)
{
    uint32_t const cps[2] = { 0x1E901, 0x0061 };

    // 1E901 0061;	
    // (‎‎𞤁‎‎) ADLAM CAPITAL LETTER DAALI	[3CEB 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E901 0061;	
    // (‎‎𞤁‎‎) ADLAM CAPITAL LETTER DAALI	[3CEB 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_404)
{
    uint32_t const cps[2] = { 0x1E901, 0x0041 };

    // 1E901 0041;	
    // (‎‎𞤁‎‎) ADLAM CAPITAL LETTER DAALI	[3CEB 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E901 0041;	
    // (‎‎𞤁‎‎) ADLAM CAPITAL LETTER DAALI	[3CEB 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_405)
{
    uint32_t const cps[2] = { 0x1E923, 0x0062 };

    // 1E923 0062;	
    // (‎‎𞤣‎‎) ADLAM SMALL LETTER DAALI	[3CEB 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E923 0062;	
    // (‎‎𞤣‎‎) ADLAM SMALL LETTER DAALI	[3CEB 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_406)
{
    uint32_t const cps[2] = { 0x1E901, 0x0062 };

    // 1E901 0062;	
    // (‎‎𞤁‎‎) ADLAM CAPITAL LETTER DAALI	[3CEB 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E901 0062;	
    // (‎‎𞤁‎‎) ADLAM CAPITAL LETTER DAALI	[3CEB 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_407)
{
    uint32_t const cps[2] = { 0x1E924, 0x0021 };

    // 1E924 0021;	
    // (‎‎𞤤‎‎) ADLAM SMALL LETTER LAAM	[3CEC 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E924 0021;	
    // (‎‎𞤤‎‎) ADLAM SMALL LETTER LAAM	[3CEC | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CEC, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_408)
{
    uint32_t const cps[2] = { 0x1E902, 0x0021 };

    // 1E902 0021;	
    // (‎‎𞤂‎‎) ADLAM CAPITAL LETTER LAAM	[3CEC 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E902 0021;	
    // (‎‎𞤂‎‎) ADLAM CAPITAL LETTER LAAM	[3CEC | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CEC, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_409)
{
    uint32_t const cps[2] = { 0x1E924, 0x003F };

    // 1E924 003F;	
    // (‎‎𞤤‎‎) ADLAM SMALL LETTER LAAM	[3CEC 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E924 003F;	
    // (‎‎𞤤‎‎) ADLAM SMALL LETTER LAAM	[3CEC | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CEC, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_410)
{
    uint32_t const cps[2] = { 0x1E902, 0x003F };

    // 1E902 003F;	
    // (‎‎𞤂‎‎) ADLAM CAPITAL LETTER LAAM	[3CEC 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E902 003F;	
    // (‎‎𞤂‎‎) ADLAM CAPITAL LETTER LAAM	[3CEC | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CEC, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_411)
{
    uint32_t const cps[2] = { 0x1E924, 0x0061 };

    // 1E924 0061;	
    // (‎‎𞤤‎‎) ADLAM SMALL LETTER LAAM	[3CEC 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E924 0061;	
    // (‎‎𞤤‎‎) ADLAM SMALL LETTER LAAM	[3CEC 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_412)
{
    uint32_t const cps[2] = { 0x1E924, 0x0041 };

    // 1E924 0041;	
    // (‎‎𞤤‎‎) ADLAM SMALL LETTER LAAM	[3CEC 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E924 0041;	
    // (‎‎𞤤‎‎) ADLAM SMALL LETTER LAAM	[3CEC 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_413)
{
    uint32_t const cps[2] = { 0x1E902, 0x0061 };

    // 1E902 0061;	
    // (‎‎𞤂‎‎) ADLAM CAPITAL LETTER LAAM	[3CEC 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E902 0061;	
    // (‎‎𞤂‎‎) ADLAM CAPITAL LETTER LAAM	[3CEC 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_414)
{
    uint32_t const cps[2] = { 0x1E902, 0x0041 };

    // 1E902 0041;	
    // (‎‎𞤂‎‎) ADLAM CAPITAL LETTER LAAM	[3CEC 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E902 0041;	
    // (‎‎𞤂‎‎) ADLAM CAPITAL LETTER LAAM	[3CEC 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_415)
{
    uint32_t const cps[2] = { 0x1E924, 0x0062 };

    // 1E924 0062;	
    // (‎‎𞤤‎‎) ADLAM SMALL LETTER LAAM	[3CEC 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E924 0062;	
    // (‎‎𞤤‎‎) ADLAM SMALL LETTER LAAM	[3CEC 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_416)
{
    uint32_t const cps[2] = { 0x1E902, 0x0062 };

    // 1E902 0062;	
    // (‎‎𞤂‎‎) ADLAM CAPITAL LETTER LAAM	[3CEC 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E902 0062;	
    // (‎‎𞤂‎‎) ADLAM CAPITAL LETTER LAAM	[3CEC 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_417)
{
    uint32_t const cps[2] = { 0x1E925, 0x0021 };

    // 1E925 0021;	
    // (‎‎𞤥‎‎) ADLAM SMALL LETTER MIIM	[3CED 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E925 0021;	
    // (‎‎𞤥‎‎) ADLAM SMALL LETTER MIIM	[3CED | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CED, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_418)
{
    uint32_t const cps[2] = { 0x1E903, 0x0021 };

    // 1E903 0021;	
    // (‎‎𞤃‎‎) ADLAM CAPITAL LETTER MIIM	[3CED 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E903 0021;	
    // (‎‎𞤃‎‎) ADLAM CAPITAL LETTER MIIM	[3CED | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CED, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_419)
{
    uint32_t const cps[2] = { 0x1E925, 0x003F };

    // 1E925 003F;	
    // (‎‎𞤥‎‎) ADLAM SMALL LETTER MIIM	[3CED 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E925 003F;	
    // (‎‎𞤥‎‎) ADLAM SMALL LETTER MIIM	[3CED | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CED, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_420)
{
    uint32_t const cps[2] = { 0x1E903, 0x003F };

    // 1E903 003F;	
    // (‎‎𞤃‎‎) ADLAM CAPITAL LETTER MIIM	[3CED 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E903 003F;	
    // (‎‎𞤃‎‎) ADLAM CAPITAL LETTER MIIM	[3CED | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CED, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_421)
{
    uint32_t const cps[2] = { 0x1E925, 0x0061 };

    // 1E925 0061;	
    // (‎‎𞤥‎‎) ADLAM SMALL LETTER MIIM	[3CED 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E925 0061;	
    // (‎‎𞤥‎‎) ADLAM SMALL LETTER MIIM	[3CED 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_422)
{
    uint32_t const cps[2] = { 0x1E925, 0x0041 };

    // 1E925 0041;	
    // (‎‎𞤥‎‎) ADLAM SMALL LETTER MIIM	[3CED 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E925 0041;	
    // (‎‎𞤥‎‎) ADLAM SMALL LETTER MIIM	[3CED 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_423)
{
    uint32_t const cps[2] = { 0x1E903, 0x0061 };

    // 1E903 0061;	
    // (‎‎𞤃‎‎) ADLAM CAPITAL LETTER MIIM	[3CED 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E903 0061;	
    // (‎‎𞤃‎‎) ADLAM CAPITAL LETTER MIIM	[3CED 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_424)
{
    uint32_t const cps[2] = { 0x1E903, 0x0041 };

    // 1E903 0041;	
    // (‎‎𞤃‎‎) ADLAM CAPITAL LETTER MIIM	[3CED 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E903 0041;	
    // (‎‎𞤃‎‎) ADLAM CAPITAL LETTER MIIM	[3CED 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_425)
{
    uint32_t const cps[2] = { 0x1E925, 0x0062 };

    // 1E925 0062;	
    // (‎‎𞤥‎‎) ADLAM SMALL LETTER MIIM	[3CED 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E925 0062;	
    // (‎‎𞤥‎‎) ADLAM SMALL LETTER MIIM	[3CED 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_426)
{
    uint32_t const cps[2] = { 0x1E903, 0x0062 };

    // 1E903 0062;	
    // (‎‎𞤃‎‎) ADLAM CAPITAL LETTER MIIM	[3CED 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E903 0062;	
    // (‎‎𞤃‎‎) ADLAM CAPITAL LETTER MIIM	[3CED 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_427)
{
    uint32_t const cps[2] = { 0x1E926, 0x0021 };

    // 1E926 0021;	
    // (‎‎𞤦‎‎) ADLAM SMALL LETTER BA	[3CEE 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E926 0021;	
    // (‎‎𞤦‎‎) ADLAM SMALL LETTER BA	[3CEE | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CEE, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_428)
{
    uint32_t const cps[2] = { 0x1E904, 0x0021 };

    // 1E904 0021;	
    // (‎‎𞤄‎‎) ADLAM CAPITAL LETTER BA	[3CEE 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E904 0021;	
    // (‎‎𞤄‎‎) ADLAM CAPITAL LETTER BA	[3CEE | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CEE, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_429)
{
    uint32_t const cps[2] = { 0x1E926, 0x003F };

    // 1E926 003F;	
    // (‎‎𞤦‎‎) ADLAM SMALL LETTER BA	[3CEE 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E926 003F;	
    // (‎‎𞤦‎‎) ADLAM SMALL LETTER BA	[3CEE | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CEE, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_430)
{
    uint32_t const cps[2] = { 0x1E904, 0x003F };

    // 1E904 003F;	
    // (‎‎𞤄‎‎) ADLAM CAPITAL LETTER BA	[3CEE 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E904 003F;	
    // (‎‎𞤄‎‎) ADLAM CAPITAL LETTER BA	[3CEE | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CEE, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_431)
{
    uint32_t const cps[2] = { 0x1E926, 0x0061 };

    // 1E926 0061;	
    // (‎‎𞤦‎‎) ADLAM SMALL LETTER BA	[3CEE 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E926 0061;	
    // (‎‎𞤦‎‎) ADLAM SMALL LETTER BA	[3CEE 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_432)
{
    uint32_t const cps[2] = { 0x1E926, 0x0041 };

    // 1E926 0041;	
    // (‎‎𞤦‎‎) ADLAM SMALL LETTER BA	[3CEE 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E926 0041;	
    // (‎‎𞤦‎‎) ADLAM SMALL LETTER BA	[3CEE 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_433)
{
    uint32_t const cps[2] = { 0x1E904, 0x0061 };

    // 1E904 0061;	
    // (‎‎𞤄‎‎) ADLAM CAPITAL LETTER BA	[3CEE 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E904 0061;	
    // (‎‎𞤄‎‎) ADLAM CAPITAL LETTER BA	[3CEE 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_434)
{
    uint32_t const cps[2] = { 0x1E904, 0x0041 };

    // 1E904 0041;	
    // (‎‎𞤄‎‎) ADLAM CAPITAL LETTER BA	[3CEE 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E904 0041;	
    // (‎‎𞤄‎‎) ADLAM CAPITAL LETTER BA	[3CEE 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_435)
{
    uint32_t const cps[2] = { 0x1E926, 0x0062 };

    // 1E926 0062;	
    // (‎‎𞤦‎‎) ADLAM SMALL LETTER BA	[3CEE 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E926 0062;	
    // (‎‎𞤦‎‎) ADLAM SMALL LETTER BA	[3CEE 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_436)
{
    uint32_t const cps[2] = { 0x1E904, 0x0062 };

    // 1E904 0062;	
    // (‎‎𞤄‎‎) ADLAM CAPITAL LETTER BA	[3CEE 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E904 0062;	
    // (‎‎𞤄‎‎) ADLAM CAPITAL LETTER BA	[3CEE 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_437)
{
    uint32_t const cps[2] = { 0x1E927, 0x0021 };

    // 1E927 0021;	
    // (‎‎𞤧‎‎) ADLAM SMALL LETTER SINNYIIYHE	[3CEF 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E927 0021;	
    // (‎‎𞤧‎‎) ADLAM SMALL LETTER SINNYIIYHE	[3CEF | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CEF, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_438)
{
    uint32_t const cps[2] = { 0x1E905, 0x0021 };

    // 1E905 0021;	
    // (‎‎𞤅‎‎) ADLAM CAPITAL LETTER SINNYIIYHE	[3CEF 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E905 0021;	
    // (‎‎𞤅‎‎) ADLAM CAPITAL LETTER SINNYIIYHE	[3CEF | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CEF, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_439)
{
    uint32_t const cps[2] = { 0x1E927, 0x003F };

    // 1E927 003F;	
    // (‎‎𞤧‎‎) ADLAM SMALL LETTER SINNYIIYHE	[3CEF 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E927 003F;	
    // (‎‎𞤧‎‎) ADLAM SMALL LETTER SINNYIIYHE	[3CEF | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CEF, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_440)
{
    uint32_t const cps[2] = { 0x1E905, 0x003F };

    // 1E905 003F;	
    // (‎‎𞤅‎‎) ADLAM CAPITAL LETTER SINNYIIYHE	[3CEF 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E905 003F;	
    // (‎‎𞤅‎‎) ADLAM CAPITAL LETTER SINNYIIYHE	[3CEF | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CEF, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_441)
{
    uint32_t const cps[2] = { 0x1E927, 0x0061 };

    // 1E927 0061;	
    // (‎‎𞤧‎‎) ADLAM SMALL LETTER SINNYIIYHE	[3CEF 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E927 0061;	
    // (‎‎𞤧‎‎) ADLAM SMALL LETTER SINNYIIYHE	[3CEF 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_442)
{
    uint32_t const cps[2] = { 0x1E927, 0x0041 };

    // 1E927 0041;	
    // (‎‎𞤧‎‎) ADLAM SMALL LETTER SINNYIIYHE	[3CEF 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E927 0041;	
    // (‎‎𞤧‎‎) ADLAM SMALL LETTER SINNYIIYHE	[3CEF 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_443)
{
    uint32_t const cps[2] = { 0x1E905, 0x0061 };

    // 1E905 0061;	
    // (‎‎𞤅‎‎) ADLAM CAPITAL LETTER SINNYIIYHE	[3CEF 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E905 0061;	
    // (‎‎𞤅‎‎) ADLAM CAPITAL LETTER SINNYIIYHE	[3CEF 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_444)
{
    uint32_t const cps[2] = { 0x1E905, 0x0041 };

    // 1E905 0041;	
    // (‎‎𞤅‎‎) ADLAM CAPITAL LETTER SINNYIIYHE	[3CEF 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E905 0041;	
    // (‎‎𞤅‎‎) ADLAM CAPITAL LETTER SINNYIIYHE	[3CEF 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_445)
{
    uint32_t const cps[2] = { 0x1E927, 0x0062 };

    // 1E927 0062;	
    // (‎‎𞤧‎‎) ADLAM SMALL LETTER SINNYIIYHE	[3CEF 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E927 0062;	
    // (‎‎𞤧‎‎) ADLAM SMALL LETTER SINNYIIYHE	[3CEF 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_446)
{
    uint32_t const cps[2] = { 0x1E905, 0x0062 };

    // 1E905 0062;	
    // (‎‎𞤅‎‎) ADLAM CAPITAL LETTER SINNYIIYHE	[3CEF 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E905 0062;	
    // (‎‎𞤅‎‎) ADLAM CAPITAL LETTER SINNYIIYHE	[3CEF 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_447)
{
    uint32_t const cps[2] = { 0x1E928, 0x0021 };

    // 1E928 0021;	
    // (‎‎𞤨‎‎) ADLAM SMALL LETTER PE	[3CF0 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E928 0021;	
    // (‎‎𞤨‎‎) ADLAM SMALL LETTER PE	[3CF0 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CF0, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_448)
{
    uint32_t const cps[2] = { 0x1E906, 0x0021 };

    // 1E906 0021;	
    // (‎‎𞤆‎‎) ADLAM CAPITAL LETTER PE	[3CF0 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E906 0021;	
    // (‎‎𞤆‎‎) ADLAM CAPITAL LETTER PE	[3CF0 | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CF0, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_449)
{
    uint32_t const cps[2] = { 0x1E928, 0x003F };

    // 1E928 003F;	
    // (‎‎𞤨‎‎) ADLAM SMALL LETTER PE	[3CF0 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E928 003F;	
    // (‎‎𞤨‎‎) ADLAM SMALL LETTER PE	[3CF0 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CF0, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_450)
{
    uint32_t const cps[2] = { 0x1E906, 0x003F };

    // 1E906 003F;	
    // (‎‎𞤆‎‎) ADLAM CAPITAL LETTER PE	[3CF0 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E906 003F;	
    // (‎‎𞤆‎‎) ADLAM CAPITAL LETTER PE	[3CF0 | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CF0, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_451)
{
    uint32_t const cps[2] = { 0x1E928, 0x0061 };

    // 1E928 0061;	
    // (‎‎𞤨‎‎) ADLAM SMALL LETTER PE	[3CF0 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E928 0061;	
    // (‎‎𞤨‎‎) ADLAM SMALL LETTER PE	[3CF0 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_452)
{
    uint32_t const cps[2] = { 0x1E928, 0x0041 };

    // 1E928 0041;	
    // (‎‎𞤨‎‎) ADLAM SMALL LETTER PE	[3CF0 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E928 0041;	
    // (‎‎𞤨‎‎) ADLAM SMALL LETTER PE	[3CF0 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_453)
{
    uint32_t const cps[2] = { 0x1E906, 0x0061 };

    // 1E906 0061;	
    // (‎‎𞤆‎‎) ADLAM CAPITAL LETTER PE	[3CF0 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E906 0061;	
    // (‎‎𞤆‎‎) ADLAM CAPITAL LETTER PE	[3CF0 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_454)
{
    uint32_t const cps[2] = { 0x1E906, 0x0041 };

    // 1E906 0041;	
    // (‎‎𞤆‎‎) ADLAM CAPITAL LETTER PE	[3CF0 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E906 0041;	
    // (‎‎𞤆‎‎) ADLAM CAPITAL LETTER PE	[3CF0 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_455)
{
    uint32_t const cps[2] = { 0x1E928, 0x0062 };

    // 1E928 0062;	
    // (‎‎𞤨‎‎) ADLAM SMALL LETTER PE	[3CF0 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E928 0062;	
    // (‎‎𞤨‎‎) ADLAM SMALL LETTER PE	[3CF0 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_456)
{
    uint32_t const cps[2] = { 0x1E906, 0x0062 };

    // 1E906 0062;	
    // (‎‎𞤆‎‎) ADLAM CAPITAL LETTER PE	[3CF0 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E906 0062;	
    // (‎‎𞤆‎‎) ADLAM CAPITAL LETTER PE	[3CF0 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_457)
{
    uint32_t const cps[2] = { 0x1E929, 0x0021 };

    // 1E929 0021;	
    // (‎‎𞤩‎‎) ADLAM SMALL LETTER BHE	[3CF1 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E929 0021;	
    // (‎‎𞤩‎‎) ADLAM SMALL LETTER BHE	[3CF1 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CF1, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_458)
{
    uint32_t const cps[2] = { 0x1E907, 0x0021 };

    // 1E907 0021;	
    // (‎‎𞤇‎‎) ADLAM CAPITAL LETTER BHE	[3CF1 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E907 0021;	
    // (‎‎𞤇‎‎) ADLAM CAPITAL LETTER BHE	[3CF1 | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CF1, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_459)
{
    uint32_t const cps[2] = { 0x1E929, 0x003F };

    // 1E929 003F;	
    // (‎‎𞤩‎‎) ADLAM SMALL LETTER BHE	[3CF1 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E929 003F;	
    // (‎‎𞤩‎‎) ADLAM SMALL LETTER BHE	[3CF1 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CF1, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_460)
{
    uint32_t const cps[2] = { 0x1E907, 0x003F };

    // 1E907 003F;	
    // (‎‎𞤇‎‎) ADLAM CAPITAL LETTER BHE	[3CF1 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E907 003F;	
    // (‎‎𞤇‎‎) ADLAM CAPITAL LETTER BHE	[3CF1 | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CF1, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_461)
{
    uint32_t const cps[2] = { 0x1E929, 0x0061 };

    // 1E929 0061;	
    // (‎‎𞤩‎‎) ADLAM SMALL LETTER BHE	[3CF1 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E929 0061;	
    // (‎‎𞤩‎‎) ADLAM SMALL LETTER BHE	[3CF1 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_462)
{
    uint32_t const cps[2] = { 0x1E929, 0x0041 };

    // 1E929 0041;	
    // (‎‎𞤩‎‎) ADLAM SMALL LETTER BHE	[3CF1 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E929 0041;	
    // (‎‎𞤩‎‎) ADLAM SMALL LETTER BHE	[3CF1 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_463)
{
    uint32_t const cps[2] = { 0x1E907, 0x0061 };

    // 1E907 0061;	
    // (‎‎𞤇‎‎) ADLAM CAPITAL LETTER BHE	[3CF1 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E907 0061;	
    // (‎‎𞤇‎‎) ADLAM CAPITAL LETTER BHE	[3CF1 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_464)
{
    uint32_t const cps[2] = { 0x1E907, 0x0041 };

    // 1E907 0041;	
    // (‎‎𞤇‎‎) ADLAM CAPITAL LETTER BHE	[3CF1 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E907 0041;	
    // (‎‎𞤇‎‎) ADLAM CAPITAL LETTER BHE	[3CF1 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_465)
{
    uint32_t const cps[2] = { 0x1E929, 0x0062 };

    // 1E929 0062;	
    // (‎‎𞤩‎‎) ADLAM SMALL LETTER BHE	[3CF1 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E929 0062;	
    // (‎‎𞤩‎‎) ADLAM SMALL LETTER BHE	[3CF1 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_466)
{
    uint32_t const cps[2] = { 0x1E907, 0x0062 };

    // 1E907 0062;	
    // (‎‎𞤇‎‎) ADLAM CAPITAL LETTER BHE	[3CF1 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E907 0062;	
    // (‎‎𞤇‎‎) ADLAM CAPITAL LETTER BHE	[3CF1 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_467)
{
    uint32_t const cps[2] = { 0x1E92A, 0x0021 };

    // 1E92A 0021;	
    // (‎‎𞤪‎‎) ADLAM SMALL LETTER RA	[3CF2 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E92A 0021;	
    // (‎‎𞤪‎‎) ADLAM SMALL LETTER RA	[3CF2 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CF2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_468)
{
    uint32_t const cps[2] = { 0x1E908, 0x0021 };

    // 1E908 0021;	
    // (‎‎𞤈‎‎) ADLAM CAPITAL LETTER RA	[3CF2 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E908 0021;	
    // (‎‎𞤈‎‎) ADLAM CAPITAL LETTER RA	[3CF2 | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CF2, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_469)
{
    uint32_t const cps[2] = { 0x1E92A, 0x003F };

    // 1E92A 003F;	
    // (‎‎𞤪‎‎) ADLAM SMALL LETTER RA	[3CF2 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E92A 003F;	
    // (‎‎𞤪‎‎) ADLAM SMALL LETTER RA	[3CF2 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CF2, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_470)
{
    uint32_t const cps[2] = { 0x1E908, 0x003F };

    // 1E908 003F;	
    // (‎‎𞤈‎‎) ADLAM CAPITAL LETTER RA	[3CF2 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E908 003F;	
    // (‎‎𞤈‎‎) ADLAM CAPITAL LETTER RA	[3CF2 | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CF2, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_471)
{
    uint32_t const cps[2] = { 0x1E92A, 0x0061 };

    // 1E92A 0061;	
    // (‎‎𞤪‎‎) ADLAM SMALL LETTER RA	[3CF2 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E92A 0061;	
    // (‎‎𞤪‎‎) ADLAM SMALL LETTER RA	[3CF2 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_472)
{
    uint32_t const cps[2] = { 0x1E92A, 0x0041 };

    // 1E92A 0041;	
    // (‎‎𞤪‎‎) ADLAM SMALL LETTER RA	[3CF2 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E92A 0041;	
    // (‎‎𞤪‎‎) ADLAM SMALL LETTER RA	[3CF2 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_473)
{
    uint32_t const cps[2] = { 0x1E908, 0x0061 };

    // 1E908 0061;	
    // (‎‎𞤈‎‎) ADLAM CAPITAL LETTER RA	[3CF2 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E908 0061;	
    // (‎‎𞤈‎‎) ADLAM CAPITAL LETTER RA	[3CF2 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_474)
{
    uint32_t const cps[2] = { 0x1E908, 0x0041 };

    // 1E908 0041;	
    // (‎‎𞤈‎‎) ADLAM CAPITAL LETTER RA	[3CF2 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E908 0041;	
    // (‎‎𞤈‎‎) ADLAM CAPITAL LETTER RA	[3CF2 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_475)
{
    uint32_t const cps[2] = { 0x1E92A, 0x0062 };

    // 1E92A 0062;	
    // (‎‎𞤪‎‎) ADLAM SMALL LETTER RA	[3CF2 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E92A 0062;	
    // (‎‎𞤪‎‎) ADLAM SMALL LETTER RA	[3CF2 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_476)
{
    uint32_t const cps[2] = { 0x1E908, 0x0062 };

    // 1E908 0062;	
    // (‎‎𞤈‎‎) ADLAM CAPITAL LETTER RA	[3CF2 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E908 0062;	
    // (‎‎𞤈‎‎) ADLAM CAPITAL LETTER RA	[3CF2 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_477)
{
    uint32_t const cps[2] = { 0x1E92B, 0x0021 };

    // 1E92B 0021;	
    // (‎‎𞤫‎‎) ADLAM SMALL LETTER E	[3CF3 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E92B 0021;	
    // (‎‎𞤫‎‎) ADLAM SMALL LETTER E	[3CF3 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CF3, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_478)
{
    uint32_t const cps[2] = { 0x1E909, 0x0021 };

    // 1E909 0021;	
    // (‎‎𞤉‎‎) ADLAM CAPITAL LETTER E	[3CF3 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E909 0021;	
    // (‎‎𞤉‎‎) ADLAM CAPITAL LETTER E	[3CF3 | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CF3, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_479)
{
    uint32_t const cps[2] = { 0x1E92B, 0x003F };

    // 1E92B 003F;	
    // (‎‎𞤫‎‎) ADLAM SMALL LETTER E	[3CF3 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E92B 003F;	
    // (‎‎𞤫‎‎) ADLAM SMALL LETTER E	[3CF3 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CF3, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_480)
{
    uint32_t const cps[2] = { 0x1E909, 0x003F };

    // 1E909 003F;	
    // (‎‎𞤉‎‎) ADLAM CAPITAL LETTER E	[3CF3 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E909 003F;	
    // (‎‎𞤉‎‎) ADLAM CAPITAL LETTER E	[3CF3 | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CF3, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_481)
{
    uint32_t const cps[2] = { 0x1E92B, 0x0061 };

    // 1E92B 0061;	
    // (‎‎𞤫‎‎) ADLAM SMALL LETTER E	[3CF3 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E92B 0061;	
    // (‎‎𞤫‎‎) ADLAM SMALL LETTER E	[3CF3 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_482)
{
    uint32_t const cps[2] = { 0x1E92B, 0x0041 };

    // 1E92B 0041;	
    // (‎‎𞤫‎‎) ADLAM SMALL LETTER E	[3CF3 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E92B 0041;	
    // (‎‎𞤫‎‎) ADLAM SMALL LETTER E	[3CF3 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_483)
{
    uint32_t const cps[2] = { 0x1E909, 0x0061 };

    // 1E909 0061;	
    // (‎‎𞤉‎‎) ADLAM CAPITAL LETTER E	[3CF3 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E909 0061;	
    // (‎‎𞤉‎‎) ADLAM CAPITAL LETTER E	[3CF3 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_484)
{
    uint32_t const cps[2] = { 0x1E909, 0x0041 };

    // 1E909 0041;	
    // (‎‎𞤉‎‎) ADLAM CAPITAL LETTER E	[3CF3 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E909 0041;	
    // (‎‎𞤉‎‎) ADLAM CAPITAL LETTER E	[3CF3 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_485)
{
    uint32_t const cps[2] = { 0x1E92B, 0x0062 };

    // 1E92B 0062;	
    // (‎‎𞤫‎‎) ADLAM SMALL LETTER E	[3CF3 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E92B 0062;	
    // (‎‎𞤫‎‎) ADLAM SMALL LETTER E	[3CF3 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_486)
{
    uint32_t const cps[2] = { 0x1E909, 0x0062 };

    // 1E909 0062;	
    // (‎‎𞤉‎‎) ADLAM CAPITAL LETTER E	[3CF3 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E909 0062;	
    // (‎‎𞤉‎‎) ADLAM CAPITAL LETTER E	[3CF3 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_487)
{
    uint32_t const cps[2] = { 0x1E92C, 0x0021 };

    // 1E92C 0021;	
    // (‎‎𞤬‎‎) ADLAM SMALL LETTER FA	[3CF4 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E92C 0021;	
    // (‎‎𞤬‎‎) ADLAM SMALL LETTER FA	[3CF4 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CF4, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_488)
{
    uint32_t const cps[2] = { 0x1E90A, 0x0021 };

    // 1E90A 0021;	
    // (‎‎𞤊‎‎) ADLAM CAPITAL LETTER FA	[3CF4 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E90A 0021;	
    // (‎‎𞤊‎‎) ADLAM CAPITAL LETTER FA	[3CF4 | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CF4, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_489)
{
    uint32_t const cps[2] = { 0x1E92C, 0x003F };

    // 1E92C 003F;	
    // (‎‎𞤬‎‎) ADLAM SMALL LETTER FA	[3CF4 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E92C 003F;	
    // (‎‎𞤬‎‎) ADLAM SMALL LETTER FA	[3CF4 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CF4, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_490)
{
    uint32_t const cps[2] = { 0x1E90A, 0x003F };

    // 1E90A 003F;	
    // (‎‎𞤊‎‎) ADLAM CAPITAL LETTER FA	[3CF4 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E90A 003F;	
    // (‎‎𞤊‎‎) ADLAM CAPITAL LETTER FA	[3CF4 | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CF4, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_491)
{
    uint32_t const cps[2] = { 0x1E92C, 0x0061 };

    // 1E92C 0061;	
    // (‎‎𞤬‎‎) ADLAM SMALL LETTER FA	[3CF4 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E92C 0061;	
    // (‎‎𞤬‎‎) ADLAM SMALL LETTER FA	[3CF4 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_492)
{
    uint32_t const cps[2] = { 0x1E92C, 0x0041 };

    // 1E92C 0041;	
    // (‎‎𞤬‎‎) ADLAM SMALL LETTER FA	[3CF4 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E92C 0041;	
    // (‎‎𞤬‎‎) ADLAM SMALL LETTER FA	[3CF4 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_493)
{
    uint32_t const cps[2] = { 0x1E90A, 0x0061 };

    // 1E90A 0061;	
    // (‎‎𞤊‎‎) ADLAM CAPITAL LETTER FA	[3CF4 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E90A 0061;	
    // (‎‎𞤊‎‎) ADLAM CAPITAL LETTER FA	[3CF4 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_494)
{
    uint32_t const cps[2] = { 0x1E90A, 0x0041 };

    // 1E90A 0041;	
    // (‎‎𞤊‎‎) ADLAM CAPITAL LETTER FA	[3CF4 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E90A 0041;	
    // (‎‎𞤊‎‎) ADLAM CAPITAL LETTER FA	[3CF4 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_495)
{
    uint32_t const cps[2] = { 0x1E92C, 0x0062 };

    // 1E92C 0062;	
    // (‎‎𞤬‎‎) ADLAM SMALL LETTER FA	[3CF4 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E92C 0062;	
    // (‎‎𞤬‎‎) ADLAM SMALL LETTER FA	[3CF4 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_496)
{
    uint32_t const cps[2] = { 0x1E90A, 0x0062 };

    // 1E90A 0062;	
    // (‎‎𞤊‎‎) ADLAM CAPITAL LETTER FA	[3CF4 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E90A 0062;	
    // (‎‎𞤊‎‎) ADLAM CAPITAL LETTER FA	[3CF4 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[12] = { 0x3CF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_497)
{
    uint32_t const cps[2] = { 0x1E92D, 0x0021 };

    // 1E92D 0021;	
    // (‎‎𞤭‎‎) ADLAM SMALL LETTER I	[3CF5 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E92D 0021;	
    // (‎‎𞤭‎‎) ADLAM SMALL LETTER I	[3CF5 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CF5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_498)
{
    uint32_t const cps[2] = { 0x1E90B, 0x0021 };

    // 1E90B 0021;	
    // (‎‎𞤋‎‎) ADLAM CAPITAL LETTER I	[3CF5 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E90B 0021;	
    // (‎‎𞤋‎‎) ADLAM CAPITAL LETTER I	[3CF5 | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[9] = { 0x3CF5, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_239_499)
{
    uint32_t const cps[2] = { 0x1E92D, 0x003F };

    // 1E92D 003F;	
    // (‎‎𞤭‎‎) ADLAM SMALL LETTER I	[3CF5 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x3CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E92D 003F;	
    // (‎‎𞤭‎‎) ADLAM SMALL LETTER I	[3CF5 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[9] = { 0x3CF5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267, 0x0000 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted);

    EXPECT_EQ(shifted.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

