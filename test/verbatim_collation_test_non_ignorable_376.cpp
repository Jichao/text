// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_376_000)
{
    // 4704 003F;	
    // (䜄) CJK UNIFIED IDEOGRAPH-4704	[FB80 C704 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4704, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC704, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_001)
{
    // 4704 0061;	
    // (䜄) CJK UNIFIED IDEOGRAPH-4704	[FB80 C704 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4704, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC704, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_002)
{
    // 4704 0041;	
    // (䜄) CJK UNIFIED IDEOGRAPH-4704	[FB80 C704 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4704, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC704, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_003)
{
    // 4704 0062;	
    // (䜄) CJK UNIFIED IDEOGRAPH-4704	[FB80 C704 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4704, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC704, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_004)
{
    // 4705 0021;	
    // (䜅) CJK UNIFIED IDEOGRAPH-4705	[FB80 C705 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4705, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC705, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_005)
{
    // 4705 003F;	
    // (䜅) CJK UNIFIED IDEOGRAPH-4705	[FB80 C705 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4705, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC705, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_006)
{
    // 4705 0061;	
    // (䜅) CJK UNIFIED IDEOGRAPH-4705	[FB80 C705 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4705, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC705, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_007)
{
    // 4705 0041;	
    // (䜅) CJK UNIFIED IDEOGRAPH-4705	[FB80 C705 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4705, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC705, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_008)
{
    // 4705 0062;	
    // (䜅) CJK UNIFIED IDEOGRAPH-4705	[FB80 C705 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4705, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC705, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_009)
{
    // 4706 0021;	
    // (䜆) CJK UNIFIED IDEOGRAPH-4706	[FB80 C706 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4706, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC706, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_010)
{
    // 4706 003F;	
    // (䜆) CJK UNIFIED IDEOGRAPH-4706	[FB80 C706 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4706, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC706, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_011)
{
    // 4706 0061;	
    // (䜆) CJK UNIFIED IDEOGRAPH-4706	[FB80 C706 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4706, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC706, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_012)
{
    // 4706 0041;	
    // (䜆) CJK UNIFIED IDEOGRAPH-4706	[FB80 C706 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4706, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC706, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_013)
{
    // 4706 0062;	
    // (䜆) CJK UNIFIED IDEOGRAPH-4706	[FB80 C706 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4706, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC706, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_014)
{
    // 4707 0021;	
    // (䜇) CJK UNIFIED IDEOGRAPH-4707	[FB80 C707 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4707, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC707, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_015)
{
    // 4707 003F;	
    // (䜇) CJK UNIFIED IDEOGRAPH-4707	[FB80 C707 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4707, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC707, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_016)
{
    // 4707 0061;	
    // (䜇) CJK UNIFIED IDEOGRAPH-4707	[FB80 C707 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4707, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC707, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_017)
{
    // 4707 0041;	
    // (䜇) CJK UNIFIED IDEOGRAPH-4707	[FB80 C707 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4707, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC707, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_018)
{
    // 4707 0062;	
    // (䜇) CJK UNIFIED IDEOGRAPH-4707	[FB80 C707 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4707, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC707, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_019)
{
    // 4708 0021;	
    // (䜈) CJK UNIFIED IDEOGRAPH-4708	[FB80 C708 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4708, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC708, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_020)
{
    // 4708 003F;	
    // (䜈) CJK UNIFIED IDEOGRAPH-4708	[FB80 C708 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4708, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC708, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_021)
{
    // 4708 0061;	
    // (䜈) CJK UNIFIED IDEOGRAPH-4708	[FB80 C708 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4708, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_022)
{
    // 4708 0041;	
    // (䜈) CJK UNIFIED IDEOGRAPH-4708	[FB80 C708 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4708, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_023)
{
    // 4708 0062;	
    // (䜈) CJK UNIFIED IDEOGRAPH-4708	[FB80 C708 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4708, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC708, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_024)
{
    // 4709 0021;	
    // (䜉) CJK UNIFIED IDEOGRAPH-4709	[FB80 C709 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4709, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC709, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_025)
{
    // 4709 003F;	
    // (䜉) CJK UNIFIED IDEOGRAPH-4709	[FB80 C709 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4709, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC709, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_026)
{
    // 4709 0061;	
    // (䜉) CJK UNIFIED IDEOGRAPH-4709	[FB80 C709 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4709, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC709, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_027)
{
    // 4709 0041;	
    // (䜉) CJK UNIFIED IDEOGRAPH-4709	[FB80 C709 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4709, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC709, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_028)
{
    // 4709 0062;	
    // (䜉) CJK UNIFIED IDEOGRAPH-4709	[FB80 C709 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4709, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC709, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_029)
{
    // 470A 0021;	
    // (䜊) CJK UNIFIED IDEOGRAPH-470A	[FB80 C70A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC70A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_030)
{
    // 470A 003F;	
    // (䜊) CJK UNIFIED IDEOGRAPH-470A	[FB80 C70A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC70A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_031)
{
    // 470A 0061;	
    // (䜊) CJK UNIFIED IDEOGRAPH-470A	[FB80 C70A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC70A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_032)
{
    // 470A 0041;	
    // (䜊) CJK UNIFIED IDEOGRAPH-470A	[FB80 C70A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x470A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC70A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_033)
{
    // 470A 0062;	
    // (䜊) CJK UNIFIED IDEOGRAPH-470A	[FB80 C70A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC70A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_034)
{
    // 470B 0021;	
    // (䜋) CJK UNIFIED IDEOGRAPH-470B	[FB80 C70B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC70B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_035)
{
    // 470B 003F;	
    // (䜋) CJK UNIFIED IDEOGRAPH-470B	[FB80 C70B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC70B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_036)
{
    // 470B 0061;	
    // (䜋) CJK UNIFIED IDEOGRAPH-470B	[FB80 C70B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC70B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_037)
{
    // 470B 0041;	
    // (䜋) CJK UNIFIED IDEOGRAPH-470B	[FB80 C70B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x470B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC70B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_038)
{
    // 470B 0062;	
    // (䜋) CJK UNIFIED IDEOGRAPH-470B	[FB80 C70B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC70B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_039)
{
    // 470C 0021;	
    // (䜌) CJK UNIFIED IDEOGRAPH-470C	[FB80 C70C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC70C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_040)
{
    // 470C 003F;	
    // (䜌) CJK UNIFIED IDEOGRAPH-470C	[FB80 C70C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC70C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_041)
{
    // 470C 0061;	
    // (䜌) CJK UNIFIED IDEOGRAPH-470C	[FB80 C70C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC70C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_042)
{
    // 470C 0041;	
    // (䜌) CJK UNIFIED IDEOGRAPH-470C	[FB80 C70C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x470C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC70C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_043)
{
    // 470C 0062;	
    // (䜌) CJK UNIFIED IDEOGRAPH-470C	[FB80 C70C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC70C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_044)
{
    // 470D 0021;	
    // (䜍) CJK UNIFIED IDEOGRAPH-470D	[FB80 C70D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC70D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_045)
{
    // 470D 003F;	
    // (䜍) CJK UNIFIED IDEOGRAPH-470D	[FB80 C70D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC70D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_046)
{
    // 470D 0061;	
    // (䜍) CJK UNIFIED IDEOGRAPH-470D	[FB80 C70D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC70D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_047)
{
    // 470D 0041;	
    // (䜍) CJK UNIFIED IDEOGRAPH-470D	[FB80 C70D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x470D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC70D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_048)
{
    // 470D 0062;	
    // (䜍) CJK UNIFIED IDEOGRAPH-470D	[FB80 C70D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC70D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_049)
{
    // 470E 0021;	
    // (䜎) CJK UNIFIED IDEOGRAPH-470E	[FB80 C70E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC70E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_050)
{
    // 470E 003F;	
    // (䜎) CJK UNIFIED IDEOGRAPH-470E	[FB80 C70E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC70E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_051)
{
    // 470E 0061;	
    // (䜎) CJK UNIFIED IDEOGRAPH-470E	[FB80 C70E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC70E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_052)
{
    // 470E 0041;	
    // (䜎) CJK UNIFIED IDEOGRAPH-470E	[FB80 C70E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x470E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC70E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_053)
{
    // 470E 0062;	
    // (䜎) CJK UNIFIED IDEOGRAPH-470E	[FB80 C70E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC70E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_054)
{
    // 470F 0021;	
    // (䜏) CJK UNIFIED IDEOGRAPH-470F	[FB80 C70F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC70F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_055)
{
    // 470F 003F;	
    // (䜏) CJK UNIFIED IDEOGRAPH-470F	[FB80 C70F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC70F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_056)
{
    // 470F 0061;	
    // (䜏) CJK UNIFIED IDEOGRAPH-470F	[FB80 C70F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC70F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_057)
{
    // 470F 0041;	
    // (䜏) CJK UNIFIED IDEOGRAPH-470F	[FB80 C70F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x470F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC70F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_058)
{
    // 470F 0062;	
    // (䜏) CJK UNIFIED IDEOGRAPH-470F	[FB80 C70F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x470F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC70F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_059)
{
    // 4710 0021;	
    // (䜐) CJK UNIFIED IDEOGRAPH-4710	[FB80 C710 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4710, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC710, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_060)
{
    // 4710 003F;	
    // (䜐) CJK UNIFIED IDEOGRAPH-4710	[FB80 C710 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4710, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC710, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_061)
{
    // 4710 0061;	
    // (䜐) CJK UNIFIED IDEOGRAPH-4710	[FB80 C710 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4710, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC710, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_062)
{
    // 4710 0041;	
    // (䜐) CJK UNIFIED IDEOGRAPH-4710	[FB80 C710 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4710, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC710, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_063)
{
    // 4710 0062;	
    // (䜐) CJK UNIFIED IDEOGRAPH-4710	[FB80 C710 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4710, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC710, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_064)
{
    // 4711 0021;	
    // (䜑) CJK UNIFIED IDEOGRAPH-4711	[FB80 C711 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4711, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC711, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_065)
{
    // 4711 003F;	
    // (䜑) CJK UNIFIED IDEOGRAPH-4711	[FB80 C711 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4711, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC711, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_066)
{
    // 4711 0061;	
    // (䜑) CJK UNIFIED IDEOGRAPH-4711	[FB80 C711 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4711, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC711, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_067)
{
    // 4711 0041;	
    // (䜑) CJK UNIFIED IDEOGRAPH-4711	[FB80 C711 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4711, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC711, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_068)
{
    // 4711 0062;	
    // (䜑) CJK UNIFIED IDEOGRAPH-4711	[FB80 C711 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4711, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC711, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_069)
{
    // 4712 0021;	
    // (䜒) CJK UNIFIED IDEOGRAPH-4712	[FB80 C712 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4712, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC712, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_070)
{
    // 4712 003F;	
    // (䜒) CJK UNIFIED IDEOGRAPH-4712	[FB80 C712 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4712, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC712, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_071)
{
    // 4712 0061;	
    // (䜒) CJK UNIFIED IDEOGRAPH-4712	[FB80 C712 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4712, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_072)
{
    // 4712 0041;	
    // (䜒) CJK UNIFIED IDEOGRAPH-4712	[FB80 C712 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4712, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_073)
{
    // 4712 0062;	
    // (䜒) CJK UNIFIED IDEOGRAPH-4712	[FB80 C712 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4712, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC712, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_074)
{
    // 4713 0021;	
    // (䜓) CJK UNIFIED IDEOGRAPH-4713	[FB80 C713 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4713, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC713, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_075)
{
    // 4713 003F;	
    // (䜓) CJK UNIFIED IDEOGRAPH-4713	[FB80 C713 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4713, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC713, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_076)
{
    // 4713 0061;	
    // (䜓) CJK UNIFIED IDEOGRAPH-4713	[FB80 C713 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4713, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC713, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_077)
{
    // 4713 0041;	
    // (䜓) CJK UNIFIED IDEOGRAPH-4713	[FB80 C713 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4713, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC713, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_078)
{
    // 4713 0062;	
    // (䜓) CJK UNIFIED IDEOGRAPH-4713	[FB80 C713 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4713, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC713, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_079)
{
    // 4714 0021;	
    // (䜔) CJK UNIFIED IDEOGRAPH-4714	[FB80 C714 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4714, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC714, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_080)
{
    // 4714 003F;	
    // (䜔) CJK UNIFIED IDEOGRAPH-4714	[FB80 C714 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4714, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC714, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_081)
{
    // 4714 0061;	
    // (䜔) CJK UNIFIED IDEOGRAPH-4714	[FB80 C714 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4714, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC714, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_082)
{
    // 4714 0041;	
    // (䜔) CJK UNIFIED IDEOGRAPH-4714	[FB80 C714 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4714, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC714, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_083)
{
    // 4714 0062;	
    // (䜔) CJK UNIFIED IDEOGRAPH-4714	[FB80 C714 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4714, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC714, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_084)
{
    // 4715 0021;	
    // (䜕) CJK UNIFIED IDEOGRAPH-4715	[FB80 C715 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4715, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC715, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_085)
{
    // 4715 003F;	
    // (䜕) CJK UNIFIED IDEOGRAPH-4715	[FB80 C715 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4715, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC715, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_086)
{
    // 4715 0061;	
    // (䜕) CJK UNIFIED IDEOGRAPH-4715	[FB80 C715 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4715, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC715, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_087)
{
    // 4715 0041;	
    // (䜕) CJK UNIFIED IDEOGRAPH-4715	[FB80 C715 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4715, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC715, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_088)
{
    // 4715 0062;	
    // (䜕) CJK UNIFIED IDEOGRAPH-4715	[FB80 C715 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4715, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC715, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_089)
{
    // 4716 0021;	
    // (䜖) CJK UNIFIED IDEOGRAPH-4716	[FB80 C716 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4716, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC716, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_090)
{
    // 4716 003F;	
    // (䜖) CJK UNIFIED IDEOGRAPH-4716	[FB80 C716 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4716, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC716, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_091)
{
    // 4716 0061;	
    // (䜖) CJK UNIFIED IDEOGRAPH-4716	[FB80 C716 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4716, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC716, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_092)
{
    // 4716 0041;	
    // (䜖) CJK UNIFIED IDEOGRAPH-4716	[FB80 C716 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4716, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC716, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_093)
{
    // 4716 0062;	
    // (䜖) CJK UNIFIED IDEOGRAPH-4716	[FB80 C716 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4716, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC716, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_094)
{
    // 4717 0021;	
    // (䜗) CJK UNIFIED IDEOGRAPH-4717	[FB80 C717 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4717, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC717, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_095)
{
    // 4717 003F;	
    // (䜗) CJK UNIFIED IDEOGRAPH-4717	[FB80 C717 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4717, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC717, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_096)
{
    // 4717 0061;	
    // (䜗) CJK UNIFIED IDEOGRAPH-4717	[FB80 C717 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4717, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC717, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_097)
{
    // 4717 0041;	
    // (䜗) CJK UNIFIED IDEOGRAPH-4717	[FB80 C717 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4717, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC717, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_098)
{
    // 4717 0062;	
    // (䜗) CJK UNIFIED IDEOGRAPH-4717	[FB80 C717 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4717, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC717, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_099)
{
    // 4718 0021;	
    // (䜘) CJK UNIFIED IDEOGRAPH-4718	[FB80 C718 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4718, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC718, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_100)
{
    // 4718 003F;	
    // (䜘) CJK UNIFIED IDEOGRAPH-4718	[FB80 C718 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4718, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC718, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_101)
{
    // 4718 0061;	
    // (䜘) CJK UNIFIED IDEOGRAPH-4718	[FB80 C718 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4718, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC718, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_102)
{
    // 4718 0041;	
    // (䜘) CJK UNIFIED IDEOGRAPH-4718	[FB80 C718 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4718, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC718, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_103)
{
    // 4718 0062;	
    // (䜘) CJK UNIFIED IDEOGRAPH-4718	[FB80 C718 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4718, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC718, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_104)
{
    // 4719 0021;	
    // (䜙) CJK UNIFIED IDEOGRAPH-4719	[FB80 C719 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4719, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC719, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_105)
{
    // 4719 003F;	
    // (䜙) CJK UNIFIED IDEOGRAPH-4719	[FB80 C719 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4719, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC719, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_106)
{
    // 4719 0061;	
    // (䜙) CJK UNIFIED IDEOGRAPH-4719	[FB80 C719 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4719, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC719, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_107)
{
    // 4719 0041;	
    // (䜙) CJK UNIFIED IDEOGRAPH-4719	[FB80 C719 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4719, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC719, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_108)
{
    // 4719 0062;	
    // (䜙) CJK UNIFIED IDEOGRAPH-4719	[FB80 C719 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4719, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC719, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_109)
{
    // 471A 0021;	
    // (䜚) CJK UNIFIED IDEOGRAPH-471A	[FB80 C71A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC71A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_110)
{
    // 471A 003F;	
    // (䜚) CJK UNIFIED IDEOGRAPH-471A	[FB80 C71A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC71A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_111)
{
    // 471A 0061;	
    // (䜚) CJK UNIFIED IDEOGRAPH-471A	[FB80 C71A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC71A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_112)
{
    // 471A 0041;	
    // (䜚) CJK UNIFIED IDEOGRAPH-471A	[FB80 C71A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x471A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC71A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_113)
{
    // 471A 0062;	
    // (䜚) CJK UNIFIED IDEOGRAPH-471A	[FB80 C71A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC71A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_114)
{
    // 471B 0021;	
    // (䜛) CJK UNIFIED IDEOGRAPH-471B	[FB80 C71B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC71B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_115)
{
    // 471B 003F;	
    // (䜛) CJK UNIFIED IDEOGRAPH-471B	[FB80 C71B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC71B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_116)
{
    // 471B 0061;	
    // (䜛) CJK UNIFIED IDEOGRAPH-471B	[FB80 C71B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC71B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_117)
{
    // 471B 0041;	
    // (䜛) CJK UNIFIED IDEOGRAPH-471B	[FB80 C71B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x471B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC71B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_118)
{
    // 471B 0062;	
    // (䜛) CJK UNIFIED IDEOGRAPH-471B	[FB80 C71B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC71B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_119)
{
    // 471C 0021;	
    // (䜜) CJK UNIFIED IDEOGRAPH-471C	[FB80 C71C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC71C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_120)
{
    // 471C 003F;	
    // (䜜) CJK UNIFIED IDEOGRAPH-471C	[FB80 C71C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC71C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_121)
{
    // 471C 0061;	
    // (䜜) CJK UNIFIED IDEOGRAPH-471C	[FB80 C71C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC71C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_122)
{
    // 471C 0041;	
    // (䜜) CJK UNIFIED IDEOGRAPH-471C	[FB80 C71C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x471C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC71C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_123)
{
    // 471C 0062;	
    // (䜜) CJK UNIFIED IDEOGRAPH-471C	[FB80 C71C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC71C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_124)
{
    // 471D 0021;	
    // (䜝) CJK UNIFIED IDEOGRAPH-471D	[FB80 C71D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC71D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_125)
{
    // 471D 003F;	
    // (䜝) CJK UNIFIED IDEOGRAPH-471D	[FB80 C71D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC71D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_126)
{
    // 471D 0061;	
    // (䜝) CJK UNIFIED IDEOGRAPH-471D	[FB80 C71D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC71D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_127)
{
    // 471D 0041;	
    // (䜝) CJK UNIFIED IDEOGRAPH-471D	[FB80 C71D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x471D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC71D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_128)
{
    // 471D 0062;	
    // (䜝) CJK UNIFIED IDEOGRAPH-471D	[FB80 C71D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC71D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_129)
{
    // 471E 0021;	
    // (䜞) CJK UNIFIED IDEOGRAPH-471E	[FB80 C71E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC71E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_130)
{
    // 471E 003F;	
    // (䜞) CJK UNIFIED IDEOGRAPH-471E	[FB80 C71E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC71E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_131)
{
    // 471E 0061;	
    // (䜞) CJK UNIFIED IDEOGRAPH-471E	[FB80 C71E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC71E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_132)
{
    // 471E 0041;	
    // (䜞) CJK UNIFIED IDEOGRAPH-471E	[FB80 C71E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x471E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC71E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_133)
{
    // 471E 0062;	
    // (䜞) CJK UNIFIED IDEOGRAPH-471E	[FB80 C71E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC71E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_134)
{
    // 471F 0021;	
    // (䜟) CJK UNIFIED IDEOGRAPH-471F	[FB80 C71F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC71F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_135)
{
    // 471F 003F;	
    // (䜟) CJK UNIFIED IDEOGRAPH-471F	[FB80 C71F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC71F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_136)
{
    // 471F 0061;	
    // (䜟) CJK UNIFIED IDEOGRAPH-471F	[FB80 C71F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC71F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_137)
{
    // 471F 0041;	
    // (䜟) CJK UNIFIED IDEOGRAPH-471F	[FB80 C71F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x471F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC71F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_138)
{
    // 471F 0062;	
    // (䜟) CJK UNIFIED IDEOGRAPH-471F	[FB80 C71F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x471F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC71F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_139)
{
    // 4720 0021;	
    // (䜠) CJK UNIFIED IDEOGRAPH-4720	[FB80 C720 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4720, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC720, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_140)
{
    // 4720 003F;	
    // (䜠) CJK UNIFIED IDEOGRAPH-4720	[FB80 C720 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4720, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC720, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_141)
{
    // 4720 0061;	
    // (䜠) CJK UNIFIED IDEOGRAPH-4720	[FB80 C720 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4720, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC720, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_142)
{
    // 4720 0041;	
    // (䜠) CJK UNIFIED IDEOGRAPH-4720	[FB80 C720 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4720, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC720, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_143)
{
    // 4720 0062;	
    // (䜠) CJK UNIFIED IDEOGRAPH-4720	[FB80 C720 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4720, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC720, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_144)
{
    // 4721 0021;	
    // (䜡) CJK UNIFIED IDEOGRAPH-4721	[FB80 C721 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4721, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC721, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_145)
{
    // 4721 003F;	
    // (䜡) CJK UNIFIED IDEOGRAPH-4721	[FB80 C721 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4721, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC721, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_146)
{
    // 4721 0061;	
    // (䜡) CJK UNIFIED IDEOGRAPH-4721	[FB80 C721 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4721, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC721, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_147)
{
    // 4721 0041;	
    // (䜡) CJK UNIFIED IDEOGRAPH-4721	[FB80 C721 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4721, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC721, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_148)
{
    // 4721 0062;	
    // (䜡) CJK UNIFIED IDEOGRAPH-4721	[FB80 C721 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4721, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC721, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_149)
{
    // 4722 0021;	
    // (䜢) CJK UNIFIED IDEOGRAPH-4722	[FB80 C722 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4722, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC722, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_150)
{
    // 4722 003F;	
    // (䜢) CJK UNIFIED IDEOGRAPH-4722	[FB80 C722 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4722, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC722, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_151)
{
    // 4722 0061;	
    // (䜢) CJK UNIFIED IDEOGRAPH-4722	[FB80 C722 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4722, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC722, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_152)
{
    // 4722 0041;	
    // (䜢) CJK UNIFIED IDEOGRAPH-4722	[FB80 C722 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4722, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC722, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_153)
{
    // 4722 0062;	
    // (䜢) CJK UNIFIED IDEOGRAPH-4722	[FB80 C722 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4722, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC722, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_154)
{
    // 4723 0021;	
    // (䜣) CJK UNIFIED IDEOGRAPH-4723	[FB80 C723 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4723, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC723, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_155)
{
    // 4723 003F;	
    // (䜣) CJK UNIFIED IDEOGRAPH-4723	[FB80 C723 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4723, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC723, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_156)
{
    // 4723 0061;	
    // (䜣) CJK UNIFIED IDEOGRAPH-4723	[FB80 C723 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4723, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC723, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_157)
{
    // 4723 0041;	
    // (䜣) CJK UNIFIED IDEOGRAPH-4723	[FB80 C723 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4723, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC723, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_158)
{
    // 4723 0062;	
    // (䜣) CJK UNIFIED IDEOGRAPH-4723	[FB80 C723 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4723, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC723, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_159)
{
    // 4724 0021;	
    // (䜤) CJK UNIFIED IDEOGRAPH-4724	[FB80 C724 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4724, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC724, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_160)
{
    // 4724 003F;	
    // (䜤) CJK UNIFIED IDEOGRAPH-4724	[FB80 C724 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4724, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC724, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_161)
{
    // 4724 0061;	
    // (䜤) CJK UNIFIED IDEOGRAPH-4724	[FB80 C724 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4724, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC724, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_162)
{
    // 4724 0041;	
    // (䜤) CJK UNIFIED IDEOGRAPH-4724	[FB80 C724 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4724, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC724, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_163)
{
    // 4724 0062;	
    // (䜤) CJK UNIFIED IDEOGRAPH-4724	[FB80 C724 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4724, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC724, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_164)
{
    // 4725 0021;	
    // (䜥) CJK UNIFIED IDEOGRAPH-4725	[FB80 C725 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4725, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC725, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_165)
{
    // 4725 003F;	
    // (䜥) CJK UNIFIED IDEOGRAPH-4725	[FB80 C725 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4725, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC725, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_166)
{
    // 4725 0061;	
    // (䜥) CJK UNIFIED IDEOGRAPH-4725	[FB80 C725 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4725, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC725, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_167)
{
    // 4725 0041;	
    // (䜥) CJK UNIFIED IDEOGRAPH-4725	[FB80 C725 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4725, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC725, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_168)
{
    // 4725 0062;	
    // (䜥) CJK UNIFIED IDEOGRAPH-4725	[FB80 C725 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4725, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC725, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_169)
{
    // 4726 0021;	
    // (䜦) CJK UNIFIED IDEOGRAPH-4726	[FB80 C726 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4726, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC726, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_170)
{
    // 4726 003F;	
    // (䜦) CJK UNIFIED IDEOGRAPH-4726	[FB80 C726 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4726, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC726, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_171)
{
    // 4726 0061;	
    // (䜦) CJK UNIFIED IDEOGRAPH-4726	[FB80 C726 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4726, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC726, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_172)
{
    // 4726 0041;	
    // (䜦) CJK UNIFIED IDEOGRAPH-4726	[FB80 C726 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4726, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC726, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_173)
{
    // 4726 0062;	
    // (䜦) CJK UNIFIED IDEOGRAPH-4726	[FB80 C726 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4726, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC726, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_174)
{
    // 4727 0021;	
    // (䜧) CJK UNIFIED IDEOGRAPH-4727	[FB80 C727 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4727, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC727, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_175)
{
    // 4727 003F;	
    // (䜧) CJK UNIFIED IDEOGRAPH-4727	[FB80 C727 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4727, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC727, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_176)
{
    // 4727 0061;	
    // (䜧) CJK UNIFIED IDEOGRAPH-4727	[FB80 C727 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4727, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC727, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_177)
{
    // 4727 0041;	
    // (䜧) CJK UNIFIED IDEOGRAPH-4727	[FB80 C727 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4727, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC727, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_178)
{
    // 4727 0062;	
    // (䜧) CJK UNIFIED IDEOGRAPH-4727	[FB80 C727 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4727, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC727, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_179)
{
    // 4728 0021;	
    // (䜨) CJK UNIFIED IDEOGRAPH-4728	[FB80 C728 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4728, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC728, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_180)
{
    // 4728 003F;	
    // (䜨) CJK UNIFIED IDEOGRAPH-4728	[FB80 C728 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4728, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC728, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_181)
{
    // 4728 0061;	
    // (䜨) CJK UNIFIED IDEOGRAPH-4728	[FB80 C728 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4728, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC728, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_182)
{
    // 4728 0041;	
    // (䜨) CJK UNIFIED IDEOGRAPH-4728	[FB80 C728 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4728, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC728, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_183)
{
    // 4728 0062;	
    // (䜨) CJK UNIFIED IDEOGRAPH-4728	[FB80 C728 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4728, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC728, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_184)
{
    // 4729 0021;	
    // (䜩) CJK UNIFIED IDEOGRAPH-4729	[FB80 C729 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4729, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC729, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_185)
{
    // 4729 003F;	
    // (䜩) CJK UNIFIED IDEOGRAPH-4729	[FB80 C729 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4729, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC729, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_186)
{
    // 4729 0061;	
    // (䜩) CJK UNIFIED IDEOGRAPH-4729	[FB80 C729 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4729, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC729, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_187)
{
    // 4729 0041;	
    // (䜩) CJK UNIFIED IDEOGRAPH-4729	[FB80 C729 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4729, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC729, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_188)
{
    // 4729 0062;	
    // (䜩) CJK UNIFIED IDEOGRAPH-4729	[FB80 C729 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4729, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC729, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_189)
{
    // 472A 0021;	
    // (䜪) CJK UNIFIED IDEOGRAPH-472A	[FB80 C72A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC72A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_190)
{
    // 472A 003F;	
    // (䜪) CJK UNIFIED IDEOGRAPH-472A	[FB80 C72A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC72A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_191)
{
    // 472A 0061;	
    // (䜪) CJK UNIFIED IDEOGRAPH-472A	[FB80 C72A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC72A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_192)
{
    // 472A 0041;	
    // (䜪) CJK UNIFIED IDEOGRAPH-472A	[FB80 C72A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x472A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC72A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_193)
{
    // 472A 0062;	
    // (䜪) CJK UNIFIED IDEOGRAPH-472A	[FB80 C72A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC72A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_194)
{
    // 472B 0021;	
    // (䜫) CJK UNIFIED IDEOGRAPH-472B	[FB80 C72B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC72B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_195)
{
    // 472B 003F;	
    // (䜫) CJK UNIFIED IDEOGRAPH-472B	[FB80 C72B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC72B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_196)
{
    // 472B 0061;	
    // (䜫) CJK UNIFIED IDEOGRAPH-472B	[FB80 C72B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC72B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_197)
{
    // 472B 0041;	
    // (䜫) CJK UNIFIED IDEOGRAPH-472B	[FB80 C72B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x472B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC72B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_198)
{
    // 472B 0062;	
    // (䜫) CJK UNIFIED IDEOGRAPH-472B	[FB80 C72B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC72B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_199)
{
    // 472C 0021;	
    // (䜬) CJK UNIFIED IDEOGRAPH-472C	[FB80 C72C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC72C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_200)
{
    // 472C 003F;	
    // (䜬) CJK UNIFIED IDEOGRAPH-472C	[FB80 C72C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC72C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_201)
{
    // 472C 0061;	
    // (䜬) CJK UNIFIED IDEOGRAPH-472C	[FB80 C72C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC72C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_202)
{
    // 472C 0041;	
    // (䜬) CJK UNIFIED IDEOGRAPH-472C	[FB80 C72C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x472C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC72C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_203)
{
    // 472C 0062;	
    // (䜬) CJK UNIFIED IDEOGRAPH-472C	[FB80 C72C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC72C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_204)
{
    // 472D 0021;	
    // (䜭) CJK UNIFIED IDEOGRAPH-472D	[FB80 C72D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC72D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_205)
{
    // 472D 003F;	
    // (䜭) CJK UNIFIED IDEOGRAPH-472D	[FB80 C72D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC72D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_206)
{
    // 472D 0061;	
    // (䜭) CJK UNIFIED IDEOGRAPH-472D	[FB80 C72D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC72D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_207)
{
    // 472D 0041;	
    // (䜭) CJK UNIFIED IDEOGRAPH-472D	[FB80 C72D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x472D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC72D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_208)
{
    // 472D 0062;	
    // (䜭) CJK UNIFIED IDEOGRAPH-472D	[FB80 C72D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC72D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_209)
{
    // 472E 0021;	
    // (䜮) CJK UNIFIED IDEOGRAPH-472E	[FB80 C72E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC72E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_210)
{
    // 472E 003F;	
    // (䜮) CJK UNIFIED IDEOGRAPH-472E	[FB80 C72E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC72E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_211)
{
    // 472E 0061;	
    // (䜮) CJK UNIFIED IDEOGRAPH-472E	[FB80 C72E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC72E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_212)
{
    // 472E 0041;	
    // (䜮) CJK UNIFIED IDEOGRAPH-472E	[FB80 C72E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x472E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC72E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_213)
{
    // 472E 0062;	
    // (䜮) CJK UNIFIED IDEOGRAPH-472E	[FB80 C72E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC72E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_214)
{
    // 472F 0021;	
    // (䜯) CJK UNIFIED IDEOGRAPH-472F	[FB80 C72F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC72F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_215)
{
    // 472F 003F;	
    // (䜯) CJK UNIFIED IDEOGRAPH-472F	[FB80 C72F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC72F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_216)
{
    // 472F 0061;	
    // (䜯) CJK UNIFIED IDEOGRAPH-472F	[FB80 C72F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC72F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_217)
{
    // 472F 0041;	
    // (䜯) CJK UNIFIED IDEOGRAPH-472F	[FB80 C72F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x472F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC72F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_218)
{
    // 472F 0062;	
    // (䜯) CJK UNIFIED IDEOGRAPH-472F	[FB80 C72F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x472F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC72F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_219)
{
    // 4730 0021;	
    // (䜰) CJK UNIFIED IDEOGRAPH-4730	[FB80 C730 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4730, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC730, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_220)
{
    // 4730 003F;	
    // (䜰) CJK UNIFIED IDEOGRAPH-4730	[FB80 C730 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4730, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC730, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_221)
{
    // 4730 0061;	
    // (䜰) CJK UNIFIED IDEOGRAPH-4730	[FB80 C730 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4730, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC730, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_222)
{
    // 4730 0041;	
    // (䜰) CJK UNIFIED IDEOGRAPH-4730	[FB80 C730 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4730, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC730, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_223)
{
    // 4730 0062;	
    // (䜰) CJK UNIFIED IDEOGRAPH-4730	[FB80 C730 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4730, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC730, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_224)
{
    // 4731 0021;	
    // (䜱) CJK UNIFIED IDEOGRAPH-4731	[FB80 C731 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4731, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC731, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_225)
{
    // 4731 003F;	
    // (䜱) CJK UNIFIED IDEOGRAPH-4731	[FB80 C731 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4731, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC731, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_226)
{
    // 4731 0061;	
    // (䜱) CJK UNIFIED IDEOGRAPH-4731	[FB80 C731 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4731, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC731, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_227)
{
    // 4731 0041;	
    // (䜱) CJK UNIFIED IDEOGRAPH-4731	[FB80 C731 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4731, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC731, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_228)
{
    // 4731 0062;	
    // (䜱) CJK UNIFIED IDEOGRAPH-4731	[FB80 C731 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4731, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC731, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_229)
{
    // 4732 0021;	
    // (䜲) CJK UNIFIED IDEOGRAPH-4732	[FB80 C732 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4732, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC732, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_230)
{
    // 4732 003F;	
    // (䜲) CJK UNIFIED IDEOGRAPH-4732	[FB80 C732 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4732, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC732, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_231)
{
    // 4732 0061;	
    // (䜲) CJK UNIFIED IDEOGRAPH-4732	[FB80 C732 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4732, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC732, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_232)
{
    // 4732 0041;	
    // (䜲) CJK UNIFIED IDEOGRAPH-4732	[FB80 C732 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4732, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC732, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_233)
{
    // 4732 0062;	
    // (䜲) CJK UNIFIED IDEOGRAPH-4732	[FB80 C732 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4732, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC732, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_234)
{
    // 4733 0021;	
    // (䜳) CJK UNIFIED IDEOGRAPH-4733	[FB80 C733 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4733, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC733, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_235)
{
    // 4733 003F;	
    // (䜳) CJK UNIFIED IDEOGRAPH-4733	[FB80 C733 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4733, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC733, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_236)
{
    // 4733 0061;	
    // (䜳) CJK UNIFIED IDEOGRAPH-4733	[FB80 C733 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4733, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC733, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_237)
{
    // 4733 0041;	
    // (䜳) CJK UNIFIED IDEOGRAPH-4733	[FB80 C733 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4733, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC733, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_238)
{
    // 4733 0062;	
    // (䜳) CJK UNIFIED IDEOGRAPH-4733	[FB80 C733 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4733, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC733, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_239)
{
    // 4734 0021;	
    // (䜴) CJK UNIFIED IDEOGRAPH-4734	[FB80 C734 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4734, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC734, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_240)
{
    // 4734 003F;	
    // (䜴) CJK UNIFIED IDEOGRAPH-4734	[FB80 C734 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4734, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC734, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_241)
{
    // 4734 0061;	
    // (䜴) CJK UNIFIED IDEOGRAPH-4734	[FB80 C734 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4734, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC734, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_242)
{
    // 4734 0041;	
    // (䜴) CJK UNIFIED IDEOGRAPH-4734	[FB80 C734 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4734, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC734, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_243)
{
    // 4734 0062;	
    // (䜴) CJK UNIFIED IDEOGRAPH-4734	[FB80 C734 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4734, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC734, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_244)
{
    // 4735 0021;	
    // (䜵) CJK UNIFIED IDEOGRAPH-4735	[FB80 C735 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4735, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC735, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_245)
{
    // 4735 003F;	
    // (䜵) CJK UNIFIED IDEOGRAPH-4735	[FB80 C735 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4735, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC735, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_246)
{
    // 4735 0061;	
    // (䜵) CJK UNIFIED IDEOGRAPH-4735	[FB80 C735 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4735, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC735, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_247)
{
    // 4735 0041;	
    // (䜵) CJK UNIFIED IDEOGRAPH-4735	[FB80 C735 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4735, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC735, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_248)
{
    // 4735 0062;	
    // (䜵) CJK UNIFIED IDEOGRAPH-4735	[FB80 C735 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4735, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC735, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_249)
{
    // 4736 0021;	
    // (䜶) CJK UNIFIED IDEOGRAPH-4736	[FB80 C736 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4736, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC736, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_250)
{
    // 4736 003F;	
    // (䜶) CJK UNIFIED IDEOGRAPH-4736	[FB80 C736 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4736, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC736, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_251)
{
    // 4736 0061;	
    // (䜶) CJK UNIFIED IDEOGRAPH-4736	[FB80 C736 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4736, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC736, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_252)
{
    // 4736 0041;	
    // (䜶) CJK UNIFIED IDEOGRAPH-4736	[FB80 C736 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4736, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC736, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_253)
{
    // 4736 0062;	
    // (䜶) CJK UNIFIED IDEOGRAPH-4736	[FB80 C736 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4736, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC736, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_254)
{
    // 4737 0021;	
    // (䜷) CJK UNIFIED IDEOGRAPH-4737	[FB80 C737 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4737, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC737, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_255)
{
    // 4737 003F;	
    // (䜷) CJK UNIFIED IDEOGRAPH-4737	[FB80 C737 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4737, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC737, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_256)
{
    // 4737 0061;	
    // (䜷) CJK UNIFIED IDEOGRAPH-4737	[FB80 C737 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4737, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC737, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_257)
{
    // 4737 0041;	
    // (䜷) CJK UNIFIED IDEOGRAPH-4737	[FB80 C737 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4737, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC737, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_258)
{
    // 4737 0062;	
    // (䜷) CJK UNIFIED IDEOGRAPH-4737	[FB80 C737 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4737, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC737, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_259)
{
    // 4738 0021;	
    // (䜸) CJK UNIFIED IDEOGRAPH-4738	[FB80 C738 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4738, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC738, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_260)
{
    // 4738 003F;	
    // (䜸) CJK UNIFIED IDEOGRAPH-4738	[FB80 C738 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4738, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC738, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_261)
{
    // 4738 0061;	
    // (䜸) CJK UNIFIED IDEOGRAPH-4738	[FB80 C738 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4738, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC738, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_262)
{
    // 4738 0041;	
    // (䜸) CJK UNIFIED IDEOGRAPH-4738	[FB80 C738 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4738, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC738, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_263)
{
    // 4738 0062;	
    // (䜸) CJK UNIFIED IDEOGRAPH-4738	[FB80 C738 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4738, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC738, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_264)
{
    // 4739 0021;	
    // (䜹) CJK UNIFIED IDEOGRAPH-4739	[FB80 C739 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4739, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC739, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_265)
{
    // 4739 003F;	
    // (䜹) CJK UNIFIED IDEOGRAPH-4739	[FB80 C739 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4739, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC739, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_266)
{
    // 4739 0061;	
    // (䜹) CJK UNIFIED IDEOGRAPH-4739	[FB80 C739 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4739, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC739, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_267)
{
    // 4739 0041;	
    // (䜹) CJK UNIFIED IDEOGRAPH-4739	[FB80 C739 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4739, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC739, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_268)
{
    // 4739 0062;	
    // (䜹) CJK UNIFIED IDEOGRAPH-4739	[FB80 C739 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4739, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC739, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_269)
{
    // 473A 0021;	
    // (䜺) CJK UNIFIED IDEOGRAPH-473A	[FB80 C73A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC73A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_270)
{
    // 473A 003F;	
    // (䜺) CJK UNIFIED IDEOGRAPH-473A	[FB80 C73A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC73A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_271)
{
    // 473A 0061;	
    // (䜺) CJK UNIFIED IDEOGRAPH-473A	[FB80 C73A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC73A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_272)
{
    // 473A 0041;	
    // (䜺) CJK UNIFIED IDEOGRAPH-473A	[FB80 C73A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x473A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC73A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_273)
{
    // 473A 0062;	
    // (䜺) CJK UNIFIED IDEOGRAPH-473A	[FB80 C73A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC73A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_274)
{
    // 473B 0021;	
    // (䜻) CJK UNIFIED IDEOGRAPH-473B	[FB80 C73B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC73B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_275)
{
    // 473B 003F;	
    // (䜻) CJK UNIFIED IDEOGRAPH-473B	[FB80 C73B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC73B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_276)
{
    // 473B 0061;	
    // (䜻) CJK UNIFIED IDEOGRAPH-473B	[FB80 C73B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC73B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_277)
{
    // 473B 0041;	
    // (䜻) CJK UNIFIED IDEOGRAPH-473B	[FB80 C73B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x473B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC73B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_278)
{
    // 473B 0062;	
    // (䜻) CJK UNIFIED IDEOGRAPH-473B	[FB80 C73B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC73B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_279)
{
    // 473C 0021;	
    // (䜼) CJK UNIFIED IDEOGRAPH-473C	[FB80 C73C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC73C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_280)
{
    // 473C 003F;	
    // (䜼) CJK UNIFIED IDEOGRAPH-473C	[FB80 C73C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC73C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_281)
{
    // 473C 0061;	
    // (䜼) CJK UNIFIED IDEOGRAPH-473C	[FB80 C73C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC73C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_282)
{
    // 473C 0041;	
    // (䜼) CJK UNIFIED IDEOGRAPH-473C	[FB80 C73C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x473C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC73C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_283)
{
    // 473C 0062;	
    // (䜼) CJK UNIFIED IDEOGRAPH-473C	[FB80 C73C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC73C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_284)
{
    // 473D 0021;	
    // (䜽) CJK UNIFIED IDEOGRAPH-473D	[FB80 C73D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC73D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_285)
{
    // 473D 003F;	
    // (䜽) CJK UNIFIED IDEOGRAPH-473D	[FB80 C73D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC73D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_286)
{
    // 473D 0061;	
    // (䜽) CJK UNIFIED IDEOGRAPH-473D	[FB80 C73D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC73D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_287)
{
    // 473D 0041;	
    // (䜽) CJK UNIFIED IDEOGRAPH-473D	[FB80 C73D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x473D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC73D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_288)
{
    // 473D 0062;	
    // (䜽) CJK UNIFIED IDEOGRAPH-473D	[FB80 C73D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC73D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_289)
{
    // 473E 0021;	
    // (䜾) CJK UNIFIED IDEOGRAPH-473E	[FB80 C73E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC73E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_290)
{
    // 473E 003F;	
    // (䜾) CJK UNIFIED IDEOGRAPH-473E	[FB80 C73E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC73E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_291)
{
    // 473E 0061;	
    // (䜾) CJK UNIFIED IDEOGRAPH-473E	[FB80 C73E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC73E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_292)
{
    // 473E 0041;	
    // (䜾) CJK UNIFIED IDEOGRAPH-473E	[FB80 C73E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x473E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC73E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_293)
{
    // 473E 0062;	
    // (䜾) CJK UNIFIED IDEOGRAPH-473E	[FB80 C73E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC73E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_294)
{
    // 473F 0021;	
    // (䜿) CJK UNIFIED IDEOGRAPH-473F	[FB80 C73F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC73F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_295)
{
    // 473F 003F;	
    // (䜿) CJK UNIFIED IDEOGRAPH-473F	[FB80 C73F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC73F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_296)
{
    // 473F 0061;	
    // (䜿) CJK UNIFIED IDEOGRAPH-473F	[FB80 C73F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC73F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_297)
{
    // 473F 0041;	
    // (䜿) CJK UNIFIED IDEOGRAPH-473F	[FB80 C73F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x473F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC73F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_298)
{
    // 473F 0062;	
    // (䜿) CJK UNIFIED IDEOGRAPH-473F	[FB80 C73F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x473F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC73F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_299)
{
    // 4740 0021;	
    // (䝀) CJK UNIFIED IDEOGRAPH-4740	[FB80 C740 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4740, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC740, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_300)
{
    // 4740 003F;	
    // (䝀) CJK UNIFIED IDEOGRAPH-4740	[FB80 C740 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4740, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC740, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_301)
{
    // 4740 0061;	
    // (䝀) CJK UNIFIED IDEOGRAPH-4740	[FB80 C740 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4740, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC740, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_302)
{
    // 4740 0041;	
    // (䝀) CJK UNIFIED IDEOGRAPH-4740	[FB80 C740 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4740, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC740, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_303)
{
    // 4740 0062;	
    // (䝀) CJK UNIFIED IDEOGRAPH-4740	[FB80 C740 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4740, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC740, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_304)
{
    // 4741 0021;	
    // (䝁) CJK UNIFIED IDEOGRAPH-4741	[FB80 C741 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4741, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC741, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_305)
{
    // 4741 003F;	
    // (䝁) CJK UNIFIED IDEOGRAPH-4741	[FB80 C741 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4741, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC741, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_306)
{
    // 4741 0061;	
    // (䝁) CJK UNIFIED IDEOGRAPH-4741	[FB80 C741 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4741, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC741, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_307)
{
    // 4741 0041;	
    // (䝁) CJK UNIFIED IDEOGRAPH-4741	[FB80 C741 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4741, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC741, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_308)
{
    // 4741 0062;	
    // (䝁) CJK UNIFIED IDEOGRAPH-4741	[FB80 C741 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4741, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC741, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_309)
{
    // 4742 0021;	
    // (䝂) CJK UNIFIED IDEOGRAPH-4742	[FB80 C742 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4742, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC742, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_310)
{
    // 4742 003F;	
    // (䝂) CJK UNIFIED IDEOGRAPH-4742	[FB80 C742 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4742, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC742, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_311)
{
    // 4742 0061;	
    // (䝂) CJK UNIFIED IDEOGRAPH-4742	[FB80 C742 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4742, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC742, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_312)
{
    // 4742 0041;	
    // (䝂) CJK UNIFIED IDEOGRAPH-4742	[FB80 C742 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4742, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC742, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_313)
{
    // 4742 0062;	
    // (䝂) CJK UNIFIED IDEOGRAPH-4742	[FB80 C742 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4742, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC742, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_314)
{
    // 4743 0021;	
    // (䝃) CJK UNIFIED IDEOGRAPH-4743	[FB80 C743 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4743, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC743, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_315)
{
    // 4743 003F;	
    // (䝃) CJK UNIFIED IDEOGRAPH-4743	[FB80 C743 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4743, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC743, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_316)
{
    // 4743 0061;	
    // (䝃) CJK UNIFIED IDEOGRAPH-4743	[FB80 C743 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4743, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC743, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_317)
{
    // 4743 0041;	
    // (䝃) CJK UNIFIED IDEOGRAPH-4743	[FB80 C743 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4743, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC743, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_318)
{
    // 4743 0062;	
    // (䝃) CJK UNIFIED IDEOGRAPH-4743	[FB80 C743 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4743, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC743, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_319)
{
    // 4744 0021;	
    // (䝄) CJK UNIFIED IDEOGRAPH-4744	[FB80 C744 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4744, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC744, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_320)
{
    // 4744 003F;	
    // (䝄) CJK UNIFIED IDEOGRAPH-4744	[FB80 C744 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4744, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC744, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_321)
{
    // 4744 0061;	
    // (䝄) CJK UNIFIED IDEOGRAPH-4744	[FB80 C744 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4744, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC744, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_322)
{
    // 4744 0041;	
    // (䝄) CJK UNIFIED IDEOGRAPH-4744	[FB80 C744 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4744, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC744, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_323)
{
    // 4744 0062;	
    // (䝄) CJK UNIFIED IDEOGRAPH-4744	[FB80 C744 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4744, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC744, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_324)
{
    // 4745 0021;	
    // (䝅) CJK UNIFIED IDEOGRAPH-4745	[FB80 C745 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4745, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC745, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_325)
{
    // 4745 003F;	
    // (䝅) CJK UNIFIED IDEOGRAPH-4745	[FB80 C745 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4745, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC745, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_326)
{
    // 4745 0061;	
    // (䝅) CJK UNIFIED IDEOGRAPH-4745	[FB80 C745 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4745, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC745, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_327)
{
    // 4745 0041;	
    // (䝅) CJK UNIFIED IDEOGRAPH-4745	[FB80 C745 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4745, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC745, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_328)
{
    // 4745 0062;	
    // (䝅) CJK UNIFIED IDEOGRAPH-4745	[FB80 C745 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4745, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC745, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_329)
{
    // 4746 0021;	
    // (䝆) CJK UNIFIED IDEOGRAPH-4746	[FB80 C746 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4746, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC746, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_330)
{
    // 4746 003F;	
    // (䝆) CJK UNIFIED IDEOGRAPH-4746	[FB80 C746 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4746, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC746, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_331)
{
    // 4746 0061;	
    // (䝆) CJK UNIFIED IDEOGRAPH-4746	[FB80 C746 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4746, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC746, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_332)
{
    // 4746 0041;	
    // (䝆) CJK UNIFIED IDEOGRAPH-4746	[FB80 C746 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4746, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC746, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_333)
{
    // 4746 0062;	
    // (䝆) CJK UNIFIED IDEOGRAPH-4746	[FB80 C746 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4746, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC746, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_334)
{
    // 4747 0021;	
    // (䝇) CJK UNIFIED IDEOGRAPH-4747	[FB80 C747 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4747, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC747, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_335)
{
    // 4747 003F;	
    // (䝇) CJK UNIFIED IDEOGRAPH-4747	[FB80 C747 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4747, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC747, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_336)
{
    // 4747 0061;	
    // (䝇) CJK UNIFIED IDEOGRAPH-4747	[FB80 C747 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4747, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC747, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_337)
{
    // 4747 0041;	
    // (䝇) CJK UNIFIED IDEOGRAPH-4747	[FB80 C747 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4747, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC747, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_338)
{
    // 4747 0062;	
    // (䝇) CJK UNIFIED IDEOGRAPH-4747	[FB80 C747 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4747, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC747, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_339)
{
    // 4748 0021;	
    // (䝈) CJK UNIFIED IDEOGRAPH-4748	[FB80 C748 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4748, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC748, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_340)
{
    // 4748 003F;	
    // (䝈) CJK UNIFIED IDEOGRAPH-4748	[FB80 C748 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4748, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC748, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_341)
{
    // 4748 0061;	
    // (䝈) CJK UNIFIED IDEOGRAPH-4748	[FB80 C748 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4748, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC748, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_342)
{
    // 4748 0041;	
    // (䝈) CJK UNIFIED IDEOGRAPH-4748	[FB80 C748 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4748, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC748, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_343)
{
    // 4748 0062;	
    // (䝈) CJK UNIFIED IDEOGRAPH-4748	[FB80 C748 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4748, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC748, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_344)
{
    // 4749 0021;	
    // (䝉) CJK UNIFIED IDEOGRAPH-4749	[FB80 C749 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4749, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC749, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_345)
{
    // 4749 003F;	
    // (䝉) CJK UNIFIED IDEOGRAPH-4749	[FB80 C749 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4749, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC749, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_346)
{
    // 4749 0061;	
    // (䝉) CJK UNIFIED IDEOGRAPH-4749	[FB80 C749 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4749, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC749, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_347)
{
    // 4749 0041;	
    // (䝉) CJK UNIFIED IDEOGRAPH-4749	[FB80 C749 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4749, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC749, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_348)
{
    // 4749 0062;	
    // (䝉) CJK UNIFIED IDEOGRAPH-4749	[FB80 C749 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4749, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC749, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_349)
{
    // 474A 0021;	
    // (䝊) CJK UNIFIED IDEOGRAPH-474A	[FB80 C74A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC74A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_350)
{
    // 474A 003F;	
    // (䝊) CJK UNIFIED IDEOGRAPH-474A	[FB80 C74A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC74A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_351)
{
    // 474A 0061;	
    // (䝊) CJK UNIFIED IDEOGRAPH-474A	[FB80 C74A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC74A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_352)
{
    // 474A 0041;	
    // (䝊) CJK UNIFIED IDEOGRAPH-474A	[FB80 C74A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x474A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC74A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_353)
{
    // 474A 0062;	
    // (䝊) CJK UNIFIED IDEOGRAPH-474A	[FB80 C74A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC74A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_354)
{
    // 474B 0021;	
    // (䝋) CJK UNIFIED IDEOGRAPH-474B	[FB80 C74B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC74B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_355)
{
    // 474B 003F;	
    // (䝋) CJK UNIFIED IDEOGRAPH-474B	[FB80 C74B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC74B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_356)
{
    // 474B 0061;	
    // (䝋) CJK UNIFIED IDEOGRAPH-474B	[FB80 C74B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC74B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_357)
{
    // 474B 0041;	
    // (䝋) CJK UNIFIED IDEOGRAPH-474B	[FB80 C74B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x474B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC74B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_358)
{
    // 474B 0062;	
    // (䝋) CJK UNIFIED IDEOGRAPH-474B	[FB80 C74B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC74B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_359)
{
    // 474C 0021;	
    // (䝌) CJK UNIFIED IDEOGRAPH-474C	[FB80 C74C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC74C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_360)
{
    // 474C 003F;	
    // (䝌) CJK UNIFIED IDEOGRAPH-474C	[FB80 C74C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC74C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_361)
{
    // 474C 0061;	
    // (䝌) CJK UNIFIED IDEOGRAPH-474C	[FB80 C74C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC74C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_362)
{
    // 474C 0041;	
    // (䝌) CJK UNIFIED IDEOGRAPH-474C	[FB80 C74C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x474C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC74C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_363)
{
    // 474C 0062;	
    // (䝌) CJK UNIFIED IDEOGRAPH-474C	[FB80 C74C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC74C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_364)
{
    // 474D 0021;	
    // (䝍) CJK UNIFIED IDEOGRAPH-474D	[FB80 C74D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC74D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_365)
{
    // 474D 003F;	
    // (䝍) CJK UNIFIED IDEOGRAPH-474D	[FB80 C74D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC74D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_366)
{
    // 474D 0061;	
    // (䝍) CJK UNIFIED IDEOGRAPH-474D	[FB80 C74D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC74D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_367)
{
    // 474D 0041;	
    // (䝍) CJK UNIFIED IDEOGRAPH-474D	[FB80 C74D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x474D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC74D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_368)
{
    // 474D 0062;	
    // (䝍) CJK UNIFIED IDEOGRAPH-474D	[FB80 C74D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC74D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_369)
{
    // 474E 0021;	
    // (䝎) CJK UNIFIED IDEOGRAPH-474E	[FB80 C74E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC74E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_370)
{
    // 474E 003F;	
    // (䝎) CJK UNIFIED IDEOGRAPH-474E	[FB80 C74E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC74E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_371)
{
    // 474E 0061;	
    // (䝎) CJK UNIFIED IDEOGRAPH-474E	[FB80 C74E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC74E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_372)
{
    // 474E 0041;	
    // (䝎) CJK UNIFIED IDEOGRAPH-474E	[FB80 C74E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x474E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC74E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_373)
{
    // 474E 0062;	
    // (䝎) CJK UNIFIED IDEOGRAPH-474E	[FB80 C74E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC74E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_374)
{
    // 474F 0021;	
    // (䝏) CJK UNIFIED IDEOGRAPH-474F	[FB80 C74F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC74F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_375)
{
    // 474F 003F;	
    // (䝏) CJK UNIFIED IDEOGRAPH-474F	[FB80 C74F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC74F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_376)
{
    // 474F 0061;	
    // (䝏) CJK UNIFIED IDEOGRAPH-474F	[FB80 C74F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC74F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_377)
{
    // 474F 0041;	
    // (䝏) CJK UNIFIED IDEOGRAPH-474F	[FB80 C74F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x474F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC74F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_378)
{
    // 474F 0062;	
    // (䝏) CJK UNIFIED IDEOGRAPH-474F	[FB80 C74F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x474F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC74F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_379)
{
    // 4750 0021;	
    // (䝐) CJK UNIFIED IDEOGRAPH-4750	[FB80 C750 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4750, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC750, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_380)
{
    // 4750 003F;	
    // (䝐) CJK UNIFIED IDEOGRAPH-4750	[FB80 C750 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4750, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC750, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_381)
{
    // 4750 0061;	
    // (䝐) CJK UNIFIED IDEOGRAPH-4750	[FB80 C750 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4750, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC750, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_382)
{
    // 4750 0041;	
    // (䝐) CJK UNIFIED IDEOGRAPH-4750	[FB80 C750 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4750, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC750, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_383)
{
    // 4750 0062;	
    // (䝐) CJK UNIFIED IDEOGRAPH-4750	[FB80 C750 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4750, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC750, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_384)
{
    // 4751 0021;	
    // (䝑) CJK UNIFIED IDEOGRAPH-4751	[FB80 C751 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4751, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC751, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_385)
{
    // 4751 003F;	
    // (䝑) CJK UNIFIED IDEOGRAPH-4751	[FB80 C751 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4751, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC751, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_386)
{
    // 4751 0061;	
    // (䝑) CJK UNIFIED IDEOGRAPH-4751	[FB80 C751 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4751, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC751, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_387)
{
    // 4751 0041;	
    // (䝑) CJK UNIFIED IDEOGRAPH-4751	[FB80 C751 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4751, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC751, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_388)
{
    // 4751 0062;	
    // (䝑) CJK UNIFIED IDEOGRAPH-4751	[FB80 C751 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4751, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC751, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_389)
{
    // 4752 0021;	
    // (䝒) CJK UNIFIED IDEOGRAPH-4752	[FB80 C752 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4752, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC752, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_390)
{
    // 4752 003F;	
    // (䝒) CJK UNIFIED IDEOGRAPH-4752	[FB80 C752 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4752, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC752, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_391)
{
    // 4752 0061;	
    // (䝒) CJK UNIFIED IDEOGRAPH-4752	[FB80 C752 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4752, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC752, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_392)
{
    // 4752 0041;	
    // (䝒) CJK UNIFIED IDEOGRAPH-4752	[FB80 C752 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4752, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC752, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_393)
{
    // 4752 0062;	
    // (䝒) CJK UNIFIED IDEOGRAPH-4752	[FB80 C752 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4752, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC752, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_394)
{
    // 4753 0021;	
    // (䝓) CJK UNIFIED IDEOGRAPH-4753	[FB80 C753 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4753, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC753, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_395)
{
    // 4753 003F;	
    // (䝓) CJK UNIFIED IDEOGRAPH-4753	[FB80 C753 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4753, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC753, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_396)
{
    // 4753 0061;	
    // (䝓) CJK UNIFIED IDEOGRAPH-4753	[FB80 C753 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4753, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC753, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_397)
{
    // 4753 0041;	
    // (䝓) CJK UNIFIED IDEOGRAPH-4753	[FB80 C753 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4753, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC753, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_398)
{
    // 4753 0062;	
    // (䝓) CJK UNIFIED IDEOGRAPH-4753	[FB80 C753 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4753, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC753, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_399)
{
    // 4754 0021;	
    // (䝔) CJK UNIFIED IDEOGRAPH-4754	[FB80 C754 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4754, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC754, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_400)
{
    // 4754 003F;	
    // (䝔) CJK UNIFIED IDEOGRAPH-4754	[FB80 C754 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4754, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC754, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_401)
{
    // 4754 0061;	
    // (䝔) CJK UNIFIED IDEOGRAPH-4754	[FB80 C754 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4754, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC754, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_402)
{
    // 4754 0041;	
    // (䝔) CJK UNIFIED IDEOGRAPH-4754	[FB80 C754 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4754, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC754, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_403)
{
    // 4754 0062;	
    // (䝔) CJK UNIFIED IDEOGRAPH-4754	[FB80 C754 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4754, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC754, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_404)
{
    // 4755 0021;	
    // (䝕) CJK UNIFIED IDEOGRAPH-4755	[FB80 C755 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4755, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC755, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_405)
{
    // 4755 003F;	
    // (䝕) CJK UNIFIED IDEOGRAPH-4755	[FB80 C755 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4755, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC755, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_406)
{
    // 4755 0061;	
    // (䝕) CJK UNIFIED IDEOGRAPH-4755	[FB80 C755 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4755, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC755, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_407)
{
    // 4755 0041;	
    // (䝕) CJK UNIFIED IDEOGRAPH-4755	[FB80 C755 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4755, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC755, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_408)
{
    // 4755 0062;	
    // (䝕) CJK UNIFIED IDEOGRAPH-4755	[FB80 C755 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4755, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC755, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_409)
{
    // 4756 0021;	
    // (䝖) CJK UNIFIED IDEOGRAPH-4756	[FB80 C756 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4756, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC756, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_410)
{
    // 4756 003F;	
    // (䝖) CJK UNIFIED IDEOGRAPH-4756	[FB80 C756 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4756, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC756, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_411)
{
    // 4756 0061;	
    // (䝖) CJK UNIFIED IDEOGRAPH-4756	[FB80 C756 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4756, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC756, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_412)
{
    // 4756 0041;	
    // (䝖) CJK UNIFIED IDEOGRAPH-4756	[FB80 C756 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4756, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC756, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_413)
{
    // 4756 0062;	
    // (䝖) CJK UNIFIED IDEOGRAPH-4756	[FB80 C756 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4756, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC756, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_414)
{
    // 4757 0021;	
    // (䝗) CJK UNIFIED IDEOGRAPH-4757	[FB80 C757 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4757, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC757, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_415)
{
    // 4757 003F;	
    // (䝗) CJK UNIFIED IDEOGRAPH-4757	[FB80 C757 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4757, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC757, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_416)
{
    // 4757 0061;	
    // (䝗) CJK UNIFIED IDEOGRAPH-4757	[FB80 C757 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4757, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC757, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_417)
{
    // 4757 0041;	
    // (䝗) CJK UNIFIED IDEOGRAPH-4757	[FB80 C757 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4757, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC757, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_418)
{
    // 4757 0062;	
    // (䝗) CJK UNIFIED IDEOGRAPH-4757	[FB80 C757 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4757, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC757, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_419)
{
    // 4758 0021;	
    // (䝘) CJK UNIFIED IDEOGRAPH-4758	[FB80 C758 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4758, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC758, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_420)
{
    // 4758 003F;	
    // (䝘) CJK UNIFIED IDEOGRAPH-4758	[FB80 C758 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4758, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC758, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_421)
{
    // 4758 0061;	
    // (䝘) CJK UNIFIED IDEOGRAPH-4758	[FB80 C758 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4758, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC758, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_422)
{
    // 4758 0041;	
    // (䝘) CJK UNIFIED IDEOGRAPH-4758	[FB80 C758 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4758, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC758, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_423)
{
    // 4758 0062;	
    // (䝘) CJK UNIFIED IDEOGRAPH-4758	[FB80 C758 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4758, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC758, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_424)
{
    // 4759 0021;	
    // (䝙) CJK UNIFIED IDEOGRAPH-4759	[FB80 C759 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4759, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC759, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_425)
{
    // 4759 003F;	
    // (䝙) CJK UNIFIED IDEOGRAPH-4759	[FB80 C759 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4759, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC759, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_426)
{
    // 4759 0061;	
    // (䝙) CJK UNIFIED IDEOGRAPH-4759	[FB80 C759 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4759, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC759, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_427)
{
    // 4759 0041;	
    // (䝙) CJK UNIFIED IDEOGRAPH-4759	[FB80 C759 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4759, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC759, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_428)
{
    // 4759 0062;	
    // (䝙) CJK UNIFIED IDEOGRAPH-4759	[FB80 C759 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4759, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC759, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_429)
{
    // 475A 0021;	
    // (䝚) CJK UNIFIED IDEOGRAPH-475A	[FB80 C75A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC75A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_430)
{
    // 475A 003F;	
    // (䝚) CJK UNIFIED IDEOGRAPH-475A	[FB80 C75A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC75A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_431)
{
    // 475A 0061;	
    // (䝚) CJK UNIFIED IDEOGRAPH-475A	[FB80 C75A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC75A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_432)
{
    // 475A 0041;	
    // (䝚) CJK UNIFIED IDEOGRAPH-475A	[FB80 C75A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x475A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC75A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_433)
{
    // 475A 0062;	
    // (䝚) CJK UNIFIED IDEOGRAPH-475A	[FB80 C75A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC75A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_434)
{
    // 475B 0021;	
    // (䝛) CJK UNIFIED IDEOGRAPH-475B	[FB80 C75B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC75B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_435)
{
    // 475B 003F;	
    // (䝛) CJK UNIFIED IDEOGRAPH-475B	[FB80 C75B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC75B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_436)
{
    // 475B 0061;	
    // (䝛) CJK UNIFIED IDEOGRAPH-475B	[FB80 C75B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC75B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_437)
{
    // 475B 0041;	
    // (䝛) CJK UNIFIED IDEOGRAPH-475B	[FB80 C75B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x475B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC75B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_438)
{
    // 475B 0062;	
    // (䝛) CJK UNIFIED IDEOGRAPH-475B	[FB80 C75B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC75B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_439)
{
    // 475C 0021;	
    // (䝜) CJK UNIFIED IDEOGRAPH-475C	[FB80 C75C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC75C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_440)
{
    // 475C 003F;	
    // (䝜) CJK UNIFIED IDEOGRAPH-475C	[FB80 C75C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC75C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_441)
{
    // 475C 0061;	
    // (䝜) CJK UNIFIED IDEOGRAPH-475C	[FB80 C75C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC75C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_442)
{
    // 475C 0041;	
    // (䝜) CJK UNIFIED IDEOGRAPH-475C	[FB80 C75C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x475C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC75C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_443)
{
    // 475C 0062;	
    // (䝜) CJK UNIFIED IDEOGRAPH-475C	[FB80 C75C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC75C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_444)
{
    // 475D 0021;	
    // (䝝) CJK UNIFIED IDEOGRAPH-475D	[FB80 C75D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC75D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_445)
{
    // 475D 003F;	
    // (䝝) CJK UNIFIED IDEOGRAPH-475D	[FB80 C75D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC75D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_446)
{
    // 475D 0061;	
    // (䝝) CJK UNIFIED IDEOGRAPH-475D	[FB80 C75D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC75D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_447)
{
    // 475D 0041;	
    // (䝝) CJK UNIFIED IDEOGRAPH-475D	[FB80 C75D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x475D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC75D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_448)
{
    // 475D 0062;	
    // (䝝) CJK UNIFIED IDEOGRAPH-475D	[FB80 C75D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC75D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_449)
{
    // 475E 0021;	
    // (䝞) CJK UNIFIED IDEOGRAPH-475E	[FB80 C75E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC75E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_450)
{
    // 475E 003F;	
    // (䝞) CJK UNIFIED IDEOGRAPH-475E	[FB80 C75E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC75E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_451)
{
    // 475E 0061;	
    // (䝞) CJK UNIFIED IDEOGRAPH-475E	[FB80 C75E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC75E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_452)
{
    // 475E 0041;	
    // (䝞) CJK UNIFIED IDEOGRAPH-475E	[FB80 C75E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x475E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC75E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_453)
{
    // 475E 0062;	
    // (䝞) CJK UNIFIED IDEOGRAPH-475E	[FB80 C75E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC75E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_454)
{
    // 475F 0021;	
    // (䝟) CJK UNIFIED IDEOGRAPH-475F	[FB80 C75F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC75F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_455)
{
    // 475F 003F;	
    // (䝟) CJK UNIFIED IDEOGRAPH-475F	[FB80 C75F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC75F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_456)
{
    // 475F 0061;	
    // (䝟) CJK UNIFIED IDEOGRAPH-475F	[FB80 C75F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC75F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_457)
{
    // 475F 0041;	
    // (䝟) CJK UNIFIED IDEOGRAPH-475F	[FB80 C75F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x475F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC75F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_458)
{
    // 475F 0062;	
    // (䝟) CJK UNIFIED IDEOGRAPH-475F	[FB80 C75F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x475F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC75F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_459)
{
    // 4760 0021;	
    // (䝠) CJK UNIFIED IDEOGRAPH-4760	[FB80 C760 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4760, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC760, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_460)
{
    // 4760 003F;	
    // (䝠) CJK UNIFIED IDEOGRAPH-4760	[FB80 C760 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4760, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC760, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_461)
{
    // 4760 0061;	
    // (䝠) CJK UNIFIED IDEOGRAPH-4760	[FB80 C760 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4760, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC760, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_462)
{
    // 4760 0041;	
    // (䝠) CJK UNIFIED IDEOGRAPH-4760	[FB80 C760 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4760, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC760, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_463)
{
    // 4760 0062;	
    // (䝠) CJK UNIFIED IDEOGRAPH-4760	[FB80 C760 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4760, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC760, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_464)
{
    // 4761 0021;	
    // (䝡) CJK UNIFIED IDEOGRAPH-4761	[FB80 C761 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4761, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC761, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_465)
{
    // 4761 003F;	
    // (䝡) CJK UNIFIED IDEOGRAPH-4761	[FB80 C761 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4761, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC761, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_466)
{
    // 4761 0061;	
    // (䝡) CJK UNIFIED IDEOGRAPH-4761	[FB80 C761 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4761, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC761, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_467)
{
    // 4761 0041;	
    // (䝡) CJK UNIFIED IDEOGRAPH-4761	[FB80 C761 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4761, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC761, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_468)
{
    // 4761 0062;	
    // (䝡) CJK UNIFIED IDEOGRAPH-4761	[FB80 C761 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4761, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC761, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_469)
{
    // 4762 0021;	
    // (䝢) CJK UNIFIED IDEOGRAPH-4762	[FB80 C762 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4762, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC762, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_470)
{
    // 4762 003F;	
    // (䝢) CJK UNIFIED IDEOGRAPH-4762	[FB80 C762 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4762, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC762, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_471)
{
    // 4762 0061;	
    // (䝢) CJK UNIFIED IDEOGRAPH-4762	[FB80 C762 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4762, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC762, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_472)
{
    // 4762 0041;	
    // (䝢) CJK UNIFIED IDEOGRAPH-4762	[FB80 C762 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4762, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC762, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_473)
{
    // 4762 0062;	
    // (䝢) CJK UNIFIED IDEOGRAPH-4762	[FB80 C762 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4762, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC762, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_474)
{
    // 4763 0021;	
    // (䝣) CJK UNIFIED IDEOGRAPH-4763	[FB80 C763 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4763, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC763, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_475)
{
    // 4763 003F;	
    // (䝣) CJK UNIFIED IDEOGRAPH-4763	[FB80 C763 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4763, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC763, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_476)
{
    // 4763 0061;	
    // (䝣) CJK UNIFIED IDEOGRAPH-4763	[FB80 C763 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4763, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC763, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_477)
{
    // 4763 0041;	
    // (䝣) CJK UNIFIED IDEOGRAPH-4763	[FB80 C763 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4763, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC763, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_478)
{
    // 4763 0062;	
    // (䝣) CJK UNIFIED IDEOGRAPH-4763	[FB80 C763 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4763, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC763, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_479)
{
    // 4764 0021;	
    // (䝤) CJK UNIFIED IDEOGRAPH-4764	[FB80 C764 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4764, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC764, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_480)
{
    // 4764 003F;	
    // (䝤) CJK UNIFIED IDEOGRAPH-4764	[FB80 C764 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4764, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC764, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_481)
{
    // 4764 0061;	
    // (䝤) CJK UNIFIED IDEOGRAPH-4764	[FB80 C764 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4764, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC764, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_482)
{
    // 4764 0041;	
    // (䝤) CJK UNIFIED IDEOGRAPH-4764	[FB80 C764 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4764, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC764, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_483)
{
    // 4764 0062;	
    // (䝤) CJK UNIFIED IDEOGRAPH-4764	[FB80 C764 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4764, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC764, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_484)
{
    // 4765 0021;	
    // (䝥) CJK UNIFIED IDEOGRAPH-4765	[FB80 C765 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4765, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC765, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_485)
{
    // 4765 003F;	
    // (䝥) CJK UNIFIED IDEOGRAPH-4765	[FB80 C765 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4765, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC765, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_486)
{
    // 4765 0061;	
    // (䝥) CJK UNIFIED IDEOGRAPH-4765	[FB80 C765 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4765, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC765, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_487)
{
    // 4765 0041;	
    // (䝥) CJK UNIFIED IDEOGRAPH-4765	[FB80 C765 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4765, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC765, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_488)
{
    // 4765 0062;	
    // (䝥) CJK UNIFIED IDEOGRAPH-4765	[FB80 C765 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4765, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC765, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_489)
{
    // 4766 0021;	
    // (䝦) CJK UNIFIED IDEOGRAPH-4766	[FB80 C766 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4766, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC766, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_490)
{
    // 4766 003F;	
    // (䝦) CJK UNIFIED IDEOGRAPH-4766	[FB80 C766 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4766, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC766, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_491)
{
    // 4766 0061;	
    // (䝦) CJK UNIFIED IDEOGRAPH-4766	[FB80 C766 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4766, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC766, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_492)
{
    // 4766 0041;	
    // (䝦) CJK UNIFIED IDEOGRAPH-4766	[FB80 C766 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4766, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC766, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_493)
{
    // 4766 0062;	
    // (䝦) CJK UNIFIED IDEOGRAPH-4766	[FB80 C766 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4766, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC766, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_494)
{
    // 4767 0021;	
    // (䝧) CJK UNIFIED IDEOGRAPH-4767	[FB80 C767 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4767, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC767, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_495)
{
    // 4767 003F;	
    // (䝧) CJK UNIFIED IDEOGRAPH-4767	[FB80 C767 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4767, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC767, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_496)
{
    // 4767 0061;	
    // (䝧) CJK UNIFIED IDEOGRAPH-4767	[FB80 C767 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4767, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC767, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_497)
{
    // 4767 0041;	
    // (䝧) CJK UNIFIED IDEOGRAPH-4767	[FB80 C767 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4767, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC767, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_498)
{
    // 4767 0062;	
    // (䝧) CJK UNIFIED IDEOGRAPH-4767	[FB80 C767 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4767, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC767, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_376_499)
{
    // 4768 0021;	
    // (䝨) CJK UNIFIED IDEOGRAPH-4768	[FB80 C768 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4768, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC768, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

