// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_211_000)
{
    // 19C1 0062;	
    // (ᧁ) NEW TAI LUE LETTER FINAL V	[32D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C1, 0x0062 };
    uint32_t const ces[9] = { 0x32D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_001)
{
    // 19C2 0021;	
    // (ᧂ) NEW TAI LUE LETTER FINAL NG	[32D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C2, 0x0021 };
    uint32_t const ces[9] = { 0x32D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_002)
{
    // 19C2 003F;	
    // (ᧂ) NEW TAI LUE LETTER FINAL NG	[32D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C2, 0x003F };
    uint32_t const ces[9] = { 0x32D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_003)
{
    // 19C2 0061;	
    // (ᧂ) NEW TAI LUE LETTER FINAL NG	[32D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C2, 0x0061 };
    uint32_t const ces[9] = { 0x32D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_004)
{
    // 19C2 0041;	
    // (ᧂ) NEW TAI LUE LETTER FINAL NG	[32D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19C2, 0x0041 };
    uint32_t const ces[9] = { 0x32D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_005)
{
    // 19C2 0062;	
    // (ᧂ) NEW TAI LUE LETTER FINAL NG	[32D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C2, 0x0062 };
    uint32_t const ces[9] = { 0x32D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_006)
{
    // 19C3 0021;	
    // (ᧃ) NEW TAI LUE LETTER FINAL N	[32D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C3, 0x0021 };
    uint32_t const ces[9] = { 0x32D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_007)
{
    // 19C3 003F;	
    // (ᧃ) NEW TAI LUE LETTER FINAL N	[32D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C3, 0x003F };
    uint32_t const ces[9] = { 0x32D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_008)
{
    // 19C3 0061;	
    // (ᧃ) NEW TAI LUE LETTER FINAL N	[32D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C3, 0x0061 };
    uint32_t const ces[9] = { 0x32D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_009)
{
    // 19C3 0041;	
    // (ᧃ) NEW TAI LUE LETTER FINAL N	[32D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19C3, 0x0041 };
    uint32_t const ces[9] = { 0x32D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_010)
{
    // 19C3 0062;	
    // (ᧃ) NEW TAI LUE LETTER FINAL N	[32D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C3, 0x0062 };
    uint32_t const ces[9] = { 0x32D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_011)
{
    // 19C4 0021;	
    // (ᧄ) NEW TAI LUE LETTER FINAL M	[32D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C4, 0x0021 };
    uint32_t const ces[9] = { 0x32D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_012)
{
    // 19C4 003F;	
    // (ᧄ) NEW TAI LUE LETTER FINAL M	[32D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C4, 0x003F };
    uint32_t const ces[9] = { 0x32D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_013)
{
    // 19C4 0061;	
    // (ᧄ) NEW TAI LUE LETTER FINAL M	[32D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C4, 0x0061 };
    uint32_t const ces[9] = { 0x32D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_014)
{
    // 19C4 0041;	
    // (ᧄ) NEW TAI LUE LETTER FINAL M	[32D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19C4, 0x0041 };
    uint32_t const ces[9] = { 0x32D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_015)
{
    // 19C4 0062;	
    // (ᧄ) NEW TAI LUE LETTER FINAL M	[32D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C4, 0x0062 };
    uint32_t const ces[9] = { 0x32D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_016)
{
    // 19C5 0021;	
    // (ᧅ) NEW TAI LUE LETTER FINAL K	[32D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C5, 0x0021 };
    uint32_t const ces[9] = { 0x32D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_017)
{
    // 19C5 003F;	
    // (ᧅ) NEW TAI LUE LETTER FINAL K	[32D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C5, 0x003F };
    uint32_t const ces[9] = { 0x32D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_018)
{
    // 19C5 0061;	
    // (ᧅ) NEW TAI LUE LETTER FINAL K	[32D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C5, 0x0061 };
    uint32_t const ces[9] = { 0x32D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_019)
{
    // 19C5 0041;	
    // (ᧅ) NEW TAI LUE LETTER FINAL K	[32D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19C5, 0x0041 };
    uint32_t const ces[9] = { 0x32D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_020)
{
    // 19C5 0062;	
    // (ᧅ) NEW TAI LUE LETTER FINAL K	[32D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C5, 0x0062 };
    uint32_t const ces[9] = { 0x32D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_021)
{
    // 19C6 0021;	
    // (ᧆ) NEW TAI LUE LETTER FINAL D	[32D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C6, 0x0021 };
    uint32_t const ces[9] = { 0x32D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_022)
{
    // 19C6 003F;	
    // (ᧆ) NEW TAI LUE LETTER FINAL D	[32D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C6, 0x003F };
    uint32_t const ces[9] = { 0x32D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_023)
{
    // 19C6 0061;	
    // (ᧆ) NEW TAI LUE LETTER FINAL D	[32D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C6, 0x0061 };
    uint32_t const ces[9] = { 0x32D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_024)
{
    // 19C6 0041;	
    // (ᧆ) NEW TAI LUE LETTER FINAL D	[32D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19C6, 0x0041 };
    uint32_t const ces[9] = { 0x32D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_025)
{
    // 19C6 0062;	
    // (ᧆ) NEW TAI LUE LETTER FINAL D	[32D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C6, 0x0062 };
    uint32_t const ces[9] = { 0x32D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_026)
{
    // 19C7 0021;	
    // (ᧇ) NEW TAI LUE LETTER FINAL B	[32D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C7, 0x0021 };
    uint32_t const ces[9] = { 0x32D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_027)
{
    // 19C7 003F;	
    // (ᧇ) NEW TAI LUE LETTER FINAL B	[32D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C7, 0x003F };
    uint32_t const ces[9] = { 0x32D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_028)
{
    // 19C7 0061;	
    // (ᧇ) NEW TAI LUE LETTER FINAL B	[32D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C7, 0x0061 };
    uint32_t const ces[9] = { 0x32D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_029)
{
    // 19C7 0041;	
    // (ᧇ) NEW TAI LUE LETTER FINAL B	[32D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19C7, 0x0041 };
    uint32_t const ces[9] = { 0x32D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_030)
{
    // 19C7 0062;	
    // (ᧇ) NEW TAI LUE LETTER FINAL B	[32D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C7, 0x0062 };
    uint32_t const ces[9] = { 0x32D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_031)
{
    // 19C8 0021;	
    // (ᧈ) NEW TAI LUE TONE MARK-1	[32DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C8, 0x0021 };
    uint32_t const ces[9] = { 0x32DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_032)
{
    // 19C8 003F;	
    // (ᧈ) NEW TAI LUE TONE MARK-1	[32DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C8, 0x003F };
    uint32_t const ces[9] = { 0x32DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_033)
{
    // 19C8 0061;	
    // (ᧈ) NEW TAI LUE TONE MARK-1	[32DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C8, 0x0061 };
    uint32_t const ces[9] = { 0x32DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_034)
{
    // 19C8 0041;	
    // (ᧈ) NEW TAI LUE TONE MARK-1	[32DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19C8, 0x0041 };
    uint32_t const ces[9] = { 0x32DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_035)
{
    // 19C8 0062;	
    // (ᧈ) NEW TAI LUE TONE MARK-1	[32DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C8, 0x0062 };
    uint32_t const ces[9] = { 0x32DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_036)
{
    // 19C9 0021;	
    // (ᧉ) NEW TAI LUE TONE MARK-2	[32DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C9, 0x0021 };
    uint32_t const ces[9] = { 0x32DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_037)
{
    // 19C9 003F;	
    // (ᧉ) NEW TAI LUE TONE MARK-2	[32DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C9, 0x003F };
    uint32_t const ces[9] = { 0x32DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_038)
{
    // 19C9 0061;	
    // (ᧉ) NEW TAI LUE TONE MARK-2	[32DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C9, 0x0061 };
    uint32_t const ces[9] = { 0x32DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_039)
{
    // 19C9 0041;	
    // (ᧉ) NEW TAI LUE TONE MARK-2	[32DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19C9, 0x0041 };
    uint32_t const ces[9] = { 0x32DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_040)
{
    // 19C9 0062;	
    // (ᧉ) NEW TAI LUE TONE MARK-2	[32DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19C9, 0x0062 };
    uint32_t const ces[9] = { 0x32DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_041)
{
    // 1A20 0021;	
    // (ᨠ) TAI THAM LETTER HIGH KA	[32DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A20, 0x0021 };
    uint32_t const ces[9] = { 0x32DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_042)
{
    // 1A20 003F;	
    // (ᨠ) TAI THAM LETTER HIGH KA	[32DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A20, 0x003F };
    uint32_t const ces[9] = { 0x32DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_043)
{
    // 1A20 0061;	
    // (ᨠ) TAI THAM LETTER HIGH KA	[32DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A20, 0x0061 };
    uint32_t const ces[9] = { 0x32DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_044)
{
    // 1A20 0041;	
    // (ᨠ) TAI THAM LETTER HIGH KA	[32DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A20, 0x0041 };
    uint32_t const ces[9] = { 0x32DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_045)
{
    // 1A20 0062;	
    // (ᨠ) TAI THAM LETTER HIGH KA	[32DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A20, 0x0062 };
    uint32_t const ces[9] = { 0x32DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_046)
{
    // 1A21 0021;	
    // (ᨡ) TAI THAM LETTER HIGH KHA	[32DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A21, 0x0021 };
    uint32_t const ces[9] = { 0x32DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_047)
{
    // 1A21 003F;	
    // (ᨡ) TAI THAM LETTER HIGH KHA	[32DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A21, 0x003F };
    uint32_t const ces[9] = { 0x32DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_048)
{
    // 1A21 0061;	
    // (ᨡ) TAI THAM LETTER HIGH KHA	[32DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A21, 0x0061 };
    uint32_t const ces[9] = { 0x32DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_049)
{
    // 1A21 0041;	
    // (ᨡ) TAI THAM LETTER HIGH KHA	[32DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A21, 0x0041 };
    uint32_t const ces[9] = { 0x32DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_050)
{
    // 1A21 0062;	
    // (ᨡ) TAI THAM LETTER HIGH KHA	[32DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A21, 0x0062 };
    uint32_t const ces[9] = { 0x32DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_051)
{
    // 1A22 0021;	
    // (ᨢ) TAI THAM LETTER HIGH KXA	[32DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A22, 0x0021 };
    uint32_t const ces[9] = { 0x32DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_052)
{
    // 1A22 003F;	
    // (ᨢ) TAI THAM LETTER HIGH KXA	[32DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A22, 0x003F };
    uint32_t const ces[9] = { 0x32DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_053)
{
    // 1A22 0061;	
    // (ᨢ) TAI THAM LETTER HIGH KXA	[32DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A22, 0x0061 };
    uint32_t const ces[9] = { 0x32DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_054)
{
    // 1A22 0041;	
    // (ᨢ) TAI THAM LETTER HIGH KXA	[32DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A22, 0x0041 };
    uint32_t const ces[9] = { 0x32DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_055)
{
    // 1A22 0062;	
    // (ᨢ) TAI THAM LETTER HIGH KXA	[32DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A22, 0x0062 };
    uint32_t const ces[9] = { 0x32DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_056)
{
    // 1A23 0021;	
    // (ᨣ) TAI THAM LETTER LOW KA	[32DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A23, 0x0021 };
    uint32_t const ces[9] = { 0x32DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_057)
{
    // 1A23 003F;	
    // (ᨣ) TAI THAM LETTER LOW KA	[32DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A23, 0x003F };
    uint32_t const ces[9] = { 0x32DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_058)
{
    // 1A23 0061;	
    // (ᨣ) TAI THAM LETTER LOW KA	[32DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A23, 0x0061 };
    uint32_t const ces[9] = { 0x32DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_059)
{
    // 1A23 0041;	
    // (ᨣ) TAI THAM LETTER LOW KA	[32DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A23, 0x0041 };
    uint32_t const ces[9] = { 0x32DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_060)
{
    // 1A23 0062;	
    // (ᨣ) TAI THAM LETTER LOW KA	[32DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A23, 0x0062 };
    uint32_t const ces[9] = { 0x32DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_061)
{
    // 1A24 0021;	
    // (ᨤ) TAI THAM LETTER LOW KXA	[32E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A24, 0x0021 };
    uint32_t const ces[9] = { 0x32E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_062)
{
    // 1A24 003F;	
    // (ᨤ) TAI THAM LETTER LOW KXA	[32E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A24, 0x003F };
    uint32_t const ces[9] = { 0x32E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_063)
{
    // 1A24 0061;	
    // (ᨤ) TAI THAM LETTER LOW KXA	[32E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A24, 0x0061 };
    uint32_t const ces[9] = { 0x32E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_064)
{
    // 1A24 0041;	
    // (ᨤ) TAI THAM LETTER LOW KXA	[32E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A24, 0x0041 };
    uint32_t const ces[9] = { 0x32E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_065)
{
    // 1A24 0062;	
    // (ᨤ) TAI THAM LETTER LOW KXA	[32E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A24, 0x0062 };
    uint32_t const ces[9] = { 0x32E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_066)
{
    // 1A25 0021;	
    // (ᨥ) TAI THAM LETTER LOW KHA	[32E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A25, 0x0021 };
    uint32_t const ces[9] = { 0x32E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_067)
{
    // 1A25 003F;	
    // (ᨥ) TAI THAM LETTER LOW KHA	[32E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A25, 0x003F };
    uint32_t const ces[9] = { 0x32E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_068)
{
    // 1A25 0061;	
    // (ᨥ) TAI THAM LETTER LOW KHA	[32E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A25, 0x0061 };
    uint32_t const ces[9] = { 0x32E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_069)
{
    // 1A25 0041;	
    // (ᨥ) TAI THAM LETTER LOW KHA	[32E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A25, 0x0041 };
    uint32_t const ces[9] = { 0x32E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_070)
{
    // 1A25 0062;	
    // (ᨥ) TAI THAM LETTER LOW KHA	[32E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A25, 0x0062 };
    uint32_t const ces[9] = { 0x32E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_071)
{
    // 1A26 0021;	
    // (ᨦ) TAI THAM LETTER NGA	[32E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A26, 0x0021 };
    uint32_t const ces[9] = { 0x32E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_072)
{
    // 1A58 0021;	
    // (ᩘ) TAI THAM SIGN MAI KANG LAI	[32E2 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1A58, 0x0021 };
    uint32_t const ces[9] = { 0x32E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_073)
{
    // 1A59 0021;	
    // (ᩙ) TAI THAM CONSONANT SIGN FINAL NGA	[32E2 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1A59, 0x0021 };
    uint32_t const ces[9] = { 0x32E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_074)
{
    // 1A26 003F;	
    // (ᨦ) TAI THAM LETTER NGA	[32E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A26, 0x003F };
    uint32_t const ces[9] = { 0x32E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_075)
{
    // 1A58 003F;	
    // (ᩘ) TAI THAM SIGN MAI KANG LAI	[32E2 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1A58, 0x003F };
    uint32_t const ces[9] = { 0x32E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_076)
{
    // 1A59 003F;	
    // (ᩙ) TAI THAM CONSONANT SIGN FINAL NGA	[32E2 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1A59, 0x003F };
    uint32_t const ces[9] = { 0x32E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_077)
{
    // 1A26 0061;	
    // (ᨦ) TAI THAM LETTER NGA	[32E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A26, 0x0061 };
    uint32_t const ces[9] = { 0x32E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_078)
{
    // 1A26 0041;	
    // (ᨦ) TAI THAM LETTER NGA	[32E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A26, 0x0041 };
    uint32_t const ces[9] = { 0x32E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_079)
{
    // 1A58 0061;	
    // (ᩘ) TAI THAM SIGN MAI KANG LAI	[32E2 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1A58, 0x0061 };
    uint32_t const ces[9] = { 0x32E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_080)
{
    // 1A59 0061;	
    // (ᩙ) TAI THAM CONSONANT SIGN FINAL NGA	[32E2 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1A59, 0x0061 };
    uint32_t const ces[9] = { 0x32E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_081)
{
    // 1A58 0041;	
    // (ᩘ) TAI THAM SIGN MAI KANG LAI	[32E2 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1A58, 0x0041 };
    uint32_t const ces[9] = { 0x32E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_082)
{
    // 1A59 0041;	
    // (ᩙ) TAI THAM CONSONANT SIGN FINAL NGA	[32E2 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1A59, 0x0041 };
    uint32_t const ces[9] = { 0x32E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_083)
{
    // 1A26 0062;	
    // (ᨦ) TAI THAM LETTER NGA	[32E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A26, 0x0062 };
    uint32_t const ces[9] = { 0x32E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_084)
{
    // 1A58 0062;	
    // (ᩘ) TAI THAM SIGN MAI KANG LAI	[32E2 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1A58, 0x0062 };
    uint32_t const ces[9] = { 0x32E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_085)
{
    // 1A59 0062;	
    // (ᩙ) TAI THAM CONSONANT SIGN FINAL NGA	[32E2 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1A59, 0x0062 };
    uint32_t const ces[9] = { 0x32E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_086)
{
    // 1A27 0021;	
    // (ᨧ) TAI THAM LETTER HIGH CA	[32E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A27, 0x0021 };
    uint32_t const ces[9] = { 0x32E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_087)
{
    // 1A27 003F;	
    // (ᨧ) TAI THAM LETTER HIGH CA	[32E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A27, 0x003F };
    uint32_t const ces[9] = { 0x32E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_088)
{
    // 1A27 0061;	
    // (ᨧ) TAI THAM LETTER HIGH CA	[32E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A27, 0x0061 };
    uint32_t const ces[9] = { 0x32E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_089)
{
    // 1A27 0041;	
    // (ᨧ) TAI THAM LETTER HIGH CA	[32E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A27, 0x0041 };
    uint32_t const ces[9] = { 0x32E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_090)
{
    // 1A27 0062;	
    // (ᨧ) TAI THAM LETTER HIGH CA	[32E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A27, 0x0062 };
    uint32_t const ces[9] = { 0x32E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_091)
{
    // 1A28 0021;	
    // (ᨨ) TAI THAM LETTER HIGH CHA	[32E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A28, 0x0021 };
    uint32_t const ces[9] = { 0x32E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_092)
{
    // 1A28 003F;	
    // (ᨨ) TAI THAM LETTER HIGH CHA	[32E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A28, 0x003F };
    uint32_t const ces[9] = { 0x32E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_093)
{
    // 1A28 0061;	
    // (ᨨ) TAI THAM LETTER HIGH CHA	[32E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A28, 0x0061 };
    uint32_t const ces[9] = { 0x32E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_094)
{
    // 1A28 0041;	
    // (ᨨ) TAI THAM LETTER HIGH CHA	[32E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A28, 0x0041 };
    uint32_t const ces[9] = { 0x32E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_095)
{
    // 1A28 0062;	
    // (ᨨ) TAI THAM LETTER HIGH CHA	[32E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A28, 0x0062 };
    uint32_t const ces[9] = { 0x32E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_096)
{
    // 1A29 0021;	
    // (ᨩ) TAI THAM LETTER LOW CA	[32E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A29, 0x0021 };
    uint32_t const ces[9] = { 0x32E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_097)
{
    // 1A29 003F;	
    // (ᨩ) TAI THAM LETTER LOW CA	[32E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A29, 0x003F };
    uint32_t const ces[9] = { 0x32E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_098)
{
    // 1A29 0061;	
    // (ᨩ) TAI THAM LETTER LOW CA	[32E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A29, 0x0061 };
    uint32_t const ces[9] = { 0x32E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_099)
{
    // 1A29 0041;	
    // (ᨩ) TAI THAM LETTER LOW CA	[32E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A29, 0x0041 };
    uint32_t const ces[9] = { 0x32E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_100)
{
    // 1A29 0062;	
    // (ᨩ) TAI THAM LETTER LOW CA	[32E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A29, 0x0062 };
    uint32_t const ces[9] = { 0x32E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_101)
{
    // 1A2A 0021;	
    // (ᨪ) TAI THAM LETTER LOW SA	[32E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2A, 0x0021 };
    uint32_t const ces[9] = { 0x32E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_102)
{
    // 1A2A 003F;	
    // (ᨪ) TAI THAM LETTER LOW SA	[32E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2A, 0x003F };
    uint32_t const ces[9] = { 0x32E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_103)
{
    // 1A2A 0061;	
    // (ᨪ) TAI THAM LETTER LOW SA	[32E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2A, 0x0061 };
    uint32_t const ces[9] = { 0x32E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_104)
{
    // 1A2A 0041;	
    // (ᨪ) TAI THAM LETTER LOW SA	[32E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A2A, 0x0041 };
    uint32_t const ces[9] = { 0x32E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_105)
{
    // 1A2A 0062;	
    // (ᨪ) TAI THAM LETTER LOW SA	[32E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2A, 0x0062 };
    uint32_t const ces[9] = { 0x32E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_106)
{
    // 1A2B 0021;	
    // (ᨫ) TAI THAM LETTER LOW CHA	[32E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2B, 0x0021 };
    uint32_t const ces[9] = { 0x32E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_107)
{
    // 1A2B 003F;	
    // (ᨫ) TAI THAM LETTER LOW CHA	[32E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2B, 0x003F };
    uint32_t const ces[9] = { 0x32E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_108)
{
    // 1A2B 0061;	
    // (ᨫ) TAI THAM LETTER LOW CHA	[32E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2B, 0x0061 };
    uint32_t const ces[9] = { 0x32E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_109)
{
    // 1A2B 0041;	
    // (ᨫ) TAI THAM LETTER LOW CHA	[32E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A2B, 0x0041 };
    uint32_t const ces[9] = { 0x32E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_110)
{
    // 1A2B 0062;	
    // (ᨫ) TAI THAM LETTER LOW CHA	[32E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2B, 0x0062 };
    uint32_t const ces[9] = { 0x32E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_111)
{
    // 1A2C 0021;	
    // (ᨬ) TAI THAM LETTER NYA	[32E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2C, 0x0021 };
    uint32_t const ces[9] = { 0x32E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_112)
{
    // 1A2C 003F;	
    // (ᨬ) TAI THAM LETTER NYA	[32E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2C, 0x003F };
    uint32_t const ces[9] = { 0x32E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_113)
{
    // 1A2C 0061;	
    // (ᨬ) TAI THAM LETTER NYA	[32E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2C, 0x0061 };
    uint32_t const ces[9] = { 0x32E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_114)
{
    // 1A2C 0041;	
    // (ᨬ) TAI THAM LETTER NYA	[32E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A2C, 0x0041 };
    uint32_t const ces[9] = { 0x32E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_115)
{
    // 1A2C 0062;	
    // (ᨬ) TAI THAM LETTER NYA	[32E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2C, 0x0062 };
    uint32_t const ces[9] = { 0x32E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_116)
{
    // 1A2D 0021;	
    // (ᨭ) TAI THAM LETTER RATA	[32E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2D, 0x0021 };
    uint32_t const ces[9] = { 0x32E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_117)
{
    // 1A2D 003F;	
    // (ᨭ) TAI THAM LETTER RATA	[32E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2D, 0x003F };
    uint32_t const ces[9] = { 0x32E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_118)
{
    // 1A2D 0061;	
    // (ᨭ) TAI THAM LETTER RATA	[32E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2D, 0x0061 };
    uint32_t const ces[9] = { 0x32E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_119)
{
    // 1A2D 0041;	
    // (ᨭ) TAI THAM LETTER RATA	[32E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A2D, 0x0041 };
    uint32_t const ces[9] = { 0x32E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_120)
{
    // 1A2D 0062;	
    // (ᨭ) TAI THAM LETTER RATA	[32E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2D, 0x0062 };
    uint32_t const ces[9] = { 0x32E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_121)
{
    // 1A2E 0021;	
    // (ᨮ) TAI THAM LETTER HIGH RATHA	[32EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2E, 0x0021 };
    uint32_t const ces[9] = { 0x32EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_122)
{
    // 1A2E 003F;	
    // (ᨮ) TAI THAM LETTER HIGH RATHA	[32EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2E, 0x003F };
    uint32_t const ces[9] = { 0x32EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_123)
{
    // 1A2E 0061;	
    // (ᨮ) TAI THAM LETTER HIGH RATHA	[32EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2E, 0x0061 };
    uint32_t const ces[9] = { 0x32EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_124)
{
    // 1A2E 0041;	
    // (ᨮ) TAI THAM LETTER HIGH RATHA	[32EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A2E, 0x0041 };
    uint32_t const ces[9] = { 0x32EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_125)
{
    // 1A2E 0062;	
    // (ᨮ) TAI THAM LETTER HIGH RATHA	[32EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2E, 0x0062 };
    uint32_t const ces[9] = { 0x32EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_126)
{
    // 1A2F 0021;	
    // (ᨯ) TAI THAM LETTER DA	[32EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2F, 0x0021 };
    uint32_t const ces[9] = { 0x32EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_127)
{
    // 1A2F 003F;	
    // (ᨯ) TAI THAM LETTER DA	[32EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2F, 0x003F };
    uint32_t const ces[9] = { 0x32EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_128)
{
    // 1A2F 0061;	
    // (ᨯ) TAI THAM LETTER DA	[32EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2F, 0x0061 };
    uint32_t const ces[9] = { 0x32EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_129)
{
    // 1A2F 0041;	
    // (ᨯ) TAI THAM LETTER DA	[32EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A2F, 0x0041 };
    uint32_t const ces[9] = { 0x32EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_130)
{
    // 1A2F 0062;	
    // (ᨯ) TAI THAM LETTER DA	[32EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A2F, 0x0062 };
    uint32_t const ces[9] = { 0x32EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_131)
{
    // 1A30 0021;	
    // (ᨰ) TAI THAM LETTER LOW RATHA	[32EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A30, 0x0021 };
    uint32_t const ces[9] = { 0x32EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_132)
{
    // 1A30 003F;	
    // (ᨰ) TAI THAM LETTER LOW RATHA	[32EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A30, 0x003F };
    uint32_t const ces[9] = { 0x32EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_133)
{
    // 1A30 0061;	
    // (ᨰ) TAI THAM LETTER LOW RATHA	[32EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A30, 0x0061 };
    uint32_t const ces[9] = { 0x32EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_134)
{
    // 1A30 0041;	
    // (ᨰ) TAI THAM LETTER LOW RATHA	[32EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A30, 0x0041 };
    uint32_t const ces[9] = { 0x32EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_135)
{
    // 1A30 0062;	
    // (ᨰ) TAI THAM LETTER LOW RATHA	[32EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A30, 0x0062 };
    uint32_t const ces[9] = { 0x32EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_136)
{
    // 1A31 0021;	
    // (ᨱ) TAI THAM LETTER RANA	[32ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A31, 0x0021 };
    uint32_t const ces[9] = { 0x32ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_137)
{
    // 1A31 003F;	
    // (ᨱ) TAI THAM LETTER RANA	[32ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A31, 0x003F };
    uint32_t const ces[9] = { 0x32ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_138)
{
    // 1A31 0061;	
    // (ᨱ) TAI THAM LETTER RANA	[32ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A31, 0x0061 };
    uint32_t const ces[9] = { 0x32ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_139)
{
    // 1A31 0041;	
    // (ᨱ) TAI THAM LETTER RANA	[32ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A31, 0x0041 };
    uint32_t const ces[9] = { 0x32ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_140)
{
    // 1A31 0062;	
    // (ᨱ) TAI THAM LETTER RANA	[32ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A31, 0x0062 };
    uint32_t const ces[9] = { 0x32ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_141)
{
    // 1A32 0021;	
    // (ᨲ) TAI THAM LETTER HIGH TA	[32EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A32, 0x0021 };
    uint32_t const ces[9] = { 0x32EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_142)
{
    // 1A32 003F;	
    // (ᨲ) TAI THAM LETTER HIGH TA	[32EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A32, 0x003F };
    uint32_t const ces[9] = { 0x32EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_143)
{
    // 1A32 0061;	
    // (ᨲ) TAI THAM LETTER HIGH TA	[32EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A32, 0x0061 };
    uint32_t const ces[9] = { 0x32EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_144)
{
    // 1A32 0041;	
    // (ᨲ) TAI THAM LETTER HIGH TA	[32EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A32, 0x0041 };
    uint32_t const ces[9] = { 0x32EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_145)
{
    // 1A32 0062;	
    // (ᨲ) TAI THAM LETTER HIGH TA	[32EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A32, 0x0062 };
    uint32_t const ces[9] = { 0x32EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_146)
{
    // 1A33 0021;	
    // (ᨳ) TAI THAM LETTER HIGH THA	[32EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A33, 0x0021 };
    uint32_t const ces[9] = { 0x32EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_147)
{
    // 1A33 003F;	
    // (ᨳ) TAI THAM LETTER HIGH THA	[32EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A33, 0x003F };
    uint32_t const ces[9] = { 0x32EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_148)
{
    // 1A33 0061;	
    // (ᨳ) TAI THAM LETTER HIGH THA	[32EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A33, 0x0061 };
    uint32_t const ces[9] = { 0x32EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_149)
{
    // 1A33 0041;	
    // (ᨳ) TAI THAM LETTER HIGH THA	[32EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A33, 0x0041 };
    uint32_t const ces[9] = { 0x32EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_150)
{
    // 1A33 0062;	
    // (ᨳ) TAI THAM LETTER HIGH THA	[32EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A33, 0x0062 };
    uint32_t const ces[9] = { 0x32EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_151)
{
    // 1A34 0021;	
    // (ᨴ) TAI THAM LETTER LOW TA	[32F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A34, 0x0021 };
    uint32_t const ces[9] = { 0x32F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_152)
{
    // 1A34 003F;	
    // (ᨴ) TAI THAM LETTER LOW TA	[32F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A34, 0x003F };
    uint32_t const ces[9] = { 0x32F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_153)
{
    // 1A34 0061;	
    // (ᨴ) TAI THAM LETTER LOW TA	[32F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A34, 0x0061 };
    uint32_t const ces[9] = { 0x32F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_154)
{
    // 1A34 0041;	
    // (ᨴ) TAI THAM LETTER LOW TA	[32F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A34, 0x0041 };
    uint32_t const ces[9] = { 0x32F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_155)
{
    // 1A34 0062;	
    // (ᨴ) TAI THAM LETTER LOW TA	[32F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A34, 0x0062 };
    uint32_t const ces[9] = { 0x32F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_156)
{
    // 1A35 0021;	
    // (ᨵ) TAI THAM LETTER LOW THA	[32F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A35, 0x0021 };
    uint32_t const ces[9] = { 0x32F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_157)
{
    // 1A35 003F;	
    // (ᨵ) TAI THAM LETTER LOW THA	[32F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A35, 0x003F };
    uint32_t const ces[9] = { 0x32F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_158)
{
    // 1A35 0061;	
    // (ᨵ) TAI THAM LETTER LOW THA	[32F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A35, 0x0061 };
    uint32_t const ces[9] = { 0x32F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_159)
{
    // 1A35 0041;	
    // (ᨵ) TAI THAM LETTER LOW THA	[32F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A35, 0x0041 };
    uint32_t const ces[9] = { 0x32F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_160)
{
    // 1A35 0062;	
    // (ᨵ) TAI THAM LETTER LOW THA	[32F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A35, 0x0062 };
    uint32_t const ces[9] = { 0x32F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_161)
{
    // 1A36 0021;	
    // (ᨶ) TAI THAM LETTER NA	[32F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A36, 0x0021 };
    uint32_t const ces[9] = { 0x32F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_162)
{
    // 1A36 003F;	
    // (ᨶ) TAI THAM LETTER NA	[32F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A36, 0x003F };
    uint32_t const ces[9] = { 0x32F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_163)
{
    // 1A36 0061;	
    // (ᨶ) TAI THAM LETTER NA	[32F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A36, 0x0061 };
    uint32_t const ces[9] = { 0x32F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_164)
{
    // 1A36 0041;	
    // (ᨶ) TAI THAM LETTER NA	[32F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A36, 0x0041 };
    uint32_t const ces[9] = { 0x32F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_165)
{
    // 1A36 0062;	
    // (ᨶ) TAI THAM LETTER NA	[32F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A36, 0x0062 };
    uint32_t const ces[9] = { 0x32F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_166)
{
    // 1A37 0021;	
    // (ᨷ) TAI THAM LETTER BA	[32F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A37, 0x0021 };
    uint32_t const ces[9] = { 0x32F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_167)
{
    // 1A37 003F;	
    // (ᨷ) TAI THAM LETTER BA	[32F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A37, 0x003F };
    uint32_t const ces[9] = { 0x32F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_168)
{
    // 1A37 0061;	
    // (ᨷ) TAI THAM LETTER BA	[32F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A37, 0x0061 };
    uint32_t const ces[9] = { 0x32F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_169)
{
    // 1A37 0041;	
    // (ᨷ) TAI THAM LETTER BA	[32F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A37, 0x0041 };
    uint32_t const ces[9] = { 0x32F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_170)
{
    // 1A37 0062;	
    // (ᨷ) TAI THAM LETTER BA	[32F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A37, 0x0062 };
    uint32_t const ces[9] = { 0x32F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_171)
{
    // 1A38 0021;	
    // (ᨸ) TAI THAM LETTER HIGH PA	[32F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A38, 0x0021 };
    uint32_t const ces[9] = { 0x32F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_172)
{
    // 1A38 003F;	
    // (ᨸ) TAI THAM LETTER HIGH PA	[32F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A38, 0x003F };
    uint32_t const ces[9] = { 0x32F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_173)
{
    // 1A38 0061;	
    // (ᨸ) TAI THAM LETTER HIGH PA	[32F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A38, 0x0061 };
    uint32_t const ces[9] = { 0x32F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_174)
{
    // 1A38 0041;	
    // (ᨸ) TAI THAM LETTER HIGH PA	[32F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A38, 0x0041 };
    uint32_t const ces[9] = { 0x32F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_175)
{
    // 1A38 0062;	
    // (ᨸ) TAI THAM LETTER HIGH PA	[32F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A38, 0x0062 };
    uint32_t const ces[9] = { 0x32F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_176)
{
    // 1A39 0021;	
    // (ᨹ) TAI THAM LETTER HIGH PHA	[32F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A39, 0x0021 };
    uint32_t const ces[9] = { 0x32F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_177)
{
    // 1A39 003F;	
    // (ᨹ) TAI THAM LETTER HIGH PHA	[32F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A39, 0x003F };
    uint32_t const ces[9] = { 0x32F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_178)
{
    // 1A39 0061;	
    // (ᨹ) TAI THAM LETTER HIGH PHA	[32F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A39, 0x0061 };
    uint32_t const ces[9] = { 0x32F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_179)
{
    // 1A39 0041;	
    // (ᨹ) TAI THAM LETTER HIGH PHA	[32F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A39, 0x0041 };
    uint32_t const ces[9] = { 0x32F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_180)
{
    // 1A39 0062;	
    // (ᨹ) TAI THAM LETTER HIGH PHA	[32F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A39, 0x0062 };
    uint32_t const ces[9] = { 0x32F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_181)
{
    // 1A3A 0021;	
    // (ᨺ) TAI THAM LETTER HIGH FA	[32F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3A, 0x0021 };
    uint32_t const ces[9] = { 0x32F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_182)
{
    // 1A3A 003F;	
    // (ᨺ) TAI THAM LETTER HIGH FA	[32F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3A, 0x003F };
    uint32_t const ces[9] = { 0x32F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_183)
{
    // 1A3A 0061;	
    // (ᨺ) TAI THAM LETTER HIGH FA	[32F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3A, 0x0061 };
    uint32_t const ces[9] = { 0x32F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_184)
{
    // 1A3A 0041;	
    // (ᨺ) TAI THAM LETTER HIGH FA	[32F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A3A, 0x0041 };
    uint32_t const ces[9] = { 0x32F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_185)
{
    // 1A3A 0062;	
    // (ᨺ) TAI THAM LETTER HIGH FA	[32F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3A, 0x0062 };
    uint32_t const ces[9] = { 0x32F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_186)
{
    // 1A3B 0021;	
    // (ᨻ) TAI THAM LETTER LOW PA	[32F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3B, 0x0021 };
    uint32_t const ces[9] = { 0x32F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_187)
{
    // 1A5A 0021;	
    // (ᩚ) TAI THAM CONSONANT SIGN LOW PA	[32F7 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1A5A, 0x0021 };
    uint32_t const ces[9] = { 0x32F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_188)
{
    // 1A5B 0021;	
    // (ᩛ) TAI THAM CONSONANT SIGN HIGH RATHA OR LOW PA	[32F7 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1A5B, 0x0021 };
    uint32_t const ces[9] = { 0x32F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_189)
{
    // 1A3B 003F;	
    // (ᨻ) TAI THAM LETTER LOW PA	[32F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3B, 0x003F };
    uint32_t const ces[9] = { 0x32F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_190)
{
    // 1A5A 003F;	
    // (ᩚ) TAI THAM CONSONANT SIGN LOW PA	[32F7 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1A5A, 0x003F };
    uint32_t const ces[9] = { 0x32F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_191)
{
    // 1A5B 003F;	
    // (ᩛ) TAI THAM CONSONANT SIGN HIGH RATHA OR LOW PA	[32F7 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1A5B, 0x003F };
    uint32_t const ces[9] = { 0x32F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_192)
{
    // 1A3B 0061;	
    // (ᨻ) TAI THAM LETTER LOW PA	[32F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3B, 0x0061 };
    uint32_t const ces[9] = { 0x32F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_193)
{
    // 1A3B 0041;	
    // (ᨻ) TAI THAM LETTER LOW PA	[32F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A3B, 0x0041 };
    uint32_t const ces[9] = { 0x32F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_194)
{
    // 1A5A 0061;	
    // (ᩚ) TAI THAM CONSONANT SIGN LOW PA	[32F7 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1A5A, 0x0061 };
    uint32_t const ces[9] = { 0x32F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_195)
{
    // 1A5B 0061;	
    // (ᩛ) TAI THAM CONSONANT SIGN HIGH RATHA OR LOW PA	[32F7 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1A5B, 0x0061 };
    uint32_t const ces[9] = { 0x32F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_196)
{
    // 1A5A 0041;	
    // (ᩚ) TAI THAM CONSONANT SIGN LOW PA	[32F7 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1A5A, 0x0041 };
    uint32_t const ces[9] = { 0x32F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_197)
{
    // 1A5B 0041;	
    // (ᩛ) TAI THAM CONSONANT SIGN HIGH RATHA OR LOW PA	[32F7 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1A5B, 0x0041 };
    uint32_t const ces[9] = { 0x32F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_198)
{
    // 1A3B 0062;	
    // (ᨻ) TAI THAM LETTER LOW PA	[32F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3B, 0x0062 };
    uint32_t const ces[9] = { 0x32F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_199)
{
    // 1A5A 0062;	
    // (ᩚ) TAI THAM CONSONANT SIGN LOW PA	[32F7 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1A5A, 0x0062 };
    uint32_t const ces[9] = { 0x32F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_200)
{
    // 1A5B 0062;	
    // (ᩛ) TAI THAM CONSONANT SIGN HIGH RATHA OR LOW PA	[32F7 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1A5B, 0x0062 };
    uint32_t const ces[9] = { 0x32F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_201)
{
    // 1A3C 0021;	
    // (ᨼ) TAI THAM LETTER LOW FA	[32F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3C, 0x0021 };
    uint32_t const ces[9] = { 0x32F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_202)
{
    // 1A3C 003F;	
    // (ᨼ) TAI THAM LETTER LOW FA	[32F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3C, 0x003F };
    uint32_t const ces[9] = { 0x32F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_203)
{
    // 1A3C 0061;	
    // (ᨼ) TAI THAM LETTER LOW FA	[32F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3C, 0x0061 };
    uint32_t const ces[9] = { 0x32F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_204)
{
    // 1A3C 0041;	
    // (ᨼ) TAI THAM LETTER LOW FA	[32F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A3C, 0x0041 };
    uint32_t const ces[9] = { 0x32F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_205)
{
    // 1A3C 0062;	
    // (ᨼ) TAI THAM LETTER LOW FA	[32F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3C, 0x0062 };
    uint32_t const ces[9] = { 0x32F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_206)
{
    // 1A3D 0021;	
    // (ᨽ) TAI THAM LETTER LOW PHA	[32F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3D, 0x0021 };
    uint32_t const ces[9] = { 0x32F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_207)
{
    // 1A3D 003F;	
    // (ᨽ) TAI THAM LETTER LOW PHA	[32F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3D, 0x003F };
    uint32_t const ces[9] = { 0x32F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_208)
{
    // 1A3D 0061;	
    // (ᨽ) TAI THAM LETTER LOW PHA	[32F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3D, 0x0061 };
    uint32_t const ces[9] = { 0x32F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_209)
{
    // 1A3D 0041;	
    // (ᨽ) TAI THAM LETTER LOW PHA	[32F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A3D, 0x0041 };
    uint32_t const ces[9] = { 0x32F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_210)
{
    // 1A3D 0062;	
    // (ᨽ) TAI THAM LETTER LOW PHA	[32F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3D, 0x0062 };
    uint32_t const ces[9] = { 0x32F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_211)
{
    // 1A3E 0021;	
    // (ᨾ) TAI THAM LETTER MA	[32FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3E, 0x0021 };
    uint32_t const ces[9] = { 0x32FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_212)
{
    // 1A3E 003F;	
    // (ᨾ) TAI THAM LETTER MA	[32FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3E, 0x003F };
    uint32_t const ces[9] = { 0x32FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_213)
{
    // 1A3E 0061;	
    // (ᨾ) TAI THAM LETTER MA	[32FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3E, 0x0061 };
    uint32_t const ces[9] = { 0x32FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_214)
{
    // 1A3E 0041;	
    // (ᨾ) TAI THAM LETTER MA	[32FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A3E, 0x0041 };
    uint32_t const ces[9] = { 0x32FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_215)
{
    // 1A3E 0062;	
    // (ᨾ) TAI THAM LETTER MA	[32FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3E, 0x0062 };
    uint32_t const ces[9] = { 0x32FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_216)
{
    // 1A3F 0021;	
    // (ᨿ) TAI THAM LETTER LOW YA	[32FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3F, 0x0021 };
    uint32_t const ces[9] = { 0x32FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_217)
{
    // 1A3F 003F;	
    // (ᨿ) TAI THAM LETTER LOW YA	[32FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3F, 0x003F };
    uint32_t const ces[9] = { 0x32FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_218)
{
    // 1A3F 0061;	
    // (ᨿ) TAI THAM LETTER LOW YA	[32FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3F, 0x0061 };
    uint32_t const ces[9] = { 0x32FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_219)
{
    // 1A3F 0041;	
    // (ᨿ) TAI THAM LETTER LOW YA	[32FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A3F, 0x0041 };
    uint32_t const ces[9] = { 0x32FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_220)
{
    // 1A3F 0062;	
    // (ᨿ) TAI THAM LETTER LOW YA	[32FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A3F, 0x0062 };
    uint32_t const ces[9] = { 0x32FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_221)
{
    // 1A40 0021;	
    // (ᩀ) TAI THAM LETTER HIGH YA	[32FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A40, 0x0021 };
    uint32_t const ces[9] = { 0x32FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_222)
{
    // 1A40 003F;	
    // (ᩀ) TAI THAM LETTER HIGH YA	[32FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A40, 0x003F };
    uint32_t const ces[9] = { 0x32FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_223)
{
    // 1A40 0061;	
    // (ᩀ) TAI THAM LETTER HIGH YA	[32FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A40, 0x0061 };
    uint32_t const ces[9] = { 0x32FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_224)
{
    // 1A40 0041;	
    // (ᩀ) TAI THAM LETTER HIGH YA	[32FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A40, 0x0041 };
    uint32_t const ces[9] = { 0x32FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_225)
{
    // 1A40 0062;	
    // (ᩀ) TAI THAM LETTER HIGH YA	[32FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A40, 0x0062 };
    uint32_t const ces[9] = { 0x32FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_226)
{
    // 1A41 0021;	
    // (ᩁ) TAI THAM LETTER RA	[32FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A41, 0x0021 };
    uint32_t const ces[9] = { 0x32FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_227)
{
    // 1A41 003F;	
    // (ᩁ) TAI THAM LETTER RA	[32FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A41, 0x003F };
    uint32_t const ces[9] = { 0x32FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_228)
{
    // 1A41 0061;	
    // (ᩁ) TAI THAM LETTER RA	[32FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A41, 0x0061 };
    uint32_t const ces[9] = { 0x32FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_229)
{
    // 1A41 0041;	
    // (ᩁ) TAI THAM LETTER RA	[32FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A41, 0x0041 };
    uint32_t const ces[9] = { 0x32FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_230)
{
    // 1A41 0062;	
    // (ᩁ) TAI THAM LETTER RA	[32FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A41, 0x0062 };
    uint32_t const ces[9] = { 0x32FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_231)
{
    // 1A42 0021;	
    // (ᩂ) TAI THAM LETTER RUE	[32FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A42, 0x0021 };
    uint32_t const ces[9] = { 0x32FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_232)
{
    // 1A42 003F;	
    // (ᩂ) TAI THAM LETTER RUE	[32FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A42, 0x003F };
    uint32_t const ces[9] = { 0x32FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_233)
{
    // 1A42 0061;	
    // (ᩂ) TAI THAM LETTER RUE	[32FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A42, 0x0061 };
    uint32_t const ces[9] = { 0x32FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_234)
{
    // 1A42 0041;	
    // (ᩂ) TAI THAM LETTER RUE	[32FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A42, 0x0041 };
    uint32_t const ces[9] = { 0x32FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_235)
{
    // 1A42 0062;	
    // (ᩂ) TAI THAM LETTER RUE	[32FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A42, 0x0062 };
    uint32_t const ces[9] = { 0x32FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_236)
{
    // 1A43 0021;	
    // (ᩃ) TAI THAM LETTER LA	[32FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A43, 0x0021 };
    uint32_t const ces[9] = { 0x32FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_237)
{
    // 1A43 003F;	
    // (ᩃ) TAI THAM LETTER LA	[32FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A43, 0x003F };
    uint32_t const ces[9] = { 0x32FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_238)
{
    // 1A43 0061;	
    // (ᩃ) TAI THAM LETTER LA	[32FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A43, 0x0061 };
    uint32_t const ces[9] = { 0x32FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_239)
{
    // 1A43 0041;	
    // (ᩃ) TAI THAM LETTER LA	[32FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A43, 0x0041 };
    uint32_t const ces[9] = { 0x32FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_240)
{
    // 1A43 0062;	
    // (ᩃ) TAI THAM LETTER LA	[32FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A43, 0x0062 };
    uint32_t const ces[9] = { 0x32FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_241)
{
    // 1A44 0021;	
    // (ᩄ) TAI THAM LETTER LUE	[3300 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A44, 0x0021 };
    uint32_t const ces[9] = { 0x3300, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_242)
{
    // 1A44 003F;	
    // (ᩄ) TAI THAM LETTER LUE	[3300 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A44, 0x003F };
    uint32_t const ces[9] = { 0x3300, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_243)
{
    // 1A44 0061;	
    // (ᩄ) TAI THAM LETTER LUE	[3300 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A44, 0x0061 };
    uint32_t const ces[9] = { 0x3300, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_244)
{
    // 1A44 0041;	
    // (ᩄ) TAI THAM LETTER LUE	[3300 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A44, 0x0041 };
    uint32_t const ces[9] = { 0x3300, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_245)
{
    // 1A44 0062;	
    // (ᩄ) TAI THAM LETTER LUE	[3300 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A44, 0x0062 };
    uint32_t const ces[9] = { 0x3300, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_246)
{
    // 1A45 0021;	
    // (ᩅ) TAI THAM LETTER WA	[3301 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A45, 0x0021 };
    uint32_t const ces[9] = { 0x3301, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_247)
{
    // 1A45 003F;	
    // (ᩅ) TAI THAM LETTER WA	[3301 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A45, 0x003F };
    uint32_t const ces[9] = { 0x3301, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_248)
{
    // 1A45 0061;	
    // (ᩅ) TAI THAM LETTER WA	[3301 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A45, 0x0061 };
    uint32_t const ces[9] = { 0x3301, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_249)
{
    // 1A45 0041;	
    // (ᩅ) TAI THAM LETTER WA	[3301 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A45, 0x0041 };
    uint32_t const ces[9] = { 0x3301, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_250)
{
    // 1A45 0062;	
    // (ᩅ) TAI THAM LETTER WA	[3301 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A45, 0x0062 };
    uint32_t const ces[9] = { 0x3301, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_251)
{
    // 1A46 0021;	
    // (ᩆ) TAI THAM LETTER HIGH SHA	[3302 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A46, 0x0021 };
    uint32_t const ces[9] = { 0x3302, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_252)
{
    // 1A46 003F;	
    // (ᩆ) TAI THAM LETTER HIGH SHA	[3302 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A46, 0x003F };
    uint32_t const ces[9] = { 0x3302, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_253)
{
    // 1A46 0061;	
    // (ᩆ) TAI THAM LETTER HIGH SHA	[3302 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A46, 0x0061 };
    uint32_t const ces[9] = { 0x3302, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_254)
{
    // 1A46 0041;	
    // (ᩆ) TAI THAM LETTER HIGH SHA	[3302 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A46, 0x0041 };
    uint32_t const ces[9] = { 0x3302, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_255)
{
    // 1A46 0062;	
    // (ᩆ) TAI THAM LETTER HIGH SHA	[3302 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A46, 0x0062 };
    uint32_t const ces[9] = { 0x3302, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_256)
{
    // 1A54 0021;	
    // (ᩔ) TAI THAM LETTER GREAT SA	[3302 3328 3302 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1A54, 0x0021 };
    uint32_t const ces[15] = { 0x3302, 0x3328, 0x3302, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_257)
{
    // 1A54 003F;	
    // (ᩔ) TAI THAM LETTER GREAT SA	[3302 3328 3302 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1A54, 0x003F };
    uint32_t const ces[15] = { 0x3302, 0x3328, 0x3302, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_258)
{
    // 1A54 0061;	
    // (ᩔ) TAI THAM LETTER GREAT SA	[3302 3328 3302 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1A54, 0x0061 };
    uint32_t const ces[15] = { 0x3302, 0x3328, 0x3302, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_259)
{
    // 1A54 0041;	
    // (ᩔ) TAI THAM LETTER GREAT SA	[3302 3328 3302 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1A54, 0x0041 };
    uint32_t const ces[15] = { 0x3302, 0x3328, 0x3302, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_260)
{
    // 1A54 0062;	
    // (ᩔ) TAI THAM LETTER GREAT SA	[3302 3328 3302 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1A54, 0x0062 };
    uint32_t const ces[15] = { 0x3302, 0x3328, 0x3302, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_261)
{
    // 1A47 0021;	
    // (ᩇ) TAI THAM LETTER HIGH SSA	[3303 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A47, 0x0021 };
    uint32_t const ces[9] = { 0x3303, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_262)
{
    // 1A47 003F;	
    // (ᩇ) TAI THAM LETTER HIGH SSA	[3303 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A47, 0x003F };
    uint32_t const ces[9] = { 0x3303, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_263)
{
    // 1A47 0061;	
    // (ᩇ) TAI THAM LETTER HIGH SSA	[3303 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A47, 0x0061 };
    uint32_t const ces[9] = { 0x3303, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_264)
{
    // 1A47 0041;	
    // (ᩇ) TAI THAM LETTER HIGH SSA	[3303 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A47, 0x0041 };
    uint32_t const ces[9] = { 0x3303, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_265)
{
    // 1A47 0062;	
    // (ᩇ) TAI THAM LETTER HIGH SSA	[3303 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A47, 0x0062 };
    uint32_t const ces[9] = { 0x3303, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_266)
{
    // 1A48 0021;	
    // (ᩈ) TAI THAM LETTER HIGH SA	[3304 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A48, 0x0021 };
    uint32_t const ces[9] = { 0x3304, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_267)
{
    // 1A48 003F;	
    // (ᩈ) TAI THAM LETTER HIGH SA	[3304 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A48, 0x003F };
    uint32_t const ces[9] = { 0x3304, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_268)
{
    // 1A48 0061;	
    // (ᩈ) TAI THAM LETTER HIGH SA	[3304 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A48, 0x0061 };
    uint32_t const ces[9] = { 0x3304, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_269)
{
    // 1A48 0041;	
    // (ᩈ) TAI THAM LETTER HIGH SA	[3304 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A48, 0x0041 };
    uint32_t const ces[9] = { 0x3304, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_270)
{
    // 1A48 0062;	
    // (ᩈ) TAI THAM LETTER HIGH SA	[3304 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A48, 0x0062 };
    uint32_t const ces[9] = { 0x3304, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_271)
{
    // 1A49 0021;	
    // (ᩉ) TAI THAM LETTER HIGH HA	[3305 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A49, 0x0021 };
    uint32_t const ces[9] = { 0x3305, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_272)
{
    // 1A49 003F;	
    // (ᩉ) TAI THAM LETTER HIGH HA	[3305 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A49, 0x003F };
    uint32_t const ces[9] = { 0x3305, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_273)
{
    // 1A49 0061;	
    // (ᩉ) TAI THAM LETTER HIGH HA	[3305 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A49, 0x0061 };
    uint32_t const ces[9] = { 0x3305, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_274)
{
    // 1A49 0041;	
    // (ᩉ) TAI THAM LETTER HIGH HA	[3305 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A49, 0x0041 };
    uint32_t const ces[9] = { 0x3305, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_275)
{
    // 1A49 0062;	
    // (ᩉ) TAI THAM LETTER HIGH HA	[3305 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A49, 0x0062 };
    uint32_t const ces[9] = { 0x3305, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_276)
{
    // 1A4A 0021;	
    // (ᩊ) TAI THAM LETTER LLA	[3306 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4A, 0x0021 };
    uint32_t const ces[9] = { 0x3306, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_277)
{
    // 1A4A 003F;	
    // (ᩊ) TAI THAM LETTER LLA	[3306 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4A, 0x003F };
    uint32_t const ces[9] = { 0x3306, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_278)
{
    // 1A4A 0061;	
    // (ᩊ) TAI THAM LETTER LLA	[3306 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4A, 0x0061 };
    uint32_t const ces[9] = { 0x3306, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_279)
{
    // 1A4A 0041;	
    // (ᩊ) TAI THAM LETTER LLA	[3306 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A4A, 0x0041 };
    uint32_t const ces[9] = { 0x3306, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_280)
{
    // 1A4A 0062;	
    // (ᩊ) TAI THAM LETTER LLA	[3306 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4A, 0x0062 };
    uint32_t const ces[9] = { 0x3306, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_281)
{
    // 1A4B 0021;	
    // (ᩋ) TAI THAM LETTER A	[3307 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4B, 0x0021 };
    uint32_t const ces[9] = { 0x3307, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_282)
{
    // 1A4B 003F;	
    // (ᩋ) TAI THAM LETTER A	[3307 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4B, 0x003F };
    uint32_t const ces[9] = { 0x3307, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_283)
{
    // 1A4B 0061;	
    // (ᩋ) TAI THAM LETTER A	[3307 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4B, 0x0061 };
    uint32_t const ces[9] = { 0x3307, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_284)
{
    // 1A4B 0041;	
    // (ᩋ) TAI THAM LETTER A	[3307 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A4B, 0x0041 };
    uint32_t const ces[9] = { 0x3307, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_285)
{
    // 1A4B 0062;	
    // (ᩋ) TAI THAM LETTER A	[3307 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4B, 0x0062 };
    uint32_t const ces[9] = { 0x3307, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_286)
{
    // 1A4C 0021;	
    // (ᩌ) TAI THAM LETTER LOW HA	[3308 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4C, 0x0021 };
    uint32_t const ces[9] = { 0x3308, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_287)
{
    // 1A4C 003F;	
    // (ᩌ) TAI THAM LETTER LOW HA	[3308 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4C, 0x003F };
    uint32_t const ces[9] = { 0x3308, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_288)
{
    // 1A4C 0061;	
    // (ᩌ) TAI THAM LETTER LOW HA	[3308 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4C, 0x0061 };
    uint32_t const ces[9] = { 0x3308, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_289)
{
    // 1A4C 0041;	
    // (ᩌ) TAI THAM LETTER LOW HA	[3308 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A4C, 0x0041 };
    uint32_t const ces[9] = { 0x3308, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_290)
{
    // 1A4C 0062;	
    // (ᩌ) TAI THAM LETTER LOW HA	[3308 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4C, 0x0062 };
    uint32_t const ces[9] = { 0x3308, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_291)
{
    // 1A53 0021;	
    // (ᩓ) TAI THAM LETTER LAE	[3309 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A53, 0x0021 };
    uint32_t const ces[9] = { 0x3309, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_292)
{
    // 1A53 003F;	
    // (ᩓ) TAI THAM LETTER LAE	[3309 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A53, 0x003F };
    uint32_t const ces[9] = { 0x3309, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_293)
{
    // 1A53 0061;	
    // (ᩓ) TAI THAM LETTER LAE	[3309 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A53, 0x0061 };
    uint32_t const ces[9] = { 0x3309, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_294)
{
    // 1A53 0041;	
    // (ᩓ) TAI THAM LETTER LAE	[3309 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A53, 0x0041 };
    uint32_t const ces[9] = { 0x3309, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_295)
{
    // 1A53 0062;	
    // (ᩓ) TAI THAM LETTER LAE	[3309 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A53, 0x0062 };
    uint32_t const ces[9] = { 0x3309, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_296)
{
    // 1A6B 0021;	
    // (ᩫ) TAI THAM VOWEL SIGN O	[330A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6B, 0x0021 };
    uint32_t const ces[9] = { 0x330A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_297)
{
    // 1A6B 003F;	
    // (ᩫ) TAI THAM VOWEL SIGN O	[330A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6B, 0x003F };
    uint32_t const ces[9] = { 0x330A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_298)
{
    // 1A6B 0061;	
    // (ᩫ) TAI THAM VOWEL SIGN O	[330A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6B, 0x0061 };
    uint32_t const ces[9] = { 0x330A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_299)
{
    // 1A6B 0041;	
    // (ᩫ) TAI THAM VOWEL SIGN O	[330A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A6B, 0x0041 };
    uint32_t const ces[9] = { 0x330A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_300)
{
    // 1A6B 0062;	
    // (ᩫ) TAI THAM VOWEL SIGN O	[330A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6B, 0x0062 };
    uint32_t const ces[9] = { 0x330A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_301)
{
    // 1A55 0021;	
    // (ᩕ) TAI THAM CONSONANT SIGN MEDIAL RA	[330B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A55, 0x0021 };
    uint32_t const ces[9] = { 0x330B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_302)
{
    // 1A55 003F;	
    // (ᩕ) TAI THAM CONSONANT SIGN MEDIAL RA	[330B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A55, 0x003F };
    uint32_t const ces[9] = { 0x330B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_303)
{
    // 1A55 0061;	
    // (ᩕ) TAI THAM CONSONANT SIGN MEDIAL RA	[330B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A55, 0x0061 };
    uint32_t const ces[9] = { 0x330B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_304)
{
    // 1A55 0041;	
    // (ᩕ) TAI THAM CONSONANT SIGN MEDIAL RA	[330B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A55, 0x0041 };
    uint32_t const ces[9] = { 0x330B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_305)
{
    // 1A55 0062;	
    // (ᩕ) TAI THAM CONSONANT SIGN MEDIAL RA	[330B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A55, 0x0062 };
    uint32_t const ces[9] = { 0x330B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_306)
{
    // 1A56 0021;	
    // (ᩖ) TAI THAM CONSONANT SIGN MEDIAL LA	[330C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A56, 0x0021 };
    uint32_t const ces[9] = { 0x330C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_307)
{
    // 1A56 003F;	
    // (ᩖ) TAI THAM CONSONANT SIGN MEDIAL LA	[330C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A56, 0x003F };
    uint32_t const ces[9] = { 0x330C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_308)
{
    // 1A56 0061;	
    // (ᩖ) TAI THAM CONSONANT SIGN MEDIAL LA	[330C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A56, 0x0061 };
    uint32_t const ces[9] = { 0x330C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_309)
{
    // 1A56 0041;	
    // (ᩖ) TAI THAM CONSONANT SIGN MEDIAL LA	[330C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A56, 0x0041 };
    uint32_t const ces[9] = { 0x330C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_310)
{
    // 1A56 0062;	
    // (ᩖ) TAI THAM CONSONANT SIGN MEDIAL LA	[330C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A56, 0x0062 };
    uint32_t const ces[9] = { 0x330C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_311)
{
    // 1A57 0021;	
    // (ᩗ) TAI THAM CONSONANT SIGN LA TANG LAI	[330D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A57, 0x0021 };
    uint32_t const ces[9] = { 0x330D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_312)
{
    // 1A57 003F;	
    // (ᩗ) TAI THAM CONSONANT SIGN LA TANG LAI	[330D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A57, 0x003F };
    uint32_t const ces[9] = { 0x330D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_313)
{
    // 1A57 0061;	
    // (ᩗ) TAI THAM CONSONANT SIGN LA TANG LAI	[330D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A57, 0x0061 };
    uint32_t const ces[9] = { 0x330D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_314)
{
    // 1A57 0041;	
    // (ᩗ) TAI THAM CONSONANT SIGN LA TANG LAI	[330D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A57, 0x0041 };
    uint32_t const ces[9] = { 0x330D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_315)
{
    // 1A57 0062;	
    // (ᩗ) TAI THAM CONSONANT SIGN LA TANG LAI	[330D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A57, 0x0062 };
    uint32_t const ces[9] = { 0x330D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_316)
{
    // 1A5C 0021;	
    // (ᩜ) TAI THAM CONSONANT SIGN MA	[330E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A5C, 0x0021 };
    uint32_t const ces[9] = { 0x330E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_317)
{
    // 1A5C 003F;	
    // (ᩜ) TAI THAM CONSONANT SIGN MA	[330E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A5C, 0x003F };
    uint32_t const ces[9] = { 0x330E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_318)
{
    // 1A5C 0061;	
    // (ᩜ) TAI THAM CONSONANT SIGN MA	[330E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A5C, 0x0061 };
    uint32_t const ces[9] = { 0x330E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_319)
{
    // 1A5C 0041;	
    // (ᩜ) TAI THAM CONSONANT SIGN MA	[330E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A5C, 0x0041 };
    uint32_t const ces[9] = { 0x330E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_320)
{
    // 1A5C 0062;	
    // (ᩜ) TAI THAM CONSONANT SIGN MA	[330E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A5C, 0x0062 };
    uint32_t const ces[9] = { 0x330E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_321)
{
    // 1A5D 0021;	
    // (ᩝ) TAI THAM CONSONANT SIGN BA	[330F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A5D, 0x0021 };
    uint32_t const ces[9] = { 0x330F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_322)
{
    // 1A5D 003F;	
    // (ᩝ) TAI THAM CONSONANT SIGN BA	[330F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A5D, 0x003F };
    uint32_t const ces[9] = { 0x330F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_323)
{
    // 1A5D 0061;	
    // (ᩝ) TAI THAM CONSONANT SIGN BA	[330F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A5D, 0x0061 };
    uint32_t const ces[9] = { 0x330F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_324)
{
    // 1A5D 0041;	
    // (ᩝ) TAI THAM CONSONANT SIGN BA	[330F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A5D, 0x0041 };
    uint32_t const ces[9] = { 0x330F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_325)
{
    // 1A5D 0062;	
    // (ᩝ) TAI THAM CONSONANT SIGN BA	[330F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A5D, 0x0062 };
    uint32_t const ces[9] = { 0x330F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_326)
{
    // 1A5E 0021;	
    // (ᩞ) TAI THAM CONSONANT SIGN SA	[3310 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A5E, 0x0021 };
    uint32_t const ces[9] = { 0x3310, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_327)
{
    // 1A5E 003F;	
    // (ᩞ) TAI THAM CONSONANT SIGN SA	[3310 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A5E, 0x003F };
    uint32_t const ces[9] = { 0x3310, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_328)
{
    // 1A5E 0061;	
    // (ᩞ) TAI THAM CONSONANT SIGN SA	[3310 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A5E, 0x0061 };
    uint32_t const ces[9] = { 0x3310, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_329)
{
    // 1A5E 0041;	
    // (ᩞ) TAI THAM CONSONANT SIGN SA	[3310 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A5E, 0x0041 };
    uint32_t const ces[9] = { 0x3310, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_330)
{
    // 1A5E 0062;	
    // (ᩞ) TAI THAM CONSONANT SIGN SA	[3310 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A5E, 0x0062 };
    uint32_t const ces[9] = { 0x3310, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_331)
{
    // 1A4D 0021;	
    // (ᩍ) TAI THAM LETTER I	[3311 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4D, 0x0021 };
    uint32_t const ces[9] = { 0x3311, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_332)
{
    // 1A4D 003F;	
    // (ᩍ) TAI THAM LETTER I	[3311 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4D, 0x003F };
    uint32_t const ces[9] = { 0x3311, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_333)
{
    // 1A4D 0061;	
    // (ᩍ) TAI THAM LETTER I	[3311 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4D, 0x0061 };
    uint32_t const ces[9] = { 0x3311, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_334)
{
    // 1A4D 0041;	
    // (ᩍ) TAI THAM LETTER I	[3311 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A4D, 0x0041 };
    uint32_t const ces[9] = { 0x3311, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_335)
{
    // 1A4D 0062;	
    // (ᩍ) TAI THAM LETTER I	[3311 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4D, 0x0062 };
    uint32_t const ces[9] = { 0x3311, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_336)
{
    // 1A4E 0021;	
    // (ᩎ) TAI THAM LETTER II	[3312 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4E, 0x0021 };
    uint32_t const ces[9] = { 0x3312, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_337)
{
    // 1A4E 003F;	
    // (ᩎ) TAI THAM LETTER II	[3312 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4E, 0x003F };
    uint32_t const ces[9] = { 0x3312, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_338)
{
    // 1A4E 0061;	
    // (ᩎ) TAI THAM LETTER II	[3312 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4E, 0x0061 };
    uint32_t const ces[9] = { 0x3312, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_339)
{
    // 1A4E 0041;	
    // (ᩎ) TAI THAM LETTER II	[3312 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A4E, 0x0041 };
    uint32_t const ces[9] = { 0x3312, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_340)
{
    // 1A4E 0062;	
    // (ᩎ) TAI THAM LETTER II	[3312 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4E, 0x0062 };
    uint32_t const ces[9] = { 0x3312, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_341)
{
    // 1A4F 0021;	
    // (ᩏ) TAI THAM LETTER U	[3313 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4F, 0x0021 };
    uint32_t const ces[9] = { 0x3313, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_342)
{
    // 1A4F 003F;	
    // (ᩏ) TAI THAM LETTER U	[3313 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4F, 0x003F };
    uint32_t const ces[9] = { 0x3313, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_343)
{
    // 1A4F 0061;	
    // (ᩏ) TAI THAM LETTER U	[3313 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4F, 0x0061 };
    uint32_t const ces[9] = { 0x3313, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_344)
{
    // 1A4F 0041;	
    // (ᩏ) TAI THAM LETTER U	[3313 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A4F, 0x0041 };
    uint32_t const ces[9] = { 0x3313, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_345)
{
    // 1A4F 0062;	
    // (ᩏ) TAI THAM LETTER U	[3313 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A4F, 0x0062 };
    uint32_t const ces[9] = { 0x3313, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_346)
{
    // 1A50 0021;	
    // (ᩐ) TAI THAM LETTER UU	[3314 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A50, 0x0021 };
    uint32_t const ces[9] = { 0x3314, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_347)
{
    // 1A50 003F;	
    // (ᩐ) TAI THAM LETTER UU	[3314 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A50, 0x003F };
    uint32_t const ces[9] = { 0x3314, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_348)
{
    // 1A50 0061;	
    // (ᩐ) TAI THAM LETTER UU	[3314 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A50, 0x0061 };
    uint32_t const ces[9] = { 0x3314, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_349)
{
    // 1A50 0041;	
    // (ᩐ) TAI THAM LETTER UU	[3314 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A50, 0x0041 };
    uint32_t const ces[9] = { 0x3314, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_350)
{
    // 1A50 0062;	
    // (ᩐ) TAI THAM LETTER UU	[3314 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A50, 0x0062 };
    uint32_t const ces[9] = { 0x3314, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_351)
{
    // 1A51 0021;	
    // (ᩑ) TAI THAM LETTER EE	[3315 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A51, 0x0021 };
    uint32_t const ces[9] = { 0x3315, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_352)
{
    // 1A51 003F;	
    // (ᩑ) TAI THAM LETTER EE	[3315 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A51, 0x003F };
    uint32_t const ces[9] = { 0x3315, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_353)
{
    // 1A51 0061;	
    // (ᩑ) TAI THAM LETTER EE	[3315 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A51, 0x0061 };
    uint32_t const ces[9] = { 0x3315, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_354)
{
    // 1A51 0041;	
    // (ᩑ) TAI THAM LETTER EE	[3315 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A51, 0x0041 };
    uint32_t const ces[9] = { 0x3315, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_355)
{
    // 1A51 0062;	
    // (ᩑ) TAI THAM LETTER EE	[3315 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A51, 0x0062 };
    uint32_t const ces[9] = { 0x3315, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_356)
{
    // 1A52 0021;	
    // (ᩒ) TAI THAM LETTER OO	[3316 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A52, 0x0021 };
    uint32_t const ces[9] = { 0x3316, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_357)
{
    // 1A52 003F;	
    // (ᩒ) TAI THAM LETTER OO	[3316 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A52, 0x003F };
    uint32_t const ces[9] = { 0x3316, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_358)
{
    // 1A52 0061;	
    // (ᩒ) TAI THAM LETTER OO	[3316 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A52, 0x0061 };
    uint32_t const ces[9] = { 0x3316, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_359)
{
    // 1A52 0041;	
    // (ᩒ) TAI THAM LETTER OO	[3316 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A52, 0x0041 };
    uint32_t const ces[9] = { 0x3316, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_360)
{
    // 1A52 0062;	
    // (ᩒ) TAI THAM LETTER OO	[3316 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A52, 0x0062 };
    uint32_t const ces[9] = { 0x3316, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_361)
{
    // 1A61 0021;	
    // (ᩡ) TAI THAM VOWEL SIGN A	[3317 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A61, 0x0021 };
    uint32_t const ces[9] = { 0x3317, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_362)
{
    // 1A61 003F;	
    // (ᩡ) TAI THAM VOWEL SIGN A	[3317 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A61, 0x003F };
    uint32_t const ces[9] = { 0x3317, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_363)
{
    // 1A61 0061;	
    // (ᩡ) TAI THAM VOWEL SIGN A	[3317 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A61, 0x0061 };
    uint32_t const ces[9] = { 0x3317, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_364)
{
    // 1A61 0041;	
    // (ᩡ) TAI THAM VOWEL SIGN A	[3317 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A61, 0x0041 };
    uint32_t const ces[9] = { 0x3317, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_365)
{
    // 1A61 0062;	
    // (ᩡ) TAI THAM VOWEL SIGN A	[3317 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A61, 0x0062 };
    uint32_t const ces[9] = { 0x3317, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_366)
{
    // 1A6C 0021;	
    // (ᩬ) TAI THAM VOWEL SIGN OA BELOW	[3318 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6C, 0x0021 };
    uint32_t const ces[9] = { 0x3318, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_367)
{
    // 1A6C 003F;	
    // (ᩬ) TAI THAM VOWEL SIGN OA BELOW	[3318 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6C, 0x003F };
    uint32_t const ces[9] = { 0x3318, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_368)
{
    // 1A6C 0061;	
    // (ᩬ) TAI THAM VOWEL SIGN OA BELOW	[3318 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6C, 0x0061 };
    uint32_t const ces[9] = { 0x3318, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_369)
{
    // 1A6C 0041;	
    // (ᩬ) TAI THAM VOWEL SIGN OA BELOW	[3318 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A6C, 0x0041 };
    uint32_t const ces[9] = { 0x3318, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_370)
{
    // 1A6C 0062;	
    // (ᩬ) TAI THAM VOWEL SIGN OA BELOW	[3318 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6C, 0x0062 };
    uint32_t const ces[9] = { 0x3318, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_371)
{
    // 1A62 0021;	
    // (ᩢ) TAI THAM VOWEL SIGN MAI SAT	[3319 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A62, 0x0021 };
    uint32_t const ces[9] = { 0x3319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_372)
{
    // 1A62 003F;	
    // (ᩢ) TAI THAM VOWEL SIGN MAI SAT	[3319 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A62, 0x003F };
    uint32_t const ces[9] = { 0x3319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_373)
{
    // 1A62 0061;	
    // (ᩢ) TAI THAM VOWEL SIGN MAI SAT	[3319 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A62, 0x0061 };
    uint32_t const ces[9] = { 0x3319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_374)
{
    // 1A62 0041;	
    // (ᩢ) TAI THAM VOWEL SIGN MAI SAT	[3319 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A62, 0x0041 };
    uint32_t const ces[9] = { 0x3319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_375)
{
    // 1A62 0062;	
    // (ᩢ) TAI THAM VOWEL SIGN MAI SAT	[3319 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A62, 0x0062 };
    uint32_t const ces[9] = { 0x3319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_376)
{
    // 1A63 0021;	
    // (ᩣ) TAI THAM VOWEL SIGN AA	[331A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A63, 0x0021 };
    uint32_t const ces[9] = { 0x331A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_377)
{
    // 1A64 0021;	
    // (ᩤ) TAI THAM VOWEL SIGN TALL AA	[331A 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1A64, 0x0021 };
    uint32_t const ces[9] = { 0x331A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_378)
{
    // 1A63 003F;	
    // (ᩣ) TAI THAM VOWEL SIGN AA	[331A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A63, 0x003F };
    uint32_t const ces[9] = { 0x331A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_379)
{
    // 1A64 003F;	
    // (ᩤ) TAI THAM VOWEL SIGN TALL AA	[331A 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1A64, 0x003F };
    uint32_t const ces[9] = { 0x331A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_380)
{
    // 1A63 0061;	
    // (ᩣ) TAI THAM VOWEL SIGN AA	[331A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A63, 0x0061 };
    uint32_t const ces[9] = { 0x331A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_381)
{
    // 1A63 0041;	
    // (ᩣ) TAI THAM VOWEL SIGN AA	[331A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A63, 0x0041 };
    uint32_t const ces[9] = { 0x331A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_382)
{
    // 1A64 0061;	
    // (ᩤ) TAI THAM VOWEL SIGN TALL AA	[331A 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1A64, 0x0061 };
    uint32_t const ces[9] = { 0x331A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_383)
{
    // 1A64 0041;	
    // (ᩤ) TAI THAM VOWEL SIGN TALL AA	[331A 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1A64, 0x0041 };
    uint32_t const ces[9] = { 0x331A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_384)
{
    // 1A63 0062;	
    // (ᩣ) TAI THAM VOWEL SIGN AA	[331A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A63, 0x0062 };
    uint32_t const ces[9] = { 0x331A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_385)
{
    // 1A64 0062;	
    // (ᩤ) TAI THAM VOWEL SIGN TALL AA	[331A 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1A64, 0x0062 };
    uint32_t const ces[9] = { 0x331A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_386)
{
    // 1A65 0021;	
    // (ᩥ) TAI THAM VOWEL SIGN I	[331B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A65, 0x0021 };
    uint32_t const ces[9] = { 0x331B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_387)
{
    // 1A65 003F;	
    // (ᩥ) TAI THAM VOWEL SIGN I	[331B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A65, 0x003F };
    uint32_t const ces[9] = { 0x331B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_388)
{
    // 1A65 0061;	
    // (ᩥ) TAI THAM VOWEL SIGN I	[331B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A65, 0x0061 };
    uint32_t const ces[9] = { 0x331B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_389)
{
    // 1A65 0041;	
    // (ᩥ) TAI THAM VOWEL SIGN I	[331B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A65, 0x0041 };
    uint32_t const ces[9] = { 0x331B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_390)
{
    // 1A65 0062;	
    // (ᩥ) TAI THAM VOWEL SIGN I	[331B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A65, 0x0062 };
    uint32_t const ces[9] = { 0x331B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_391)
{
    // 1A66 0021;	
    // (ᩦ) TAI THAM VOWEL SIGN II	[331C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A66, 0x0021 };
    uint32_t const ces[9] = { 0x331C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_392)
{
    // 1A66 003F;	
    // (ᩦ) TAI THAM VOWEL SIGN II	[331C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A66, 0x003F };
    uint32_t const ces[9] = { 0x331C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_393)
{
    // 1A66 0061;	
    // (ᩦ) TAI THAM VOWEL SIGN II	[331C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A66, 0x0061 };
    uint32_t const ces[9] = { 0x331C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_394)
{
    // 1A66 0041;	
    // (ᩦ) TAI THAM VOWEL SIGN II	[331C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A66, 0x0041 };
    uint32_t const ces[9] = { 0x331C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_395)
{
    // 1A66 0062;	
    // (ᩦ) TAI THAM VOWEL SIGN II	[331C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A66, 0x0062 };
    uint32_t const ces[9] = { 0x331C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_396)
{
    // 1A67 0021;	
    // (ᩧ) TAI THAM VOWEL SIGN UE	[331D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A67, 0x0021 };
    uint32_t const ces[9] = { 0x331D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_397)
{
    // 1A67 003F;	
    // (ᩧ) TAI THAM VOWEL SIGN UE	[331D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A67, 0x003F };
    uint32_t const ces[9] = { 0x331D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_398)
{
    // 1A67 0061;	
    // (ᩧ) TAI THAM VOWEL SIGN UE	[331D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A67, 0x0061 };
    uint32_t const ces[9] = { 0x331D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_399)
{
    // 1A67 0041;	
    // (ᩧ) TAI THAM VOWEL SIGN UE	[331D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A67, 0x0041 };
    uint32_t const ces[9] = { 0x331D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_400)
{
    // 1A67 0062;	
    // (ᩧ) TAI THAM VOWEL SIGN UE	[331D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A67, 0x0062 };
    uint32_t const ces[9] = { 0x331D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_401)
{
    // 1A68 0021;	
    // (ᩨ) TAI THAM VOWEL SIGN UUE	[331E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A68, 0x0021 };
    uint32_t const ces[9] = { 0x331E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_402)
{
    // 1A68 003F;	
    // (ᩨ) TAI THAM VOWEL SIGN UUE	[331E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A68, 0x003F };
    uint32_t const ces[9] = { 0x331E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_403)
{
    // 1A68 0061;	
    // (ᩨ) TAI THAM VOWEL SIGN UUE	[331E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A68, 0x0061 };
    uint32_t const ces[9] = { 0x331E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_404)
{
    // 1A68 0041;	
    // (ᩨ) TAI THAM VOWEL SIGN UUE	[331E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A68, 0x0041 };
    uint32_t const ces[9] = { 0x331E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_405)
{
    // 1A68 0062;	
    // (ᩨ) TAI THAM VOWEL SIGN UUE	[331E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A68, 0x0062 };
    uint32_t const ces[9] = { 0x331E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_406)
{
    // 1A69 0021;	
    // (ᩩ) TAI THAM VOWEL SIGN U	[331F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A69, 0x0021 };
    uint32_t const ces[9] = { 0x331F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_407)
{
    // 1A69 003F;	
    // (ᩩ) TAI THAM VOWEL SIGN U	[331F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A69, 0x003F };
    uint32_t const ces[9] = { 0x331F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_408)
{
    // 1A69 0061;	
    // (ᩩ) TAI THAM VOWEL SIGN U	[331F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A69, 0x0061 };
    uint32_t const ces[9] = { 0x331F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_409)
{
    // 1A69 0041;	
    // (ᩩ) TAI THAM VOWEL SIGN U	[331F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A69, 0x0041 };
    uint32_t const ces[9] = { 0x331F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_410)
{
    // 1A69 0062;	
    // (ᩩ) TAI THAM VOWEL SIGN U	[331F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A69, 0x0062 };
    uint32_t const ces[9] = { 0x331F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_411)
{
    // 1A6A 0021;	
    // (ᩪ) TAI THAM VOWEL SIGN UU	[3320 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6A, 0x0021 };
    uint32_t const ces[9] = { 0x3320, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_412)
{
    // 1A6A 003F;	
    // (ᩪ) TAI THAM VOWEL SIGN UU	[3320 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6A, 0x003F };
    uint32_t const ces[9] = { 0x3320, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_413)
{
    // 1A6A 0061;	
    // (ᩪ) TAI THAM VOWEL SIGN UU	[3320 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6A, 0x0061 };
    uint32_t const ces[9] = { 0x3320, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_414)
{
    // 1A6A 0041;	
    // (ᩪ) TAI THAM VOWEL SIGN UU	[3320 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A6A, 0x0041 };
    uint32_t const ces[9] = { 0x3320, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_415)
{
    // 1A6A 0062;	
    // (ᩪ) TAI THAM VOWEL SIGN UU	[3320 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6A, 0x0062 };
    uint32_t const ces[9] = { 0x3320, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_416)
{
    // 1A6E 0021;	
    // (ᩮ) TAI THAM VOWEL SIGN E	[3321 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6E, 0x0021 };
    uint32_t const ces[9] = { 0x3321, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_417)
{
    // 1A6E 003F;	
    // (ᩮ) TAI THAM VOWEL SIGN E	[3321 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6E, 0x003F };
    uint32_t const ces[9] = { 0x3321, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_418)
{
    // 1A6E 0061;	
    // (ᩮ) TAI THAM VOWEL SIGN E	[3321 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6E, 0x0061 };
    uint32_t const ces[9] = { 0x3321, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_419)
{
    // 1A6E 0041;	
    // (ᩮ) TAI THAM VOWEL SIGN E	[3321 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A6E, 0x0041 };
    uint32_t const ces[9] = { 0x3321, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_420)
{
    // 1A6E 0062;	
    // (ᩮ) TAI THAM VOWEL SIGN E	[3321 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6E, 0x0062 };
    uint32_t const ces[9] = { 0x3321, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_421)
{
    // 1A6F 0021;	
    // (ᩯ) TAI THAM VOWEL SIGN AE	[3322 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6F, 0x0021 };
    uint32_t const ces[9] = { 0x3322, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_422)
{
    // 1A6F 003F;	
    // (ᩯ) TAI THAM VOWEL SIGN AE	[3322 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6F, 0x003F };
    uint32_t const ces[9] = { 0x3322, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_423)
{
    // 1A6F 0061;	
    // (ᩯ) TAI THAM VOWEL SIGN AE	[3322 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6F, 0x0061 };
    uint32_t const ces[9] = { 0x3322, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_424)
{
    // 1A6F 0041;	
    // (ᩯ) TAI THAM VOWEL SIGN AE	[3322 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A6F, 0x0041 };
    uint32_t const ces[9] = { 0x3322, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_425)
{
    // 1A6F 0062;	
    // (ᩯ) TAI THAM VOWEL SIGN AE	[3322 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6F, 0x0062 };
    uint32_t const ces[9] = { 0x3322, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_426)
{
    // 1A73 0021;	
    // (ᩳ) TAI THAM VOWEL SIGN OA ABOVE	[3323 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A73, 0x0021 };
    uint32_t const ces[9] = { 0x3323, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_427)
{
    // 1A73 003F;	
    // (ᩳ) TAI THAM VOWEL SIGN OA ABOVE	[3323 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A73, 0x003F };
    uint32_t const ces[9] = { 0x3323, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_428)
{
    // 1A73 0061;	
    // (ᩳ) TAI THAM VOWEL SIGN OA ABOVE	[3323 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A73, 0x0061 };
    uint32_t const ces[9] = { 0x3323, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_429)
{
    // 1A73 0041;	
    // (ᩳ) TAI THAM VOWEL SIGN OA ABOVE	[3323 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A73, 0x0041 };
    uint32_t const ces[9] = { 0x3323, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_430)
{
    // 1A73 0062;	
    // (ᩳ) TAI THAM VOWEL SIGN OA ABOVE	[3323 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A73, 0x0062 };
    uint32_t const ces[9] = { 0x3323, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_431)
{
    // 1A70 0021;	
    // (ᩰ) TAI THAM VOWEL SIGN OO	[3324 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A70, 0x0021 };
    uint32_t const ces[9] = { 0x3324, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_432)
{
    // 1A70 003F;	
    // (ᩰ) TAI THAM VOWEL SIGN OO	[3324 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A70, 0x003F };
    uint32_t const ces[9] = { 0x3324, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_433)
{
    // 1A70 0061;	
    // (ᩰ) TAI THAM VOWEL SIGN OO	[3324 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A70, 0x0061 };
    uint32_t const ces[9] = { 0x3324, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_434)
{
    // 1A70 0041;	
    // (ᩰ) TAI THAM VOWEL SIGN OO	[3324 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A70, 0x0041 };
    uint32_t const ces[9] = { 0x3324, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_435)
{
    // 1A70 0062;	
    // (ᩰ) TAI THAM VOWEL SIGN OO	[3324 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A70, 0x0062 };
    uint32_t const ces[9] = { 0x3324, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_436)
{
    // 1A71 0021;	
    // (ᩱ) TAI THAM VOWEL SIGN AI	[3325 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A71, 0x0021 };
    uint32_t const ces[9] = { 0x3325, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_437)
{
    // 1A71 003F;	
    // (ᩱ) TAI THAM VOWEL SIGN AI	[3325 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A71, 0x003F };
    uint32_t const ces[9] = { 0x3325, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_438)
{
    // 1A71 0061;	
    // (ᩱ) TAI THAM VOWEL SIGN AI	[3325 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A71, 0x0061 };
    uint32_t const ces[9] = { 0x3325, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_439)
{
    // 1A71 0041;	
    // (ᩱ) TAI THAM VOWEL SIGN AI	[3325 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A71, 0x0041 };
    uint32_t const ces[9] = { 0x3325, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_440)
{
    // 1A71 0062;	
    // (ᩱ) TAI THAM VOWEL SIGN AI	[3325 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A71, 0x0062 };
    uint32_t const ces[9] = { 0x3325, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_441)
{
    // 1A72 0021;	
    // (ᩲ) TAI THAM VOWEL SIGN THAM AI	[3326 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A72, 0x0021 };
    uint32_t const ces[9] = { 0x3326, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_442)
{
    // 1A72 003F;	
    // (ᩲ) TAI THAM VOWEL SIGN THAM AI	[3326 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A72, 0x003F };
    uint32_t const ces[9] = { 0x3326, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_443)
{
    // 1A72 0061;	
    // (ᩲ) TAI THAM VOWEL SIGN THAM AI	[3326 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A72, 0x0061 };
    uint32_t const ces[9] = { 0x3326, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_444)
{
    // 1A72 0041;	
    // (ᩲ) TAI THAM VOWEL SIGN THAM AI	[3326 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A72, 0x0041 };
    uint32_t const ces[9] = { 0x3326, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_445)
{
    // 1A72 0062;	
    // (ᩲ) TAI THAM VOWEL SIGN THAM AI	[3326 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A72, 0x0062 };
    uint32_t const ces[9] = { 0x3326, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_446)
{
    // 1A6D 0021;	
    // (ᩭ) TAI THAM VOWEL SIGN OY	[3327 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6D, 0x0021 };
    uint32_t const ces[9] = { 0x3327, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_447)
{
    // 1A6D 003F;	
    // (ᩭ) TAI THAM VOWEL SIGN OY	[3327 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6D, 0x003F };
    uint32_t const ces[9] = { 0x3327, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_448)
{
    // 1A6D 0061;	
    // (ᩭ) TAI THAM VOWEL SIGN OY	[3327 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6D, 0x0061 };
    uint32_t const ces[9] = { 0x3327, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_449)
{
    // 1A6D 0041;	
    // (ᩭ) TAI THAM VOWEL SIGN OY	[3327 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A6D, 0x0041 };
    uint32_t const ces[9] = { 0x3327, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_450)
{
    // 1A6D 0062;	
    // (ᩭ) TAI THAM VOWEL SIGN OY	[3327 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A6D, 0x0062 };
    uint32_t const ces[9] = { 0x3327, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_451)
{
    // 0334 1A60;	
    // (᩠) TAI THAM SIGN SAKOT	[3328 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1A60 };
    uint32_t const ces[8] = { 0x3328, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_452)
{
    // 1A60 0334;	
    // (᩠) TAI THAM SIGN SAKOT	[3328 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A60, 0x0334 };
    uint32_t const ces[8] = { 0x3328, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_453)
{
    // 1A60 0021;	
    // (᩠) TAI THAM SIGN SAKOT	[3328 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A60, 0x0021 };
    uint32_t const ces[9] = { 0x3328, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_454)
{
    // 1A60 003F;	
    // (᩠) TAI THAM SIGN SAKOT	[3328 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A60, 0x003F };
    uint32_t const ces[9] = { 0x3328, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_455)
{
    // 1A60 0061;	
    // (᩠) TAI THAM SIGN SAKOT	[3328 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A60, 0x0061 };
    uint32_t const ces[9] = { 0x3328, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_456)
{
    // 1A60 0041;	
    // (᩠) TAI THAM SIGN SAKOT	[3328 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A60, 0x0041 };
    uint32_t const ces[9] = { 0x3328, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_457)
{
    // 1A60 0062;	
    // (᩠) TAI THAM SIGN SAKOT	[3328 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A60, 0x0062 };
    uint32_t const ces[9] = { 0x3328, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_458)
{
    // AA00 0021;	
    // (ꨀ) CHAM LETTER A	[3329 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA00, 0x0021 };
    uint32_t const ces[9] = { 0x3329, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_459)
{
    // AA00 003F;	
    // (ꨀ) CHAM LETTER A	[3329 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA00, 0x003F };
    uint32_t const ces[9] = { 0x3329, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_460)
{
    // AA00 0061;	
    // (ꨀ) CHAM LETTER A	[3329 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA00, 0x0061 };
    uint32_t const ces[9] = { 0x3329, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_461)
{
    // AA00 0041;	
    // (ꨀ) CHAM LETTER A	[3329 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA00, 0x0041 };
    uint32_t const ces[9] = { 0x3329, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_462)
{
    // AA00 0062;	
    // (ꨀ) CHAM LETTER A	[3329 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA00, 0x0062 };
    uint32_t const ces[9] = { 0x3329, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_463)
{
    // AA01 0021;	
    // (ꨁ) CHAM LETTER I	[332A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA01, 0x0021 };
    uint32_t const ces[9] = { 0x332A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_464)
{
    // AA01 003F;	
    // (ꨁ) CHAM LETTER I	[332A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA01, 0x003F };
    uint32_t const ces[9] = { 0x332A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_465)
{
    // AA01 0061;	
    // (ꨁ) CHAM LETTER I	[332A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA01, 0x0061 };
    uint32_t const ces[9] = { 0x332A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_466)
{
    // AA01 0041;	
    // (ꨁ) CHAM LETTER I	[332A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA01, 0x0041 };
    uint32_t const ces[9] = { 0x332A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_467)
{
    // AA01 0062;	
    // (ꨁ) CHAM LETTER I	[332A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA01, 0x0062 };
    uint32_t const ces[9] = { 0x332A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_468)
{
    // AA02 0021;	
    // (ꨂ) CHAM LETTER U	[332B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA02, 0x0021 };
    uint32_t const ces[9] = { 0x332B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_469)
{
    // AA02 003F;	
    // (ꨂ) CHAM LETTER U	[332B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA02, 0x003F };
    uint32_t const ces[9] = { 0x332B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_470)
{
    // AA02 0061;	
    // (ꨂ) CHAM LETTER U	[332B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA02, 0x0061 };
    uint32_t const ces[9] = { 0x332B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_471)
{
    // AA02 0041;	
    // (ꨂ) CHAM LETTER U	[332B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA02, 0x0041 };
    uint32_t const ces[9] = { 0x332B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_472)
{
    // AA02 0062;	
    // (ꨂ) CHAM LETTER U	[332B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA02, 0x0062 };
    uint32_t const ces[9] = { 0x332B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_473)
{
    // AA03 0021;	
    // (ꨃ) CHAM LETTER E	[332C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA03, 0x0021 };
    uint32_t const ces[9] = { 0x332C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_474)
{
    // AA03 003F;	
    // (ꨃ) CHAM LETTER E	[332C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA03, 0x003F };
    uint32_t const ces[9] = { 0x332C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_475)
{
    // AA03 0061;	
    // (ꨃ) CHAM LETTER E	[332C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA03, 0x0061 };
    uint32_t const ces[9] = { 0x332C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_476)
{
    // AA03 0041;	
    // (ꨃ) CHAM LETTER E	[332C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA03, 0x0041 };
    uint32_t const ces[9] = { 0x332C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_477)
{
    // AA03 0062;	
    // (ꨃ) CHAM LETTER E	[332C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA03, 0x0062 };
    uint32_t const ces[9] = { 0x332C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_478)
{
    // AA04 0021;	
    // (ꨄ) CHAM LETTER AI	[332D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA04, 0x0021 };
    uint32_t const ces[9] = { 0x332D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_479)
{
    // AA04 003F;	
    // (ꨄ) CHAM LETTER AI	[332D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA04, 0x003F };
    uint32_t const ces[9] = { 0x332D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_480)
{
    // AA04 0061;	
    // (ꨄ) CHAM LETTER AI	[332D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA04, 0x0061 };
    uint32_t const ces[9] = { 0x332D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_481)
{
    // AA04 0041;	
    // (ꨄ) CHAM LETTER AI	[332D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA04, 0x0041 };
    uint32_t const ces[9] = { 0x332D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_482)
{
    // AA04 0062;	
    // (ꨄ) CHAM LETTER AI	[332D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA04, 0x0062 };
    uint32_t const ces[9] = { 0x332D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_483)
{
    // AA05 0021;	
    // (ꨅ) CHAM LETTER O	[332E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA05, 0x0021 };
    uint32_t const ces[9] = { 0x332E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_484)
{
    // AA05 003F;	
    // (ꨅ) CHAM LETTER O	[332E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA05, 0x003F };
    uint32_t const ces[9] = { 0x332E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_485)
{
    // AA05 0061;	
    // (ꨅ) CHAM LETTER O	[332E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA05, 0x0061 };
    uint32_t const ces[9] = { 0x332E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_486)
{
    // AA05 0041;	
    // (ꨅ) CHAM LETTER O	[332E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA05, 0x0041 };
    uint32_t const ces[9] = { 0x332E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_487)
{
    // AA05 0062;	
    // (ꨅ) CHAM LETTER O	[332E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA05, 0x0062 };
    uint32_t const ces[9] = { 0x332E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_488)
{
    // AA06 0021;	
    // (ꨆ) CHAM LETTER KA	[332F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA06, 0x0021 };
    uint32_t const ces[9] = { 0x332F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_489)
{
    // AA06 003F;	
    // (ꨆ) CHAM LETTER KA	[332F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA06, 0x003F };
    uint32_t const ces[9] = { 0x332F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_490)
{
    // AA06 0061;	
    // (ꨆ) CHAM LETTER KA	[332F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA06, 0x0061 };
    uint32_t const ces[9] = { 0x332F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_491)
{
    // AA06 0041;	
    // (ꨆ) CHAM LETTER KA	[332F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA06, 0x0041 };
    uint32_t const ces[9] = { 0x332F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_492)
{
    // AA06 0062;	
    // (ꨆ) CHAM LETTER KA	[332F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA06, 0x0062 };
    uint32_t const ces[9] = { 0x332F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_493)
{
    // AA07 0021;	
    // (ꨇ) CHAM LETTER KHA	[3330 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA07, 0x0021 };
    uint32_t const ces[9] = { 0x3330, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_494)
{
    // AA07 003F;	
    // (ꨇ) CHAM LETTER KHA	[3330 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA07, 0x003F };
    uint32_t const ces[9] = { 0x3330, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_495)
{
    // AA07 0061;	
    // (ꨇ) CHAM LETTER KHA	[3330 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA07, 0x0061 };
    uint32_t const ces[9] = { 0x3330, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_496)
{
    // AA07 0041;	
    // (ꨇ) CHAM LETTER KHA	[3330 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA07, 0x0041 };
    uint32_t const ces[9] = { 0x3330, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_497)
{
    // AA07 0062;	
    // (ꨇ) CHAM LETTER KHA	[3330 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA07, 0x0062 };
    uint32_t const ces[9] = { 0x3330, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_498)
{
    // AA08 0021;	
    // (ꨈ) CHAM LETTER GA	[3331 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA08, 0x0021 };
    uint32_t const ces[9] = { 0x3331, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_211_499)
{
    // AA08 003F;	
    // (ꨈ) CHAM LETTER GA	[3331 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA08, 0x003F };
    uint32_t const ces[9] = { 0x3331, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

