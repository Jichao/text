// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_156_000)
{
    // FDF4 0062;	
    // (‎‎ﷴ‎‎) ARABIC LIGATURE MOHAMMAD ISOLATED FORM	[2409 2392 2409 239D 1CC6 | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF4, 0x0062 };
    uint32_t const ces[18] = { 0x2409, 0x2392, 0x2409, 0x239D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_001)
{
    // FD8B 0021;	
    // (‎‎ﶋ‎‎) ARABIC LIGATURE MEEM WITH HAH WITH YEH FINAL FORM	[2409 2392 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD8B, 0x0021 };
    uint32_t const ces[15] = { 0x2409, 0x2392, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_002)
{
    // FD8B 003F;	
    // (‎‎ﶋ‎‎) ARABIC LIGATURE MEEM WITH HAH WITH YEH FINAL FORM	[2409 2392 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD8B, 0x003F };
    uint32_t const ces[15] = { 0x2409, 0x2392, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_003)
{
    // FD8B 0061;	
    // (‎‎ﶋ‎‎) ARABIC LIGATURE MEEM WITH HAH WITH YEH FINAL FORM	[2409 2392 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD8B, 0x0061 };
    uint32_t const ces[15] = { 0x2409, 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_004)
{
    // FD8B 0041;	
    // (‎‎ﶋ‎‎) ARABIC LIGATURE MEEM WITH HAH WITH YEH FINAL FORM	[2409 2392 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD8B, 0x0041 };
    uint32_t const ces[15] = { 0x2409, 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_005)
{
    // FD8B 0062;	
    // (‎‎ﶋ‎‎) ARABIC LIGATURE MEEM WITH HAH WITH YEH FINAL FORM	[2409 2392 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD8B, 0x0062 };
    uint32_t const ces[15] = { 0x2409, 0x2392, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_006)
{
    // FCD0 0021;	
    // (‎‎ﳐ‎‎) ARABIC LIGATURE MEEM WITH KHAH INITIAL FORM	[2409 2393 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD0, 0x0021 };
    uint32_t const ces[12] = { 0x2409, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_007)
{
    // FC47 0021;	
    // (‎‎ﱇ‎‎) ARABIC LIGATURE MEEM WITH KHAH ISOLATED FORM	[2409 2393 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC47, 0x0021 };
    uint32_t const ces[12] = { 0x2409, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_008)
{
    // FCD0 003F;	
    // (‎‎ﳐ‎‎) ARABIC LIGATURE MEEM WITH KHAH INITIAL FORM	[2409 2393 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD0, 0x003F };
    uint32_t const ces[12] = { 0x2409, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_009)
{
    // FC47 003F;	
    // (‎‎ﱇ‎‎) ARABIC LIGATURE MEEM WITH KHAH ISOLATED FORM	[2409 2393 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC47, 0x003F };
    uint32_t const ces[12] = { 0x2409, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_010)
{
    // FCD0 0061;	
    // (‎‎ﳐ‎‎) ARABIC LIGATURE MEEM WITH KHAH INITIAL FORM	[2409 2393 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD0, 0x0061 };
    uint32_t const ces[12] = { 0x2409, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_011)
{
    // FCD0 0041;	
    // (‎‎ﳐ‎‎) ARABIC LIGATURE MEEM WITH KHAH INITIAL FORM	[2409 2393 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCD0, 0x0041 };
    uint32_t const ces[12] = { 0x2409, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_012)
{
    // FC47 0061;	
    // (‎‎ﱇ‎‎) ARABIC LIGATURE MEEM WITH KHAH ISOLATED FORM	[2409 2393 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC47, 0x0061 };
    uint32_t const ces[12] = { 0x2409, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_013)
{
    // FC47 0041;	
    // (‎‎ﱇ‎‎) ARABIC LIGATURE MEEM WITH KHAH ISOLATED FORM	[2409 2393 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC47, 0x0041 };
    uint32_t const ces[12] = { 0x2409, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_014)
{
    // FCD0 0062;	
    // (‎‎ﳐ‎‎) ARABIC LIGATURE MEEM WITH KHAH INITIAL FORM	[2409 2393 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD0, 0x0062 };
    uint32_t const ces[12] = { 0x2409, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_015)
{
    // FC47 0062;	
    // (‎‎ﱇ‎‎) ARABIC LIGATURE MEEM WITH KHAH ISOLATED FORM	[2409 2393 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC47, 0x0062 };
    uint32_t const ces[12] = { 0x2409, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_016)
{
    // FD8E 0021;	
    // (‎‎ﶎ‎‎) ARABIC LIGATURE MEEM WITH KHAH WITH JEEM INITIAL FORM	[2409 2393 238B 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD8E, 0x0021 };
    uint32_t const ces[15] = { 0x2409, 0x2393, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_017)
{
    // FD8E 003F;	
    // (‎‎ﶎ‎‎) ARABIC LIGATURE MEEM WITH KHAH WITH JEEM INITIAL FORM	[2409 2393 238B 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD8E, 0x003F };
    uint32_t const ces[15] = { 0x2409, 0x2393, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_018)
{
    // FD8E 0061;	
    // (‎‎ﶎ‎‎) ARABIC LIGATURE MEEM WITH KHAH WITH JEEM INITIAL FORM	[2409 2393 238B 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD8E, 0x0061 };
    uint32_t const ces[15] = { 0x2409, 0x2393, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_019)
{
    // FD8E 0041;	
    // (‎‎ﶎ‎‎) ARABIC LIGATURE MEEM WITH KHAH WITH JEEM INITIAL FORM	[2409 2393 238B 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD8E, 0x0041 };
    uint32_t const ces[15] = { 0x2409, 0x2393, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_020)
{
    // FD8E 0062;	
    // (‎‎ﶎ‎‎) ARABIC LIGATURE MEEM WITH KHAH WITH JEEM INITIAL FORM	[2409 2393 238B 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD8E, 0x0062 };
    uint32_t const ces[15] = { 0x2409, 0x2393, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_021)
{
    // FD8F 0021;	
    // (‎‎ﶏ‎‎) ARABIC LIGATURE MEEM WITH KHAH WITH MEEM INITIAL FORM	[2409 2393 2409 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD8F, 0x0021 };
    uint32_t const ces[15] = { 0x2409, 0x2393, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_022)
{
    // FD8F 003F;	
    // (‎‎ﶏ‎‎) ARABIC LIGATURE MEEM WITH KHAH WITH MEEM INITIAL FORM	[2409 2393 2409 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD8F, 0x003F };
    uint32_t const ces[15] = { 0x2409, 0x2393, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_023)
{
    // FD8F 0061;	
    // (‎‎ﶏ‎‎) ARABIC LIGATURE MEEM WITH KHAH WITH MEEM INITIAL FORM	[2409 2393 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD8F, 0x0061 };
    uint32_t const ces[15] = { 0x2409, 0x2393, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_024)
{
    // FD8F 0041;	
    // (‎‎ﶏ‎‎) ARABIC LIGATURE MEEM WITH KHAH WITH MEEM INITIAL FORM	[2409 2393 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD8F, 0x0041 };
    uint32_t const ces[15] = { 0x2409, 0x2393, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_025)
{
    // FD8F 0062;	
    // (‎‎ﶏ‎‎) ARABIC LIGATURE MEEM WITH KHAH WITH MEEM INITIAL FORM	[2409 2393 2409 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD8F, 0x0062 };
    uint32_t const ces[15] = { 0x2409, 0x2393, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_026)
{
    // FDB9 0021;	
    // (‎‎ﶹ‎‎) ARABIC LIGATURE MEEM WITH KHAH WITH YEH FINAL FORM	[2409 2393 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDB9, 0x0021 };
    uint32_t const ces[15] = { 0x2409, 0x2393, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_027)
{
    // FDB9 003F;	
    // (‎‎ﶹ‎‎) ARABIC LIGATURE MEEM WITH KHAH WITH YEH FINAL FORM	[2409 2393 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDB9, 0x003F };
    uint32_t const ces[15] = { 0x2409, 0x2393, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_028)
{
    // FDB9 0061;	
    // (‎‎ﶹ‎‎) ARABIC LIGATURE MEEM WITH KHAH WITH YEH FINAL FORM	[2409 2393 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDB9, 0x0061 };
    uint32_t const ces[15] = { 0x2409, 0x2393, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_029)
{
    // FDB9 0041;	
    // (‎‎ﶹ‎‎) ARABIC LIGATURE MEEM WITH KHAH WITH YEH FINAL FORM	[2409 2393 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFDB9, 0x0041 };
    uint32_t const ces[15] = { 0x2409, 0x2393, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_030)
{
    // FDB9 0062;	
    // (‎‎ﶹ‎‎) ARABIC LIGATURE MEEM WITH KHAH WITH YEH FINAL FORM	[2409 2393 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDB9, 0x0062 };
    uint32_t const ces[15] = { 0x2409, 0x2393, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_031)
{
    // FCD1 0021;	
    // (‎‎ﳑ‎‎) ARABIC LIGATURE MEEM WITH MEEM INITIAL FORM	[2409 2409 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD1, 0x0021 };
    uint32_t const ces[12] = { 0x2409, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_032)
{
    // FC89 0021;	
    // (‎‎ﲉ‎‎) ARABIC LIGATURE MEEM WITH MEEM FINAL FORM	[2409 2409 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC89, 0x0021 };
    uint32_t const ces[12] = { 0x2409, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_033)
{
    // FC48 0021;	
    // (‎‎ﱈ‎‎) ARABIC LIGATURE MEEM WITH MEEM ISOLATED FORM	[2409 2409 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC48, 0x0021 };
    uint32_t const ces[12] = { 0x2409, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_034)
{
    // FCD1 003F;	
    // (‎‎ﳑ‎‎) ARABIC LIGATURE MEEM WITH MEEM INITIAL FORM	[2409 2409 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD1, 0x003F };
    uint32_t const ces[12] = { 0x2409, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_035)
{
    // FC89 003F;	
    // (‎‎ﲉ‎‎) ARABIC LIGATURE MEEM WITH MEEM FINAL FORM	[2409 2409 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC89, 0x003F };
    uint32_t const ces[12] = { 0x2409, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_036)
{
    // FC48 003F;	
    // (‎‎ﱈ‎‎) ARABIC LIGATURE MEEM WITH MEEM ISOLATED FORM	[2409 2409 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC48, 0x003F };
    uint32_t const ces[12] = { 0x2409, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_037)
{
    // FCD1 0061;	
    // (‎‎ﳑ‎‎) ARABIC LIGATURE MEEM WITH MEEM INITIAL FORM	[2409 2409 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD1, 0x0061 };
    uint32_t const ces[12] = { 0x2409, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_038)
{
    // FCD1 0041;	
    // (‎‎ﳑ‎‎) ARABIC LIGATURE MEEM WITH MEEM INITIAL FORM	[2409 2409 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCD1, 0x0041 };
    uint32_t const ces[12] = { 0x2409, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_039)
{
    // FC89 0061;	
    // (‎‎ﲉ‎‎) ARABIC LIGATURE MEEM WITH MEEM FINAL FORM	[2409 2409 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC89, 0x0061 };
    uint32_t const ces[12] = { 0x2409, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_040)
{
    // FC89 0041;	
    // (‎‎ﲉ‎‎) ARABIC LIGATURE MEEM WITH MEEM FINAL FORM	[2409 2409 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC89, 0x0041 };
    uint32_t const ces[12] = { 0x2409, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_041)
{
    // FC48 0061;	
    // (‎‎ﱈ‎‎) ARABIC LIGATURE MEEM WITH MEEM ISOLATED FORM	[2409 2409 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC48, 0x0061 };
    uint32_t const ces[12] = { 0x2409, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_042)
{
    // FC48 0041;	
    // (‎‎ﱈ‎‎) ARABIC LIGATURE MEEM WITH MEEM ISOLATED FORM	[2409 2409 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC48, 0x0041 };
    uint32_t const ces[12] = { 0x2409, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_043)
{
    // FCD1 0062;	
    // (‎‎ﳑ‎‎) ARABIC LIGATURE MEEM WITH MEEM INITIAL FORM	[2409 2409 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD1, 0x0062 };
    uint32_t const ces[12] = { 0x2409, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_044)
{
    // FC89 0062;	
    // (‎‎ﲉ‎‎) ARABIC LIGATURE MEEM WITH MEEM FINAL FORM	[2409 2409 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC89, 0x0062 };
    uint32_t const ces[12] = { 0x2409, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_045)
{
    // FC48 0062;	
    // (‎‎ﱈ‎‎) ARABIC LIGATURE MEEM WITH MEEM ISOLATED FORM	[2409 2409 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC48, 0x0062 };
    uint32_t const ces[12] = { 0x2409, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_046)
{
    // FDB1 0021;	
    // (‎‎ﶱ‎‎) ARABIC LIGATURE MEEM WITH MEEM WITH YEH FINAL FORM	[2409 2409 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDB1, 0x0021 };
    uint32_t const ces[15] = { 0x2409, 0x2409, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_047)
{
    // FDB1 003F;	
    // (‎‎ﶱ‎‎) ARABIC LIGATURE MEEM WITH MEEM WITH YEH FINAL FORM	[2409 2409 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDB1, 0x003F };
    uint32_t const ces[15] = { 0x2409, 0x2409, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_048)
{
    // FDB1 0061;	
    // (‎‎ﶱ‎‎) ARABIC LIGATURE MEEM WITH MEEM WITH YEH FINAL FORM	[2409 2409 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDB1, 0x0061 };
    uint32_t const ces[15] = { 0x2409, 0x2409, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_049)
{
    // FDB1 0041;	
    // (‎‎ﶱ‎‎) ARABIC LIGATURE MEEM WITH MEEM WITH YEH FINAL FORM	[2409 2409 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFDB1, 0x0041 };
    uint32_t const ces[15] = { 0x2409, 0x2409, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_050)
{
    // FDB1 0062;	
    // (‎‎ﶱ‎‎) ARABIC LIGATURE MEEM WITH MEEM WITH YEH FINAL FORM	[2409 2409 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDB1, 0x0062 };
    uint32_t const ces[15] = { 0x2409, 0x2409, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_051)
{
    // FC49 0021;	
    // (‎‎ﱉ‎‎) ARABIC LIGATURE MEEM WITH ALEF MAKSURA ISOLATED FORM	[2409 242B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC49, 0x0021 };
    uint32_t const ces[12] = { 0x2409, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_052)
{
    // FC49 003F;	
    // (‎‎ﱉ‎‎) ARABIC LIGATURE MEEM WITH ALEF MAKSURA ISOLATED FORM	[2409 242B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC49, 0x003F };
    uint32_t const ces[12] = { 0x2409, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_053)
{
    // FC49 0061;	
    // (‎‎ﱉ‎‎) ARABIC LIGATURE MEEM WITH ALEF MAKSURA ISOLATED FORM	[2409 242B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC49, 0x0061 };
    uint32_t const ces[12] = { 0x2409, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_054)
{
    // FC49 0041;	
    // (‎‎ﱉ‎‎) ARABIC LIGATURE MEEM WITH ALEF MAKSURA ISOLATED FORM	[2409 242B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC49, 0x0041 };
    uint32_t const ces[12] = { 0x2409, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_055)
{
    // FC49 0062;	
    // (‎‎ﱉ‎‎) ARABIC LIGATURE MEEM WITH ALEF MAKSURA ISOLATED FORM	[2409 242B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC49, 0x0062 };
    uint32_t const ces[12] = { 0x2409, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_056)
{
    // FC4A 0021;	
    // (‎‎ﱊ‎‎) ARABIC LIGATURE MEEM WITH YEH ISOLATED FORM	[2409 242C 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4A, 0x0021 };
    uint32_t const ces[12] = { 0x2409, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_057)
{
    // FC4A 003F;	
    // (‎‎ﱊ‎‎) ARABIC LIGATURE MEEM WITH YEH ISOLATED FORM	[2409 242C 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4A, 0x003F };
    uint32_t const ces[12] = { 0x2409, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_058)
{
    // FC4A 0061;	
    // (‎‎ﱊ‎‎) ARABIC LIGATURE MEEM WITH YEH ISOLATED FORM	[2409 242C 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4A, 0x0061 };
    uint32_t const ces[12] = { 0x2409, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_059)
{
    // FC4A 0041;	
    // (‎‎ﱊ‎‎) ARABIC LIGATURE MEEM WITH YEH ISOLATED FORM	[2409 242C 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC4A, 0x0041 };
    uint32_t const ces[12] = { 0x2409, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_060)
{
    // FC4A 0062;	
    // (‎‎ﱊ‎‎) ARABIC LIGATURE MEEM WITH YEH ISOLATED FORM	[2409 242C 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4A, 0x0062 };
    uint32_t const ces[12] = { 0x2409, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_061)
{
    // 0765 0021;	
    // (‎‎ݥ‎‎) ARABIC LETTER MEEM WITH DOT ABOVE	[240A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0765, 0x0021 };
    uint32_t const ces[9] = { 0x240A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_062)
{
    // 0765 003F;	
    // (‎‎ݥ‎‎) ARABIC LETTER MEEM WITH DOT ABOVE	[240A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0765, 0x003F };
    uint32_t const ces[9] = { 0x240A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_063)
{
    // 0765 0061;	
    // (‎‎ݥ‎‎) ARABIC LETTER MEEM WITH DOT ABOVE	[240A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0765, 0x0061 };
    uint32_t const ces[9] = { 0x240A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_064)
{
    // 0765 0041;	
    // (‎‎ݥ‎‎) ARABIC LETTER MEEM WITH DOT ABOVE	[240A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0765, 0x0041 };
    uint32_t const ces[9] = { 0x240A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_065)
{
    // 0765 0062;	
    // (‎‎ݥ‎‎) ARABIC LETTER MEEM WITH DOT ABOVE	[240A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0765, 0x0062 };
    uint32_t const ces[9] = { 0x240A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_066)
{
    // 0766 0021;	
    // (‎‎ݦ‎‎) ARABIC LETTER MEEM WITH DOT BELOW	[240B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0766, 0x0021 };
    uint32_t const ces[9] = { 0x240B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_067)
{
    // 0766 003F;	
    // (‎‎ݦ‎‎) ARABIC LETTER MEEM WITH DOT BELOW	[240B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0766, 0x003F };
    uint32_t const ces[9] = { 0x240B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_068)
{
    // 0766 0061;	
    // (‎‎ݦ‎‎) ARABIC LETTER MEEM WITH DOT BELOW	[240B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0766, 0x0061 };
    uint32_t const ces[9] = { 0x240B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_069)
{
    // 0766 0041;	
    // (‎‎ݦ‎‎) ARABIC LETTER MEEM WITH DOT BELOW	[240B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0766, 0x0041 };
    uint32_t const ces[9] = { 0x240B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_070)
{
    // 0766 0062;	
    // (‎‎ݦ‎‎) ARABIC LETTER MEEM WITH DOT BELOW	[240B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0766, 0x0062 };
    uint32_t const ces[9] = { 0x240B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_071)
{
    // 08A7 0021;	
    // (‎‎ࢧ‎‎) ARABIC LETTER MEEM WITH THREE DOTS ABOVE	[240C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A7, 0x0021 };
    uint32_t const ces[9] = { 0x240C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_072)
{
    // 08A7 003F;	
    // (‎‎ࢧ‎‎) ARABIC LETTER MEEM WITH THREE DOTS ABOVE	[240C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A7, 0x003F };
    uint32_t const ces[9] = { 0x240C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_073)
{
    // 08A7 0061;	
    // (‎‎ࢧ‎‎) ARABIC LETTER MEEM WITH THREE DOTS ABOVE	[240C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A7, 0x0061 };
    uint32_t const ces[9] = { 0x240C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_074)
{
    // 08A7 0041;	
    // (‎‎ࢧ‎‎) ARABIC LETTER MEEM WITH THREE DOTS ABOVE	[240C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08A7, 0x0041 };
    uint32_t const ces[9] = { 0x240C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_075)
{
    // 08A7 0062;	
    // (‎‎ࢧ‎‎) ARABIC LETTER MEEM WITH THREE DOTS ABOVE	[240C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A7, 0x0062 };
    uint32_t const ces[9] = { 0x240C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_076)
{
    // 0646 0021;	
    // (‎‎ن‎‎) ARABIC LETTER NOON	[240D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0646, 0x0021 };
    uint32_t const ces[9] = { 0x240D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_077)
{
    // 1EE0D 0021;	
    // (‎‎𞸍‎‎) ARABIC MATHEMATICAL NOON	[240D 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE0D, 0x0021 };
    uint32_t const ces[9] = { 0x240D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_078)
{
    // 1EE2D 0021;	
    // (‎‎𞸭‎‎) ARABIC MATHEMATICAL INITIAL NOON	[240D 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE2D, 0x0021 };
    uint32_t const ces[9] = { 0x240D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_079)
{
    // 1EE4D 0021;	
    // (‎‎𞹍‎‎) ARABIC MATHEMATICAL TAILED NOON	[240D 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE4D, 0x0021 };
    uint32_t const ces[9] = { 0x240D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_080)
{
    // 1EE6D 0021;	
    // (‎‎𞹭‎‎) ARABIC MATHEMATICAL STRETCHED NOON	[240D 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE6D, 0x0021 };
    uint32_t const ces[9] = { 0x240D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_081)
{
    // 1EE8D 0021;	
    // (‎‎𞺍‎‎) ARABIC MATHEMATICAL LOOPED NOON	[240D 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE8D, 0x0021 };
    uint32_t const ces[9] = { 0x240D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_082)
{
    // 1EEAD 0021;	
    // (‎‎𞺭‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK NOON	[240D 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEAD, 0x0021 };
    uint32_t const ces[9] = { 0x240D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_083)
{
    // FEE7 0021;	
    // (‎‎ﻧ‎‎) ARABIC LETTER NOON INITIAL FORM	[240D 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEE7, 0x0021 };
    uint32_t const ces[9] = { 0x240D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_084)
{
    // FEE8 0021;	
    // (‎‎ﻨ‎‎) ARABIC LETTER NOON MEDIAL FORM	[240D 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEE8, 0x0021 };
    uint32_t const ces[9] = { 0x240D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_085)
{
    // FEE6 0021;	
    // (‎‎ﻦ‎‎) ARABIC LETTER NOON FINAL FORM	[240D 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEE6, 0x0021 };
    uint32_t const ces[9] = { 0x240D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_086)
{
    // FEE5 0021;	
    // (‎‎ﻥ‎‎) ARABIC LETTER NOON ISOLATED FORM	[240D 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEE5, 0x0021 };
    uint32_t const ces[9] = { 0x240D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_087)
{
    // 0646 003F;	
    // (‎‎ن‎‎) ARABIC LETTER NOON	[240D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0646, 0x003F };
    uint32_t const ces[9] = { 0x240D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_088)
{
    // 1EE0D 003F;	
    // (‎‎𞸍‎‎) ARABIC MATHEMATICAL NOON	[240D 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE0D, 0x003F };
    uint32_t const ces[9] = { 0x240D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_089)
{
    // 1EE2D 003F;	
    // (‎‎𞸭‎‎) ARABIC MATHEMATICAL INITIAL NOON	[240D 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE2D, 0x003F };
    uint32_t const ces[9] = { 0x240D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_090)
{
    // 1EE4D 003F;	
    // (‎‎𞹍‎‎) ARABIC MATHEMATICAL TAILED NOON	[240D 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE4D, 0x003F };
    uint32_t const ces[9] = { 0x240D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_091)
{
    // 1EE6D 003F;	
    // (‎‎𞹭‎‎) ARABIC MATHEMATICAL STRETCHED NOON	[240D 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE6D, 0x003F };
    uint32_t const ces[9] = { 0x240D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_092)
{
    // 1EE8D 003F;	
    // (‎‎𞺍‎‎) ARABIC MATHEMATICAL LOOPED NOON	[240D 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE8D, 0x003F };
    uint32_t const ces[9] = { 0x240D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_093)
{
    // 1EEAD 003F;	
    // (‎‎𞺭‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK NOON	[240D 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEAD, 0x003F };
    uint32_t const ces[9] = { 0x240D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_094)
{
    // FEE7 003F;	
    // (‎‎ﻧ‎‎) ARABIC LETTER NOON INITIAL FORM	[240D 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEE7, 0x003F };
    uint32_t const ces[9] = { 0x240D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_095)
{
    // FEE8 003F;	
    // (‎‎ﻨ‎‎) ARABIC LETTER NOON MEDIAL FORM	[240D 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEE8, 0x003F };
    uint32_t const ces[9] = { 0x240D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_096)
{
    // FEE6 003F;	
    // (‎‎ﻦ‎‎) ARABIC LETTER NOON FINAL FORM	[240D 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEE6, 0x003F };
    uint32_t const ces[9] = { 0x240D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_097)
{
    // FEE5 003F;	
    // (‎‎ﻥ‎‎) ARABIC LETTER NOON ISOLATED FORM	[240D 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEE5, 0x003F };
    uint32_t const ces[9] = { 0x240D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_098)
{
    // 0646 0061;	
    // (‎‎ن‎‎) ARABIC LETTER NOON	[240D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0646, 0x0061 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_099)
{
    // 0646 0041;	
    // (‎‎ن‎‎) ARABIC LETTER NOON	[240D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0646, 0x0041 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_100)
{
    // 1EE0D 0061;	
    // (‎‎𞸍‎‎) ARABIC MATHEMATICAL NOON	[240D 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE0D, 0x0061 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_101)
{
    // 1EE2D 0061;	
    // (‎‎𞸭‎‎) ARABIC MATHEMATICAL INITIAL NOON	[240D 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE2D, 0x0061 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_102)
{
    // 1EE4D 0061;	
    // (‎‎𞹍‎‎) ARABIC MATHEMATICAL TAILED NOON	[240D 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE4D, 0x0061 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_103)
{
    // 1EE6D 0061;	
    // (‎‎𞹭‎‎) ARABIC MATHEMATICAL STRETCHED NOON	[240D 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE6D, 0x0061 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_104)
{
    // 1EE8D 0061;	
    // (‎‎𞺍‎‎) ARABIC MATHEMATICAL LOOPED NOON	[240D 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE8D, 0x0061 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_105)
{
    // 1EEAD 0061;	
    // (‎‎𞺭‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK NOON	[240D 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEAD, 0x0061 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_106)
{
    // 1EE0D 0041;	
    // (‎‎𞸍‎‎) ARABIC MATHEMATICAL NOON	[240D 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE0D, 0x0041 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_107)
{
    // 1EE2D 0041;	
    // (‎‎𞸭‎‎) ARABIC MATHEMATICAL INITIAL NOON	[240D 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE2D, 0x0041 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_108)
{
    // 1EE4D 0041;	
    // (‎‎𞹍‎‎) ARABIC MATHEMATICAL TAILED NOON	[240D 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE4D, 0x0041 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_109)
{
    // 1EE6D 0041;	
    // (‎‎𞹭‎‎) ARABIC MATHEMATICAL STRETCHED NOON	[240D 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE6D, 0x0041 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_110)
{
    // 1EE8D 0041;	
    // (‎‎𞺍‎‎) ARABIC MATHEMATICAL LOOPED NOON	[240D 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE8D, 0x0041 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_111)
{
    // 1EEAD 0041;	
    // (‎‎𞺭‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK NOON	[240D 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EEAD, 0x0041 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_112)
{
    // FEE7 0061;	
    // (‎‎ﻧ‎‎) ARABIC LETTER NOON INITIAL FORM	[240D 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEE7, 0x0061 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_113)
{
    // FEE7 0041;	
    // (‎‎ﻧ‎‎) ARABIC LETTER NOON INITIAL FORM	[240D 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFEE7, 0x0041 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_114)
{
    // FEE8 0061;	
    // (‎‎ﻨ‎‎) ARABIC LETTER NOON MEDIAL FORM	[240D 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEE8, 0x0061 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_115)
{
    // FEE8 0041;	
    // (‎‎ﻨ‎‎) ARABIC LETTER NOON MEDIAL FORM	[240D 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFEE8, 0x0041 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_116)
{
    // FEE6 0061;	
    // (‎‎ﻦ‎‎) ARABIC LETTER NOON FINAL FORM	[240D 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEE6, 0x0061 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_117)
{
    // FEE6 0041;	
    // (‎‎ﻦ‎‎) ARABIC LETTER NOON FINAL FORM	[240D 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFEE6, 0x0041 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_118)
{
    // FEE5 0061;	
    // (‎‎ﻥ‎‎) ARABIC LETTER NOON ISOLATED FORM	[240D 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEE5, 0x0061 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_119)
{
    // FEE5 0041;	
    // (‎‎ﻥ‎‎) ARABIC LETTER NOON ISOLATED FORM	[240D 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFEE5, 0x0041 };
    uint32_t const ces[9] = { 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_120)
{
    // 0646 0062;	
    // (‎‎ن‎‎) ARABIC LETTER NOON	[240D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0646, 0x0062 };
    uint32_t const ces[9] = { 0x240D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_121)
{
    // 1EE0D 0062;	
    // (‎‎𞸍‎‎) ARABIC MATHEMATICAL NOON	[240D 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE0D, 0x0062 };
    uint32_t const ces[9] = { 0x240D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_122)
{
    // 1EE2D 0062;	
    // (‎‎𞸭‎‎) ARABIC MATHEMATICAL INITIAL NOON	[240D 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE2D, 0x0062 };
    uint32_t const ces[9] = { 0x240D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_123)
{
    // 1EE4D 0062;	
    // (‎‎𞹍‎‎) ARABIC MATHEMATICAL TAILED NOON	[240D 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE4D, 0x0062 };
    uint32_t const ces[9] = { 0x240D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_124)
{
    // 1EE6D 0062;	
    // (‎‎𞹭‎‎) ARABIC MATHEMATICAL STRETCHED NOON	[240D 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE6D, 0x0062 };
    uint32_t const ces[9] = { 0x240D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_125)
{
    // 1EE8D 0062;	
    // (‎‎𞺍‎‎) ARABIC MATHEMATICAL LOOPED NOON	[240D 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE8D, 0x0062 };
    uint32_t const ces[9] = { 0x240D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_126)
{
    // 1EEAD 0062;	
    // (‎‎𞺭‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK NOON	[240D 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEAD, 0x0062 };
    uint32_t const ces[9] = { 0x240D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_127)
{
    // FEE7 0062;	
    // (‎‎ﻧ‎‎) ARABIC LETTER NOON INITIAL FORM	[240D 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEE7, 0x0062 };
    uint32_t const ces[9] = { 0x240D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_128)
{
    // FEE8 0062;	
    // (‎‎ﻨ‎‎) ARABIC LETTER NOON MEDIAL FORM	[240D 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEE8, 0x0062 };
    uint32_t const ces[9] = { 0x240D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_129)
{
    // FEE6 0062;	
    // (‎‎ﻦ‎‎) ARABIC LETTER NOON FINAL FORM	[240D 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEE6, 0x0062 };
    uint32_t const ces[9] = { 0x240D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_130)
{
    // FEE5 0062;	
    // (‎‎ﻥ‎‎) ARABIC LETTER NOON ISOLATED FORM	[240D 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEE5, 0x0062 };
    uint32_t const ces[9] = { 0x240D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_131)
{
    // FCD2 0021;	
    // (‎‎ﳒ‎‎) ARABIC LIGATURE NOON WITH JEEM INITIAL FORM	[240D 238B 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD2, 0x0021 };
    uint32_t const ces[12] = { 0x240D, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_132)
{
    // FC4B 0021;	
    // (‎‎ﱋ‎‎) ARABIC LIGATURE NOON WITH JEEM ISOLATED FORM	[240D 238B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4B, 0x0021 };
    uint32_t const ces[12] = { 0x240D, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_133)
{
    // FCD2 003F;	
    // (‎‎ﳒ‎‎) ARABIC LIGATURE NOON WITH JEEM INITIAL FORM	[240D 238B 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD2, 0x003F };
    uint32_t const ces[12] = { 0x240D, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_134)
{
    // FC4B 003F;	
    // (‎‎ﱋ‎‎) ARABIC LIGATURE NOON WITH JEEM ISOLATED FORM	[240D 238B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4B, 0x003F };
    uint32_t const ces[12] = { 0x240D, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_135)
{
    // FCD2 0061;	
    // (‎‎ﳒ‎‎) ARABIC LIGATURE NOON WITH JEEM INITIAL FORM	[240D 238B 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD2, 0x0061 };
    uint32_t const ces[12] = { 0x240D, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_136)
{
    // FCD2 0041;	
    // (‎‎ﳒ‎‎) ARABIC LIGATURE NOON WITH JEEM INITIAL FORM	[240D 238B 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCD2, 0x0041 };
    uint32_t const ces[12] = { 0x240D, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_137)
{
    // FC4B 0061;	
    // (‎‎ﱋ‎‎) ARABIC LIGATURE NOON WITH JEEM ISOLATED FORM	[240D 238B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4B, 0x0061 };
    uint32_t const ces[12] = { 0x240D, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_138)
{
    // FC4B 0041;	
    // (‎‎ﱋ‎‎) ARABIC LIGATURE NOON WITH JEEM ISOLATED FORM	[240D 238B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC4B, 0x0041 };
    uint32_t const ces[12] = { 0x240D, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_139)
{
    // FCD2 0062;	
    // (‎‎ﳒ‎‎) ARABIC LIGATURE NOON WITH JEEM INITIAL FORM	[240D 238B 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD2, 0x0062 };
    uint32_t const ces[12] = { 0x240D, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_140)
{
    // FC4B 0062;	
    // (‎‎ﱋ‎‎) ARABIC LIGATURE NOON WITH JEEM ISOLATED FORM	[240D 238B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4B, 0x0062 };
    uint32_t const ces[12] = { 0x240D, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_141)
{
    // FDB8 0021;	
    // (‎‎ﶸ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH HAH INITIAL FORM	[240D 238B 2392 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFDB8, 0x0021 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_142)
{
    // FDBD 0021;	
    // (‎‎ﶽ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH HAH FINAL FORM	[240D 238B 2392 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDBD, 0x0021 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_143)
{
    // FDB8 003F;	
    // (‎‎ﶸ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH HAH INITIAL FORM	[240D 238B 2392 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFDB8, 0x003F };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_144)
{
    // FDBD 003F;	
    // (‎‎ﶽ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH HAH FINAL FORM	[240D 238B 2392 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDBD, 0x003F };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_145)
{
    // FDB8 0061;	
    // (‎‎ﶸ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH HAH INITIAL FORM	[240D 238B 2392 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFDB8, 0x0061 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_146)
{
    // FDB8 0041;	
    // (‎‎ﶸ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH HAH INITIAL FORM	[240D 238B 2392 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFDB8, 0x0041 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_147)
{
    // FDBD 0061;	
    // (‎‎ﶽ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH HAH FINAL FORM	[240D 238B 2392 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDBD, 0x0061 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_148)
{
    // FDBD 0041;	
    // (‎‎ﶽ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH HAH FINAL FORM	[240D 238B 2392 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFDBD, 0x0041 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_149)
{
    // FDB8 0062;	
    // (‎‎ﶸ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH HAH INITIAL FORM	[240D 238B 2392 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFDB8, 0x0062 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_150)
{
    // FDBD 0062;	
    // (‎‎ﶽ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH HAH FINAL FORM	[240D 238B 2392 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDBD, 0x0062 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_151)
{
    // FD98 0021;	
    // (‎‎ﶘ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH MEEM INITIAL FORM	[240D 238B 2409 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD98, 0x0021 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_152)
{
    // FD97 0021;	
    // (‎‎ﶗ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH MEEM FINAL FORM	[240D 238B 2409 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD97, 0x0021 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_153)
{
    // FD98 003F;	
    // (‎‎ﶘ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH MEEM INITIAL FORM	[240D 238B 2409 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD98, 0x003F };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_154)
{
    // FD97 003F;	
    // (‎‎ﶗ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH MEEM FINAL FORM	[240D 238B 2409 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD97, 0x003F };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_155)
{
    // FD98 0061;	
    // (‎‎ﶘ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH MEEM INITIAL FORM	[240D 238B 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD98, 0x0061 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_156)
{
    // FD98 0041;	
    // (‎‎ﶘ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH MEEM INITIAL FORM	[240D 238B 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD98, 0x0041 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_157)
{
    // FD97 0061;	
    // (‎‎ﶗ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH MEEM FINAL FORM	[240D 238B 2409 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD97, 0x0061 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_158)
{
    // FD97 0041;	
    // (‎‎ﶗ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH MEEM FINAL FORM	[240D 238B 2409 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD97, 0x0041 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_159)
{
    // FD98 0062;	
    // (‎‎ﶘ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH MEEM INITIAL FORM	[240D 238B 2409 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD98, 0x0062 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_160)
{
    // FD97 0062;	
    // (‎‎ﶗ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH MEEM FINAL FORM	[240D 238B 2409 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD97, 0x0062 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_161)
{
    // FD99 0021;	
    // (‎‎ﶙ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH ALEF MAKSURA FINAL FORM	[240D 238B 242B 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD99, 0x0021 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_162)
{
    // FD99 003F;	
    // (‎‎ﶙ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH ALEF MAKSURA FINAL FORM	[240D 238B 242B 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD99, 0x003F };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_163)
{
    // FD99 0061;	
    // (‎‎ﶙ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH ALEF MAKSURA FINAL FORM	[240D 238B 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD99, 0x0061 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_164)
{
    // FD99 0041;	
    // (‎‎ﶙ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH ALEF MAKSURA FINAL FORM	[240D 238B 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD99, 0x0041 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_165)
{
    // FD99 0062;	
    // (‎‎ﶙ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH ALEF MAKSURA FINAL FORM	[240D 238B 242B 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD99, 0x0062 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_166)
{
    // FDC7 0021;	
    // (‎‎ﷇ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH YEH FINAL FORM	[240D 238B 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDC7, 0x0021 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_167)
{
    // FDC7 003F;	
    // (‎‎ﷇ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH YEH FINAL FORM	[240D 238B 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDC7, 0x003F };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_168)
{
    // FDC7 0061;	
    // (‎‎ﷇ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH YEH FINAL FORM	[240D 238B 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDC7, 0x0061 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_169)
{
    // FDC7 0041;	
    // (‎‎ﷇ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH YEH FINAL FORM	[240D 238B 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFDC7, 0x0041 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_170)
{
    // FDC7 0062;	
    // (‎‎ﷇ‎‎) ARABIC LIGATURE NOON WITH JEEM WITH YEH FINAL FORM	[240D 238B 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDC7, 0x0062 };
    uint32_t const ces[15] = { 0x240D, 0x238B, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_171)
{
    // FCD3 0021;	
    // (‎‎ﳓ‎‎) ARABIC LIGATURE NOON WITH HAH INITIAL FORM	[240D 2392 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD3, 0x0021 };
    uint32_t const ces[12] = { 0x240D, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_172)
{
    // FC4C 0021;	
    // (‎‎ﱌ‎‎) ARABIC LIGATURE NOON WITH HAH ISOLATED FORM	[240D 2392 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4C, 0x0021 };
    uint32_t const ces[12] = { 0x240D, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_173)
{
    // FCD3 003F;	
    // (‎‎ﳓ‎‎) ARABIC LIGATURE NOON WITH HAH INITIAL FORM	[240D 2392 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD3, 0x003F };
    uint32_t const ces[12] = { 0x240D, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_174)
{
    // FC4C 003F;	
    // (‎‎ﱌ‎‎) ARABIC LIGATURE NOON WITH HAH ISOLATED FORM	[240D 2392 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4C, 0x003F };
    uint32_t const ces[12] = { 0x240D, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_175)
{
    // FCD3 0061;	
    // (‎‎ﳓ‎‎) ARABIC LIGATURE NOON WITH HAH INITIAL FORM	[240D 2392 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD3, 0x0061 };
    uint32_t const ces[12] = { 0x240D, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_176)
{
    // FCD3 0041;	
    // (‎‎ﳓ‎‎) ARABIC LIGATURE NOON WITH HAH INITIAL FORM	[240D 2392 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCD3, 0x0041 };
    uint32_t const ces[12] = { 0x240D, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_177)
{
    // FC4C 0061;	
    // (‎‎ﱌ‎‎) ARABIC LIGATURE NOON WITH HAH ISOLATED FORM	[240D 2392 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4C, 0x0061 };
    uint32_t const ces[12] = { 0x240D, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_178)
{
    // FC4C 0041;	
    // (‎‎ﱌ‎‎) ARABIC LIGATURE NOON WITH HAH ISOLATED FORM	[240D 2392 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC4C, 0x0041 };
    uint32_t const ces[12] = { 0x240D, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_179)
{
    // FCD3 0062;	
    // (‎‎ﳓ‎‎) ARABIC LIGATURE NOON WITH HAH INITIAL FORM	[240D 2392 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD3, 0x0062 };
    uint32_t const ces[12] = { 0x240D, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_180)
{
    // FC4C 0062;	
    // (‎‎ﱌ‎‎) ARABIC LIGATURE NOON WITH HAH ISOLATED FORM	[240D 2392 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4C, 0x0062 };
    uint32_t const ces[12] = { 0x240D, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_181)
{
    // FD95 0021;	
    // (‎‎ﶕ‎‎) ARABIC LIGATURE NOON WITH HAH WITH MEEM INITIAL FORM	[240D 2392 2409 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD95, 0x0021 };
    uint32_t const ces[15] = { 0x240D, 0x2392, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_182)
{
    // FD95 003F;	
    // (‎‎ﶕ‎‎) ARABIC LIGATURE NOON WITH HAH WITH MEEM INITIAL FORM	[240D 2392 2409 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD95, 0x003F };
    uint32_t const ces[15] = { 0x240D, 0x2392, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_183)
{
    // FD95 0061;	
    // (‎‎ﶕ‎‎) ARABIC LIGATURE NOON WITH HAH WITH MEEM INITIAL FORM	[240D 2392 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD95, 0x0061 };
    uint32_t const ces[15] = { 0x240D, 0x2392, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_184)
{
    // FD95 0041;	
    // (‎‎ﶕ‎‎) ARABIC LIGATURE NOON WITH HAH WITH MEEM INITIAL FORM	[240D 2392 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD95, 0x0041 };
    uint32_t const ces[15] = { 0x240D, 0x2392, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_185)
{
    // FD95 0062;	
    // (‎‎ﶕ‎‎) ARABIC LIGATURE NOON WITH HAH WITH MEEM INITIAL FORM	[240D 2392 2409 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD95, 0x0062 };
    uint32_t const ces[15] = { 0x240D, 0x2392, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_186)
{
    // FD96 0021;	
    // (‎‎ﶖ‎‎) ARABIC LIGATURE NOON WITH HAH WITH ALEF MAKSURA FINAL FORM	[240D 2392 242B 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD96, 0x0021 };
    uint32_t const ces[15] = { 0x240D, 0x2392, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_187)
{
    // FD96 003F;	
    // (‎‎ﶖ‎‎) ARABIC LIGATURE NOON WITH HAH WITH ALEF MAKSURA FINAL FORM	[240D 2392 242B 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD96, 0x003F };
    uint32_t const ces[15] = { 0x240D, 0x2392, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_188)
{
    // FD96 0061;	
    // (‎‎ﶖ‎‎) ARABIC LIGATURE NOON WITH HAH WITH ALEF MAKSURA FINAL FORM	[240D 2392 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD96, 0x0061 };
    uint32_t const ces[15] = { 0x240D, 0x2392, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_189)
{
    // FD96 0041;	
    // (‎‎ﶖ‎‎) ARABIC LIGATURE NOON WITH HAH WITH ALEF MAKSURA FINAL FORM	[240D 2392 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD96, 0x0041 };
    uint32_t const ces[15] = { 0x240D, 0x2392, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_190)
{
    // FD96 0062;	
    // (‎‎ﶖ‎‎) ARABIC LIGATURE NOON WITH HAH WITH ALEF MAKSURA FINAL FORM	[240D 2392 242B 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD96, 0x0062 };
    uint32_t const ces[15] = { 0x240D, 0x2392, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_191)
{
    // FDB3 0021;	
    // (‎‎ﶳ‎‎) ARABIC LIGATURE NOON WITH HAH WITH YEH FINAL FORM	[240D 2392 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDB3, 0x0021 };
    uint32_t const ces[15] = { 0x240D, 0x2392, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_192)
{
    // FDB3 003F;	
    // (‎‎ﶳ‎‎) ARABIC LIGATURE NOON WITH HAH WITH YEH FINAL FORM	[240D 2392 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDB3, 0x003F };
    uint32_t const ces[15] = { 0x240D, 0x2392, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_193)
{
    // FDB3 0061;	
    // (‎‎ﶳ‎‎) ARABIC LIGATURE NOON WITH HAH WITH YEH FINAL FORM	[240D 2392 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDB3, 0x0061 };
    uint32_t const ces[15] = { 0x240D, 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_194)
{
    // FDB3 0041;	
    // (‎‎ﶳ‎‎) ARABIC LIGATURE NOON WITH HAH WITH YEH FINAL FORM	[240D 2392 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFDB3, 0x0041 };
    uint32_t const ces[15] = { 0x240D, 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_195)
{
    // FDB3 0062;	
    // (‎‎ﶳ‎‎) ARABIC LIGATURE NOON WITH HAH WITH YEH FINAL FORM	[240D 2392 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDB3, 0x0062 };
    uint32_t const ces[15] = { 0x240D, 0x2392, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_196)
{
    // FCD4 0021;	
    // (‎‎ﳔ‎‎) ARABIC LIGATURE NOON WITH KHAH INITIAL FORM	[240D 2393 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD4, 0x0021 };
    uint32_t const ces[12] = { 0x240D, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_197)
{
    // FC4D 0021;	
    // (‎‎ﱍ‎‎) ARABIC LIGATURE NOON WITH KHAH ISOLATED FORM	[240D 2393 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4D, 0x0021 };
    uint32_t const ces[12] = { 0x240D, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_198)
{
    // FCD4 003F;	
    // (‎‎ﳔ‎‎) ARABIC LIGATURE NOON WITH KHAH INITIAL FORM	[240D 2393 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD4, 0x003F };
    uint32_t const ces[12] = { 0x240D, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_199)
{
    // FC4D 003F;	
    // (‎‎ﱍ‎‎) ARABIC LIGATURE NOON WITH KHAH ISOLATED FORM	[240D 2393 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4D, 0x003F };
    uint32_t const ces[12] = { 0x240D, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_200)
{
    // FCD4 0061;	
    // (‎‎ﳔ‎‎) ARABIC LIGATURE NOON WITH KHAH INITIAL FORM	[240D 2393 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD4, 0x0061 };
    uint32_t const ces[12] = { 0x240D, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_201)
{
    // FCD4 0041;	
    // (‎‎ﳔ‎‎) ARABIC LIGATURE NOON WITH KHAH INITIAL FORM	[240D 2393 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCD4, 0x0041 };
    uint32_t const ces[12] = { 0x240D, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_202)
{
    // FC4D 0061;	
    // (‎‎ﱍ‎‎) ARABIC LIGATURE NOON WITH KHAH ISOLATED FORM	[240D 2393 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4D, 0x0061 };
    uint32_t const ces[12] = { 0x240D, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_203)
{
    // FC4D 0041;	
    // (‎‎ﱍ‎‎) ARABIC LIGATURE NOON WITH KHAH ISOLATED FORM	[240D 2393 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC4D, 0x0041 };
    uint32_t const ces[12] = { 0x240D, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_204)
{
    // FCD4 0062;	
    // (‎‎ﳔ‎‎) ARABIC LIGATURE NOON WITH KHAH INITIAL FORM	[240D 2393 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD4, 0x0062 };
    uint32_t const ces[12] = { 0x240D, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_205)
{
    // FC4D 0062;	
    // (‎‎ﱍ‎‎) ARABIC LIGATURE NOON WITH KHAH ISOLATED FORM	[240D 2393 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4D, 0x0062 };
    uint32_t const ces[12] = { 0x240D, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_206)
{
    // FC8A 0021;	
    // (‎‎ﲊ‎‎) ARABIC LIGATURE NOON WITH REH FINAL FORM	[240D 23AC 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8A, 0x0021 };
    uint32_t const ces[12] = { 0x240D, 0x23AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_207)
{
    // FC8A 003F;	
    // (‎‎ﲊ‎‎) ARABIC LIGATURE NOON WITH REH FINAL FORM	[240D 23AC 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8A, 0x003F };
    uint32_t const ces[12] = { 0x240D, 0x23AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_208)
{
    // FC8A 0061;	
    // (‎‎ﲊ‎‎) ARABIC LIGATURE NOON WITH REH FINAL FORM	[240D 23AC 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8A, 0x0061 };
    uint32_t const ces[12] = { 0x240D, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_209)
{
    // FC8A 0041;	
    // (‎‎ﲊ‎‎) ARABIC LIGATURE NOON WITH REH FINAL FORM	[240D 23AC 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC8A, 0x0041 };
    uint32_t const ces[12] = { 0x240D, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_210)
{
    // FC8A 0062;	
    // (‎‎ﲊ‎‎) ARABIC LIGATURE NOON WITH REH FINAL FORM	[240D 23AC 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8A, 0x0062 };
    uint32_t const ces[12] = { 0x240D, 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_211)
{
    // FC8B 0021;	
    // (‎‎ﲋ‎‎) ARABIC LIGATURE NOON WITH ZAIN FINAL FORM	[240D 23AD 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8B, 0x0021 };
    uint32_t const ces[12] = { 0x240D, 0x23AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_212)
{
    // FC8B 003F;	
    // (‎‎ﲋ‎‎) ARABIC LIGATURE NOON WITH ZAIN FINAL FORM	[240D 23AD 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8B, 0x003F };
    uint32_t const ces[12] = { 0x240D, 0x23AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_213)
{
    // FC8B 0061;	
    // (‎‎ﲋ‎‎) ARABIC LIGATURE NOON WITH ZAIN FINAL FORM	[240D 23AD 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8B, 0x0061 };
    uint32_t const ces[12] = { 0x240D, 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_214)
{
    // FC8B 0041;	
    // (‎‎ﲋ‎‎) ARABIC LIGATURE NOON WITH ZAIN FINAL FORM	[240D 23AD 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC8B, 0x0041 };
    uint32_t const ces[12] = { 0x240D, 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_215)
{
    // FC8B 0062;	
    // (‎‎ﲋ‎‎) ARABIC LIGATURE NOON WITH ZAIN FINAL FORM	[240D 23AD 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8B, 0x0062 };
    uint32_t const ces[12] = { 0x240D, 0x23AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_216)
{
    // FCD5 0021;	
    // (‎‎ﳕ‎‎) ARABIC LIGATURE NOON WITH MEEM INITIAL FORM	[240D 2409 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD5, 0x0021 };
    uint32_t const ces[12] = { 0x240D, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_217)
{
    // FCEE 0021;	
    // (‎‎ﳮ‎‎) ARABIC LIGATURE NOON WITH MEEM MEDIAL FORM	[240D 2409 0261 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCEE, 0x0021 };
    uint32_t const ces[12] = { 0x240D, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_218)
{
    // FC8C 0021;	
    // (‎‎ﲌ‎‎) ARABIC LIGATURE NOON WITH MEEM FINAL FORM	[240D 2409 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8C, 0x0021 };
    uint32_t const ces[12] = { 0x240D, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_219)
{
    // FC4E 0021;	
    // (‎‎ﱎ‎‎) ARABIC LIGATURE NOON WITH MEEM ISOLATED FORM	[240D 2409 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4E, 0x0021 };
    uint32_t const ces[12] = { 0x240D, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_220)
{
    // FCD5 003F;	
    // (‎‎ﳕ‎‎) ARABIC LIGATURE NOON WITH MEEM INITIAL FORM	[240D 2409 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD5, 0x003F };
    uint32_t const ces[12] = { 0x240D, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_221)
{
    // FCEE 003F;	
    // (‎‎ﳮ‎‎) ARABIC LIGATURE NOON WITH MEEM MEDIAL FORM	[240D 2409 0267 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCEE, 0x003F };
    uint32_t const ces[12] = { 0x240D, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_222)
{
    // FC8C 003F;	
    // (‎‎ﲌ‎‎) ARABIC LIGATURE NOON WITH MEEM FINAL FORM	[240D 2409 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8C, 0x003F };
    uint32_t const ces[12] = { 0x240D, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_223)
{
    // FC4E 003F;	
    // (‎‎ﱎ‎‎) ARABIC LIGATURE NOON WITH MEEM ISOLATED FORM	[240D 2409 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4E, 0x003F };
    uint32_t const ces[12] = { 0x240D, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_224)
{
    // FCD5 0061;	
    // (‎‎ﳕ‎‎) ARABIC LIGATURE NOON WITH MEEM INITIAL FORM	[240D 2409 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD5, 0x0061 };
    uint32_t const ces[12] = { 0x240D, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_225)
{
    // FCD5 0041;	
    // (‎‎ﳕ‎‎) ARABIC LIGATURE NOON WITH MEEM INITIAL FORM	[240D 2409 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCD5, 0x0041 };
    uint32_t const ces[12] = { 0x240D, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_226)
{
    // FCEE 0061;	
    // (‎‎ﳮ‎‎) ARABIC LIGATURE NOON WITH MEEM MEDIAL FORM	[240D 2409 1CAD | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCEE, 0x0061 };
    uint32_t const ces[12] = { 0x240D, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_227)
{
    // FCEE 0041;	
    // (‎‎ﳮ‎‎) ARABIC LIGATURE NOON WITH MEEM MEDIAL FORM	[240D 2409 1CAD | 0020 0020 0020 | 0018 0018 0008 |]

    uint32_t cps[2] = { 0xFCEE, 0x0041 };
    uint32_t const ces[12] = { 0x240D, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_228)
{
    // FC8C 0061;	
    // (‎‎ﲌ‎‎) ARABIC LIGATURE NOON WITH MEEM FINAL FORM	[240D 2409 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8C, 0x0061 };
    uint32_t const ces[12] = { 0x240D, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_229)
{
    // FC8C 0041;	
    // (‎‎ﲌ‎‎) ARABIC LIGATURE NOON WITH MEEM FINAL FORM	[240D 2409 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC8C, 0x0041 };
    uint32_t const ces[12] = { 0x240D, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_230)
{
    // FC4E 0061;	
    // (‎‎ﱎ‎‎) ARABIC LIGATURE NOON WITH MEEM ISOLATED FORM	[240D 2409 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4E, 0x0061 };
    uint32_t const ces[12] = { 0x240D, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_231)
{
    // FC4E 0041;	
    // (‎‎ﱎ‎‎) ARABIC LIGATURE NOON WITH MEEM ISOLATED FORM	[240D 2409 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC4E, 0x0041 };
    uint32_t const ces[12] = { 0x240D, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_232)
{
    // FCD5 0062;	
    // (‎‎ﳕ‎‎) ARABIC LIGATURE NOON WITH MEEM INITIAL FORM	[240D 2409 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD5, 0x0062 };
    uint32_t const ces[12] = { 0x240D, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_233)
{
    // FCEE 0062;	
    // (‎‎ﳮ‎‎) ARABIC LIGATURE NOON WITH MEEM MEDIAL FORM	[240D 2409 1CC6 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCEE, 0x0062 };
    uint32_t const ces[12] = { 0x240D, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_234)
{
    // FC8C 0062;	
    // (‎‎ﲌ‎‎) ARABIC LIGATURE NOON WITH MEEM FINAL FORM	[240D 2409 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8C, 0x0062 };
    uint32_t const ces[12] = { 0x240D, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_235)
{
    // FC4E 0062;	
    // (‎‎ﱎ‎‎) ARABIC LIGATURE NOON WITH MEEM ISOLATED FORM	[240D 2409 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4E, 0x0062 };
    uint32_t const ces[12] = { 0x240D, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_236)
{
    // FD9B 0021;	
    // (‎‎ﶛ‎‎) ARABIC LIGATURE NOON WITH MEEM WITH ALEF MAKSURA FINAL FORM	[240D 2409 242B 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD9B, 0x0021 };
    uint32_t const ces[15] = { 0x240D, 0x2409, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_237)
{
    // FD9B 003F;	
    // (‎‎ﶛ‎‎) ARABIC LIGATURE NOON WITH MEEM WITH ALEF MAKSURA FINAL FORM	[240D 2409 242B 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD9B, 0x003F };
    uint32_t const ces[15] = { 0x240D, 0x2409, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_238)
{
    // FD9B 0061;	
    // (‎‎ﶛ‎‎) ARABIC LIGATURE NOON WITH MEEM WITH ALEF MAKSURA FINAL FORM	[240D 2409 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD9B, 0x0061 };
    uint32_t const ces[15] = { 0x240D, 0x2409, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_239)
{
    // FD9B 0041;	
    // (‎‎ﶛ‎‎) ARABIC LIGATURE NOON WITH MEEM WITH ALEF MAKSURA FINAL FORM	[240D 2409 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD9B, 0x0041 };
    uint32_t const ces[15] = { 0x240D, 0x2409, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_240)
{
    // FD9B 0062;	
    // (‎‎ﶛ‎‎) ARABIC LIGATURE NOON WITH MEEM WITH ALEF MAKSURA FINAL FORM	[240D 2409 242B 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD9B, 0x0062 };
    uint32_t const ces[15] = { 0x240D, 0x2409, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_241)
{
    // FD9A 0021;	
    // (‎‎ﶚ‎‎) ARABIC LIGATURE NOON WITH MEEM WITH YEH FINAL FORM	[240D 2409 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD9A, 0x0021 };
    uint32_t const ces[15] = { 0x240D, 0x2409, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_242)
{
    // FD9A 003F;	
    // (‎‎ﶚ‎‎) ARABIC LIGATURE NOON WITH MEEM WITH YEH FINAL FORM	[240D 2409 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD9A, 0x003F };
    uint32_t const ces[15] = { 0x240D, 0x2409, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_243)
{
    // FD9A 0061;	
    // (‎‎ﶚ‎‎) ARABIC LIGATURE NOON WITH MEEM WITH YEH FINAL FORM	[240D 2409 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD9A, 0x0061 };
    uint32_t const ces[15] = { 0x240D, 0x2409, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_244)
{
    // FD9A 0041;	
    // (‎‎ﶚ‎‎) ARABIC LIGATURE NOON WITH MEEM WITH YEH FINAL FORM	[240D 2409 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD9A, 0x0041 };
    uint32_t const ces[15] = { 0x240D, 0x2409, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_245)
{
    // FD9A 0062;	
    // (‎‎ﶚ‎‎) ARABIC LIGATURE NOON WITH MEEM WITH YEH FINAL FORM	[240D 2409 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD9A, 0x0062 };
    uint32_t const ces[15] = { 0x240D, 0x2409, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_246)
{
    // FC8D 0021;	
    // (‎‎ﲍ‎‎) ARABIC LIGATURE NOON WITH NOON FINAL FORM	[240D 240D 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8D, 0x0021 };
    uint32_t const ces[12] = { 0x240D, 0x240D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_247)
{
    // FC8D 003F;	
    // (‎‎ﲍ‎‎) ARABIC LIGATURE NOON WITH NOON FINAL FORM	[240D 240D 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8D, 0x003F };
    uint32_t const ces[12] = { 0x240D, 0x240D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_248)
{
    // FC8D 0061;	
    // (‎‎ﲍ‎‎) ARABIC LIGATURE NOON WITH NOON FINAL FORM	[240D 240D 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8D, 0x0061 };
    uint32_t const ces[12] = { 0x240D, 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_249)
{
    // FC8D 0041;	
    // (‎‎ﲍ‎‎) ARABIC LIGATURE NOON WITH NOON FINAL FORM	[240D 240D 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC8D, 0x0041 };
    uint32_t const ces[12] = { 0x240D, 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_250)
{
    // FC8D 0062;	
    // (‎‎ﲍ‎‎) ARABIC LIGATURE NOON WITH NOON FINAL FORM	[240D 240D 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8D, 0x0062 };
    uint32_t const ces[12] = { 0x240D, 0x240D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_251)
{
    // FCD6 0021;	
    // (‎‎ﳖ‎‎) ARABIC LIGATURE NOON WITH HEH INITIAL FORM	[240D 2417 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD6, 0x0021 };
    uint32_t const ces[12] = { 0x240D, 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_252)
{
    // FCEF 0021;	
    // (‎‎ﳯ‎‎) ARABIC LIGATURE NOON WITH HEH MEDIAL FORM	[240D 2417 0261 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCEF, 0x0021 };
    uint32_t const ces[12] = { 0x240D, 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_253)
{
    // FCD6 003F;	
    // (‎‎ﳖ‎‎) ARABIC LIGATURE NOON WITH HEH INITIAL FORM	[240D 2417 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD6, 0x003F };
    uint32_t const ces[12] = { 0x240D, 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_254)
{
    // FCEF 003F;	
    // (‎‎ﳯ‎‎) ARABIC LIGATURE NOON WITH HEH MEDIAL FORM	[240D 2417 0267 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCEF, 0x003F };
    uint32_t const ces[12] = { 0x240D, 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_255)
{
    // FCD6 0061;	
    // (‎‎ﳖ‎‎) ARABIC LIGATURE NOON WITH HEH INITIAL FORM	[240D 2417 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD6, 0x0061 };
    uint32_t const ces[12] = { 0x240D, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_256)
{
    // FCD6 0041;	
    // (‎‎ﳖ‎‎) ARABIC LIGATURE NOON WITH HEH INITIAL FORM	[240D 2417 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCD6, 0x0041 };
    uint32_t const ces[12] = { 0x240D, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_257)
{
    // FCEF 0061;	
    // (‎‎ﳯ‎‎) ARABIC LIGATURE NOON WITH HEH MEDIAL FORM	[240D 2417 1CAD | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCEF, 0x0061 };
    uint32_t const ces[12] = { 0x240D, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_258)
{
    // FCEF 0041;	
    // (‎‎ﳯ‎‎) ARABIC LIGATURE NOON WITH HEH MEDIAL FORM	[240D 2417 1CAD | 0020 0020 0020 | 0018 0018 0008 |]

    uint32_t cps[2] = { 0xFCEF, 0x0041 };
    uint32_t const ces[12] = { 0x240D, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_259)
{
    // FCD6 0062;	
    // (‎‎ﳖ‎‎) ARABIC LIGATURE NOON WITH HEH INITIAL FORM	[240D 2417 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD6, 0x0062 };
    uint32_t const ces[12] = { 0x240D, 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_260)
{
    // FCEF 0062;	
    // (‎‎ﳯ‎‎) ARABIC LIGATURE NOON WITH HEH MEDIAL FORM	[240D 2417 1CC6 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCEF, 0x0062 };
    uint32_t const ces[12] = { 0x240D, 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_261)
{
    // FC8E 0021;	
    // (‎‎ﲎ‎‎) ARABIC LIGATURE NOON WITH ALEF MAKSURA FINAL FORM	[240D 242B 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8E, 0x0021 };
    uint32_t const ces[12] = { 0x240D, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_262)
{
    // FC4F 0021;	
    // (‎‎ﱏ‎‎) ARABIC LIGATURE NOON WITH ALEF MAKSURA ISOLATED FORM	[240D 242B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4F, 0x0021 };
    uint32_t const ces[12] = { 0x240D, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_263)
{
    // FC8E 003F;	
    // (‎‎ﲎ‎‎) ARABIC LIGATURE NOON WITH ALEF MAKSURA FINAL FORM	[240D 242B 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8E, 0x003F };
    uint32_t const ces[12] = { 0x240D, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_264)
{
    // FC4F 003F;	
    // (‎‎ﱏ‎‎) ARABIC LIGATURE NOON WITH ALEF MAKSURA ISOLATED FORM	[240D 242B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4F, 0x003F };
    uint32_t const ces[12] = { 0x240D, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_265)
{
    // FC8E 0061;	
    // (‎‎ﲎ‎‎) ARABIC LIGATURE NOON WITH ALEF MAKSURA FINAL FORM	[240D 242B 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8E, 0x0061 };
    uint32_t const ces[12] = { 0x240D, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_266)
{
    // FC8E 0041;	
    // (‎‎ﲎ‎‎) ARABIC LIGATURE NOON WITH ALEF MAKSURA FINAL FORM	[240D 242B 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC8E, 0x0041 };
    uint32_t const ces[12] = { 0x240D, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_267)
{
    // FC4F 0061;	
    // (‎‎ﱏ‎‎) ARABIC LIGATURE NOON WITH ALEF MAKSURA ISOLATED FORM	[240D 242B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4F, 0x0061 };
    uint32_t const ces[12] = { 0x240D, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_268)
{
    // FC4F 0041;	
    // (‎‎ﱏ‎‎) ARABIC LIGATURE NOON WITH ALEF MAKSURA ISOLATED FORM	[240D 242B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC4F, 0x0041 };
    uint32_t const ces[12] = { 0x240D, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_269)
{
    // FC8E 0062;	
    // (‎‎ﲎ‎‎) ARABIC LIGATURE NOON WITH ALEF MAKSURA FINAL FORM	[240D 242B 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8E, 0x0062 };
    uint32_t const ces[12] = { 0x240D, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_270)
{
    // FC4F 0062;	
    // (‎‎ﱏ‎‎) ARABIC LIGATURE NOON WITH ALEF MAKSURA ISOLATED FORM	[240D 242B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC4F, 0x0062 };
    uint32_t const ces[12] = { 0x240D, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_271)
{
    // FC8F 0021;	
    // (‎‎ﲏ‎‎) ARABIC LIGATURE NOON WITH YEH FINAL FORM	[240D 242C 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8F, 0x0021 };
    uint32_t const ces[12] = { 0x240D, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_272)
{
    // FC50 0021;	
    // (‎‎ﱐ‎‎) ARABIC LIGATURE NOON WITH YEH ISOLATED FORM	[240D 242C 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC50, 0x0021 };
    uint32_t const ces[12] = { 0x240D, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_273)
{
    // FC8F 003F;	
    // (‎‎ﲏ‎‎) ARABIC LIGATURE NOON WITH YEH FINAL FORM	[240D 242C 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8F, 0x003F };
    uint32_t const ces[12] = { 0x240D, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_274)
{
    // FC50 003F;	
    // (‎‎ﱐ‎‎) ARABIC LIGATURE NOON WITH YEH ISOLATED FORM	[240D 242C 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC50, 0x003F };
    uint32_t const ces[12] = { 0x240D, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_275)
{
    // FC8F 0061;	
    // (‎‎ﲏ‎‎) ARABIC LIGATURE NOON WITH YEH FINAL FORM	[240D 242C 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8F, 0x0061 };
    uint32_t const ces[12] = { 0x240D, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_276)
{
    // FC8F 0041;	
    // (‎‎ﲏ‎‎) ARABIC LIGATURE NOON WITH YEH FINAL FORM	[240D 242C 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC8F, 0x0041 };
    uint32_t const ces[12] = { 0x240D, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_277)
{
    // FC50 0061;	
    // (‎‎ﱐ‎‎) ARABIC LIGATURE NOON WITH YEH ISOLATED FORM	[240D 242C 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC50, 0x0061 };
    uint32_t const ces[12] = { 0x240D, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_278)
{
    // FC50 0041;	
    // (‎‎ﱐ‎‎) ARABIC LIGATURE NOON WITH YEH ISOLATED FORM	[240D 242C 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC50, 0x0041 };
    uint32_t const ces[12] = { 0x240D, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_279)
{
    // FC8F 0062;	
    // (‎‎ﲏ‎‎) ARABIC LIGATURE NOON WITH YEH FINAL FORM	[240D 242C 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC8F, 0x0062 };
    uint32_t const ces[12] = { 0x240D, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_280)
{
    // FC50 0062;	
    // (‎‎ﱐ‎‎) ARABIC LIGATURE NOON WITH YEH ISOLATED FORM	[240D 242C 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC50, 0x0062 };
    uint32_t const ces[12] = { 0x240D, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_281)
{
    // 06BA 0021;	
    // (‎‎ں‎‎) ARABIC LETTER NOON GHUNNA	[240E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BA, 0x0021 };
    uint32_t const ces[9] = { 0x240E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_282)
{
    // 1EE1D 0021;	
    // (‎‎𞸝‎‎) ARABIC MATHEMATICAL DOTLESS NOON	[240E 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE1D, 0x0021 };
    uint32_t const ces[9] = { 0x240E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_283)
{
    // 1EE5D 0021;	
    // (‎‎𞹝‎‎) ARABIC MATHEMATICAL TAILED DOTLESS NOON	[240E 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE5D, 0x0021 };
    uint32_t const ces[9] = { 0x240E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_284)
{
    // FB9F 0021;	
    // (‎‎ﮟ‎‎) ARABIC LETTER NOON GHUNNA FINAL FORM	[240E 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB9F, 0x0021 };
    uint32_t const ces[9] = { 0x240E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_285)
{
    // FB9E 0021;	
    // (‎‎ﮞ‎‎) ARABIC LETTER NOON GHUNNA ISOLATED FORM	[240E 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB9E, 0x0021 };
    uint32_t const ces[9] = { 0x240E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_286)
{
    // 06BA 003F;	
    // (‎‎ں‎‎) ARABIC LETTER NOON GHUNNA	[240E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BA, 0x003F };
    uint32_t const ces[9] = { 0x240E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_287)
{
    // 1EE1D 003F;	
    // (‎‎𞸝‎‎) ARABIC MATHEMATICAL DOTLESS NOON	[240E 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE1D, 0x003F };
    uint32_t const ces[9] = { 0x240E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_288)
{
    // 1EE5D 003F;	
    // (‎‎𞹝‎‎) ARABIC MATHEMATICAL TAILED DOTLESS NOON	[240E 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE5D, 0x003F };
    uint32_t const ces[9] = { 0x240E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_289)
{
    // FB9F 003F;	
    // (‎‎ﮟ‎‎) ARABIC LETTER NOON GHUNNA FINAL FORM	[240E 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB9F, 0x003F };
    uint32_t const ces[9] = { 0x240E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_290)
{
    // FB9E 003F;	
    // (‎‎ﮞ‎‎) ARABIC LETTER NOON GHUNNA ISOLATED FORM	[240E 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB9E, 0x003F };
    uint32_t const ces[9] = { 0x240E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_291)
{
    // 06BA 0061;	
    // (‎‎ں‎‎) ARABIC LETTER NOON GHUNNA	[240E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BA, 0x0061 };
    uint32_t const ces[9] = { 0x240E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_292)
{
    // 06BA 0041;	
    // (‎‎ں‎‎) ARABIC LETTER NOON GHUNNA	[240E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06BA, 0x0041 };
    uint32_t const ces[9] = { 0x240E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_293)
{
    // 1EE1D 0061;	
    // (‎‎𞸝‎‎) ARABIC MATHEMATICAL DOTLESS NOON	[240E 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE1D, 0x0061 };
    uint32_t const ces[9] = { 0x240E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_294)
{
    // 1EE5D 0061;	
    // (‎‎𞹝‎‎) ARABIC MATHEMATICAL TAILED DOTLESS NOON	[240E 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE5D, 0x0061 };
    uint32_t const ces[9] = { 0x240E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_295)
{
    // 1EE1D 0041;	
    // (‎‎𞸝‎‎) ARABIC MATHEMATICAL DOTLESS NOON	[240E 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE1D, 0x0041 };
    uint32_t const ces[9] = { 0x240E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_296)
{
    // 1EE5D 0041;	
    // (‎‎𞹝‎‎) ARABIC MATHEMATICAL TAILED DOTLESS NOON	[240E 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE5D, 0x0041 };
    uint32_t const ces[9] = { 0x240E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_297)
{
    // FB9F 0061;	
    // (‎‎ﮟ‎‎) ARABIC LETTER NOON GHUNNA FINAL FORM	[240E 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB9F, 0x0061 };
    uint32_t const ces[9] = { 0x240E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_298)
{
    // FB9F 0041;	
    // (‎‎ﮟ‎‎) ARABIC LETTER NOON GHUNNA FINAL FORM	[240E 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFB9F, 0x0041 };
    uint32_t const ces[9] = { 0x240E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_299)
{
    // FB9E 0061;	
    // (‎‎ﮞ‎‎) ARABIC LETTER NOON GHUNNA ISOLATED FORM	[240E 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB9E, 0x0061 };
    uint32_t const ces[9] = { 0x240E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_300)
{
    // FB9E 0041;	
    // (‎‎ﮞ‎‎) ARABIC LETTER NOON GHUNNA ISOLATED FORM	[240E 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFB9E, 0x0041 };
    uint32_t const ces[9] = { 0x240E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_301)
{
    // 06BA 0062;	
    // (‎‎ں‎‎) ARABIC LETTER NOON GHUNNA	[240E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BA, 0x0062 };
    uint32_t const ces[9] = { 0x240E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_302)
{
    // 1EE1D 0062;	
    // (‎‎𞸝‎‎) ARABIC MATHEMATICAL DOTLESS NOON	[240E 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE1D, 0x0062 };
    uint32_t const ces[9] = { 0x240E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_303)
{
    // 1EE5D 0062;	
    // (‎‎𞹝‎‎) ARABIC MATHEMATICAL TAILED DOTLESS NOON	[240E 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE5D, 0x0062 };
    uint32_t const ces[9] = { 0x240E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_304)
{
    // FB9F 0062;	
    // (‎‎ﮟ‎‎) ARABIC LETTER NOON GHUNNA FINAL FORM	[240E 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB9F, 0x0062 };
    uint32_t const ces[9] = { 0x240E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_305)
{
    // FB9E 0062;	
    // (‎‎ﮞ‎‎) ARABIC LETTER NOON GHUNNA ISOLATED FORM	[240E 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB9E, 0x0062 };
    uint32_t const ces[9] = { 0x240E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_306)
{
    // 08BD 0021;	
    // (‎‎ࢽ‎‎) ARABIC LETTER AFRICAN NOON	[240F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08BD, 0x0021 };
    uint32_t const ces[9] = { 0x240F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_307)
{
    // 08BD 003F;	
    // (‎‎ࢽ‎‎) ARABIC LETTER AFRICAN NOON	[240F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08BD, 0x003F };
    uint32_t const ces[9] = { 0x240F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_308)
{
    // 08BD 0061;	
    // (‎‎ࢽ‎‎) ARABIC LETTER AFRICAN NOON	[240F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08BD, 0x0061 };
    uint32_t const ces[9] = { 0x240F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_309)
{
    // 08BD 0041;	
    // (‎‎ࢽ‎‎) ARABIC LETTER AFRICAN NOON	[240F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08BD, 0x0041 };
    uint32_t const ces[9] = { 0x240F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_310)
{
    // 08BD 0062;	
    // (‎‎ࢽ‎‎) ARABIC LETTER AFRICAN NOON	[240F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08BD, 0x0062 };
    uint32_t const ces[9] = { 0x240F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_311)
{
    // 06BB 0021;	
    // (‎‎ڻ‎‎) ARABIC LETTER RNOON	[2410 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BB, 0x0021 };
    uint32_t const ces[9] = { 0x2410, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_312)
{
    // FBA2 0021;	
    // (‎‎ﮢ‎‎) ARABIC LETTER RNOON INITIAL FORM	[2410 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFBA2, 0x0021 };
    uint32_t const ces[9] = { 0x2410, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_313)
{
    // FBA3 0021;	
    // (‎‎ﮣ‎‎) ARABIC LETTER RNOON MEDIAL FORM	[2410 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFBA3, 0x0021 };
    uint32_t const ces[9] = { 0x2410, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_314)
{
    // FBA1 0021;	
    // (‎‎ﮡ‎‎) ARABIC LETTER RNOON FINAL FORM	[2410 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFBA1, 0x0021 };
    uint32_t const ces[9] = { 0x2410, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_315)
{
    // FBA0 0021;	
    // (‎‎ﮠ‎‎) ARABIC LETTER RNOON ISOLATED FORM	[2410 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFBA0, 0x0021 };
    uint32_t const ces[9] = { 0x2410, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_316)
{
    // 06BB 003F;	
    // (‎‎ڻ‎‎) ARABIC LETTER RNOON	[2410 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BB, 0x003F };
    uint32_t const ces[9] = { 0x2410, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_317)
{
    // FBA2 003F;	
    // (‎‎ﮢ‎‎) ARABIC LETTER RNOON INITIAL FORM	[2410 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFBA2, 0x003F };
    uint32_t const ces[9] = { 0x2410, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_318)
{
    // FBA3 003F;	
    // (‎‎ﮣ‎‎) ARABIC LETTER RNOON MEDIAL FORM	[2410 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFBA3, 0x003F };
    uint32_t const ces[9] = { 0x2410, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_319)
{
    // FBA1 003F;	
    // (‎‎ﮡ‎‎) ARABIC LETTER RNOON FINAL FORM	[2410 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFBA1, 0x003F };
    uint32_t const ces[9] = { 0x2410, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_320)
{
    // FBA0 003F;	
    // (‎‎ﮠ‎‎) ARABIC LETTER RNOON ISOLATED FORM	[2410 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFBA0, 0x003F };
    uint32_t const ces[9] = { 0x2410, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_321)
{
    // 06BB 0061;	
    // (‎‎ڻ‎‎) ARABIC LETTER RNOON	[2410 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BB, 0x0061 };
    uint32_t const ces[9] = { 0x2410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_322)
{
    // 06BB 0041;	
    // (‎‎ڻ‎‎) ARABIC LETTER RNOON	[2410 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06BB, 0x0041 };
    uint32_t const ces[9] = { 0x2410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_323)
{
    // FBA2 0061;	
    // (‎‎ﮢ‎‎) ARABIC LETTER RNOON INITIAL FORM	[2410 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFBA2, 0x0061 };
    uint32_t const ces[9] = { 0x2410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_324)
{
    // FBA2 0041;	
    // (‎‎ﮢ‎‎) ARABIC LETTER RNOON INITIAL FORM	[2410 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFBA2, 0x0041 };
    uint32_t const ces[9] = { 0x2410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_325)
{
    // FBA3 0061;	
    // (‎‎ﮣ‎‎) ARABIC LETTER RNOON MEDIAL FORM	[2410 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFBA3, 0x0061 };
    uint32_t const ces[9] = { 0x2410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_326)
{
    // FBA3 0041;	
    // (‎‎ﮣ‎‎) ARABIC LETTER RNOON MEDIAL FORM	[2410 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFBA3, 0x0041 };
    uint32_t const ces[9] = { 0x2410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_327)
{
    // FBA1 0061;	
    // (‎‎ﮡ‎‎) ARABIC LETTER RNOON FINAL FORM	[2410 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFBA1, 0x0061 };
    uint32_t const ces[9] = { 0x2410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_328)
{
    // FBA1 0041;	
    // (‎‎ﮡ‎‎) ARABIC LETTER RNOON FINAL FORM	[2410 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFBA1, 0x0041 };
    uint32_t const ces[9] = { 0x2410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_329)
{
    // FBA0 0061;	
    // (‎‎ﮠ‎‎) ARABIC LETTER RNOON ISOLATED FORM	[2410 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFBA0, 0x0061 };
    uint32_t const ces[9] = { 0x2410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_330)
{
    // FBA0 0041;	
    // (‎‎ﮠ‎‎) ARABIC LETTER RNOON ISOLATED FORM	[2410 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFBA0, 0x0041 };
    uint32_t const ces[9] = { 0x2410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_331)
{
    // 06BB 0062;	
    // (‎‎ڻ‎‎) ARABIC LETTER RNOON	[2410 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BB, 0x0062 };
    uint32_t const ces[9] = { 0x2410, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_332)
{
    // FBA2 0062;	
    // (‎‎ﮢ‎‎) ARABIC LETTER RNOON INITIAL FORM	[2410 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFBA2, 0x0062 };
    uint32_t const ces[9] = { 0x2410, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_333)
{
    // FBA3 0062;	
    // (‎‎ﮣ‎‎) ARABIC LETTER RNOON MEDIAL FORM	[2410 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFBA3, 0x0062 };
    uint32_t const ces[9] = { 0x2410, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_334)
{
    // FBA1 0062;	
    // (‎‎ﮡ‎‎) ARABIC LETTER RNOON FINAL FORM	[2410 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFBA1, 0x0062 };
    uint32_t const ces[9] = { 0x2410, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_335)
{
    // FBA0 0062;	
    // (‎‎ﮠ‎‎) ARABIC LETTER RNOON ISOLATED FORM	[2410 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFBA0, 0x0062 };
    uint32_t const ces[9] = { 0x2410, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_336)
{
    // 06BC 0021;	
    // (‎‎ڼ‎‎) ARABIC LETTER NOON WITH RING	[2411 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BC, 0x0021 };
    uint32_t const ces[9] = { 0x2411, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_337)
{
    // 06BC 003F;	
    // (‎‎ڼ‎‎) ARABIC LETTER NOON WITH RING	[2411 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BC, 0x003F };
    uint32_t const ces[9] = { 0x2411, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_338)
{
    // 06BC 0061;	
    // (‎‎ڼ‎‎) ARABIC LETTER NOON WITH RING	[2411 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BC, 0x0061 };
    uint32_t const ces[9] = { 0x2411, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_339)
{
    // 06BC 0041;	
    // (‎‎ڼ‎‎) ARABIC LETTER NOON WITH RING	[2411 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06BC, 0x0041 };
    uint32_t const ces[9] = { 0x2411, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_340)
{
    // 06BC 0062;	
    // (‎‎ڼ‎‎) ARABIC LETTER NOON WITH RING	[2411 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BC, 0x0062 };
    uint32_t const ces[9] = { 0x2411, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_341)
{
    // 06BD 0021;	
    // (‎‎ڽ‎‎) ARABIC LETTER NOON WITH THREE DOTS ABOVE	[2412 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BD, 0x0021 };
    uint32_t const ces[9] = { 0x2412, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_342)
{
    // 06BD 003F;	
    // (‎‎ڽ‎‎) ARABIC LETTER NOON WITH THREE DOTS ABOVE	[2412 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BD, 0x003F };
    uint32_t const ces[9] = { 0x2412, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_343)
{
    // 06BD 0061;	
    // (‎‎ڽ‎‎) ARABIC LETTER NOON WITH THREE DOTS ABOVE	[2412 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BD, 0x0061 };
    uint32_t const ces[9] = { 0x2412, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_344)
{
    // 06BD 0041;	
    // (‎‎ڽ‎‎) ARABIC LETTER NOON WITH THREE DOTS ABOVE	[2412 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06BD, 0x0041 };
    uint32_t const ces[9] = { 0x2412, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_345)
{
    // 06BD 0062;	
    // (‎‎ڽ‎‎) ARABIC LETTER NOON WITH THREE DOTS ABOVE	[2412 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BD, 0x0062 };
    uint32_t const ces[9] = { 0x2412, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_346)
{
    // 06B9 0021;	
    // (‎‎ڹ‎‎) ARABIC LETTER NOON WITH DOT BELOW	[2413 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B9, 0x0021 };
    uint32_t const ces[9] = { 0x2413, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_347)
{
    // 06B9 003F;	
    // (‎‎ڹ‎‎) ARABIC LETTER NOON WITH DOT BELOW	[2413 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B9, 0x003F };
    uint32_t const ces[9] = { 0x2413, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_348)
{
    // 06B9 0061;	
    // (‎‎ڹ‎‎) ARABIC LETTER NOON WITH DOT BELOW	[2413 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B9, 0x0061 };
    uint32_t const ces[9] = { 0x2413, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_349)
{
    // 06B9 0041;	
    // (‎‎ڹ‎‎) ARABIC LETTER NOON WITH DOT BELOW	[2413 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06B9, 0x0041 };
    uint32_t const ces[9] = { 0x2413, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_350)
{
    // 06B9 0062;	
    // (‎‎ڹ‎‎) ARABIC LETTER NOON WITH DOT BELOW	[2413 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06B9, 0x0062 };
    uint32_t const ces[9] = { 0x2413, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_351)
{
    // 0767 0021;	
    // (‎‎ݧ‎‎) ARABIC LETTER NOON WITH TWO DOTS BELOW	[2414 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0767, 0x0021 };
    uint32_t const ces[9] = { 0x2414, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_352)
{
    // 0767 003F;	
    // (‎‎ݧ‎‎) ARABIC LETTER NOON WITH TWO DOTS BELOW	[2414 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0767, 0x003F };
    uint32_t const ces[9] = { 0x2414, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_353)
{
    // 0767 0061;	
    // (‎‎ݧ‎‎) ARABIC LETTER NOON WITH TWO DOTS BELOW	[2414 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0767, 0x0061 };
    uint32_t const ces[9] = { 0x2414, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_354)
{
    // 0767 0041;	
    // (‎‎ݧ‎‎) ARABIC LETTER NOON WITH TWO DOTS BELOW	[2414 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0767, 0x0041 };
    uint32_t const ces[9] = { 0x2414, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_355)
{
    // 0767 0062;	
    // (‎‎ݧ‎‎) ARABIC LETTER NOON WITH TWO DOTS BELOW	[2414 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0767, 0x0062 };
    uint32_t const ces[9] = { 0x2414, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_356)
{
    // 0768 0021;	
    // (‎‎ݨ‎‎) ARABIC LETTER NOON WITH SMALL TAH	[2415 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0768, 0x0021 };
    uint32_t const ces[9] = { 0x2415, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_357)
{
    // 0768 003F;	
    // (‎‎ݨ‎‎) ARABIC LETTER NOON WITH SMALL TAH	[2415 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0768, 0x003F };
    uint32_t const ces[9] = { 0x2415, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_358)
{
    // 0768 0061;	
    // (‎‎ݨ‎‎) ARABIC LETTER NOON WITH SMALL TAH	[2415 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0768, 0x0061 };
    uint32_t const ces[9] = { 0x2415, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_359)
{
    // 0768 0041;	
    // (‎‎ݨ‎‎) ARABIC LETTER NOON WITH SMALL TAH	[2415 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0768, 0x0041 };
    uint32_t const ces[9] = { 0x2415, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_360)
{
    // 0768 0062;	
    // (‎‎ݨ‎‎) ARABIC LETTER NOON WITH SMALL TAH	[2415 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0768, 0x0062 };
    uint32_t const ces[9] = { 0x2415, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_361)
{
    // 0769 0021;	
    // (‎‎ݩ‎‎) ARABIC LETTER NOON WITH SMALL V	[2416 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0769, 0x0021 };
    uint32_t const ces[9] = { 0x2416, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_362)
{
    // 0769 003F;	
    // (‎‎ݩ‎‎) ARABIC LETTER NOON WITH SMALL V	[2416 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0769, 0x003F };
    uint32_t const ces[9] = { 0x2416, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_363)
{
    // 0769 0061;	
    // (‎‎ݩ‎‎) ARABIC LETTER NOON WITH SMALL V	[2416 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0769, 0x0061 };
    uint32_t const ces[9] = { 0x2416, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_364)
{
    // 0769 0041;	
    // (‎‎ݩ‎‎) ARABIC LETTER NOON WITH SMALL V	[2416 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0769, 0x0041 };
    uint32_t const ces[9] = { 0x2416, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_365)
{
    // 0769 0062;	
    // (‎‎ݩ‎‎) ARABIC LETTER NOON WITH SMALL V	[2416 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0769, 0x0062 };
    uint32_t const ces[9] = { 0x2416, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_366)
{
    // 0647 0021;	
    // (‎‎ه‎‎) ARABIC LETTER HEH	[2417 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0647, 0x0021 };
    uint32_t const ces[9] = { 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_367)
{
    // 1EE24 0021;	
    // (‎‎𞸤‎‎) ARABIC MATHEMATICAL INITIAL HEH	[2417 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE24, 0x0021 };
    uint32_t const ces[9] = { 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_368)
{
    // 1EE64 0021;	
    // (‎‎𞹤‎‎) ARABIC MATHEMATICAL STRETCHED HEH	[2417 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE64, 0x0021 };
    uint32_t const ces[9] = { 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_369)
{
    // 1EE84 0021;	
    // (‎‎𞺄‎‎) ARABIC MATHEMATICAL LOOPED HEH	[2417 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE84, 0x0021 };
    uint32_t const ces[9] = { 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_370)
{
    // FEEB 0021;	
    // (‎‎ﻫ‎‎) ARABIC LETTER HEH INITIAL FORM	[2417 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEEB, 0x0021 };
    uint32_t const ces[9] = { 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_371)
{
    // FEEC 0021;	
    // (‎‎ﻬ‎‎) ARABIC LETTER HEH MEDIAL FORM	[2417 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEEC, 0x0021 };
    uint32_t const ces[9] = { 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_372)
{
    // FEEA 0021;	
    // (‎‎ﻪ‎‎) ARABIC LETTER HEH FINAL FORM	[2417 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEEA, 0x0021 };
    uint32_t const ces[9] = { 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_373)
{
    // FEE9 0021;	
    // (‎‎ﻩ‎‎) ARABIC LETTER HEH ISOLATED FORM	[2417 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEE9, 0x0021 };
    uint32_t const ces[9] = { 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_374)
{
    // FCD9 0021;	
    // (‎‎ﳙ‎‎) ARABIC LIGATURE HEH WITH SUPERSCRIPT ALEF INITIAL FORM	[2417 0261 | 0020 0098 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD9, 0x0021 };
    uint32_t const ces[11] = { 0x2417, 0x0261, 0x0000, 0x0020, 0x0098, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_375)
{
    // 0647 003F;	
    // (‎‎ه‎‎) ARABIC LETTER HEH	[2417 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0647, 0x003F };
    uint32_t const ces[9] = { 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_376)
{
    // 1EE24 003F;	
    // (‎‎𞸤‎‎) ARABIC MATHEMATICAL INITIAL HEH	[2417 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE24, 0x003F };
    uint32_t const ces[9] = { 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_377)
{
    // 1EE64 003F;	
    // (‎‎𞹤‎‎) ARABIC MATHEMATICAL STRETCHED HEH	[2417 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE64, 0x003F };
    uint32_t const ces[9] = { 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_378)
{
    // 1EE84 003F;	
    // (‎‎𞺄‎‎) ARABIC MATHEMATICAL LOOPED HEH	[2417 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE84, 0x003F };
    uint32_t const ces[9] = { 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_379)
{
    // FEEB 003F;	
    // (‎‎ﻫ‎‎) ARABIC LETTER HEH INITIAL FORM	[2417 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEEB, 0x003F };
    uint32_t const ces[9] = { 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_380)
{
    // FEEC 003F;	
    // (‎‎ﻬ‎‎) ARABIC LETTER HEH MEDIAL FORM	[2417 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEEC, 0x003F };
    uint32_t const ces[9] = { 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_381)
{
    // FEEA 003F;	
    // (‎‎ﻪ‎‎) ARABIC LETTER HEH FINAL FORM	[2417 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEEA, 0x003F };
    uint32_t const ces[9] = { 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_382)
{
    // FEE9 003F;	
    // (‎‎ﻩ‎‎) ARABIC LETTER HEH ISOLATED FORM	[2417 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEE9, 0x003F };
    uint32_t const ces[9] = { 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_383)
{
    // FCD9 003F;	
    // (‎‎ﳙ‎‎) ARABIC LIGATURE HEH WITH SUPERSCRIPT ALEF INITIAL FORM	[2417 0267 | 0020 0098 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD9, 0x003F };
    uint32_t const ces[11] = { 0x2417, 0x0267, 0x0000, 0x0020, 0x0098, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_384)
{
    // 0647 0061;	
    // (‎‎ه‎‎) ARABIC LETTER HEH	[2417 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0647, 0x0061 };
    uint32_t const ces[9] = { 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_385)
{
    // 0647 0041;	
    // (‎‎ه‎‎) ARABIC LETTER HEH	[2417 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0647, 0x0041 };
    uint32_t const ces[9] = { 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_386)
{
    // 1EE24 0061;	
    // (‎‎𞸤‎‎) ARABIC MATHEMATICAL INITIAL HEH	[2417 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE24, 0x0061 };
    uint32_t const ces[9] = { 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_387)
{
    // 1EE64 0061;	
    // (‎‎𞹤‎‎) ARABIC MATHEMATICAL STRETCHED HEH	[2417 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE64, 0x0061 };
    uint32_t const ces[9] = { 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_388)
{
    // 1EE84 0061;	
    // (‎‎𞺄‎‎) ARABIC MATHEMATICAL LOOPED HEH	[2417 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE84, 0x0061 };
    uint32_t const ces[9] = { 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_389)
{
    // 1EE24 0041;	
    // (‎‎𞸤‎‎) ARABIC MATHEMATICAL INITIAL HEH	[2417 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE24, 0x0041 };
    uint32_t const ces[9] = { 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_390)
{
    // 1EE64 0041;	
    // (‎‎𞹤‎‎) ARABIC MATHEMATICAL STRETCHED HEH	[2417 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE64, 0x0041 };
    uint32_t const ces[9] = { 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_391)
{
    // 1EE84 0041;	
    // (‎‎𞺄‎‎) ARABIC MATHEMATICAL LOOPED HEH	[2417 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE84, 0x0041 };
    uint32_t const ces[9] = { 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_392)
{
    // FEEB 0061;	
    // (‎‎ﻫ‎‎) ARABIC LETTER HEH INITIAL FORM	[2417 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEEB, 0x0061 };
    uint32_t const ces[9] = { 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_393)
{
    // FEEB 0041;	
    // (‎‎ﻫ‎‎) ARABIC LETTER HEH INITIAL FORM	[2417 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFEEB, 0x0041 };
    uint32_t const ces[9] = { 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_394)
{
    // FEEC 0061;	
    // (‎‎ﻬ‎‎) ARABIC LETTER HEH MEDIAL FORM	[2417 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEEC, 0x0061 };
    uint32_t const ces[9] = { 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_395)
{
    // FEEC 0041;	
    // (‎‎ﻬ‎‎) ARABIC LETTER HEH MEDIAL FORM	[2417 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFEEC, 0x0041 };
    uint32_t const ces[9] = { 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_396)
{
    // FEEA 0061;	
    // (‎‎ﻪ‎‎) ARABIC LETTER HEH FINAL FORM	[2417 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEEA, 0x0061 };
    uint32_t const ces[9] = { 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_397)
{
    // FEEA 0041;	
    // (‎‎ﻪ‎‎) ARABIC LETTER HEH FINAL FORM	[2417 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFEEA, 0x0041 };
    uint32_t const ces[9] = { 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_398)
{
    // FEE9 0061;	
    // (‎‎ﻩ‎‎) ARABIC LETTER HEH ISOLATED FORM	[2417 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEE9, 0x0061 };
    uint32_t const ces[9] = { 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_399)
{
    // FEE9 0041;	
    // (‎‎ﻩ‎‎) ARABIC LETTER HEH ISOLATED FORM	[2417 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFEE9, 0x0041 };
    uint32_t const ces[9] = { 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_400)
{
    // FCD9 0061;	
    // (‎‎ﳙ‎‎) ARABIC LIGATURE HEH WITH SUPERSCRIPT ALEF INITIAL FORM	[2417 1CAD | 0020 0098 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD9, 0x0061 };
    uint32_t const ces[11] = { 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0098, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_401)
{
    // FCD9 0041;	
    // (‎‎ﳙ‎‎) ARABIC LIGATURE HEH WITH SUPERSCRIPT ALEF INITIAL FORM	[2417 1CAD | 0020 0098 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCD9, 0x0041 };
    uint32_t const ces[11] = { 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0098, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_402)
{
    // 0647 0062;	
    // (‎‎ه‎‎) ARABIC LETTER HEH	[2417 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0647, 0x0062 };
    uint32_t const ces[9] = { 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_403)
{
    // 1EE24 0062;	
    // (‎‎𞸤‎‎) ARABIC MATHEMATICAL INITIAL HEH	[2417 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE24, 0x0062 };
    uint32_t const ces[9] = { 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_404)
{
    // 1EE64 0062;	
    // (‎‎𞹤‎‎) ARABIC MATHEMATICAL STRETCHED HEH	[2417 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE64, 0x0062 };
    uint32_t const ces[9] = { 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_405)
{
    // 1EE84 0062;	
    // (‎‎𞺄‎‎) ARABIC MATHEMATICAL LOOPED HEH	[2417 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE84, 0x0062 };
    uint32_t const ces[9] = { 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_406)
{
    // FEEB 0062;	
    // (‎‎ﻫ‎‎) ARABIC LETTER HEH INITIAL FORM	[2417 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEEB, 0x0062 };
    uint32_t const ces[9] = { 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_407)
{
    // FEEC 0062;	
    // (‎‎ﻬ‎‎) ARABIC LETTER HEH MEDIAL FORM	[2417 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEEC, 0x0062 };
    uint32_t const ces[9] = { 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_408)
{
    // FEEA 0062;	
    // (‎‎ﻪ‎‎) ARABIC LETTER HEH FINAL FORM	[2417 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEEA, 0x0062 };
    uint32_t const ces[9] = { 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_409)
{
    // FEE9 0062;	
    // (‎‎ﻩ‎‎) ARABIC LETTER HEH ISOLATED FORM	[2417 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEE9, 0x0062 };
    uint32_t const ces[9] = { 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_410)
{
    // FCD9 0062;	
    // (‎‎ﳙ‎‎) ARABIC LIGATURE HEH WITH SUPERSCRIPT ALEF INITIAL FORM	[2417 1CC6 | 0020 0098 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD9, 0x0062 };
    uint32_t const ces[11] = { 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0098, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_411)
{
    // FCD7 0021;	
    // (‎‎ﳗ‎‎) ARABIC LIGATURE HEH WITH JEEM INITIAL FORM	[2417 238B 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD7, 0x0021 };
    uint32_t const ces[12] = { 0x2417, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_412)
{
    // FC51 0021;	
    // (‎‎ﱑ‎‎) ARABIC LIGATURE HEH WITH JEEM ISOLATED FORM	[2417 238B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC51, 0x0021 };
    uint32_t const ces[12] = { 0x2417, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_413)
{
    // FCD7 003F;	
    // (‎‎ﳗ‎‎) ARABIC LIGATURE HEH WITH JEEM INITIAL FORM	[2417 238B 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD7, 0x003F };
    uint32_t const ces[12] = { 0x2417, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_414)
{
    // FC51 003F;	
    // (‎‎ﱑ‎‎) ARABIC LIGATURE HEH WITH JEEM ISOLATED FORM	[2417 238B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC51, 0x003F };
    uint32_t const ces[12] = { 0x2417, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_415)
{
    // FCD7 0061;	
    // (‎‎ﳗ‎‎) ARABIC LIGATURE HEH WITH JEEM INITIAL FORM	[2417 238B 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD7, 0x0061 };
    uint32_t const ces[12] = { 0x2417, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_416)
{
    // FCD7 0041;	
    // (‎‎ﳗ‎‎) ARABIC LIGATURE HEH WITH JEEM INITIAL FORM	[2417 238B 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCD7, 0x0041 };
    uint32_t const ces[12] = { 0x2417, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_417)
{
    // FC51 0061;	
    // (‎‎ﱑ‎‎) ARABIC LIGATURE HEH WITH JEEM ISOLATED FORM	[2417 238B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC51, 0x0061 };
    uint32_t const ces[12] = { 0x2417, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_418)
{
    // FC51 0041;	
    // (‎‎ﱑ‎‎) ARABIC LIGATURE HEH WITH JEEM ISOLATED FORM	[2417 238B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC51, 0x0041 };
    uint32_t const ces[12] = { 0x2417, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_419)
{
    // FCD7 0062;	
    // (‎‎ﳗ‎‎) ARABIC LIGATURE HEH WITH JEEM INITIAL FORM	[2417 238B 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD7, 0x0062 };
    uint32_t const ces[12] = { 0x2417, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_420)
{
    // FC51 0062;	
    // (‎‎ﱑ‎‎) ARABIC LIGATURE HEH WITH JEEM ISOLATED FORM	[2417 238B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC51, 0x0062 };
    uint32_t const ces[12] = { 0x2417, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_421)
{
    // FCD8 0021;	
    // (‎‎ﳘ‎‎) ARABIC LIGATURE HEH WITH MEEM INITIAL FORM	[2417 2409 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD8, 0x0021 };
    uint32_t const ces[12] = { 0x2417, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_422)
{
    // FC52 0021;	
    // (‎‎ﱒ‎‎) ARABIC LIGATURE HEH WITH MEEM ISOLATED FORM	[2417 2409 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC52, 0x0021 };
    uint32_t const ces[12] = { 0x2417, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_423)
{
    // FCD8 003F;	
    // (‎‎ﳘ‎‎) ARABIC LIGATURE HEH WITH MEEM INITIAL FORM	[2417 2409 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD8, 0x003F };
    uint32_t const ces[12] = { 0x2417, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_424)
{
    // FC52 003F;	
    // (‎‎ﱒ‎‎) ARABIC LIGATURE HEH WITH MEEM ISOLATED FORM	[2417 2409 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC52, 0x003F };
    uint32_t const ces[12] = { 0x2417, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_425)
{
    // FCD8 0061;	
    // (‎‎ﳘ‎‎) ARABIC LIGATURE HEH WITH MEEM INITIAL FORM	[2417 2409 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD8, 0x0061 };
    uint32_t const ces[12] = { 0x2417, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_426)
{
    // FCD8 0041;	
    // (‎‎ﳘ‎‎) ARABIC LIGATURE HEH WITH MEEM INITIAL FORM	[2417 2409 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCD8, 0x0041 };
    uint32_t const ces[12] = { 0x2417, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_427)
{
    // FC52 0061;	
    // (‎‎ﱒ‎‎) ARABIC LIGATURE HEH WITH MEEM ISOLATED FORM	[2417 2409 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC52, 0x0061 };
    uint32_t const ces[12] = { 0x2417, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_428)
{
    // FC52 0041;	
    // (‎‎ﱒ‎‎) ARABIC LIGATURE HEH WITH MEEM ISOLATED FORM	[2417 2409 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC52, 0x0041 };
    uint32_t const ces[12] = { 0x2417, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_429)
{
    // FCD8 0062;	
    // (‎‎ﳘ‎‎) ARABIC LIGATURE HEH WITH MEEM INITIAL FORM	[2417 2409 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCD8, 0x0062 };
    uint32_t const ces[12] = { 0x2417, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_430)
{
    // FC52 0062;	
    // (‎‎ﱒ‎‎) ARABIC LIGATURE HEH WITH MEEM ISOLATED FORM	[2417 2409 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC52, 0x0062 };
    uint32_t const ces[12] = { 0x2417, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_431)
{
    // FD93 0021;	
    // (‎‎ﶓ‎‎) ARABIC LIGATURE HEH WITH MEEM WITH JEEM INITIAL FORM	[2417 2409 238B 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD93, 0x0021 };
    uint32_t const ces[15] = { 0x2417, 0x2409, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_432)
{
    // FD93 003F;	
    // (‎‎ﶓ‎‎) ARABIC LIGATURE HEH WITH MEEM WITH JEEM INITIAL FORM	[2417 2409 238B 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD93, 0x003F };
    uint32_t const ces[15] = { 0x2417, 0x2409, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_433)
{
    // FD93 0061;	
    // (‎‎ﶓ‎‎) ARABIC LIGATURE HEH WITH MEEM WITH JEEM INITIAL FORM	[2417 2409 238B 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD93, 0x0061 };
    uint32_t const ces[15] = { 0x2417, 0x2409, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_434)
{
    // FD93 0041;	
    // (‎‎ﶓ‎‎) ARABIC LIGATURE HEH WITH MEEM WITH JEEM INITIAL FORM	[2417 2409 238B 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD93, 0x0041 };
    uint32_t const ces[15] = { 0x2417, 0x2409, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_435)
{
    // FD93 0062;	
    // (‎‎ﶓ‎‎) ARABIC LIGATURE HEH WITH MEEM WITH JEEM INITIAL FORM	[2417 2409 238B 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD93, 0x0062 };
    uint32_t const ces[15] = { 0x2417, 0x2409, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_436)
{
    // FD94 0021;	
    // (‎‎ﶔ‎‎) ARABIC LIGATURE HEH WITH MEEM WITH MEEM INITIAL FORM	[2417 2409 2409 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD94, 0x0021 };
    uint32_t const ces[15] = { 0x2417, 0x2409, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_437)
{
    // FD94 003F;	
    // (‎‎ﶔ‎‎) ARABIC LIGATURE HEH WITH MEEM WITH MEEM INITIAL FORM	[2417 2409 2409 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD94, 0x003F };
    uint32_t const ces[15] = { 0x2417, 0x2409, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_438)
{
    // FD94 0061;	
    // (‎‎ﶔ‎‎) ARABIC LIGATURE HEH WITH MEEM WITH MEEM INITIAL FORM	[2417 2409 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD94, 0x0061 };
    uint32_t const ces[15] = { 0x2417, 0x2409, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_439)
{
    // FD94 0041;	
    // (‎‎ﶔ‎‎) ARABIC LIGATURE HEH WITH MEEM WITH MEEM INITIAL FORM	[2417 2409 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD94, 0x0041 };
    uint32_t const ces[15] = { 0x2417, 0x2409, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_440)
{
    // FD94 0062;	
    // (‎‎ﶔ‎‎) ARABIC LIGATURE HEH WITH MEEM WITH MEEM INITIAL FORM	[2417 2409 2409 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD94, 0x0062 };
    uint32_t const ces[15] = { 0x2417, 0x2409, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_441)
{
    // FC53 0021;	
    // (‎‎ﱓ‎‎) ARABIC LIGATURE HEH WITH ALEF MAKSURA ISOLATED FORM	[2417 242B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC53, 0x0021 };
    uint32_t const ces[12] = { 0x2417, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_442)
{
    // FC53 003F;	
    // (‎‎ﱓ‎‎) ARABIC LIGATURE HEH WITH ALEF MAKSURA ISOLATED FORM	[2417 242B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC53, 0x003F };
    uint32_t const ces[12] = { 0x2417, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_443)
{
    // FC53 0061;	
    // (‎‎ﱓ‎‎) ARABIC LIGATURE HEH WITH ALEF MAKSURA ISOLATED FORM	[2417 242B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC53, 0x0061 };
    uint32_t const ces[12] = { 0x2417, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_444)
{
    // FC53 0041;	
    // (‎‎ﱓ‎‎) ARABIC LIGATURE HEH WITH ALEF MAKSURA ISOLATED FORM	[2417 242B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC53, 0x0041 };
    uint32_t const ces[12] = { 0x2417, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_445)
{
    // FC53 0062;	
    // (‎‎ﱓ‎‎) ARABIC LIGATURE HEH WITH ALEF MAKSURA ISOLATED FORM	[2417 242B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC53, 0x0062 };
    uint32_t const ces[12] = { 0x2417, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_446)
{
    // FC54 0021;	
    // (‎‎ﱔ‎‎) ARABIC LIGATURE HEH WITH YEH ISOLATED FORM	[2417 242C 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC54, 0x0021 };
    uint32_t const ces[12] = { 0x2417, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_447)
{
    // FC54 003F;	
    // (‎‎ﱔ‎‎) ARABIC LIGATURE HEH WITH YEH ISOLATED FORM	[2417 242C 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC54, 0x003F };
    uint32_t const ces[12] = { 0x2417, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_448)
{
    // FC54 0061;	
    // (‎‎ﱔ‎‎) ARABIC LIGATURE HEH WITH YEH ISOLATED FORM	[2417 242C 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC54, 0x0061 };
    uint32_t const ces[12] = { 0x2417, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_449)
{
    // FC54 0041;	
    // (‎‎ﱔ‎‎) ARABIC LIGATURE HEH WITH YEH ISOLATED FORM	[2417 242C 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC54, 0x0041 };
    uint32_t const ces[12] = { 0x2417, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_450)
{
    // FC54 0062;	
    // (‎‎ﱔ‎‎) ARABIC LIGATURE HEH WITH YEH ISOLATED FORM	[2417 242C 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC54, 0x0062 };
    uint32_t const ces[12] = { 0x2417, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_451)
{
    // 06BE 0021;	
    // (‎‎ھ‎‎) ARABIC LETTER HEH DOACHASHMEE	[2418 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BE, 0x0021 };
    uint32_t const ces[9] = { 0x2418, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_452)
{
    // FBAC 0021;	
    // (‎‎ﮬ‎‎) ARABIC LETTER HEH DOACHASHMEE INITIAL FORM	[2418 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFBAC, 0x0021 };
    uint32_t const ces[9] = { 0x2418, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_453)
{
    // FBAD 0021;	
    // (‎‎ﮭ‎‎) ARABIC LETTER HEH DOACHASHMEE MEDIAL FORM	[2418 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFBAD, 0x0021 };
    uint32_t const ces[9] = { 0x2418, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_454)
{
    // FBAB 0021;	
    // (‎‎ﮫ‎‎) ARABIC LETTER HEH DOACHASHMEE FINAL FORM	[2418 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFBAB, 0x0021 };
    uint32_t const ces[9] = { 0x2418, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_455)
{
    // FBAA 0021;	
    // (‎‎ﮪ‎‎) ARABIC LETTER HEH DOACHASHMEE ISOLATED FORM	[2418 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFBAA, 0x0021 };
    uint32_t const ces[9] = { 0x2418, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_456)
{
    // 06BE 003F;	
    // (‎‎ھ‎‎) ARABIC LETTER HEH DOACHASHMEE	[2418 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BE, 0x003F };
    uint32_t const ces[9] = { 0x2418, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_457)
{
    // FBAC 003F;	
    // (‎‎ﮬ‎‎) ARABIC LETTER HEH DOACHASHMEE INITIAL FORM	[2418 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFBAC, 0x003F };
    uint32_t const ces[9] = { 0x2418, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_458)
{
    // FBAD 003F;	
    // (‎‎ﮭ‎‎) ARABIC LETTER HEH DOACHASHMEE MEDIAL FORM	[2418 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFBAD, 0x003F };
    uint32_t const ces[9] = { 0x2418, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_459)
{
    // FBAB 003F;	
    // (‎‎ﮫ‎‎) ARABIC LETTER HEH DOACHASHMEE FINAL FORM	[2418 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFBAB, 0x003F };
    uint32_t const ces[9] = { 0x2418, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_460)
{
    // FBAA 003F;	
    // (‎‎ﮪ‎‎) ARABIC LETTER HEH DOACHASHMEE ISOLATED FORM	[2418 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFBAA, 0x003F };
    uint32_t const ces[9] = { 0x2418, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_461)
{
    // 06BE 0061;	
    // (‎‎ھ‎‎) ARABIC LETTER HEH DOACHASHMEE	[2418 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BE, 0x0061 };
    uint32_t const ces[9] = { 0x2418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_462)
{
    // 06BE 0041;	
    // (‎‎ھ‎‎) ARABIC LETTER HEH DOACHASHMEE	[2418 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06BE, 0x0041 };
    uint32_t const ces[9] = { 0x2418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_463)
{
    // FBAC 0061;	
    // (‎‎ﮬ‎‎) ARABIC LETTER HEH DOACHASHMEE INITIAL FORM	[2418 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFBAC, 0x0061 };
    uint32_t const ces[9] = { 0x2418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_464)
{
    // FBAC 0041;	
    // (‎‎ﮬ‎‎) ARABIC LETTER HEH DOACHASHMEE INITIAL FORM	[2418 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFBAC, 0x0041 };
    uint32_t const ces[9] = { 0x2418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_465)
{
    // FBAD 0061;	
    // (‎‎ﮭ‎‎) ARABIC LETTER HEH DOACHASHMEE MEDIAL FORM	[2418 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFBAD, 0x0061 };
    uint32_t const ces[9] = { 0x2418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_466)
{
    // FBAD 0041;	
    // (‎‎ﮭ‎‎) ARABIC LETTER HEH DOACHASHMEE MEDIAL FORM	[2418 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFBAD, 0x0041 };
    uint32_t const ces[9] = { 0x2418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_467)
{
    // FBAB 0061;	
    // (‎‎ﮫ‎‎) ARABIC LETTER HEH DOACHASHMEE FINAL FORM	[2418 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFBAB, 0x0061 };
    uint32_t const ces[9] = { 0x2418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_468)
{
    // FBAB 0041;	
    // (‎‎ﮫ‎‎) ARABIC LETTER HEH DOACHASHMEE FINAL FORM	[2418 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFBAB, 0x0041 };
    uint32_t const ces[9] = { 0x2418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_469)
{
    // FBAA 0061;	
    // (‎‎ﮪ‎‎) ARABIC LETTER HEH DOACHASHMEE ISOLATED FORM	[2418 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFBAA, 0x0061 };
    uint32_t const ces[9] = { 0x2418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_470)
{
    // FBAA 0041;	
    // (‎‎ﮪ‎‎) ARABIC LETTER HEH DOACHASHMEE ISOLATED FORM	[2418 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFBAA, 0x0041 };
    uint32_t const ces[9] = { 0x2418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_471)
{
    // 06BE 0062;	
    // (‎‎ھ‎‎) ARABIC LETTER HEH DOACHASHMEE	[2418 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BE, 0x0062 };
    uint32_t const ces[9] = { 0x2418, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_472)
{
    // FBAC 0062;	
    // (‎‎ﮬ‎‎) ARABIC LETTER HEH DOACHASHMEE INITIAL FORM	[2418 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFBAC, 0x0062 };
    uint32_t const ces[9] = { 0x2418, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_473)
{
    // FBAD 0062;	
    // (‎‎ﮭ‎‎) ARABIC LETTER HEH DOACHASHMEE MEDIAL FORM	[2418 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFBAD, 0x0062 };
    uint32_t const ces[9] = { 0x2418, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_474)
{
    // FBAB 0062;	
    // (‎‎ﮫ‎‎) ARABIC LETTER HEH DOACHASHMEE FINAL FORM	[2418 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFBAB, 0x0062 };
    uint32_t const ces[9] = { 0x2418, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_475)
{
    // FBAA 0062;	
    // (‎‎ﮪ‎‎) ARABIC LETTER HEH DOACHASHMEE ISOLATED FORM	[2418 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFBAA, 0x0062 };
    uint32_t const ces[9] = { 0x2418, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_476)
{
    // 06C1 0334 0654;	
    // (‎‎ہ̴‎‎) ARABIC LETTER HEH GOAL, COMBINING TILDE OVERLAY	[2419 | 0020 004A 0083 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x06C1, 0x0334, 0x0654 };
    uint32_t const ces[10] = { 0x2419, 0x0000, 0x0020, 0x004A, 0x0083, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_477)
{
    // 06C1 0654 0334;	
    // (‎‎ۂ‎‎) ARABIC LETTER HEH GOAL, ARABIC HAMZA ABOVE	[2419 | 0020 004A 0083 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x06C1, 0x0654, 0x0334 };
    uint32_t const ces[10] = { 0x2419, 0x0000, 0x0020, 0x004A, 0x0083, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_478)
{
    // 06C2 0334;	
    // (‎‎ۂ‎‎) ARABIC LETTER HEH GOAL WITH HAMZA ABOVE	[2419 | 0020 004A 0083 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x06C2, 0x0334 };
    uint32_t const ces[10] = { 0x2419, 0x0000, 0x0020, 0x004A, 0x0083, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_479)
{
    // 06C1 0021;	
    // (‎‎ہ‎‎) ARABIC LETTER HEH GOAL	[2419 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06C1, 0x0021 };
    uint32_t const ces[9] = { 0x2419, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_480)
{
    // FBA8 0021;	
    // (‎‎ﮨ‎‎) ARABIC LETTER HEH GOAL INITIAL FORM	[2419 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFBA8, 0x0021 };
    uint32_t const ces[9] = { 0x2419, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_481)
{
    // FBA9 0021;	
    // (‎‎ﮩ‎‎) ARABIC LETTER HEH GOAL MEDIAL FORM	[2419 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFBA9, 0x0021 };
    uint32_t const ces[9] = { 0x2419, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_482)
{
    // FBA7 0021;	
    // (‎‎ﮧ‎‎) ARABIC LETTER HEH GOAL FINAL FORM	[2419 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFBA7, 0x0021 };
    uint32_t const ces[9] = { 0x2419, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_483)
{
    // FBA6 0021;	
    // (‎‎ﮦ‎‎) ARABIC LETTER HEH GOAL ISOLATED FORM	[2419 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFBA6, 0x0021 };
    uint32_t const ces[9] = { 0x2419, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_484)
{
    // 06C2 0021;	
    // (‎‎ۂ‎‎) ARABIC LETTER HEH GOAL WITH HAMZA ABOVE	[2419 0261 | 0020 0083 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x06C2, 0x0021 };
    uint32_t const ces[11] = { 0x2419, 0x0261, 0x0000, 0x0020, 0x0083, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_485)
{
    // 06C1 003F;	
    // (‎‎ہ‎‎) ARABIC LETTER HEH GOAL	[2419 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06C1, 0x003F };
    uint32_t const ces[9] = { 0x2419, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_486)
{
    // FBA8 003F;	
    // (‎‎ﮨ‎‎) ARABIC LETTER HEH GOAL INITIAL FORM	[2419 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFBA8, 0x003F };
    uint32_t const ces[9] = { 0x2419, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_487)
{
    // FBA9 003F;	
    // (‎‎ﮩ‎‎) ARABIC LETTER HEH GOAL MEDIAL FORM	[2419 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFBA9, 0x003F };
    uint32_t const ces[9] = { 0x2419, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_488)
{
    // FBA7 003F;	
    // (‎‎ﮧ‎‎) ARABIC LETTER HEH GOAL FINAL FORM	[2419 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFBA7, 0x003F };
    uint32_t const ces[9] = { 0x2419, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_489)
{
    // FBA6 003F;	
    // (‎‎ﮦ‎‎) ARABIC LETTER HEH GOAL ISOLATED FORM	[2419 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFBA6, 0x003F };
    uint32_t const ces[9] = { 0x2419, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_490)
{
    // 06C2 003F;	
    // (‎‎ۂ‎‎) ARABIC LETTER HEH GOAL WITH HAMZA ABOVE	[2419 0267 | 0020 0083 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x06C2, 0x003F };
    uint32_t const ces[11] = { 0x2419, 0x0267, 0x0000, 0x0020, 0x0083, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_491)
{
    // 06C1 0061;	
    // (‎‎ہ‎‎) ARABIC LETTER HEH GOAL	[2419 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06C1, 0x0061 };
    uint32_t const ces[9] = { 0x2419, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_492)
{
    // 06C1 0041;	
    // (‎‎ہ‎‎) ARABIC LETTER HEH GOAL	[2419 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06C1, 0x0041 };
    uint32_t const ces[9] = { 0x2419, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_493)
{
    // FBA8 0061;	
    // (‎‎ﮨ‎‎) ARABIC LETTER HEH GOAL INITIAL FORM	[2419 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFBA8, 0x0061 };
    uint32_t const ces[9] = { 0x2419, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_494)
{
    // FBA8 0041;	
    // (‎‎ﮨ‎‎) ARABIC LETTER HEH GOAL INITIAL FORM	[2419 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFBA8, 0x0041 };
    uint32_t const ces[9] = { 0x2419, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_495)
{
    // FBA9 0061;	
    // (‎‎ﮩ‎‎) ARABIC LETTER HEH GOAL MEDIAL FORM	[2419 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFBA9, 0x0061 };
    uint32_t const ces[9] = { 0x2419, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_496)
{
    // FBA9 0041;	
    // (‎‎ﮩ‎‎) ARABIC LETTER HEH GOAL MEDIAL FORM	[2419 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFBA9, 0x0041 };
    uint32_t const ces[9] = { 0x2419, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_497)
{
    // FBA7 0061;	
    // (‎‎ﮧ‎‎) ARABIC LETTER HEH GOAL FINAL FORM	[2419 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFBA7, 0x0061 };
    uint32_t const ces[9] = { 0x2419, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_498)
{
    // FBA7 0041;	
    // (‎‎ﮧ‎‎) ARABIC LETTER HEH GOAL FINAL FORM	[2419 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFBA7, 0x0041 };
    uint32_t const ces[9] = { 0x2419, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_156_499)
{
    // FBA6 0061;	
    // (‎‎ﮦ‎‎) ARABIC LETTER HEH GOAL ISOLATED FORM	[2419 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFBA6, 0x0061 };
    uint32_t const ces[9] = { 0x2419, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

