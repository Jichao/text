// Warning! This file is autogenerated.
#include <boost/text/detail/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_142_000)
{
    // 11C8F ; [.2FD6.0020.0002] 
    // MARCHEN LETTER A

    uint32_t const cps[1] = { 0x11c8f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fd6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_001)
{
    // 11C92 ; [.2F9E.0020.0002] 
    // MARCHEN SUBJOINED LETTER KA

    uint32_t const cps[1] = { 0x11c92 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2f9e), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_002)
{
    // 11C93 ; [.2FA0.0020.0002] 
    // MARCHEN SUBJOINED LETTER KHA

    uint32_t const cps[1] = { 0x11c93 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fa0), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_003)
{
    // 11C94 ; [.2FA2.0020.0002] 
    // MARCHEN SUBJOINED LETTER GA

    uint32_t const cps[1] = { 0x11c94 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fa2), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_004)
{
    // 11C95 ; [.2FA4.0020.0002] 
    // MARCHEN SUBJOINED LETTER NGA

    uint32_t const cps[1] = { 0x11c95 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fa4), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_005)
{
    // 11C96 ; [.2FA6.0020.0002] 
    // MARCHEN SUBJOINED LETTER CA

    uint32_t const cps[1] = { 0x11c96 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fa6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_006)
{
    // 11C97 ; [.2FA8.0020.0002] 
    // MARCHEN SUBJOINED LETTER CHA

    uint32_t const cps[1] = { 0x11c97 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fa8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_007)
{
    // 11C98 ; [.2FAA.0020.0002] 
    // MARCHEN SUBJOINED LETTER JA

    uint32_t const cps[1] = { 0x11c98 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2faa), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_008)
{
    // 11C99 ; [.2FAC.0020.0002] 
    // MARCHEN SUBJOINED LETTER NYA

    uint32_t const cps[1] = { 0x11c99 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fac), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_009)
{
    // 11C9A ; [.2FAE.0020.0002] 
    // MARCHEN SUBJOINED LETTER TA

    uint32_t const cps[1] = { 0x11c9a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fae), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_010)
{
    // 11C9B ; [.2FB0.0020.0002] 
    // MARCHEN SUBJOINED LETTER THA

    uint32_t const cps[1] = { 0x11c9b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fb0), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_011)
{
    // 11C9C ; [.2FB2.0020.0002] 
    // MARCHEN SUBJOINED LETTER DA

    uint32_t const cps[1] = { 0x11c9c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fb2), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_012)
{
    // 11C9D ; [.2FB4.0020.0002] 
    // MARCHEN SUBJOINED LETTER NA

    uint32_t const cps[1] = { 0x11c9d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fb4), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_013)
{
    // 11C9E ; [.2FB6.0020.0002] 
    // MARCHEN SUBJOINED LETTER PA

    uint32_t const cps[1] = { 0x11c9e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fb6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_014)
{
    // 11C9F ; [.2FB8.0020.0002] 
    // MARCHEN SUBJOINED LETTER PHA

    uint32_t const cps[1] = { 0x11c9f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fb8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_015)
{
    // 11CA0 ; [.2FBA.0020.0002] 
    // MARCHEN SUBJOINED LETTER BA

    uint32_t const cps[1] = { 0x11ca0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fba), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_016)
{
    // 11CA1 ; [.2FBC.0020.0002] 
    // MARCHEN SUBJOINED LETTER MA

    uint32_t const cps[1] = { 0x11ca1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fbc), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_017)
{
    // 11CA2 ; [.2FBE.0020.0002] 
    // MARCHEN SUBJOINED LETTER TSA

    uint32_t const cps[1] = { 0x11ca2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fbe), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_018)
{
    // 11CA3 ; [.2FC0.0020.0002] 
    // MARCHEN SUBJOINED LETTER TSHA

    uint32_t const cps[1] = { 0x11ca3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fc0), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_019)
{
    // 11CA4 ; [.2FC2.0020.0002] 
    // MARCHEN SUBJOINED LETTER DZA

    uint32_t const cps[1] = { 0x11ca4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fc2), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_020)
{
    // 11CA5 ; [.2FC4.0020.0002] 
    // MARCHEN SUBJOINED LETTER WA

    uint32_t const cps[1] = { 0x11ca5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fc4), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_021)
{
    // 11CA6 ; [.2FC6.0020.0002] 
    // MARCHEN SUBJOINED LETTER ZHA

    uint32_t const cps[1] = { 0x11ca6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fc6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_022)
{
    // 11CA7 ; [.2FC8.0020.0002] 
    // MARCHEN SUBJOINED LETTER ZA

    uint32_t const cps[1] = { 0x11ca7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fc8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_023)
{
    // 11CA9 ; [.2FCB.0020.0002] 
    // MARCHEN SUBJOINED LETTER YA

    uint32_t const cps[1] = { 0x11ca9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fcb), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_024)
{
    // 11CAA ; [.2FCD.0020.0002] 
    // MARCHEN SUBJOINED LETTER RA

    uint32_t const cps[1] = { 0x11caa };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fcd), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_025)
{
    // 11CAB ; [.2FCF.0020.0002] 
    // MARCHEN SUBJOINED LETTER LA

    uint32_t const cps[1] = { 0x11cab };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fcf), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_026)
{
    // 11CAC ; [.2FD1.0020.0002] 
    // MARCHEN SUBJOINED LETTER SHA

    uint32_t const cps[1] = { 0x11cac };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fd1), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_027)
{
    // 11CAD ; [.2FD3.0020.0002] 
    // MARCHEN SUBJOINED LETTER SA

    uint32_t const cps[1] = { 0x11cad };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fd3), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_028)
{
    // 11CAE ; [.2FD5.0020.0002] 
    // MARCHEN SUBJOINED LETTER HA

    uint32_t const cps[1] = { 0x11cae };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fd5), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_029)
{
    // 11CAF ; [.2FD7.0020.0002] 
    // MARCHEN SUBJOINED LETTER A

    uint32_t const cps[1] = { 0x11caf };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fd7), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_030)
{
    // 11CB0 ; [.2FD8.0020.0002] 
    // MARCHEN VOWEL SIGN AA

    uint32_t const cps[1] = { 0x11cb0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fd8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_031)
{
    // 11CB1 ; [.2FD9.0020.0002] 
    // MARCHEN VOWEL SIGN I

    uint32_t const cps[1] = { 0x11cb1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fd9), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_032)
{
    // 11CB2 ; [.2FDA.0020.0002] 
    // MARCHEN VOWEL SIGN U

    uint32_t const cps[1] = { 0x11cb2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fda), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_033)
{
    // 11CB3 ; [.2FDB.0020.0002] 
    // MARCHEN VOWEL SIGN E

    uint32_t const cps[1] = { 0x11cb3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fdb), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_034)
{
    // 11CB4 ; [.2FDC.0020.0002] 
    // MARCHEN VOWEL SIGN O

    uint32_t const cps[1] = { 0x11cb4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2fdc), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_035)
{
    // 11CB5 ; [.0000.00C4.0002] 
    // MARCHEN SIGN ANUSVARA

    uint32_t const cps[1] = { 0x11cb5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa5), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_036)
{
    // 11CB6 ; [.0000.00C3.0002] 
    // MARCHEN SIGN CANDRABINDU

    uint32_t const cps[1] = { 0x11cb6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa4), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_037)
{
    // 11D00 ; [.2D0A.0020.0002] 
    // MASARAM GONDI LETTER A

    uint32_t const cps[1] = { 0x11d00 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d0a), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_038)
{
    // 11D01 ; [.2D0B.0020.0002] 
    // MASARAM GONDI LETTER AA

    uint32_t const cps[1] = { 0x11d01 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d0b), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_039)
{
    // 11D02 ; [.2D0C.0020.0002] 
    // MASARAM GONDI LETTER I

    uint32_t const cps[1] = { 0x11d02 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d0c), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_040)
{
    // 11D03 ; [.2D0D.0020.0002] 
    // MASARAM GONDI LETTER II

    uint32_t const cps[1] = { 0x11d03 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d0d), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_041)
{
    // 11D04 ; [.2D0E.0020.0002] 
    // MASARAM GONDI LETTER U

    uint32_t const cps[1] = { 0x11d04 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d0e), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_042)
{
    // 11D05 ; [.2D0F.0020.0002] 
    // MASARAM GONDI LETTER UU

    uint32_t const cps[1] = { 0x11d05 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d0f), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_043)
{
    // 11D06 ; [.2D10.0020.0002] 
    // MASARAM GONDI LETTER E

    uint32_t const cps[1] = { 0x11d06 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d10), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_044)
{
    // 11D08 ; [.2D11.0020.0002] 
    // MASARAM GONDI LETTER AI

    uint32_t const cps[1] = { 0x11d08 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d11), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_045)
{
    // 11D09 ; [.2D12.0020.0002] 
    // MASARAM GONDI LETTER O

    uint32_t const cps[1] = { 0x11d09 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d12), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_046)
{
    // 11D0B ; [.2D13.0020.0002] 
    // MASARAM GONDI LETTER AU

    uint32_t const cps[1] = { 0x11d0b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d13), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_047)
{
    // 11D0C ; [.2D14.0020.0002] 
    // MASARAM GONDI LETTER KA

    uint32_t const cps[1] = { 0x11d0c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d14), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_048)
{
    // 11D0D ; [.2D15.0020.0002] 
    // MASARAM GONDI LETTER KHA

    uint32_t const cps[1] = { 0x11d0d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d15), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_049)
{
    // 11D0E ; [.2D16.0020.0002] 
    // MASARAM GONDI LETTER GA

    uint32_t const cps[1] = { 0x11d0e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d16), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_050)
{
    // 11D0F ; [.2D17.0020.0002] 
    // MASARAM GONDI LETTER GHA

    uint32_t const cps[1] = { 0x11d0f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d17), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_051)
{
    // 11D10 ; [.2D18.0020.0002] 
    // MASARAM GONDI LETTER NGA

    uint32_t const cps[1] = { 0x11d10 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d18), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_052)
{
    // 11D11 ; [.2D19.0020.0002] 
    // MASARAM GONDI LETTER CA

    uint32_t const cps[1] = { 0x11d11 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d19), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_053)
{
    // 11D12 ; [.2D1A.0020.0002] 
    // MASARAM GONDI LETTER CHA

    uint32_t const cps[1] = { 0x11d12 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d1a), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_054)
{
    // 11D13 ; [.2D1B.0020.0002] 
    // MASARAM GONDI LETTER JA

    uint32_t const cps[1] = { 0x11d13 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d1b), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_055)
{
    // 11D14 ; [.2D1C.0020.0002] 
    // MASARAM GONDI LETTER JHA

    uint32_t const cps[1] = { 0x11d14 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d1c), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_056)
{
    // 11D15 ; [.2D1D.0020.0002] 
    // MASARAM GONDI LETTER NYA

    uint32_t const cps[1] = { 0x11d15 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d1d), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_057)
{
    // 11D16 ; [.2D1E.0020.0002] 
    // MASARAM GONDI LETTER TTA

    uint32_t const cps[1] = { 0x11d16 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d1e), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_058)
{
    // 11D17 ; [.2D1F.0020.0002] 
    // MASARAM GONDI LETTER TTHA

    uint32_t const cps[1] = { 0x11d17 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d1f), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_059)
{
    // 11D18 ; [.2D20.0020.0002] 
    // MASARAM GONDI LETTER DDA

    uint32_t const cps[1] = { 0x11d18 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d20), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_060)
{
    // 11D19 ; [.2D21.0020.0002] 
    // MASARAM GONDI LETTER DDHA

    uint32_t const cps[1] = { 0x11d19 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d21), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_061)
{
    // 11D1A ; [.2D22.0020.0002] 
    // MASARAM GONDI LETTER NNA

    uint32_t const cps[1] = { 0x11d1a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d22), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_062)
{
    // 11D1B ; [.2D23.0020.0002] 
    // MASARAM GONDI LETTER TA

    uint32_t const cps[1] = { 0x11d1b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d23), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_063)
{
    // 11D1C ; [.2D24.0020.0002] 
    // MASARAM GONDI LETTER THA

    uint32_t const cps[1] = { 0x11d1c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d24), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_064)
{
    // 11D1D ; [.2D25.0020.0002] 
    // MASARAM GONDI LETTER DA

    uint32_t const cps[1] = { 0x11d1d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d25), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_065)
{
    // 11D1E ; [.2D26.0020.0002] 
    // MASARAM GONDI LETTER DHA

    uint32_t const cps[1] = { 0x11d1e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d26), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_066)
{
    // 11D1F ; [.2D27.0020.0002] 
    // MASARAM GONDI LETTER NA

    uint32_t const cps[1] = { 0x11d1f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d27), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_067)
{
    // 11D20 ; [.2D28.0020.0002] 
    // MASARAM GONDI LETTER PA

    uint32_t const cps[1] = { 0x11d20 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d28), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_068)
{
    // 11D21 ; [.2D29.0020.0002] 
    // MASARAM GONDI LETTER PHA

    uint32_t const cps[1] = { 0x11d21 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d29), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_069)
{
    // 11D22 ; [.2D2A.0020.0002] 
    // MASARAM GONDI LETTER BA

    uint32_t const cps[1] = { 0x11d22 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d2a), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_070)
{
    // 11D23 ; [.2D2B.0020.0002] 
    // MASARAM GONDI LETTER BHA

    uint32_t const cps[1] = { 0x11d23 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d2b), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_071)
{
    // 11D24 ; [.2D2C.0020.0002] 
    // MASARAM GONDI LETTER MA

    uint32_t const cps[1] = { 0x11d24 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d2c), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_072)
{
    // 11D25 ; [.2D2D.0020.0002] 
    // MASARAM GONDI LETTER YA

    uint32_t const cps[1] = { 0x11d25 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d2d), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_073)
{
    // 11D26 ; [.2D2E.0020.0002] 
    // MASARAM GONDI LETTER RA

    uint32_t const cps[1] = { 0x11d26 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d2e), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_074)
{
    // 11D27 ; [.2D2F.0020.0002] 
    // MASARAM GONDI LETTER LA

    uint32_t const cps[1] = { 0x11d27 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d2f), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_075)
{
    // 11D28 ; [.2D30.0020.0002] 
    // MASARAM GONDI LETTER VA

    uint32_t const cps[1] = { 0x11d28 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d30), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_076)
{
    // 11D29 ; [.2D31.0020.0002] 
    // MASARAM GONDI LETTER SHA

    uint32_t const cps[1] = { 0x11d29 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d31), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_077)
{
    // 11D2A ; [.2D32.0020.0002] 
    // MASARAM GONDI LETTER SSA

    uint32_t const cps[1] = { 0x11d2a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d32), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_078)
{
    // 11D2B ; [.2D33.0020.0002] 
    // MASARAM GONDI LETTER SA

    uint32_t const cps[1] = { 0x11d2b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d33), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_079)
{
    // 11D2C ; [.2D34.0020.0002] 
    // MASARAM GONDI LETTER HA

    uint32_t const cps[1] = { 0x11d2c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d34), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_080)
{
    // 11D2D ; [.2D35.0020.0002] 
    // MASARAM GONDI LETTER LLA

    uint32_t const cps[1] = { 0x11d2d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d35), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_081)
{
    // 11D2E ; [.2D36.0020.0002] 
    // MASARAM GONDI LETTER KSSA

    uint32_t const cps[1] = { 0x11d2e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d36), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_082)
{
    // 11D2F ; [.2D37.0020.0002] 
    // MASARAM GONDI LETTER JNYA

    uint32_t const cps[1] = { 0x11d2f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d37), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_083)
{
    // 11D30 ; [.2D38.0020.0002] 
    // MASARAM GONDI LETTER TRA

    uint32_t const cps[1] = { 0x11d30 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d38), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_084)
{
    // 11D31 ; [.2D39.0020.0002] 
    // MASARAM GONDI VOWEL SIGN AA

    uint32_t const cps[1] = { 0x11d31 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d39), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_085)
{
    // 11D32 ; [.2D3A.0020.0002] 
    // MASARAM GONDI VOWEL SIGN I

    uint32_t const cps[1] = { 0x11d32 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d3a), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_086)
{
    // 11D33 ; [.2D3B.0020.0002] 
    // MASARAM GONDI VOWEL SIGN II

    uint32_t const cps[1] = { 0x11d33 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d3b), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_087)
{
    // 11D34 ; [.2D3C.0020.0002] 
    // MASARAM GONDI VOWEL SIGN U

    uint32_t const cps[1] = { 0x11d34 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d3c), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_088)
{
    // 11D35 ; [.2D3D.0020.0002] 
    // MASARAM GONDI VOWEL SIGN UU

    uint32_t const cps[1] = { 0x11d35 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d3d), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_089)
{
    // 11D36 ; [.2D3E.0020.0002] 
    // MASARAM GONDI VOWEL SIGN VOCALIC R

    uint32_t const cps[1] = { 0x11d36 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d3e), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_090)
{
    // 11D3A ; [.2D3F.0020.0002] 
    // MASARAM GONDI VOWEL SIGN E

    uint32_t const cps[1] = { 0x11d3a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d3f), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_091)
{
    // 11D3C ; [.2D40.0020.0002] 
    // MASARAM GONDI VOWEL SIGN AI

    uint32_t const cps[1] = { 0x11d3c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d40), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_092)
{
    // 11D3D ; [.2D41.0020.0002] 
    // MASARAM GONDI VOWEL SIGN O

    uint32_t const cps[1] = { 0x11d3d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d41), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_093)
{
    // 11D3F ; [.2D42.0020.0002] 
    // MASARAM GONDI VOWEL SIGN AU

    uint32_t const cps[1] = { 0x11d3f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d42), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_094)
{
    // 11D40 ; [.0000.00C4.0002] 
    // MASARAM GONDI SIGN ANUSVARA

    uint32_t const cps[1] = { 0x11d40 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa5), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_095)
{
    // 11D41 ; [.0000.00C5.0002] 
    // MASARAM GONDI SIGN VISARGA

    uint32_t const cps[1] = { 0x11d41 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa6), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_096)
{
    // 11D42 ; [.0000.00C2.0002] 
    // MASARAM GONDI SIGN NUKTA

    uint32_t const cps[1] = { 0x11d42 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa3), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_097)
{
    // 11D43 ; [.0000.00C3.0002] 
    // MASARAM GONDI SIGN CANDRA

    uint32_t const cps[1] = { 0x11d43 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa4), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_098)
{
    // 11D44 ; [.2D43.0020.0002] 
    // MASARAM GONDI SIGN HALANTA

    uint32_t const cps[1] = { 0x11d44 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d43), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_099)
{
    // 11D45 ; [.2D44.0020.0002] 
    // MASARAM GONDI VIRAMA

    uint32_t const cps[1] = { 0x11d45 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d44), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_100)
{
    // 11D46 ; [.2D2E.0020.0017] 
    // MASARAM GONDI REPHA

    uint32_t const cps[1] = { 0x11d46 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d2e), uint8_t(0x1), uint8_t(0x17)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_101)
{
    // 11D47 ; [.2D2E.0020.0019] 
    // MASARAM GONDI RA-KARA

    uint32_t const cps[1] = { 0x11d47 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x2d2e), uint8_t(0x1), uint8_t(0x19)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_102)
{
    // 11D50 ; [.1CA3.0020.0002] 
    // MASARAM GONDI DIGIT ZERO

    uint32_t const cps[1] = { 0x11d50 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_103)
{
    // 11D51 ; [.1CA4.0020.0002] 
    // MASARAM GONDI DIGIT ONE

    uint32_t const cps[1] = { 0x11d51 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_104)
{
    // 11D52 ; [.1CA5.0020.0002] 
    // MASARAM GONDI DIGIT TWO

    uint32_t const cps[1] = { 0x11d52 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_105)
{
    // 11D53 ; [.1CA6.0020.0002] 
    // MASARAM GONDI DIGIT THREE

    uint32_t const cps[1] = { 0x11d53 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_106)
{
    // 11D54 ; [.1CA7.0020.0002] 
    // MASARAM GONDI DIGIT FOUR

    uint32_t const cps[1] = { 0x11d54 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_107)
{
    // 11D55 ; [.1CA8.0020.0002] 
    // MASARAM GONDI DIGIT FIVE

    uint32_t const cps[1] = { 0x11d55 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_108)
{
    // 11D56 ; [.1CA9.0020.0002] 
    // MASARAM GONDI DIGIT SIX

    uint32_t const cps[1] = { 0x11d56 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_109)
{
    // 11D57 ; [.1CAA.0020.0002] 
    // MASARAM GONDI DIGIT SEVEN

    uint32_t const cps[1] = { 0x11d57 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_110)
{
    // 11D58 ; [.1CAB.0020.0002] 
    // MASARAM GONDI DIGIT EIGHT

    uint32_t const cps[1] = { 0x11d58 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_111)
{
    // 11D59 ; [.1CAC.0020.0002] 
    // MASARAM GONDI DIGIT NINE

    uint32_t const cps[1] = { 0x11d59 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_112)
{
    // 12000 ; [.4BEC.0020.0002] 
    // CUNEIFORM SIGN A

    uint32_t const cps[1] = { 0x12000 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4bec), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_113)
{
    // 12001 ; [.4BED.0020.0002] 
    // CUNEIFORM SIGN A TIMES A

    uint32_t const cps[1] = { 0x12001 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4bed), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_114)
{
    // 12002 ; [.4BEE.0020.0002] 
    // CUNEIFORM SIGN A TIMES BAD

    uint32_t const cps[1] = { 0x12002 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4bee), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_115)
{
    // 12003 ; [.4BEF.0020.0002] 
    // CUNEIFORM SIGN A TIMES GAN2 TENU

    uint32_t const cps[1] = { 0x12003 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4bef), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_116)
{
    // 12004 ; [.4BF0.0020.0002] 
    // CUNEIFORM SIGN A TIMES HA

    uint32_t const cps[1] = { 0x12004 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4bf0), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_117)
{
    // 12005 ; [.4BF1.0020.0002] 
    // CUNEIFORM SIGN A TIMES IGI

    uint32_t const cps[1] = { 0x12005 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4bf1), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_118)
{
    // 12006 ; [.4BF2.0020.0002] 
    // CUNEIFORM SIGN A TIMES LAGAR GUNU

    uint32_t const cps[1] = { 0x12006 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4bf2), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_119)
{
    // 12007 ; [.4BF3.0020.0002] 
    // CUNEIFORM SIGN A TIMES MUSH

    uint32_t const cps[1] = { 0x12007 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4bf3), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_120)
{
    // 12008 ; [.4BF4.0020.0002] 
    // CUNEIFORM SIGN A TIMES SAG

    uint32_t const cps[1] = { 0x12008 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4bf4), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_121)
{
    // 12009 ; [.4BF5.0020.0002] 
    // CUNEIFORM SIGN A2

    uint32_t const cps[1] = { 0x12009 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4bf5), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_122)
{
    // 1200A ; [.4BF6.0020.0002] 
    // CUNEIFORM SIGN AB

    uint32_t const cps[1] = { 0x1200a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4bf6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_123)
{
    // 1200B ; [.4BF7.0020.0002] 
    // CUNEIFORM SIGN AB TIMES ASH2

    uint32_t const cps[1] = { 0x1200b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4bf7), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_124)
{
    // 1200C ; [.4BF8.0020.0002] 
    // CUNEIFORM SIGN AB TIMES DUN3 GUNU

    uint32_t const cps[1] = { 0x1200c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4bf8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_125)
{
    // 1200D ; [.4BF9.0020.0002] 
    // CUNEIFORM SIGN AB TIMES GAL

    uint32_t const cps[1] = { 0x1200d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4bf9), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_126)
{
    // 1200E ; [.4BFA.0020.0002] 
    // CUNEIFORM SIGN AB TIMES GAN2 TENU

    uint32_t const cps[1] = { 0x1200e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4bfa), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_127)
{
    // 1200F ; [.4BFB.0020.0002] 
    // CUNEIFORM SIGN AB TIMES HA

    uint32_t const cps[1] = { 0x1200f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4bfb), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_128)
{
    // 12010 ; [.4BFC.0020.0002] 
    // CUNEIFORM SIGN AB TIMES IGI GUNU

    uint32_t const cps[1] = { 0x12010 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4bfc), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_129)
{
    // 12011 ; [.4BFD.0020.0002] 
    // CUNEIFORM SIGN AB TIMES IMIN

    uint32_t const cps[1] = { 0x12011 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4bfd), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_130)
{
    // 12012 ; [.4BFE.0020.0002] 
    // CUNEIFORM SIGN AB TIMES LAGAB

    uint32_t const cps[1] = { 0x12012 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4bfe), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_131)
{
    // 12013 ; [.4BFF.0020.0002] 
    // CUNEIFORM SIGN AB TIMES SHESH

    uint32_t const cps[1] = { 0x12013 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4bff), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_132)
{
    // 12014 ; [.4C00.0020.0002] 
    // CUNEIFORM SIGN AB TIMES U PLUS U PLUS U

    uint32_t const cps[1] = { 0x12014 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4c00), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_133)
{
    // 12015 ; [.4C01.0020.0002] 
    // CUNEIFORM SIGN AB GUNU

    uint32_t const cps[1] = { 0x12015 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4c01), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_134)
{
    // 12016 ; [.4C02.0020.0002] 
    // CUNEIFORM SIGN AB2

    uint32_t const cps[1] = { 0x12016 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4c02), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_135)
{
    // 12017 ; [.4C03.0020.0002] 
    // CUNEIFORM SIGN AB2 TIMES BALAG

    uint32_t const cps[1] = { 0x12017 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4c03), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_136)
{
    // 12018 ; [.4C04.0020.0002] 
    // CUNEIFORM SIGN AB2 TIMES GAN2 TENU

    uint32_t const cps[1] = { 0x12018 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4c04), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_137)
{
    // 12019 ; [.4C05.0020.0002] 
    // CUNEIFORM SIGN AB2 TIMES ME PLUS EN

    uint32_t const cps[1] = { 0x12019 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4c05), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_138)
{
    // 1201A ; [.4C06.0020.0002] 
    // CUNEIFORM SIGN AB2 TIMES SHA3

    uint32_t const cps[1] = { 0x1201a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4c06), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_139)
{
    // 1201B ; [.4C07.0020.0002] 
    // CUNEIFORM SIGN AB2 TIMES TAK4

    uint32_t const cps[1] = { 0x1201b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4c07), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_140)
{
    // 1201C ; [.4C08.0020.0002] 
    // CUNEIFORM SIGN AD

    uint32_t const cps[1] = { 0x1201c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4c08), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_141)
{
    // 1201D ; [.4C09.0020.0002] 
    // CUNEIFORM SIGN AK

    uint32_t const cps[1] = { 0x1201d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4c09), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_142)
{
    // 1201E ; [.4C0A.0020.0002] 
    // CUNEIFORM SIGN AK TIMES ERIN2

    uint32_t const cps[1] = { 0x1201e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4c0a), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_143)
{
    // 1201F ; [.4C0B.0020.0002] 
    // CUNEIFORM SIGN AK TIMES SHITA PLUS GISH

    uint32_t const cps[1] = { 0x1201f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4c0b), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_144)
{
    // 12020 ; [.4C0C.0020.0002] 
    // CUNEIFORM SIGN AL

    uint32_t const cps[1] = { 0x12020 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4c0c), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_145)
{
    // 12021 ; [.4C0D.0020.0002] 
    // CUNEIFORM SIGN AL TIMES AL

    uint32_t const cps[1] = { 0x12021 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4c0d), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_146)
{
    // 12022 ; [.4C0E.0020.0002] 
    // CUNEIFORM SIGN AL TIMES DIM2

    uint32_t const cps[1] = { 0x12022 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4c0e), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_147)
{
    // 12023 ; [.4C0F.0020.0002] 
    // CUNEIFORM SIGN AL TIMES GISH

    uint32_t const cps[1] = { 0x12023 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4c0f), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_148)
{
    // 12024 ; [.4C10.0020.0002] 
    // CUNEIFORM SIGN AL TIMES HA

    uint32_t const cps[1] = { 0x12024 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4c10), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_142_149)
{
    // 12025 ; [.4C11.0020.0002] 
    // CUNEIFORM SIGN AL TIMES KAD3

    uint32_t const cps[1] = { 0x12025 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x4c11), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

