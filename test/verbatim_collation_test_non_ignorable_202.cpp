// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_202_000)
{
    // 170F 0061;	
    // (ᜏ) TAGALOG LETTER WA	[308B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x170F, 0x0061 };
    uint32_t const ces[9] = { 0x308B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_001)
{
    // 170F 0041;	
    // (ᜏ) TAGALOG LETTER WA	[308B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x170F, 0x0041 };
    uint32_t const ces[9] = { 0x308B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_002)
{
    // 170F 0062;	
    // (ᜏ) TAGALOG LETTER WA	[308B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x170F, 0x0062 };
    uint32_t const ces[9] = { 0x308B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_003)
{
    // 1710 0021;	
    // (ᜐ) TAGALOG LETTER SA	[308C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1710, 0x0021 };
    uint32_t const ces[9] = { 0x308C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_004)
{
    // 1710 003F;	
    // (ᜐ) TAGALOG LETTER SA	[308C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1710, 0x003F };
    uint32_t const ces[9] = { 0x308C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_005)
{
    // 1710 0061;	
    // (ᜐ) TAGALOG LETTER SA	[308C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1710, 0x0061 };
    uint32_t const ces[9] = { 0x308C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_006)
{
    // 1710 0041;	
    // (ᜐ) TAGALOG LETTER SA	[308C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1710, 0x0041 };
    uint32_t const ces[9] = { 0x308C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_007)
{
    // 1710 0062;	
    // (ᜐ) TAGALOG LETTER SA	[308C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1710, 0x0062 };
    uint32_t const ces[9] = { 0x308C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_008)
{
    // 1711 0021;	
    // (ᜑ) TAGALOG LETTER HA	[308D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1711, 0x0021 };
    uint32_t const ces[9] = { 0x308D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_009)
{
    // 1711 003F;	
    // (ᜑ) TAGALOG LETTER HA	[308D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1711, 0x003F };
    uint32_t const ces[9] = { 0x308D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_010)
{
    // 1711 0061;	
    // (ᜑ) TAGALOG LETTER HA	[308D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1711, 0x0061 };
    uint32_t const ces[9] = { 0x308D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_011)
{
    // 1711 0041;	
    // (ᜑ) TAGALOG LETTER HA	[308D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1711, 0x0041 };
    uint32_t const ces[9] = { 0x308D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_012)
{
    // 1711 0062;	
    // (ᜑ) TAGALOG LETTER HA	[308D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1711, 0x0062 };
    uint32_t const ces[9] = { 0x308D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_013)
{
    // 1712 0021;	
    // (ᜒ) TAGALOG VOWEL SIGN I	[308E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1712, 0x0021 };
    uint32_t const ces[9] = { 0x308E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_014)
{
    // 1712 003F;	
    // (ᜒ) TAGALOG VOWEL SIGN I	[308E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1712, 0x003F };
    uint32_t const ces[9] = { 0x308E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_015)
{
    // 1712 0061;	
    // (ᜒ) TAGALOG VOWEL SIGN I	[308E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1712, 0x0061 };
    uint32_t const ces[9] = { 0x308E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_016)
{
    // 1712 0041;	
    // (ᜒ) TAGALOG VOWEL SIGN I	[308E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1712, 0x0041 };
    uint32_t const ces[9] = { 0x308E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_017)
{
    // 1712 0062;	
    // (ᜒ) TAGALOG VOWEL SIGN I	[308E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1712, 0x0062 };
    uint32_t const ces[9] = { 0x308E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_018)
{
    // 1713 0021;	
    // (ᜓ) TAGALOG VOWEL SIGN U	[308F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1713, 0x0021 };
    uint32_t const ces[9] = { 0x308F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_019)
{
    // 1713 003F;	
    // (ᜓ) TAGALOG VOWEL SIGN U	[308F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1713, 0x003F };
    uint32_t const ces[9] = { 0x308F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_020)
{
    // 1713 0061;	
    // (ᜓ) TAGALOG VOWEL SIGN U	[308F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1713, 0x0061 };
    uint32_t const ces[9] = { 0x308F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_021)
{
    // 1713 0041;	
    // (ᜓ) TAGALOG VOWEL SIGN U	[308F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1713, 0x0041 };
    uint32_t const ces[9] = { 0x308F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_022)
{
    // 1713 0062;	
    // (ᜓ) TAGALOG VOWEL SIGN U	[308F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1713, 0x0062 };
    uint32_t const ces[9] = { 0x308F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_023)
{
    // 0334 1714;	
    // (᜔) TAGALOG SIGN VIRAMA	[3090 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1714 };
    uint32_t const ces[8] = { 0x3090, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_024)
{
    // 1714 0334;	
    // (᜔) TAGALOG SIGN VIRAMA	[3090 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1714, 0x0334 };
    uint32_t const ces[8] = { 0x3090, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_025)
{
    // 1714 0021;	
    // (᜔) TAGALOG SIGN VIRAMA	[3090 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1714, 0x0021 };
    uint32_t const ces[9] = { 0x3090, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_026)
{
    // 1714 003F;	
    // (᜔) TAGALOG SIGN VIRAMA	[3090 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1714, 0x003F };
    uint32_t const ces[9] = { 0x3090, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_027)
{
    // 1714 0061;	
    // (᜔) TAGALOG SIGN VIRAMA	[3090 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1714, 0x0061 };
    uint32_t const ces[9] = { 0x3090, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_028)
{
    // 1714 0041;	
    // (᜔) TAGALOG SIGN VIRAMA	[3090 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1714, 0x0041 };
    uint32_t const ces[9] = { 0x3090, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_029)
{
    // 1714 0062;	
    // (᜔) TAGALOG SIGN VIRAMA	[3090 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1714, 0x0062 };
    uint32_t const ces[9] = { 0x3090, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_030)
{
    // 1720 0021;	
    // (ᜠ) HANUNOO LETTER A	[3091 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1720, 0x0021 };
    uint32_t const ces[9] = { 0x3091, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_031)
{
    // 1720 003F;	
    // (ᜠ) HANUNOO LETTER A	[3091 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1720, 0x003F };
    uint32_t const ces[9] = { 0x3091, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_032)
{
    // 1720 0061;	
    // (ᜠ) HANUNOO LETTER A	[3091 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1720, 0x0061 };
    uint32_t const ces[9] = { 0x3091, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_033)
{
    // 1720 0041;	
    // (ᜠ) HANUNOO LETTER A	[3091 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1720, 0x0041 };
    uint32_t const ces[9] = { 0x3091, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_034)
{
    // 1720 0062;	
    // (ᜠ) HANUNOO LETTER A	[3091 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1720, 0x0062 };
    uint32_t const ces[9] = { 0x3091, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_035)
{
    // 1721 0021;	
    // (ᜡ) HANUNOO LETTER I	[3092 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1721, 0x0021 };
    uint32_t const ces[9] = { 0x3092, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_036)
{
    // 1721 003F;	
    // (ᜡ) HANUNOO LETTER I	[3092 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1721, 0x003F };
    uint32_t const ces[9] = { 0x3092, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_037)
{
    // 1721 0061;	
    // (ᜡ) HANUNOO LETTER I	[3092 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1721, 0x0061 };
    uint32_t const ces[9] = { 0x3092, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_038)
{
    // 1721 0041;	
    // (ᜡ) HANUNOO LETTER I	[3092 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1721, 0x0041 };
    uint32_t const ces[9] = { 0x3092, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_039)
{
    // 1721 0062;	
    // (ᜡ) HANUNOO LETTER I	[3092 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1721, 0x0062 };
    uint32_t const ces[9] = { 0x3092, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_040)
{
    // 1722 0021;	
    // (ᜢ) HANUNOO LETTER U	[3093 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1722, 0x0021 };
    uint32_t const ces[9] = { 0x3093, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_041)
{
    // 1722 003F;	
    // (ᜢ) HANUNOO LETTER U	[3093 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1722, 0x003F };
    uint32_t const ces[9] = { 0x3093, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_042)
{
    // 1722 0061;	
    // (ᜢ) HANUNOO LETTER U	[3093 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1722, 0x0061 };
    uint32_t const ces[9] = { 0x3093, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_043)
{
    // 1722 0041;	
    // (ᜢ) HANUNOO LETTER U	[3093 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1722, 0x0041 };
    uint32_t const ces[9] = { 0x3093, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_044)
{
    // 1722 0062;	
    // (ᜢ) HANUNOO LETTER U	[3093 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1722, 0x0062 };
    uint32_t const ces[9] = { 0x3093, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_045)
{
    // 1723 0021;	
    // (ᜣ) HANUNOO LETTER KA	[3094 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1723, 0x0021 };
    uint32_t const ces[9] = { 0x3094, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_046)
{
    // 1723 003F;	
    // (ᜣ) HANUNOO LETTER KA	[3094 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1723, 0x003F };
    uint32_t const ces[9] = { 0x3094, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_047)
{
    // 1723 0061;	
    // (ᜣ) HANUNOO LETTER KA	[3094 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1723, 0x0061 };
    uint32_t const ces[9] = { 0x3094, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_048)
{
    // 1723 0041;	
    // (ᜣ) HANUNOO LETTER KA	[3094 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1723, 0x0041 };
    uint32_t const ces[9] = { 0x3094, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_049)
{
    // 1723 0062;	
    // (ᜣ) HANUNOO LETTER KA	[3094 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1723, 0x0062 };
    uint32_t const ces[9] = { 0x3094, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_050)
{
    // 1724 0021;	
    // (ᜤ) HANUNOO LETTER GA	[3095 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1724, 0x0021 };
    uint32_t const ces[9] = { 0x3095, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_051)
{
    // 1724 003F;	
    // (ᜤ) HANUNOO LETTER GA	[3095 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1724, 0x003F };
    uint32_t const ces[9] = { 0x3095, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_052)
{
    // 1724 0061;	
    // (ᜤ) HANUNOO LETTER GA	[3095 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1724, 0x0061 };
    uint32_t const ces[9] = { 0x3095, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_053)
{
    // 1724 0041;	
    // (ᜤ) HANUNOO LETTER GA	[3095 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1724, 0x0041 };
    uint32_t const ces[9] = { 0x3095, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_054)
{
    // 1724 0062;	
    // (ᜤ) HANUNOO LETTER GA	[3095 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1724, 0x0062 };
    uint32_t const ces[9] = { 0x3095, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_055)
{
    // 1725 0021;	
    // (ᜥ) HANUNOO LETTER NGA	[3096 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1725, 0x0021 };
    uint32_t const ces[9] = { 0x3096, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_056)
{
    // 1725 003F;	
    // (ᜥ) HANUNOO LETTER NGA	[3096 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1725, 0x003F };
    uint32_t const ces[9] = { 0x3096, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_057)
{
    // 1725 0061;	
    // (ᜥ) HANUNOO LETTER NGA	[3096 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1725, 0x0061 };
    uint32_t const ces[9] = { 0x3096, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_058)
{
    // 1725 0041;	
    // (ᜥ) HANUNOO LETTER NGA	[3096 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1725, 0x0041 };
    uint32_t const ces[9] = { 0x3096, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_059)
{
    // 1725 0062;	
    // (ᜥ) HANUNOO LETTER NGA	[3096 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1725, 0x0062 };
    uint32_t const ces[9] = { 0x3096, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_060)
{
    // 1726 0021;	
    // (ᜦ) HANUNOO LETTER TA	[3097 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1726, 0x0021 };
    uint32_t const ces[9] = { 0x3097, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_061)
{
    // 1726 003F;	
    // (ᜦ) HANUNOO LETTER TA	[3097 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1726, 0x003F };
    uint32_t const ces[9] = { 0x3097, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_062)
{
    // 1726 0061;	
    // (ᜦ) HANUNOO LETTER TA	[3097 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1726, 0x0061 };
    uint32_t const ces[9] = { 0x3097, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_063)
{
    // 1726 0041;	
    // (ᜦ) HANUNOO LETTER TA	[3097 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1726, 0x0041 };
    uint32_t const ces[9] = { 0x3097, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_064)
{
    // 1726 0062;	
    // (ᜦ) HANUNOO LETTER TA	[3097 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1726, 0x0062 };
    uint32_t const ces[9] = { 0x3097, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_065)
{
    // 1727 0021;	
    // (ᜧ) HANUNOO LETTER DA	[3098 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1727, 0x0021 };
    uint32_t const ces[9] = { 0x3098, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_066)
{
    // 1727 003F;	
    // (ᜧ) HANUNOO LETTER DA	[3098 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1727, 0x003F };
    uint32_t const ces[9] = { 0x3098, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_067)
{
    // 1727 0061;	
    // (ᜧ) HANUNOO LETTER DA	[3098 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1727, 0x0061 };
    uint32_t const ces[9] = { 0x3098, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_068)
{
    // 1727 0041;	
    // (ᜧ) HANUNOO LETTER DA	[3098 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1727, 0x0041 };
    uint32_t const ces[9] = { 0x3098, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_069)
{
    // 1727 0062;	
    // (ᜧ) HANUNOO LETTER DA	[3098 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1727, 0x0062 };
    uint32_t const ces[9] = { 0x3098, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_070)
{
    // 1728 0021;	
    // (ᜨ) HANUNOO LETTER NA	[3099 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1728, 0x0021 };
    uint32_t const ces[9] = { 0x3099, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_071)
{
    // 1728 003F;	
    // (ᜨ) HANUNOO LETTER NA	[3099 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1728, 0x003F };
    uint32_t const ces[9] = { 0x3099, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_072)
{
    // 1728 0061;	
    // (ᜨ) HANUNOO LETTER NA	[3099 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1728, 0x0061 };
    uint32_t const ces[9] = { 0x3099, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_073)
{
    // 1728 0041;	
    // (ᜨ) HANUNOO LETTER NA	[3099 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1728, 0x0041 };
    uint32_t const ces[9] = { 0x3099, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_074)
{
    // 1728 0062;	
    // (ᜨ) HANUNOO LETTER NA	[3099 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1728, 0x0062 };
    uint32_t const ces[9] = { 0x3099, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_075)
{
    // 1729 0021;	
    // (ᜩ) HANUNOO LETTER PA	[309A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1729, 0x0021 };
    uint32_t const ces[9] = { 0x309A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_076)
{
    // 1729 003F;	
    // (ᜩ) HANUNOO LETTER PA	[309A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1729, 0x003F };
    uint32_t const ces[9] = { 0x309A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_077)
{
    // 1729 0061;	
    // (ᜩ) HANUNOO LETTER PA	[309A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1729, 0x0061 };
    uint32_t const ces[9] = { 0x309A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_078)
{
    // 1729 0041;	
    // (ᜩ) HANUNOO LETTER PA	[309A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1729, 0x0041 };
    uint32_t const ces[9] = { 0x309A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_079)
{
    // 1729 0062;	
    // (ᜩ) HANUNOO LETTER PA	[309A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1729, 0x0062 };
    uint32_t const ces[9] = { 0x309A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_080)
{
    // 172A 0021;	
    // (ᜪ) HANUNOO LETTER BA	[309B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172A, 0x0021 };
    uint32_t const ces[9] = { 0x309B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_081)
{
    // 172A 003F;	
    // (ᜪ) HANUNOO LETTER BA	[309B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172A, 0x003F };
    uint32_t const ces[9] = { 0x309B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_082)
{
    // 172A 0061;	
    // (ᜪ) HANUNOO LETTER BA	[309B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172A, 0x0061 };
    uint32_t const ces[9] = { 0x309B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_083)
{
    // 172A 0041;	
    // (ᜪ) HANUNOO LETTER BA	[309B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x172A, 0x0041 };
    uint32_t const ces[9] = { 0x309B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_084)
{
    // 172A 0062;	
    // (ᜪ) HANUNOO LETTER BA	[309B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172A, 0x0062 };
    uint32_t const ces[9] = { 0x309B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_085)
{
    // 172B 0021;	
    // (ᜫ) HANUNOO LETTER MA	[309C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172B, 0x0021 };
    uint32_t const ces[9] = { 0x309C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_086)
{
    // 172B 003F;	
    // (ᜫ) HANUNOO LETTER MA	[309C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172B, 0x003F };
    uint32_t const ces[9] = { 0x309C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_087)
{
    // 172B 0061;	
    // (ᜫ) HANUNOO LETTER MA	[309C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172B, 0x0061 };
    uint32_t const ces[9] = { 0x309C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_088)
{
    // 172B 0041;	
    // (ᜫ) HANUNOO LETTER MA	[309C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x172B, 0x0041 };
    uint32_t const ces[9] = { 0x309C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_089)
{
    // 172B 0062;	
    // (ᜫ) HANUNOO LETTER MA	[309C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172B, 0x0062 };
    uint32_t const ces[9] = { 0x309C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_090)
{
    // 172C 0021;	
    // (ᜬ) HANUNOO LETTER YA	[309D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172C, 0x0021 };
    uint32_t const ces[9] = { 0x309D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_091)
{
    // 172C 003F;	
    // (ᜬ) HANUNOO LETTER YA	[309D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172C, 0x003F };
    uint32_t const ces[9] = { 0x309D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_092)
{
    // 172C 0061;	
    // (ᜬ) HANUNOO LETTER YA	[309D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172C, 0x0061 };
    uint32_t const ces[9] = { 0x309D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_093)
{
    // 172C 0041;	
    // (ᜬ) HANUNOO LETTER YA	[309D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x172C, 0x0041 };
    uint32_t const ces[9] = { 0x309D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_094)
{
    // 172C 0062;	
    // (ᜬ) HANUNOO LETTER YA	[309D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172C, 0x0062 };
    uint32_t const ces[9] = { 0x309D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_095)
{
    // 172D 0021;	
    // (ᜭ) HANUNOO LETTER RA	[309E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172D, 0x0021 };
    uint32_t const ces[9] = { 0x309E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_096)
{
    // 172D 003F;	
    // (ᜭ) HANUNOO LETTER RA	[309E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172D, 0x003F };
    uint32_t const ces[9] = { 0x309E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_097)
{
    // 172D 0061;	
    // (ᜭ) HANUNOO LETTER RA	[309E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172D, 0x0061 };
    uint32_t const ces[9] = { 0x309E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_098)
{
    // 172D 0041;	
    // (ᜭ) HANUNOO LETTER RA	[309E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x172D, 0x0041 };
    uint32_t const ces[9] = { 0x309E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_099)
{
    // 172D 0062;	
    // (ᜭ) HANUNOO LETTER RA	[309E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172D, 0x0062 };
    uint32_t const ces[9] = { 0x309E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_100)
{
    // 172E 0021;	
    // (ᜮ) HANUNOO LETTER LA	[309F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172E, 0x0021 };
    uint32_t const ces[9] = { 0x309F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_101)
{
    // 172E 003F;	
    // (ᜮ) HANUNOO LETTER LA	[309F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172E, 0x003F };
    uint32_t const ces[9] = { 0x309F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_102)
{
    // 172E 0061;	
    // (ᜮ) HANUNOO LETTER LA	[309F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172E, 0x0061 };
    uint32_t const ces[9] = { 0x309F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_103)
{
    // 172E 0041;	
    // (ᜮ) HANUNOO LETTER LA	[309F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x172E, 0x0041 };
    uint32_t const ces[9] = { 0x309F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_104)
{
    // 172E 0062;	
    // (ᜮ) HANUNOO LETTER LA	[309F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172E, 0x0062 };
    uint32_t const ces[9] = { 0x309F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_105)
{
    // 172F 0021;	
    // (ᜯ) HANUNOO LETTER WA	[30A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172F, 0x0021 };
    uint32_t const ces[9] = { 0x30A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_106)
{
    // 172F 003F;	
    // (ᜯ) HANUNOO LETTER WA	[30A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172F, 0x003F };
    uint32_t const ces[9] = { 0x30A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_107)
{
    // 172F 0061;	
    // (ᜯ) HANUNOO LETTER WA	[30A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172F, 0x0061 };
    uint32_t const ces[9] = { 0x30A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_108)
{
    // 172F 0041;	
    // (ᜯ) HANUNOO LETTER WA	[30A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x172F, 0x0041 };
    uint32_t const ces[9] = { 0x30A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_109)
{
    // 172F 0062;	
    // (ᜯ) HANUNOO LETTER WA	[30A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x172F, 0x0062 };
    uint32_t const ces[9] = { 0x30A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_110)
{
    // 1730 0021;	
    // (ᜰ) HANUNOO LETTER SA	[30A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1730, 0x0021 };
    uint32_t const ces[9] = { 0x30A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_111)
{
    // 1730 003F;	
    // (ᜰ) HANUNOO LETTER SA	[30A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1730, 0x003F };
    uint32_t const ces[9] = { 0x30A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_112)
{
    // 1730 0061;	
    // (ᜰ) HANUNOO LETTER SA	[30A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1730, 0x0061 };
    uint32_t const ces[9] = { 0x30A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_113)
{
    // 1730 0041;	
    // (ᜰ) HANUNOO LETTER SA	[30A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1730, 0x0041 };
    uint32_t const ces[9] = { 0x30A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_114)
{
    // 1730 0062;	
    // (ᜰ) HANUNOO LETTER SA	[30A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1730, 0x0062 };
    uint32_t const ces[9] = { 0x30A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_115)
{
    // 1731 0021;	
    // (ᜱ) HANUNOO LETTER HA	[30A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1731, 0x0021 };
    uint32_t const ces[9] = { 0x30A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_116)
{
    // 1731 003F;	
    // (ᜱ) HANUNOO LETTER HA	[30A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1731, 0x003F };
    uint32_t const ces[9] = { 0x30A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_117)
{
    // 1731 0061;	
    // (ᜱ) HANUNOO LETTER HA	[30A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1731, 0x0061 };
    uint32_t const ces[9] = { 0x30A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_118)
{
    // 1731 0041;	
    // (ᜱ) HANUNOO LETTER HA	[30A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1731, 0x0041 };
    uint32_t const ces[9] = { 0x30A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_119)
{
    // 1731 0062;	
    // (ᜱ) HANUNOO LETTER HA	[30A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1731, 0x0062 };
    uint32_t const ces[9] = { 0x30A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_120)
{
    // 1732 0021;	
    // (ᜲ) HANUNOO VOWEL SIGN I	[30A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1732, 0x0021 };
    uint32_t const ces[9] = { 0x30A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_121)
{
    // 1732 003F;	
    // (ᜲ) HANUNOO VOWEL SIGN I	[30A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1732, 0x003F };
    uint32_t const ces[9] = { 0x30A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_122)
{
    // 1732 0061;	
    // (ᜲ) HANUNOO VOWEL SIGN I	[30A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1732, 0x0061 };
    uint32_t const ces[9] = { 0x30A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_123)
{
    // 1732 0041;	
    // (ᜲ) HANUNOO VOWEL SIGN I	[30A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1732, 0x0041 };
    uint32_t const ces[9] = { 0x30A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_124)
{
    // 1732 0062;	
    // (ᜲ) HANUNOO VOWEL SIGN I	[30A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1732, 0x0062 };
    uint32_t const ces[9] = { 0x30A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_125)
{
    // 1733 0021;	
    // (ᜳ) HANUNOO VOWEL SIGN U	[30A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1733, 0x0021 };
    uint32_t const ces[9] = { 0x30A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_126)
{
    // 1733 003F;	
    // (ᜳ) HANUNOO VOWEL SIGN U	[30A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1733, 0x003F };
    uint32_t const ces[9] = { 0x30A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_127)
{
    // 1733 0061;	
    // (ᜳ) HANUNOO VOWEL SIGN U	[30A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1733, 0x0061 };
    uint32_t const ces[9] = { 0x30A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_128)
{
    // 1733 0041;	
    // (ᜳ) HANUNOO VOWEL SIGN U	[30A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1733, 0x0041 };
    uint32_t const ces[9] = { 0x30A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_129)
{
    // 1733 0062;	
    // (ᜳ) HANUNOO VOWEL SIGN U	[30A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1733, 0x0062 };
    uint32_t const ces[9] = { 0x30A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_130)
{
    // 0334 1734;	
    // (᜴) HANUNOO SIGN PAMUDPOD	[30A5 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1734 };
    uint32_t const ces[8] = { 0x30A5, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_131)
{
    // 1734 0334;	
    // (᜴) HANUNOO SIGN PAMUDPOD	[30A5 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1734, 0x0334 };
    uint32_t const ces[8] = { 0x30A5, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_132)
{
    // 1734 0021;	
    // (᜴) HANUNOO SIGN PAMUDPOD	[30A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1734, 0x0021 };
    uint32_t const ces[9] = { 0x30A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_133)
{
    // 1734 003F;	
    // (᜴) HANUNOO SIGN PAMUDPOD	[30A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1734, 0x003F };
    uint32_t const ces[9] = { 0x30A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_134)
{
    // 1734 0061;	
    // (᜴) HANUNOO SIGN PAMUDPOD	[30A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1734, 0x0061 };
    uint32_t const ces[9] = { 0x30A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_135)
{
    // 1734 0041;	
    // (᜴) HANUNOO SIGN PAMUDPOD	[30A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1734, 0x0041 };
    uint32_t const ces[9] = { 0x30A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_136)
{
    // 1734 0062;	
    // (᜴) HANUNOO SIGN PAMUDPOD	[30A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1734, 0x0062 };
    uint32_t const ces[9] = { 0x30A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_137)
{
    // 1740 0021;	
    // (ᝀ) BUHID LETTER A	[30A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1740, 0x0021 };
    uint32_t const ces[9] = { 0x30A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_138)
{
    // 1740 003F;	
    // (ᝀ) BUHID LETTER A	[30A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1740, 0x003F };
    uint32_t const ces[9] = { 0x30A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_139)
{
    // 1740 0061;	
    // (ᝀ) BUHID LETTER A	[30A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1740, 0x0061 };
    uint32_t const ces[9] = { 0x30A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_140)
{
    // 1740 0041;	
    // (ᝀ) BUHID LETTER A	[30A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1740, 0x0041 };
    uint32_t const ces[9] = { 0x30A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_141)
{
    // 1740 0062;	
    // (ᝀ) BUHID LETTER A	[30A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1740, 0x0062 };
    uint32_t const ces[9] = { 0x30A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_142)
{
    // 1741 0021;	
    // (ᝁ) BUHID LETTER I	[30A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1741, 0x0021 };
    uint32_t const ces[9] = { 0x30A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_143)
{
    // 1741 003F;	
    // (ᝁ) BUHID LETTER I	[30A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1741, 0x003F };
    uint32_t const ces[9] = { 0x30A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_144)
{
    // 1741 0061;	
    // (ᝁ) BUHID LETTER I	[30A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1741, 0x0061 };
    uint32_t const ces[9] = { 0x30A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_145)
{
    // 1741 0041;	
    // (ᝁ) BUHID LETTER I	[30A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1741, 0x0041 };
    uint32_t const ces[9] = { 0x30A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_146)
{
    // 1741 0062;	
    // (ᝁ) BUHID LETTER I	[30A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1741, 0x0062 };
    uint32_t const ces[9] = { 0x30A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_147)
{
    // 1742 0021;	
    // (ᝂ) BUHID LETTER U	[30A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1742, 0x0021 };
    uint32_t const ces[9] = { 0x30A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_148)
{
    // 1742 003F;	
    // (ᝂ) BUHID LETTER U	[30A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1742, 0x003F };
    uint32_t const ces[9] = { 0x30A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_149)
{
    // 1742 0061;	
    // (ᝂ) BUHID LETTER U	[30A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1742, 0x0061 };
    uint32_t const ces[9] = { 0x30A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_150)
{
    // 1742 0041;	
    // (ᝂ) BUHID LETTER U	[30A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1742, 0x0041 };
    uint32_t const ces[9] = { 0x30A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_151)
{
    // 1742 0062;	
    // (ᝂ) BUHID LETTER U	[30A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1742, 0x0062 };
    uint32_t const ces[9] = { 0x30A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_152)
{
    // 1743 0021;	
    // (ᝃ) BUHID LETTER KA	[30A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1743, 0x0021 };
    uint32_t const ces[9] = { 0x30A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_153)
{
    // 1743 003F;	
    // (ᝃ) BUHID LETTER KA	[30A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1743, 0x003F };
    uint32_t const ces[9] = { 0x30A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_154)
{
    // 1743 0061;	
    // (ᝃ) BUHID LETTER KA	[30A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1743, 0x0061 };
    uint32_t const ces[9] = { 0x30A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_155)
{
    // 1743 0041;	
    // (ᝃ) BUHID LETTER KA	[30A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1743, 0x0041 };
    uint32_t const ces[9] = { 0x30A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_156)
{
    // 1743 0062;	
    // (ᝃ) BUHID LETTER KA	[30A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1743, 0x0062 };
    uint32_t const ces[9] = { 0x30A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_157)
{
    // 1744 0021;	
    // (ᝄ) BUHID LETTER GA	[30AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1744, 0x0021 };
    uint32_t const ces[9] = { 0x30AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_158)
{
    // 1744 003F;	
    // (ᝄ) BUHID LETTER GA	[30AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1744, 0x003F };
    uint32_t const ces[9] = { 0x30AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_159)
{
    // 1744 0061;	
    // (ᝄ) BUHID LETTER GA	[30AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1744, 0x0061 };
    uint32_t const ces[9] = { 0x30AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_160)
{
    // 1744 0041;	
    // (ᝄ) BUHID LETTER GA	[30AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1744, 0x0041 };
    uint32_t const ces[9] = { 0x30AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_161)
{
    // 1744 0062;	
    // (ᝄ) BUHID LETTER GA	[30AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1744, 0x0062 };
    uint32_t const ces[9] = { 0x30AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_162)
{
    // 1745 0021;	
    // (ᝅ) BUHID LETTER NGA	[30AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1745, 0x0021 };
    uint32_t const ces[9] = { 0x30AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_163)
{
    // 1745 003F;	
    // (ᝅ) BUHID LETTER NGA	[30AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1745, 0x003F };
    uint32_t const ces[9] = { 0x30AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_164)
{
    // 1745 0061;	
    // (ᝅ) BUHID LETTER NGA	[30AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1745, 0x0061 };
    uint32_t const ces[9] = { 0x30AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_165)
{
    // 1745 0041;	
    // (ᝅ) BUHID LETTER NGA	[30AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1745, 0x0041 };
    uint32_t const ces[9] = { 0x30AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_166)
{
    // 1745 0062;	
    // (ᝅ) BUHID LETTER NGA	[30AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1745, 0x0062 };
    uint32_t const ces[9] = { 0x30AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_167)
{
    // 1746 0021;	
    // (ᝆ) BUHID LETTER TA	[30AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1746, 0x0021 };
    uint32_t const ces[9] = { 0x30AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_168)
{
    // 1746 003F;	
    // (ᝆ) BUHID LETTER TA	[30AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1746, 0x003F };
    uint32_t const ces[9] = { 0x30AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_169)
{
    // 1746 0061;	
    // (ᝆ) BUHID LETTER TA	[30AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1746, 0x0061 };
    uint32_t const ces[9] = { 0x30AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_170)
{
    // 1746 0041;	
    // (ᝆ) BUHID LETTER TA	[30AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1746, 0x0041 };
    uint32_t const ces[9] = { 0x30AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_171)
{
    // 1746 0062;	
    // (ᝆ) BUHID LETTER TA	[30AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1746, 0x0062 };
    uint32_t const ces[9] = { 0x30AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_172)
{
    // 1747 0021;	
    // (ᝇ) BUHID LETTER DA	[30AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1747, 0x0021 };
    uint32_t const ces[9] = { 0x30AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_173)
{
    // 1747 003F;	
    // (ᝇ) BUHID LETTER DA	[30AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1747, 0x003F };
    uint32_t const ces[9] = { 0x30AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_174)
{
    // 1747 0061;	
    // (ᝇ) BUHID LETTER DA	[30AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1747, 0x0061 };
    uint32_t const ces[9] = { 0x30AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_175)
{
    // 1747 0041;	
    // (ᝇ) BUHID LETTER DA	[30AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1747, 0x0041 };
    uint32_t const ces[9] = { 0x30AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_176)
{
    // 1747 0062;	
    // (ᝇ) BUHID LETTER DA	[30AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1747, 0x0062 };
    uint32_t const ces[9] = { 0x30AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_177)
{
    // 1748 0021;	
    // (ᝈ) BUHID LETTER NA	[30AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1748, 0x0021 };
    uint32_t const ces[9] = { 0x30AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_178)
{
    // 1748 003F;	
    // (ᝈ) BUHID LETTER NA	[30AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1748, 0x003F };
    uint32_t const ces[9] = { 0x30AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_179)
{
    // 1748 0061;	
    // (ᝈ) BUHID LETTER NA	[30AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1748, 0x0061 };
    uint32_t const ces[9] = { 0x30AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_180)
{
    // 1748 0041;	
    // (ᝈ) BUHID LETTER NA	[30AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1748, 0x0041 };
    uint32_t const ces[9] = { 0x30AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_181)
{
    // 1748 0062;	
    // (ᝈ) BUHID LETTER NA	[30AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1748, 0x0062 };
    uint32_t const ces[9] = { 0x30AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_182)
{
    // 1749 0021;	
    // (ᝉ) BUHID LETTER PA	[30AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1749, 0x0021 };
    uint32_t const ces[9] = { 0x30AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_183)
{
    // 1749 003F;	
    // (ᝉ) BUHID LETTER PA	[30AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1749, 0x003F };
    uint32_t const ces[9] = { 0x30AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_184)
{
    // 1749 0061;	
    // (ᝉ) BUHID LETTER PA	[30AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1749, 0x0061 };
    uint32_t const ces[9] = { 0x30AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_185)
{
    // 1749 0041;	
    // (ᝉ) BUHID LETTER PA	[30AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1749, 0x0041 };
    uint32_t const ces[9] = { 0x30AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_186)
{
    // 1749 0062;	
    // (ᝉ) BUHID LETTER PA	[30AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1749, 0x0062 };
    uint32_t const ces[9] = { 0x30AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_187)
{
    // 174A 0021;	
    // (ᝊ) BUHID LETTER BA	[30B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174A, 0x0021 };
    uint32_t const ces[9] = { 0x30B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_188)
{
    // 174A 003F;	
    // (ᝊ) BUHID LETTER BA	[30B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174A, 0x003F };
    uint32_t const ces[9] = { 0x30B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_189)
{
    // 174A 0061;	
    // (ᝊ) BUHID LETTER BA	[30B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174A, 0x0061 };
    uint32_t const ces[9] = { 0x30B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_190)
{
    // 174A 0041;	
    // (ᝊ) BUHID LETTER BA	[30B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x174A, 0x0041 };
    uint32_t const ces[9] = { 0x30B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_191)
{
    // 174A 0062;	
    // (ᝊ) BUHID LETTER BA	[30B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174A, 0x0062 };
    uint32_t const ces[9] = { 0x30B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_192)
{
    // 174B 0021;	
    // (ᝋ) BUHID LETTER MA	[30B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174B, 0x0021 };
    uint32_t const ces[9] = { 0x30B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_193)
{
    // 174B 003F;	
    // (ᝋ) BUHID LETTER MA	[30B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174B, 0x003F };
    uint32_t const ces[9] = { 0x30B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_194)
{
    // 174B 0061;	
    // (ᝋ) BUHID LETTER MA	[30B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174B, 0x0061 };
    uint32_t const ces[9] = { 0x30B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_195)
{
    // 174B 0041;	
    // (ᝋ) BUHID LETTER MA	[30B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x174B, 0x0041 };
    uint32_t const ces[9] = { 0x30B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_196)
{
    // 174B 0062;	
    // (ᝋ) BUHID LETTER MA	[30B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174B, 0x0062 };
    uint32_t const ces[9] = { 0x30B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_197)
{
    // 174C 0021;	
    // (ᝌ) BUHID LETTER YA	[30B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174C, 0x0021 };
    uint32_t const ces[9] = { 0x30B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_198)
{
    // 174C 003F;	
    // (ᝌ) BUHID LETTER YA	[30B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174C, 0x003F };
    uint32_t const ces[9] = { 0x30B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_199)
{
    // 174C 0061;	
    // (ᝌ) BUHID LETTER YA	[30B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174C, 0x0061 };
    uint32_t const ces[9] = { 0x30B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_200)
{
    // 174C 0041;	
    // (ᝌ) BUHID LETTER YA	[30B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x174C, 0x0041 };
    uint32_t const ces[9] = { 0x30B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_201)
{
    // 174C 0062;	
    // (ᝌ) BUHID LETTER YA	[30B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174C, 0x0062 };
    uint32_t const ces[9] = { 0x30B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_202)
{
    // 174D 0021;	
    // (ᝍ) BUHID LETTER RA	[30B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174D, 0x0021 };
    uint32_t const ces[9] = { 0x30B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_203)
{
    // 174D 003F;	
    // (ᝍ) BUHID LETTER RA	[30B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174D, 0x003F };
    uint32_t const ces[9] = { 0x30B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_204)
{
    // 174D 0061;	
    // (ᝍ) BUHID LETTER RA	[30B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174D, 0x0061 };
    uint32_t const ces[9] = { 0x30B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_205)
{
    // 174D 0041;	
    // (ᝍ) BUHID LETTER RA	[30B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x174D, 0x0041 };
    uint32_t const ces[9] = { 0x30B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_206)
{
    // 174D 0062;	
    // (ᝍ) BUHID LETTER RA	[30B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174D, 0x0062 };
    uint32_t const ces[9] = { 0x30B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_207)
{
    // 174E 0021;	
    // (ᝎ) BUHID LETTER LA	[30B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174E, 0x0021 };
    uint32_t const ces[9] = { 0x30B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_208)
{
    // 174E 003F;	
    // (ᝎ) BUHID LETTER LA	[30B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174E, 0x003F };
    uint32_t const ces[9] = { 0x30B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_209)
{
    // 174E 0061;	
    // (ᝎ) BUHID LETTER LA	[30B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174E, 0x0061 };
    uint32_t const ces[9] = { 0x30B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_210)
{
    // 174E 0041;	
    // (ᝎ) BUHID LETTER LA	[30B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x174E, 0x0041 };
    uint32_t const ces[9] = { 0x30B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_211)
{
    // 174E 0062;	
    // (ᝎ) BUHID LETTER LA	[30B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174E, 0x0062 };
    uint32_t const ces[9] = { 0x30B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_212)
{
    // 174F 0021;	
    // (ᝏ) BUHID LETTER WA	[30B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174F, 0x0021 };
    uint32_t const ces[9] = { 0x30B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_213)
{
    // 174F 003F;	
    // (ᝏ) BUHID LETTER WA	[30B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174F, 0x003F };
    uint32_t const ces[9] = { 0x30B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_214)
{
    // 174F 0061;	
    // (ᝏ) BUHID LETTER WA	[30B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174F, 0x0061 };
    uint32_t const ces[9] = { 0x30B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_215)
{
    // 174F 0041;	
    // (ᝏ) BUHID LETTER WA	[30B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x174F, 0x0041 };
    uint32_t const ces[9] = { 0x30B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_216)
{
    // 174F 0062;	
    // (ᝏ) BUHID LETTER WA	[30B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x174F, 0x0062 };
    uint32_t const ces[9] = { 0x30B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_217)
{
    // 1750 0021;	
    // (ᝐ) BUHID LETTER SA	[30B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1750, 0x0021 };
    uint32_t const ces[9] = { 0x30B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_218)
{
    // 1750 003F;	
    // (ᝐ) BUHID LETTER SA	[30B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1750, 0x003F };
    uint32_t const ces[9] = { 0x30B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_219)
{
    // 1750 0061;	
    // (ᝐ) BUHID LETTER SA	[30B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1750, 0x0061 };
    uint32_t const ces[9] = { 0x30B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_220)
{
    // 1750 0041;	
    // (ᝐ) BUHID LETTER SA	[30B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1750, 0x0041 };
    uint32_t const ces[9] = { 0x30B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_221)
{
    // 1750 0062;	
    // (ᝐ) BUHID LETTER SA	[30B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1750, 0x0062 };
    uint32_t const ces[9] = { 0x30B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_222)
{
    // 1751 0021;	
    // (ᝑ) BUHID LETTER HA	[30B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1751, 0x0021 };
    uint32_t const ces[9] = { 0x30B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_223)
{
    // 1751 003F;	
    // (ᝑ) BUHID LETTER HA	[30B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1751, 0x003F };
    uint32_t const ces[9] = { 0x30B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_224)
{
    // 1751 0061;	
    // (ᝑ) BUHID LETTER HA	[30B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1751, 0x0061 };
    uint32_t const ces[9] = { 0x30B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_225)
{
    // 1751 0041;	
    // (ᝑ) BUHID LETTER HA	[30B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1751, 0x0041 };
    uint32_t const ces[9] = { 0x30B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_226)
{
    // 1751 0062;	
    // (ᝑ) BUHID LETTER HA	[30B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1751, 0x0062 };
    uint32_t const ces[9] = { 0x30B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_227)
{
    // 1752 0021;	
    // (ᝒ) BUHID VOWEL SIGN I	[30B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1752, 0x0021 };
    uint32_t const ces[9] = { 0x30B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_228)
{
    // 1752 003F;	
    // (ᝒ) BUHID VOWEL SIGN I	[30B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1752, 0x003F };
    uint32_t const ces[9] = { 0x30B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_229)
{
    // 1752 0061;	
    // (ᝒ) BUHID VOWEL SIGN I	[30B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1752, 0x0061 };
    uint32_t const ces[9] = { 0x30B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_230)
{
    // 1752 0041;	
    // (ᝒ) BUHID VOWEL SIGN I	[30B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1752, 0x0041 };
    uint32_t const ces[9] = { 0x30B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_231)
{
    // 1752 0062;	
    // (ᝒ) BUHID VOWEL SIGN I	[30B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1752, 0x0062 };
    uint32_t const ces[9] = { 0x30B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_232)
{
    // 1753 0021;	
    // (ᝓ) BUHID VOWEL SIGN U	[30B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1753, 0x0021 };
    uint32_t const ces[9] = { 0x30B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_233)
{
    // 1753 003F;	
    // (ᝓ) BUHID VOWEL SIGN U	[30B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1753, 0x003F };
    uint32_t const ces[9] = { 0x30B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_234)
{
    // 1753 0061;	
    // (ᝓ) BUHID VOWEL SIGN U	[30B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1753, 0x0061 };
    uint32_t const ces[9] = { 0x30B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_235)
{
    // 1753 0041;	
    // (ᝓ) BUHID VOWEL SIGN U	[30B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1753, 0x0041 };
    uint32_t const ces[9] = { 0x30B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_236)
{
    // 1753 0062;	
    // (ᝓ) BUHID VOWEL SIGN U	[30B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1753, 0x0062 };
    uint32_t const ces[9] = { 0x30B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_237)
{
    // 1760 0021;	
    // (ᝠ) TAGBANWA LETTER A	[30BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1760, 0x0021 };
    uint32_t const ces[9] = { 0x30BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_238)
{
    // 1760 003F;	
    // (ᝠ) TAGBANWA LETTER A	[30BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1760, 0x003F };
    uint32_t const ces[9] = { 0x30BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_239)
{
    // 1760 0061;	
    // (ᝠ) TAGBANWA LETTER A	[30BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1760, 0x0061 };
    uint32_t const ces[9] = { 0x30BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_240)
{
    // 1760 0041;	
    // (ᝠ) TAGBANWA LETTER A	[30BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1760, 0x0041 };
    uint32_t const ces[9] = { 0x30BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_241)
{
    // 1760 0062;	
    // (ᝠ) TAGBANWA LETTER A	[30BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1760, 0x0062 };
    uint32_t const ces[9] = { 0x30BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_242)
{
    // 1761 0021;	
    // (ᝡ) TAGBANWA LETTER I	[30BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1761, 0x0021 };
    uint32_t const ces[9] = { 0x30BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_243)
{
    // 1761 003F;	
    // (ᝡ) TAGBANWA LETTER I	[30BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1761, 0x003F };
    uint32_t const ces[9] = { 0x30BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_244)
{
    // 1761 0061;	
    // (ᝡ) TAGBANWA LETTER I	[30BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1761, 0x0061 };
    uint32_t const ces[9] = { 0x30BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_245)
{
    // 1761 0041;	
    // (ᝡ) TAGBANWA LETTER I	[30BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1761, 0x0041 };
    uint32_t const ces[9] = { 0x30BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_246)
{
    // 1761 0062;	
    // (ᝡ) TAGBANWA LETTER I	[30BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1761, 0x0062 };
    uint32_t const ces[9] = { 0x30BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_247)
{
    // 1762 0021;	
    // (ᝢ) TAGBANWA LETTER U	[30BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1762, 0x0021 };
    uint32_t const ces[9] = { 0x30BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_248)
{
    // 1762 003F;	
    // (ᝢ) TAGBANWA LETTER U	[30BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1762, 0x003F };
    uint32_t const ces[9] = { 0x30BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_249)
{
    // 1762 0061;	
    // (ᝢ) TAGBANWA LETTER U	[30BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1762, 0x0061 };
    uint32_t const ces[9] = { 0x30BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_250)
{
    // 1762 0041;	
    // (ᝢ) TAGBANWA LETTER U	[30BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1762, 0x0041 };
    uint32_t const ces[9] = { 0x30BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_251)
{
    // 1762 0062;	
    // (ᝢ) TAGBANWA LETTER U	[30BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1762, 0x0062 };
    uint32_t const ces[9] = { 0x30BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_252)
{
    // 1763 0021;	
    // (ᝣ) TAGBANWA LETTER KA	[30BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1763, 0x0021 };
    uint32_t const ces[9] = { 0x30BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_253)
{
    // 1763 003F;	
    // (ᝣ) TAGBANWA LETTER KA	[30BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1763, 0x003F };
    uint32_t const ces[9] = { 0x30BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_254)
{
    // 1763 0061;	
    // (ᝣ) TAGBANWA LETTER KA	[30BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1763, 0x0061 };
    uint32_t const ces[9] = { 0x30BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_255)
{
    // 1763 0041;	
    // (ᝣ) TAGBANWA LETTER KA	[30BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1763, 0x0041 };
    uint32_t const ces[9] = { 0x30BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_256)
{
    // 1763 0062;	
    // (ᝣ) TAGBANWA LETTER KA	[30BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1763, 0x0062 };
    uint32_t const ces[9] = { 0x30BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_257)
{
    // 1764 0021;	
    // (ᝤ) TAGBANWA LETTER GA	[30BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1764, 0x0021 };
    uint32_t const ces[9] = { 0x30BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_258)
{
    // 1764 003F;	
    // (ᝤ) TAGBANWA LETTER GA	[30BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1764, 0x003F };
    uint32_t const ces[9] = { 0x30BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_259)
{
    // 1764 0061;	
    // (ᝤ) TAGBANWA LETTER GA	[30BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1764, 0x0061 };
    uint32_t const ces[9] = { 0x30BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_260)
{
    // 1764 0041;	
    // (ᝤ) TAGBANWA LETTER GA	[30BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1764, 0x0041 };
    uint32_t const ces[9] = { 0x30BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_261)
{
    // 1764 0062;	
    // (ᝤ) TAGBANWA LETTER GA	[30BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1764, 0x0062 };
    uint32_t const ces[9] = { 0x30BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_262)
{
    // 1765 0021;	
    // (ᝥ) TAGBANWA LETTER NGA	[30BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1765, 0x0021 };
    uint32_t const ces[9] = { 0x30BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_263)
{
    // 1765 003F;	
    // (ᝥ) TAGBANWA LETTER NGA	[30BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1765, 0x003F };
    uint32_t const ces[9] = { 0x30BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_264)
{
    // 1765 0061;	
    // (ᝥ) TAGBANWA LETTER NGA	[30BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1765, 0x0061 };
    uint32_t const ces[9] = { 0x30BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_265)
{
    // 1765 0041;	
    // (ᝥ) TAGBANWA LETTER NGA	[30BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1765, 0x0041 };
    uint32_t const ces[9] = { 0x30BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_266)
{
    // 1765 0062;	
    // (ᝥ) TAGBANWA LETTER NGA	[30BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1765, 0x0062 };
    uint32_t const ces[9] = { 0x30BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_267)
{
    // 1766 0021;	
    // (ᝦ) TAGBANWA LETTER TA	[30C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1766, 0x0021 };
    uint32_t const ces[9] = { 0x30C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_268)
{
    // 1766 003F;	
    // (ᝦ) TAGBANWA LETTER TA	[30C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1766, 0x003F };
    uint32_t const ces[9] = { 0x30C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_269)
{
    // 1766 0061;	
    // (ᝦ) TAGBANWA LETTER TA	[30C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1766, 0x0061 };
    uint32_t const ces[9] = { 0x30C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_270)
{
    // 1766 0041;	
    // (ᝦ) TAGBANWA LETTER TA	[30C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1766, 0x0041 };
    uint32_t const ces[9] = { 0x30C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_271)
{
    // 1766 0062;	
    // (ᝦ) TAGBANWA LETTER TA	[30C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1766, 0x0062 };
    uint32_t const ces[9] = { 0x30C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_272)
{
    // 1767 0021;	
    // (ᝧ) TAGBANWA LETTER DA	[30C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1767, 0x0021 };
    uint32_t const ces[9] = { 0x30C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_273)
{
    // 1767 003F;	
    // (ᝧ) TAGBANWA LETTER DA	[30C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1767, 0x003F };
    uint32_t const ces[9] = { 0x30C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_274)
{
    // 1767 0061;	
    // (ᝧ) TAGBANWA LETTER DA	[30C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1767, 0x0061 };
    uint32_t const ces[9] = { 0x30C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_275)
{
    // 1767 0041;	
    // (ᝧ) TAGBANWA LETTER DA	[30C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1767, 0x0041 };
    uint32_t const ces[9] = { 0x30C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_276)
{
    // 1767 0062;	
    // (ᝧ) TAGBANWA LETTER DA	[30C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1767, 0x0062 };
    uint32_t const ces[9] = { 0x30C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_277)
{
    // 1768 0021;	
    // (ᝨ) TAGBANWA LETTER NA	[30C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1768, 0x0021 };
    uint32_t const ces[9] = { 0x30C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_278)
{
    // 1768 003F;	
    // (ᝨ) TAGBANWA LETTER NA	[30C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1768, 0x003F };
    uint32_t const ces[9] = { 0x30C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_279)
{
    // 1768 0061;	
    // (ᝨ) TAGBANWA LETTER NA	[30C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1768, 0x0061 };
    uint32_t const ces[9] = { 0x30C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_280)
{
    // 1768 0041;	
    // (ᝨ) TAGBANWA LETTER NA	[30C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1768, 0x0041 };
    uint32_t const ces[9] = { 0x30C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_281)
{
    // 1768 0062;	
    // (ᝨ) TAGBANWA LETTER NA	[30C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1768, 0x0062 };
    uint32_t const ces[9] = { 0x30C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_282)
{
    // 1769 0021;	
    // (ᝩ) TAGBANWA LETTER PA	[30C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1769, 0x0021 };
    uint32_t const ces[9] = { 0x30C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_283)
{
    // 1769 003F;	
    // (ᝩ) TAGBANWA LETTER PA	[30C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1769, 0x003F };
    uint32_t const ces[9] = { 0x30C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_284)
{
    // 1769 0061;	
    // (ᝩ) TAGBANWA LETTER PA	[30C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1769, 0x0061 };
    uint32_t const ces[9] = { 0x30C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_285)
{
    // 1769 0041;	
    // (ᝩ) TAGBANWA LETTER PA	[30C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1769, 0x0041 };
    uint32_t const ces[9] = { 0x30C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_286)
{
    // 1769 0062;	
    // (ᝩ) TAGBANWA LETTER PA	[30C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1769, 0x0062 };
    uint32_t const ces[9] = { 0x30C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_287)
{
    // 176A 0021;	
    // (ᝪ) TAGBANWA LETTER BA	[30C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x176A, 0x0021 };
    uint32_t const ces[9] = { 0x30C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_288)
{
    // 176A 003F;	
    // (ᝪ) TAGBANWA LETTER BA	[30C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x176A, 0x003F };
    uint32_t const ces[9] = { 0x30C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_289)
{
    // 176A 0061;	
    // (ᝪ) TAGBANWA LETTER BA	[30C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x176A, 0x0061 };
    uint32_t const ces[9] = { 0x30C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_290)
{
    // 176A 0041;	
    // (ᝪ) TAGBANWA LETTER BA	[30C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x176A, 0x0041 };
    uint32_t const ces[9] = { 0x30C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_291)
{
    // 176A 0062;	
    // (ᝪ) TAGBANWA LETTER BA	[30C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x176A, 0x0062 };
    uint32_t const ces[9] = { 0x30C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_292)
{
    // 176B 0021;	
    // (ᝫ) TAGBANWA LETTER MA	[30C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x176B, 0x0021 };
    uint32_t const ces[9] = { 0x30C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_293)
{
    // 176B 003F;	
    // (ᝫ) TAGBANWA LETTER MA	[30C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x176B, 0x003F };
    uint32_t const ces[9] = { 0x30C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_294)
{
    // 176B 0061;	
    // (ᝫ) TAGBANWA LETTER MA	[30C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x176B, 0x0061 };
    uint32_t const ces[9] = { 0x30C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_295)
{
    // 176B 0041;	
    // (ᝫ) TAGBANWA LETTER MA	[30C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x176B, 0x0041 };
    uint32_t const ces[9] = { 0x30C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_296)
{
    // 176B 0062;	
    // (ᝫ) TAGBANWA LETTER MA	[30C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x176B, 0x0062 };
    uint32_t const ces[9] = { 0x30C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_297)
{
    // 176C 0021;	
    // (ᝬ) TAGBANWA LETTER YA	[30C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x176C, 0x0021 };
    uint32_t const ces[9] = { 0x30C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_298)
{
    // 176C 003F;	
    // (ᝬ) TAGBANWA LETTER YA	[30C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x176C, 0x003F };
    uint32_t const ces[9] = { 0x30C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_299)
{
    // 176C 0061;	
    // (ᝬ) TAGBANWA LETTER YA	[30C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x176C, 0x0061 };
    uint32_t const ces[9] = { 0x30C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_300)
{
    // 176C 0041;	
    // (ᝬ) TAGBANWA LETTER YA	[30C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x176C, 0x0041 };
    uint32_t const ces[9] = { 0x30C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_301)
{
    // 176C 0062;	
    // (ᝬ) TAGBANWA LETTER YA	[30C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x176C, 0x0062 };
    uint32_t const ces[9] = { 0x30C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_302)
{
    // 176E 0021;	
    // (ᝮ) TAGBANWA LETTER LA	[30C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x176E, 0x0021 };
    uint32_t const ces[9] = { 0x30C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_303)
{
    // 176E 003F;	
    // (ᝮ) TAGBANWA LETTER LA	[30C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x176E, 0x003F };
    uint32_t const ces[9] = { 0x30C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_304)
{
    // 176E 0061;	
    // (ᝮ) TAGBANWA LETTER LA	[30C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x176E, 0x0061 };
    uint32_t const ces[9] = { 0x30C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_305)
{
    // 176E 0041;	
    // (ᝮ) TAGBANWA LETTER LA	[30C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x176E, 0x0041 };
    uint32_t const ces[9] = { 0x30C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_306)
{
    // 176E 0062;	
    // (ᝮ) TAGBANWA LETTER LA	[30C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x176E, 0x0062 };
    uint32_t const ces[9] = { 0x30C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_307)
{
    // 176F 0021;	
    // (ᝯ) TAGBANWA LETTER WA	[30C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x176F, 0x0021 };
    uint32_t const ces[9] = { 0x30C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_308)
{
    // 176F 003F;	
    // (ᝯ) TAGBANWA LETTER WA	[30C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x176F, 0x003F };
    uint32_t const ces[9] = { 0x30C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_309)
{
    // 176F 0061;	
    // (ᝯ) TAGBANWA LETTER WA	[30C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x176F, 0x0061 };
    uint32_t const ces[9] = { 0x30C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_310)
{
    // 176F 0041;	
    // (ᝯ) TAGBANWA LETTER WA	[30C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x176F, 0x0041 };
    uint32_t const ces[9] = { 0x30C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_311)
{
    // 176F 0062;	
    // (ᝯ) TAGBANWA LETTER WA	[30C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x176F, 0x0062 };
    uint32_t const ces[9] = { 0x30C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_312)
{
    // 1770 0021;	
    // (ᝰ) TAGBANWA LETTER SA	[30C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1770, 0x0021 };
    uint32_t const ces[9] = { 0x30C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_313)
{
    // 1770 003F;	
    // (ᝰ) TAGBANWA LETTER SA	[30C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1770, 0x003F };
    uint32_t const ces[9] = { 0x30C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_314)
{
    // 1770 0061;	
    // (ᝰ) TAGBANWA LETTER SA	[30C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1770, 0x0061 };
    uint32_t const ces[9] = { 0x30C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_315)
{
    // 1770 0041;	
    // (ᝰ) TAGBANWA LETTER SA	[30C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1770, 0x0041 };
    uint32_t const ces[9] = { 0x30C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_316)
{
    // 1770 0062;	
    // (ᝰ) TAGBANWA LETTER SA	[30C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1770, 0x0062 };
    uint32_t const ces[9] = { 0x30C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_317)
{
    // 1772 0021;	
    // (ᝲ) TAGBANWA VOWEL SIGN I	[30CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1772, 0x0021 };
    uint32_t const ces[9] = { 0x30CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_318)
{
    // 1772 003F;	
    // (ᝲ) TAGBANWA VOWEL SIGN I	[30CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1772, 0x003F };
    uint32_t const ces[9] = { 0x30CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_319)
{
    // 1772 0061;	
    // (ᝲ) TAGBANWA VOWEL SIGN I	[30CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1772, 0x0061 };
    uint32_t const ces[9] = { 0x30CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_320)
{
    // 1772 0041;	
    // (ᝲ) TAGBANWA VOWEL SIGN I	[30CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1772, 0x0041 };
    uint32_t const ces[9] = { 0x30CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_321)
{
    // 1772 0062;	
    // (ᝲ) TAGBANWA VOWEL SIGN I	[30CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1772, 0x0062 };
    uint32_t const ces[9] = { 0x30CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_322)
{
    // 1773 0021;	
    // (ᝳ) TAGBANWA VOWEL SIGN U	[30CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1773, 0x0021 };
    uint32_t const ces[9] = { 0x30CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_323)
{
    // 1773 003F;	
    // (ᝳ) TAGBANWA VOWEL SIGN U	[30CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1773, 0x003F };
    uint32_t const ces[9] = { 0x30CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_324)
{
    // 1773 0061;	
    // (ᝳ) TAGBANWA VOWEL SIGN U	[30CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1773, 0x0061 };
    uint32_t const ces[9] = { 0x30CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_325)
{
    // 1773 0041;	
    // (ᝳ) TAGBANWA VOWEL SIGN U	[30CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1773, 0x0041 };
    uint32_t const ces[9] = { 0x30CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_326)
{
    // 1773 0062;	
    // (ᝳ) TAGBANWA VOWEL SIGN U	[30CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1773, 0x0062 };
    uint32_t const ces[9] = { 0x30CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_327)
{
    // 1A00 0021;	
    // (ᨀ) BUGINESE LETTER KA	[30CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A00, 0x0021 };
    uint32_t const ces[9] = { 0x30CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_328)
{
    // 1A00 003F;	
    // (ᨀ) BUGINESE LETTER KA	[30CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A00, 0x003F };
    uint32_t const ces[9] = { 0x30CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_329)
{
    // 1A00 0061;	
    // (ᨀ) BUGINESE LETTER KA	[30CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A00, 0x0061 };
    uint32_t const ces[9] = { 0x30CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_330)
{
    // 1A00 0041;	
    // (ᨀ) BUGINESE LETTER KA	[30CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A00, 0x0041 };
    uint32_t const ces[9] = { 0x30CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_331)
{
    // 1A00 0062;	
    // (ᨀ) BUGINESE LETTER KA	[30CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A00, 0x0062 };
    uint32_t const ces[9] = { 0x30CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_332)
{
    // 1A01 0021;	
    // (ᨁ) BUGINESE LETTER GA	[30CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A01, 0x0021 };
    uint32_t const ces[9] = { 0x30CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_333)
{
    // 1A01 003F;	
    // (ᨁ) BUGINESE LETTER GA	[30CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A01, 0x003F };
    uint32_t const ces[9] = { 0x30CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_334)
{
    // 1A01 0061;	
    // (ᨁ) BUGINESE LETTER GA	[30CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A01, 0x0061 };
    uint32_t const ces[9] = { 0x30CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_335)
{
    // 1A01 0041;	
    // (ᨁ) BUGINESE LETTER GA	[30CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A01, 0x0041 };
    uint32_t const ces[9] = { 0x30CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_336)
{
    // 1A01 0062;	
    // (ᨁ) BUGINESE LETTER GA	[30CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A01, 0x0062 };
    uint32_t const ces[9] = { 0x30CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_337)
{
    // 1A02 0021;	
    // (ᨂ) BUGINESE LETTER NGA	[30CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A02, 0x0021 };
    uint32_t const ces[9] = { 0x30CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_338)
{
    // 1A02 003F;	
    // (ᨂ) BUGINESE LETTER NGA	[30CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A02, 0x003F };
    uint32_t const ces[9] = { 0x30CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_339)
{
    // 1A02 0061;	
    // (ᨂ) BUGINESE LETTER NGA	[30CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A02, 0x0061 };
    uint32_t const ces[9] = { 0x30CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_340)
{
    // 1A02 0041;	
    // (ᨂ) BUGINESE LETTER NGA	[30CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A02, 0x0041 };
    uint32_t const ces[9] = { 0x30CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_341)
{
    // 1A02 0062;	
    // (ᨂ) BUGINESE LETTER NGA	[30CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A02, 0x0062 };
    uint32_t const ces[9] = { 0x30CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_342)
{
    // 1A03 0021;	
    // (ᨃ) BUGINESE LETTER NGKA	[30CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A03, 0x0021 };
    uint32_t const ces[9] = { 0x30CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_343)
{
    // 1A03 003F;	
    // (ᨃ) BUGINESE LETTER NGKA	[30CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A03, 0x003F };
    uint32_t const ces[9] = { 0x30CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_344)
{
    // 1A03 0061;	
    // (ᨃ) BUGINESE LETTER NGKA	[30CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A03, 0x0061 };
    uint32_t const ces[9] = { 0x30CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_345)
{
    // 1A03 0041;	
    // (ᨃ) BUGINESE LETTER NGKA	[30CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A03, 0x0041 };
    uint32_t const ces[9] = { 0x30CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_346)
{
    // 1A03 0062;	
    // (ᨃ) BUGINESE LETTER NGKA	[30CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A03, 0x0062 };
    uint32_t const ces[9] = { 0x30CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_347)
{
    // 1A04 0021;	
    // (ᨄ) BUGINESE LETTER PA	[30D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A04, 0x0021 };
    uint32_t const ces[9] = { 0x30D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_348)
{
    // 1A04 003F;	
    // (ᨄ) BUGINESE LETTER PA	[30D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A04, 0x003F };
    uint32_t const ces[9] = { 0x30D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_349)
{
    // 1A04 0061;	
    // (ᨄ) BUGINESE LETTER PA	[30D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A04, 0x0061 };
    uint32_t const ces[9] = { 0x30D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_350)
{
    // 1A04 0041;	
    // (ᨄ) BUGINESE LETTER PA	[30D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A04, 0x0041 };
    uint32_t const ces[9] = { 0x30D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_351)
{
    // 1A04 0062;	
    // (ᨄ) BUGINESE LETTER PA	[30D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A04, 0x0062 };
    uint32_t const ces[9] = { 0x30D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_352)
{
    // 1A05 0021;	
    // (ᨅ) BUGINESE LETTER BA	[30D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A05, 0x0021 };
    uint32_t const ces[9] = { 0x30D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_353)
{
    // 1A05 003F;	
    // (ᨅ) BUGINESE LETTER BA	[30D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A05, 0x003F };
    uint32_t const ces[9] = { 0x30D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_354)
{
    // 1A05 0061;	
    // (ᨅ) BUGINESE LETTER BA	[30D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A05, 0x0061 };
    uint32_t const ces[9] = { 0x30D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_355)
{
    // 1A05 0041;	
    // (ᨅ) BUGINESE LETTER BA	[30D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A05, 0x0041 };
    uint32_t const ces[9] = { 0x30D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_356)
{
    // 1A05 0062;	
    // (ᨅ) BUGINESE LETTER BA	[30D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A05, 0x0062 };
    uint32_t const ces[9] = { 0x30D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_357)
{
    // 1A06 0021;	
    // (ᨆ) BUGINESE LETTER MA	[30D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A06, 0x0021 };
    uint32_t const ces[9] = { 0x30D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_358)
{
    // 1A06 003F;	
    // (ᨆ) BUGINESE LETTER MA	[30D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A06, 0x003F };
    uint32_t const ces[9] = { 0x30D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_359)
{
    // 1A06 0061;	
    // (ᨆ) BUGINESE LETTER MA	[30D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A06, 0x0061 };
    uint32_t const ces[9] = { 0x30D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_360)
{
    // 1A06 0041;	
    // (ᨆ) BUGINESE LETTER MA	[30D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A06, 0x0041 };
    uint32_t const ces[9] = { 0x30D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_361)
{
    // 1A06 0062;	
    // (ᨆ) BUGINESE LETTER MA	[30D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A06, 0x0062 };
    uint32_t const ces[9] = { 0x30D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_362)
{
    // 1A07 0021;	
    // (ᨇ) BUGINESE LETTER MPA	[30D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A07, 0x0021 };
    uint32_t const ces[9] = { 0x30D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_363)
{
    // 1A07 003F;	
    // (ᨇ) BUGINESE LETTER MPA	[30D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A07, 0x003F };
    uint32_t const ces[9] = { 0x30D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_364)
{
    // 1A07 0061;	
    // (ᨇ) BUGINESE LETTER MPA	[30D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A07, 0x0061 };
    uint32_t const ces[9] = { 0x30D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_365)
{
    // 1A07 0041;	
    // (ᨇ) BUGINESE LETTER MPA	[30D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A07, 0x0041 };
    uint32_t const ces[9] = { 0x30D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_366)
{
    // 1A07 0062;	
    // (ᨇ) BUGINESE LETTER MPA	[30D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A07, 0x0062 };
    uint32_t const ces[9] = { 0x30D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_367)
{
    // 1A08 0021;	
    // (ᨈ) BUGINESE LETTER TA	[30D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A08, 0x0021 };
    uint32_t const ces[9] = { 0x30D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_368)
{
    // 1A08 003F;	
    // (ᨈ) BUGINESE LETTER TA	[30D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A08, 0x003F };
    uint32_t const ces[9] = { 0x30D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_369)
{
    // 1A08 0061;	
    // (ᨈ) BUGINESE LETTER TA	[30D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A08, 0x0061 };
    uint32_t const ces[9] = { 0x30D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_370)
{
    // 1A08 0041;	
    // (ᨈ) BUGINESE LETTER TA	[30D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A08, 0x0041 };
    uint32_t const ces[9] = { 0x30D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_371)
{
    // 1A08 0062;	
    // (ᨈ) BUGINESE LETTER TA	[30D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A08, 0x0062 };
    uint32_t const ces[9] = { 0x30D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_372)
{
    // 1A09 0021;	
    // (ᨉ) BUGINESE LETTER DA	[30D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A09, 0x0021 };
    uint32_t const ces[9] = { 0x30D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_373)
{
    // 1A09 003F;	
    // (ᨉ) BUGINESE LETTER DA	[30D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A09, 0x003F };
    uint32_t const ces[9] = { 0x30D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_374)
{
    // 1A09 0061;	
    // (ᨉ) BUGINESE LETTER DA	[30D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A09, 0x0061 };
    uint32_t const ces[9] = { 0x30D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_375)
{
    // 1A09 0041;	
    // (ᨉ) BUGINESE LETTER DA	[30D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A09, 0x0041 };
    uint32_t const ces[9] = { 0x30D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_376)
{
    // 1A09 0062;	
    // (ᨉ) BUGINESE LETTER DA	[30D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A09, 0x0062 };
    uint32_t const ces[9] = { 0x30D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_377)
{
    // 1A0A 0021;	
    // (ᨊ) BUGINESE LETTER NA	[30D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0A, 0x0021 };
    uint32_t const ces[9] = { 0x30D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_378)
{
    // 1A0A 003F;	
    // (ᨊ) BUGINESE LETTER NA	[30D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0A, 0x003F };
    uint32_t const ces[9] = { 0x30D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_379)
{
    // 1A0A 0061;	
    // (ᨊ) BUGINESE LETTER NA	[30D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0A, 0x0061 };
    uint32_t const ces[9] = { 0x30D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_380)
{
    // 1A0A 0041;	
    // (ᨊ) BUGINESE LETTER NA	[30D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A0A, 0x0041 };
    uint32_t const ces[9] = { 0x30D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_381)
{
    // 1A0A 0062;	
    // (ᨊ) BUGINESE LETTER NA	[30D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0A, 0x0062 };
    uint32_t const ces[9] = { 0x30D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_382)
{
    // 1A0B 0021;	
    // (ᨋ) BUGINESE LETTER NRA	[30D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0B, 0x0021 };
    uint32_t const ces[9] = { 0x30D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_383)
{
    // 1A0B 003F;	
    // (ᨋ) BUGINESE LETTER NRA	[30D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0B, 0x003F };
    uint32_t const ces[9] = { 0x30D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_384)
{
    // 1A0B 0061;	
    // (ᨋ) BUGINESE LETTER NRA	[30D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0B, 0x0061 };
    uint32_t const ces[9] = { 0x30D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_385)
{
    // 1A0B 0041;	
    // (ᨋ) BUGINESE LETTER NRA	[30D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A0B, 0x0041 };
    uint32_t const ces[9] = { 0x30D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_386)
{
    // 1A0B 0062;	
    // (ᨋ) BUGINESE LETTER NRA	[30D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0B, 0x0062 };
    uint32_t const ces[9] = { 0x30D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_387)
{
    // 1A0C 0021;	
    // (ᨌ) BUGINESE LETTER CA	[30D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0C, 0x0021 };
    uint32_t const ces[9] = { 0x30D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_388)
{
    // 1A0C 003F;	
    // (ᨌ) BUGINESE LETTER CA	[30D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0C, 0x003F };
    uint32_t const ces[9] = { 0x30D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_389)
{
    // 1A0C 0061;	
    // (ᨌ) BUGINESE LETTER CA	[30D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0C, 0x0061 };
    uint32_t const ces[9] = { 0x30D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_390)
{
    // 1A0C 0041;	
    // (ᨌ) BUGINESE LETTER CA	[30D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A0C, 0x0041 };
    uint32_t const ces[9] = { 0x30D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_391)
{
    // 1A0C 0062;	
    // (ᨌ) BUGINESE LETTER CA	[30D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0C, 0x0062 };
    uint32_t const ces[9] = { 0x30D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_392)
{
    // 1A0D 0021;	
    // (ᨍ) BUGINESE LETTER JA	[30D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0D, 0x0021 };
    uint32_t const ces[9] = { 0x30D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_393)
{
    // 1A0D 003F;	
    // (ᨍ) BUGINESE LETTER JA	[30D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0D, 0x003F };
    uint32_t const ces[9] = { 0x30D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_394)
{
    // 1A0D 0061;	
    // (ᨍ) BUGINESE LETTER JA	[30D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0D, 0x0061 };
    uint32_t const ces[9] = { 0x30D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_395)
{
    // 1A0D 0041;	
    // (ᨍ) BUGINESE LETTER JA	[30D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A0D, 0x0041 };
    uint32_t const ces[9] = { 0x30D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_396)
{
    // 1A0D 0062;	
    // (ᨍ) BUGINESE LETTER JA	[30D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0D, 0x0062 };
    uint32_t const ces[9] = { 0x30D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_397)
{
    // 1A0E 0021;	
    // (ᨎ) BUGINESE LETTER NYA	[30DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0E, 0x0021 };
    uint32_t const ces[9] = { 0x30DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_398)
{
    // 1A0E 003F;	
    // (ᨎ) BUGINESE LETTER NYA	[30DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0E, 0x003F };
    uint32_t const ces[9] = { 0x30DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_399)
{
    // 1A0E 0061;	
    // (ᨎ) BUGINESE LETTER NYA	[30DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0E, 0x0061 };
    uint32_t const ces[9] = { 0x30DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_400)
{
    // 1A0E 0041;	
    // (ᨎ) BUGINESE LETTER NYA	[30DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A0E, 0x0041 };
    uint32_t const ces[9] = { 0x30DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_401)
{
    // 1A0E 0062;	
    // (ᨎ) BUGINESE LETTER NYA	[30DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0E, 0x0062 };
    uint32_t const ces[9] = { 0x30DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_402)
{
    // 1A0F 0021;	
    // (ᨏ) BUGINESE LETTER NYCA	[30DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0F, 0x0021 };
    uint32_t const ces[9] = { 0x30DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_403)
{
    // 1A0F 003F;	
    // (ᨏ) BUGINESE LETTER NYCA	[30DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0F, 0x003F };
    uint32_t const ces[9] = { 0x30DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_404)
{
    // 1A0F 0061;	
    // (ᨏ) BUGINESE LETTER NYCA	[30DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0F, 0x0061 };
    uint32_t const ces[9] = { 0x30DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_405)
{
    // 1A0F 0041;	
    // (ᨏ) BUGINESE LETTER NYCA	[30DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A0F, 0x0041 };
    uint32_t const ces[9] = { 0x30DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_406)
{
    // 1A0F 0062;	
    // (ᨏ) BUGINESE LETTER NYCA	[30DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A0F, 0x0062 };
    uint32_t const ces[9] = { 0x30DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_407)
{
    // 1A10 0021;	
    // (ᨐ) BUGINESE LETTER YA	[30DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A10, 0x0021 };
    uint32_t const ces[9] = { 0x30DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_408)
{
    // 1A10 003F;	
    // (ᨐ) BUGINESE LETTER YA	[30DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A10, 0x003F };
    uint32_t const ces[9] = { 0x30DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_409)
{
    // 1A10 0061;	
    // (ᨐ) BUGINESE LETTER YA	[30DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A10, 0x0061 };
    uint32_t const ces[9] = { 0x30DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_410)
{
    // 1A10 0041;	
    // (ᨐ) BUGINESE LETTER YA	[30DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A10, 0x0041 };
    uint32_t const ces[9] = { 0x30DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_411)
{
    // 1A10 0062;	
    // (ᨐ) BUGINESE LETTER YA	[30DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A10, 0x0062 };
    uint32_t const ces[9] = { 0x30DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_412)
{
    // 1A11 0021;	
    // (ᨑ) BUGINESE LETTER RA	[30DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A11, 0x0021 };
    uint32_t const ces[9] = { 0x30DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_413)
{
    // 1A11 003F;	
    // (ᨑ) BUGINESE LETTER RA	[30DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A11, 0x003F };
    uint32_t const ces[9] = { 0x30DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_414)
{
    // 1A11 0061;	
    // (ᨑ) BUGINESE LETTER RA	[30DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A11, 0x0061 };
    uint32_t const ces[9] = { 0x30DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_415)
{
    // 1A11 0041;	
    // (ᨑ) BUGINESE LETTER RA	[30DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A11, 0x0041 };
    uint32_t const ces[9] = { 0x30DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_416)
{
    // 1A11 0062;	
    // (ᨑ) BUGINESE LETTER RA	[30DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A11, 0x0062 };
    uint32_t const ces[9] = { 0x30DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_417)
{
    // 1A12 0021;	
    // (ᨒ) BUGINESE LETTER LA	[30DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A12, 0x0021 };
    uint32_t const ces[9] = { 0x30DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_418)
{
    // 1A12 003F;	
    // (ᨒ) BUGINESE LETTER LA	[30DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A12, 0x003F };
    uint32_t const ces[9] = { 0x30DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_419)
{
    // 1A12 0061;	
    // (ᨒ) BUGINESE LETTER LA	[30DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A12, 0x0061 };
    uint32_t const ces[9] = { 0x30DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_420)
{
    // 1A12 0041;	
    // (ᨒ) BUGINESE LETTER LA	[30DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A12, 0x0041 };
    uint32_t const ces[9] = { 0x30DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_421)
{
    // 1A12 0062;	
    // (ᨒ) BUGINESE LETTER LA	[30DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A12, 0x0062 };
    uint32_t const ces[9] = { 0x30DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_422)
{
    // 1A13 0021;	
    // (ᨓ) BUGINESE LETTER VA	[30DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A13, 0x0021 };
    uint32_t const ces[9] = { 0x30DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_423)
{
    // 1A13 003F;	
    // (ᨓ) BUGINESE LETTER VA	[30DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A13, 0x003F };
    uint32_t const ces[9] = { 0x30DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_424)
{
    // 1A13 0061;	
    // (ᨓ) BUGINESE LETTER VA	[30DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A13, 0x0061 };
    uint32_t const ces[9] = { 0x30DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_425)
{
    // 1A13 0041;	
    // (ᨓ) BUGINESE LETTER VA	[30DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A13, 0x0041 };
    uint32_t const ces[9] = { 0x30DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_426)
{
    // 1A13 0062;	
    // (ᨓ) BUGINESE LETTER VA	[30DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A13, 0x0062 };
    uint32_t const ces[9] = { 0x30DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_427)
{
    // 1A14 0021;	
    // (ᨔ) BUGINESE LETTER SA	[30E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A14, 0x0021 };
    uint32_t const ces[9] = { 0x30E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_428)
{
    // 1A14 003F;	
    // (ᨔ) BUGINESE LETTER SA	[30E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A14, 0x003F };
    uint32_t const ces[9] = { 0x30E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_429)
{
    // 1A14 0061;	
    // (ᨔ) BUGINESE LETTER SA	[30E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A14, 0x0061 };
    uint32_t const ces[9] = { 0x30E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_430)
{
    // 1A14 0041;	
    // (ᨔ) BUGINESE LETTER SA	[30E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A14, 0x0041 };
    uint32_t const ces[9] = { 0x30E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_431)
{
    // 1A14 0062;	
    // (ᨔ) BUGINESE LETTER SA	[30E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A14, 0x0062 };
    uint32_t const ces[9] = { 0x30E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_432)
{
    // 1A15 0021;	
    // (ᨕ) BUGINESE LETTER A	[30E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A15, 0x0021 };
    uint32_t const ces[9] = { 0x30E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_433)
{
    // 1A15 003F;	
    // (ᨕ) BUGINESE LETTER A	[30E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A15, 0x003F };
    uint32_t const ces[9] = { 0x30E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_434)
{
    // 1A15 0061;	
    // (ᨕ) BUGINESE LETTER A	[30E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A15, 0x0061 };
    uint32_t const ces[9] = { 0x30E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_435)
{
    // 1A15 0041;	
    // (ᨕ) BUGINESE LETTER A	[30E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A15, 0x0041 };
    uint32_t const ces[9] = { 0x30E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_436)
{
    // 1A15 0062;	
    // (ᨕ) BUGINESE LETTER A	[30E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A15, 0x0062 };
    uint32_t const ces[9] = { 0x30E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_437)
{
    // 1A16 0021;	
    // (ᨖ) BUGINESE LETTER HA	[30E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A16, 0x0021 };
    uint32_t const ces[9] = { 0x30E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_438)
{
    // 1A16 003F;	
    // (ᨖ) BUGINESE LETTER HA	[30E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A16, 0x003F };
    uint32_t const ces[9] = { 0x30E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_439)
{
    // 1A16 0061;	
    // (ᨖ) BUGINESE LETTER HA	[30E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A16, 0x0061 };
    uint32_t const ces[9] = { 0x30E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_440)
{
    // 1A16 0041;	
    // (ᨖ) BUGINESE LETTER HA	[30E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A16, 0x0041 };
    uint32_t const ces[9] = { 0x30E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_441)
{
    // 1A16 0062;	
    // (ᨖ) BUGINESE LETTER HA	[30E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A16, 0x0062 };
    uint32_t const ces[9] = { 0x30E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_442)
{
    // 0334 1A17;	
    // (ᨗ) BUGINESE VOWEL SIGN I	[30E3 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1A17 };
    uint32_t const ces[8] = { 0x30E3, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_443)
{
    // 1A17 0334;	
    // (ᨗ) BUGINESE VOWEL SIGN I	[30E3 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A17, 0x0334 };
    uint32_t const ces[8] = { 0x30E3, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_444)
{
    // 1A17 0021;	
    // (ᨗ) BUGINESE VOWEL SIGN I	[30E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A17, 0x0021 };
    uint32_t const ces[9] = { 0x30E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_445)
{
    // 1A17 003F;	
    // (ᨗ) BUGINESE VOWEL SIGN I	[30E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A17, 0x003F };
    uint32_t const ces[9] = { 0x30E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_446)
{
    // 1A17 0061;	
    // (ᨗ) BUGINESE VOWEL SIGN I	[30E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A17, 0x0061 };
    uint32_t const ces[9] = { 0x30E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_447)
{
    // 1A17 0041;	
    // (ᨗ) BUGINESE VOWEL SIGN I	[30E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A17, 0x0041 };
    uint32_t const ces[9] = { 0x30E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_448)
{
    // 1A17 0062;	
    // (ᨗ) BUGINESE VOWEL SIGN I	[30E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A17, 0x0062 };
    uint32_t const ces[9] = { 0x30E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_449)
{
    // 0334 1A18;	
    // (ᨘ) BUGINESE VOWEL SIGN U	[30E4 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1A18 };
    uint32_t const ces[8] = { 0x30E4, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_450)
{
    // 1A18 0334;	
    // (ᨘ) BUGINESE VOWEL SIGN U	[30E4 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A18, 0x0334 };
    uint32_t const ces[8] = { 0x30E4, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_451)
{
    // 1A18 0021;	
    // (ᨘ) BUGINESE VOWEL SIGN U	[30E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A18, 0x0021 };
    uint32_t const ces[9] = { 0x30E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_452)
{
    // 1A18 003F;	
    // (ᨘ) BUGINESE VOWEL SIGN U	[30E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A18, 0x003F };
    uint32_t const ces[9] = { 0x30E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_453)
{
    // 1A18 0061;	
    // (ᨘ) BUGINESE VOWEL SIGN U	[30E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A18, 0x0061 };
    uint32_t const ces[9] = { 0x30E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_454)
{
    // 1A18 0041;	
    // (ᨘ) BUGINESE VOWEL SIGN U	[30E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A18, 0x0041 };
    uint32_t const ces[9] = { 0x30E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_455)
{
    // 1A18 0062;	
    // (ᨘ) BUGINESE VOWEL SIGN U	[30E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A18, 0x0062 };
    uint32_t const ces[9] = { 0x30E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_456)
{
    // 1A19 0021;	
    // (ᨙ) BUGINESE VOWEL SIGN E	[30E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A19, 0x0021 };
    uint32_t const ces[9] = { 0x30E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_457)
{
    // 1A19 003F;	
    // (ᨙ) BUGINESE VOWEL SIGN E	[30E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A19, 0x003F };
    uint32_t const ces[9] = { 0x30E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_458)
{
    // 1A19 0061;	
    // (ᨙ) BUGINESE VOWEL SIGN E	[30E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A19, 0x0061 };
    uint32_t const ces[9] = { 0x30E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_459)
{
    // 1A19 0041;	
    // (ᨙ) BUGINESE VOWEL SIGN E	[30E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A19, 0x0041 };
    uint32_t const ces[9] = { 0x30E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_460)
{
    // 1A19 0062;	
    // (ᨙ) BUGINESE VOWEL SIGN E	[30E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A19, 0x0062 };
    uint32_t const ces[9] = { 0x30E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_461)
{
    // 1A1A 0021;	
    // (ᨚ) BUGINESE VOWEL SIGN O	[30E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A1A, 0x0021 };
    uint32_t const ces[9] = { 0x30E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_462)
{
    // 1A1A 003F;	
    // (ᨚ) BUGINESE VOWEL SIGN O	[30E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A1A, 0x003F };
    uint32_t const ces[9] = { 0x30E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_463)
{
    // 1A1A 0061;	
    // (ᨚ) BUGINESE VOWEL SIGN O	[30E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A1A, 0x0061 };
    uint32_t const ces[9] = { 0x30E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_464)
{
    // 1A1A 0041;	
    // (ᨚ) BUGINESE VOWEL SIGN O	[30E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A1A, 0x0041 };
    uint32_t const ces[9] = { 0x30E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_465)
{
    // 1A1A 0062;	
    // (ᨚ) BUGINESE VOWEL SIGN O	[30E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A1A, 0x0062 };
    uint32_t const ces[9] = { 0x30E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_466)
{
    // 1A1B 0021;	
    // (ᨛ) BUGINESE VOWEL SIGN AE	[30E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A1B, 0x0021 };
    uint32_t const ces[9] = { 0x30E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_467)
{
    // 1A1B 003F;	
    // (ᨛ) BUGINESE VOWEL SIGN AE	[30E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A1B, 0x003F };
    uint32_t const ces[9] = { 0x30E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_468)
{
    // 1A1B 0061;	
    // (ᨛ) BUGINESE VOWEL SIGN AE	[30E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A1B, 0x0061 };
    uint32_t const ces[9] = { 0x30E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_469)
{
    // 1A1B 0041;	
    // (ᨛ) BUGINESE VOWEL SIGN AE	[30E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1A1B, 0x0041 };
    uint32_t const ces[9] = { 0x30E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_470)
{
    // 1A1B 0062;	
    // (ᨛ) BUGINESE VOWEL SIGN AE	[30E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A1B, 0x0062 };
    uint32_t const ces[9] = { 0x30E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_471)
{
    // 1BC0 0021;	
    // (ᯀ) BATAK LETTER A	[30E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC0, 0x0021 };
    uint32_t const ces[9] = { 0x30E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_472)
{
    // 1BC1 0021;	
    // (ᯁ) BATAK LETTER SIMALUNGUN A	[30E8 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1BC1, 0x0021 };
    uint32_t const ces[9] = { 0x30E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_473)
{
    // 1BC0 003F;	
    // (ᯀ) BATAK LETTER A	[30E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC0, 0x003F };
    uint32_t const ces[9] = { 0x30E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_474)
{
    // 1BC1 003F;	
    // (ᯁ) BATAK LETTER SIMALUNGUN A	[30E8 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1BC1, 0x003F };
    uint32_t const ces[9] = { 0x30E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_475)
{
    // 1BC0 0061;	
    // (ᯀ) BATAK LETTER A	[30E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC0, 0x0061 };
    uint32_t const ces[9] = { 0x30E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_476)
{
    // 1BC0 0041;	
    // (ᯀ) BATAK LETTER A	[30E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC0, 0x0041 };
    uint32_t const ces[9] = { 0x30E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_477)
{
    // 1BC1 0061;	
    // (ᯁ) BATAK LETTER SIMALUNGUN A	[30E8 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1BC1, 0x0061 };
    uint32_t const ces[9] = { 0x30E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_478)
{
    // 1BC1 0041;	
    // (ᯁ) BATAK LETTER SIMALUNGUN A	[30E8 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1BC1, 0x0041 };
    uint32_t const ces[9] = { 0x30E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_479)
{
    // 1BC0 0062;	
    // (ᯀ) BATAK LETTER A	[30E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC0, 0x0062 };
    uint32_t const ces[9] = { 0x30E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_480)
{
    // 1BC1 0062;	
    // (ᯁ) BATAK LETTER SIMALUNGUN A	[30E8 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1BC1, 0x0062 };
    uint32_t const ces[9] = { 0x30E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_481)
{
    // 1BC2 0021;	
    // (ᯂ) BATAK LETTER HA	[30E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC2, 0x0021 };
    uint32_t const ces[9] = { 0x30E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_482)
{
    // 1BC3 0021;	
    // (ᯃ) BATAK LETTER SIMALUNGUN HA	[30E9 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1BC3, 0x0021 };
    uint32_t const ces[9] = { 0x30E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_483)
{
    // 1BC4 0021;	
    // (ᯄ) BATAK LETTER MANDAILING HA	[30E9 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1BC4, 0x0021 };
    uint32_t const ces[9] = { 0x30E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_484)
{
    // 1BC2 003F;	
    // (ᯂ) BATAK LETTER HA	[30E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC2, 0x003F };
    uint32_t const ces[9] = { 0x30E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_485)
{
    // 1BC3 003F;	
    // (ᯃ) BATAK LETTER SIMALUNGUN HA	[30E9 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1BC3, 0x003F };
    uint32_t const ces[9] = { 0x30E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_486)
{
    // 1BC4 003F;	
    // (ᯄ) BATAK LETTER MANDAILING HA	[30E9 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1BC4, 0x003F };
    uint32_t const ces[9] = { 0x30E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_487)
{
    // 1BC2 0061;	
    // (ᯂ) BATAK LETTER HA	[30E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC2, 0x0061 };
    uint32_t const ces[9] = { 0x30E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_488)
{
    // 1BC2 0041;	
    // (ᯂ) BATAK LETTER HA	[30E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1BC2, 0x0041 };
    uint32_t const ces[9] = { 0x30E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_489)
{
    // 1BC3 0061;	
    // (ᯃ) BATAK LETTER SIMALUNGUN HA	[30E9 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1BC3, 0x0061 };
    uint32_t const ces[9] = { 0x30E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_490)
{
    // 1BC4 0061;	
    // (ᯄ) BATAK LETTER MANDAILING HA	[30E9 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1BC4, 0x0061 };
    uint32_t const ces[9] = { 0x30E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_491)
{
    // 1BC3 0041;	
    // (ᯃ) BATAK LETTER SIMALUNGUN HA	[30E9 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1BC3, 0x0041 };
    uint32_t const ces[9] = { 0x30E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_492)
{
    // 1BC4 0041;	
    // (ᯄ) BATAK LETTER MANDAILING HA	[30E9 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1BC4, 0x0041 };
    uint32_t const ces[9] = { 0x30E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_493)
{
    // 1BC2 0062;	
    // (ᯂ) BATAK LETTER HA	[30E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC2, 0x0062 };
    uint32_t const ces[9] = { 0x30E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_494)
{
    // 1BC3 0062;	
    // (ᯃ) BATAK LETTER SIMALUNGUN HA	[30E9 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1BC3, 0x0062 };
    uint32_t const ces[9] = { 0x30E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_495)
{
    // 1BC4 0062;	
    // (ᯄ) BATAK LETTER MANDAILING HA	[30E9 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1BC4, 0x0062 };
    uint32_t const ces[9] = { 0x30E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_496)
{
    // 1BC5 0021;	
    // (ᯅ) BATAK LETTER BA	[30EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5, 0x0021 };
    uint32_t const ces[9] = { 0x30EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_497)
{
    // 1BC6 0021;	
    // (ᯆ) BATAK LETTER KARO BA	[30EA 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1BC6, 0x0021 };
    uint32_t const ces[9] = { 0x30EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_498)
{
    // 1BC5 003F;	
    // (ᯅ) BATAK LETTER BA	[30EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC5, 0x003F };
    uint32_t const ces[9] = { 0x30EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_202_499)
{
    // 1BC6 003F;	
    // (ᯆ) BATAK LETTER KARO BA	[30EA 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1BC6, 0x003F };
    uint32_t const ces[9] = { 0x30EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

