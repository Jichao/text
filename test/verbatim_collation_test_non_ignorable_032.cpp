// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_032_000)
{
    // 26AC 0041;	
    // (⚬) MEDIUM SMALL WHITE CIRCLE	[09CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26AC, 0x0041 };
    uint32_t const ces[9] = { 0x09CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_001)
{
    // 26AC 0062;	
    // (⚬) MEDIUM SMALL WHITE CIRCLE	[09CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AC, 0x0062 };
    uint32_t const ces[9] = { 0x09CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_002)
{
    // 26AD 0021;	
    // (⚭) MARRIAGE SYMBOL	[09CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AD, 0x0021 };
    uint32_t const ces[9] = { 0x09CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_003)
{
    // 26AD 003F;	
    // (⚭) MARRIAGE SYMBOL	[09CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AD, 0x003F };
    uint32_t const ces[9] = { 0x09CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_004)
{
    // 26AD 0061;	
    // (⚭) MARRIAGE SYMBOL	[09CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AD, 0x0061 };
    uint32_t const ces[9] = { 0x09CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_005)
{
    // 26AD 0041;	
    // (⚭) MARRIAGE SYMBOL	[09CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26AD, 0x0041 };
    uint32_t const ces[9] = { 0x09CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_006)
{
    // 26AD 0062;	
    // (⚭) MARRIAGE SYMBOL	[09CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AD, 0x0062 };
    uint32_t const ces[9] = { 0x09CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_007)
{
    // 26AE 0021;	
    // (⚮) DIVORCE SYMBOL	[09CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AE, 0x0021 };
    uint32_t const ces[9] = { 0x09CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_008)
{
    // 26AE 003F;	
    // (⚮) DIVORCE SYMBOL	[09CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AE, 0x003F };
    uint32_t const ces[9] = { 0x09CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_009)
{
    // 26AE 0061;	
    // (⚮) DIVORCE SYMBOL	[09CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AE, 0x0061 };
    uint32_t const ces[9] = { 0x09CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_010)
{
    // 26AE 0041;	
    // (⚮) DIVORCE SYMBOL	[09CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26AE, 0x0041 };
    uint32_t const ces[9] = { 0x09CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_011)
{
    // 26AE 0062;	
    // (⚮) DIVORCE SYMBOL	[09CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AE, 0x0062 };
    uint32_t const ces[9] = { 0x09CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_012)
{
    // 26AF 0021;	
    // (⚯) UNMARRIED PARTNERSHIP SYMBOL	[09CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AF, 0x0021 };
    uint32_t const ces[9] = { 0x09CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_013)
{
    // 26AF 003F;	
    // (⚯) UNMARRIED PARTNERSHIP SYMBOL	[09CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AF, 0x003F };
    uint32_t const ces[9] = { 0x09CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_014)
{
    // 26AF 0061;	
    // (⚯) UNMARRIED PARTNERSHIP SYMBOL	[09CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AF, 0x0061 };
    uint32_t const ces[9] = { 0x09CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_015)
{
    // 26AF 0041;	
    // (⚯) UNMARRIED PARTNERSHIP SYMBOL	[09CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26AF, 0x0041 };
    uint32_t const ces[9] = { 0x09CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_016)
{
    // 26AF 0062;	
    // (⚯) UNMARRIED PARTNERSHIP SYMBOL	[09CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26AF, 0x0062 };
    uint32_t const ces[9] = { 0x09CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_017)
{
    // 26B0 0021;	
    // (⚰) COFFIN	[09CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B0, 0x0021 };
    uint32_t const ces[9] = { 0x09CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_018)
{
    // 26B0 003F;	
    // (⚰) COFFIN	[09CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B0, 0x003F };
    uint32_t const ces[9] = { 0x09CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_019)
{
    // 26B0 0061;	
    // (⚰) COFFIN	[09CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B0, 0x0061 };
    uint32_t const ces[9] = { 0x09CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_020)
{
    // 26B0 0041;	
    // (⚰) COFFIN	[09CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26B0, 0x0041 };
    uint32_t const ces[9] = { 0x09CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_021)
{
    // 26B0 0062;	
    // (⚰) COFFIN	[09CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B0, 0x0062 };
    uint32_t const ces[9] = { 0x09CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_022)
{
    // 26B1 0021;	
    // (⚱) FUNERAL URN	[09CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B1, 0x0021 };
    uint32_t const ces[9] = { 0x09CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_023)
{
    // 26B1 003F;	
    // (⚱) FUNERAL URN	[09CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B1, 0x003F };
    uint32_t const ces[9] = { 0x09CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_024)
{
    // 26B1 0061;	
    // (⚱) FUNERAL URN	[09CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B1, 0x0061 };
    uint32_t const ces[9] = { 0x09CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_025)
{
    // 26B1 0041;	
    // (⚱) FUNERAL URN	[09CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26B1, 0x0041 };
    uint32_t const ces[9] = { 0x09CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_026)
{
    // 26B1 0062;	
    // (⚱) FUNERAL URN	[09CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B1, 0x0062 };
    uint32_t const ces[9] = { 0x09CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_027)
{
    // 26B2 0021;	
    // (⚲) NEUTER	[09D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B2, 0x0021 };
    uint32_t const ces[9] = { 0x09D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_028)
{
    // 26B2 003F;	
    // (⚲) NEUTER	[09D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B2, 0x003F };
    uint32_t const ces[9] = { 0x09D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_029)
{
    // 26B2 0061;	
    // (⚲) NEUTER	[09D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B2, 0x0061 };
    uint32_t const ces[9] = { 0x09D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_030)
{
    // 26B2 0041;	
    // (⚲) NEUTER	[09D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26B2, 0x0041 };
    uint32_t const ces[9] = { 0x09D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_031)
{
    // 26B2 0062;	
    // (⚲) NEUTER	[09D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B2, 0x0062 };
    uint32_t const ces[9] = { 0x09D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_032)
{
    // 26B3 0021;	
    // (⚳) CERES	[09D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B3, 0x0021 };
    uint32_t const ces[9] = { 0x09D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_033)
{
    // 26B3 003F;	
    // (⚳) CERES	[09D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B3, 0x003F };
    uint32_t const ces[9] = { 0x09D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_034)
{
    // 26B3 0061;	
    // (⚳) CERES	[09D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B3, 0x0061 };
    uint32_t const ces[9] = { 0x09D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_035)
{
    // 26B3 0041;	
    // (⚳) CERES	[09D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26B3, 0x0041 };
    uint32_t const ces[9] = { 0x09D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_036)
{
    // 26B3 0062;	
    // (⚳) CERES	[09D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B3, 0x0062 };
    uint32_t const ces[9] = { 0x09D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_037)
{
    // 26B4 0021;	
    // (⚴) PALLAS	[09D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B4, 0x0021 };
    uint32_t const ces[9] = { 0x09D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_038)
{
    // 26B4 003F;	
    // (⚴) PALLAS	[09D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B4, 0x003F };
    uint32_t const ces[9] = { 0x09D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_039)
{
    // 26B4 0061;	
    // (⚴) PALLAS	[09D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B4, 0x0061 };
    uint32_t const ces[9] = { 0x09D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_040)
{
    // 26B4 0041;	
    // (⚴) PALLAS	[09D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26B4, 0x0041 };
    uint32_t const ces[9] = { 0x09D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_041)
{
    // 26B4 0062;	
    // (⚴) PALLAS	[09D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B4, 0x0062 };
    uint32_t const ces[9] = { 0x09D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_042)
{
    // 26B5 0021;	
    // (⚵) JUNO	[09D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B5, 0x0021 };
    uint32_t const ces[9] = { 0x09D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_043)
{
    // 26B5 003F;	
    // (⚵) JUNO	[09D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B5, 0x003F };
    uint32_t const ces[9] = { 0x09D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_044)
{
    // 26B5 0061;	
    // (⚵) JUNO	[09D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B5, 0x0061 };
    uint32_t const ces[9] = { 0x09D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_045)
{
    // 26B5 0041;	
    // (⚵) JUNO	[09D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26B5, 0x0041 };
    uint32_t const ces[9] = { 0x09D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_046)
{
    // 26B5 0062;	
    // (⚵) JUNO	[09D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B5, 0x0062 };
    uint32_t const ces[9] = { 0x09D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_047)
{
    // 26B6 0021;	
    // (⚶) VESTA	[09D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B6, 0x0021 };
    uint32_t const ces[9] = { 0x09D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_048)
{
    // 26B6 003F;	
    // (⚶) VESTA	[09D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B6, 0x003F };
    uint32_t const ces[9] = { 0x09D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_049)
{
    // 26B6 0061;	
    // (⚶) VESTA	[09D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B6, 0x0061 };
    uint32_t const ces[9] = { 0x09D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_050)
{
    // 26B6 0041;	
    // (⚶) VESTA	[09D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26B6, 0x0041 };
    uint32_t const ces[9] = { 0x09D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_051)
{
    // 26B6 0062;	
    // (⚶) VESTA	[09D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B6, 0x0062 };
    uint32_t const ces[9] = { 0x09D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_052)
{
    // 26B7 0021;	
    // (⚷) CHIRON	[09D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B7, 0x0021 };
    uint32_t const ces[9] = { 0x09D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_053)
{
    // 26B7 003F;	
    // (⚷) CHIRON	[09D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B7, 0x003F };
    uint32_t const ces[9] = { 0x09D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_054)
{
    // 26B7 0061;	
    // (⚷) CHIRON	[09D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B7, 0x0061 };
    uint32_t const ces[9] = { 0x09D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_055)
{
    // 26B7 0041;	
    // (⚷) CHIRON	[09D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26B7, 0x0041 };
    uint32_t const ces[9] = { 0x09D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_056)
{
    // 26B7 0062;	
    // (⚷) CHIRON	[09D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B7, 0x0062 };
    uint32_t const ces[9] = { 0x09D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_057)
{
    // 26B8 0021;	
    // (⚸) BLACK MOON LILITH	[09D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B8, 0x0021 };
    uint32_t const ces[9] = { 0x09D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_058)
{
    // 26B8 003F;	
    // (⚸) BLACK MOON LILITH	[09D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B8, 0x003F };
    uint32_t const ces[9] = { 0x09D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_059)
{
    // 26B8 0061;	
    // (⚸) BLACK MOON LILITH	[09D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B8, 0x0061 };
    uint32_t const ces[9] = { 0x09D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_060)
{
    // 26B8 0041;	
    // (⚸) BLACK MOON LILITH	[09D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26B8, 0x0041 };
    uint32_t const ces[9] = { 0x09D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_061)
{
    // 26B8 0062;	
    // (⚸) BLACK MOON LILITH	[09D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B8, 0x0062 };
    uint32_t const ces[9] = { 0x09D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_062)
{
    // 26B9 0021;	
    // (⚹) SEXTILE	[09D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B9, 0x0021 };
    uint32_t const ces[9] = { 0x09D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_063)
{
    // 26B9 003F;	
    // (⚹) SEXTILE	[09D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B9, 0x003F };
    uint32_t const ces[9] = { 0x09D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_064)
{
    // 26B9 0061;	
    // (⚹) SEXTILE	[09D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B9, 0x0061 };
    uint32_t const ces[9] = { 0x09D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_065)
{
    // 26B9 0041;	
    // (⚹) SEXTILE	[09D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26B9, 0x0041 };
    uint32_t const ces[9] = { 0x09D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_066)
{
    // 26B9 0062;	
    // (⚹) SEXTILE	[09D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26B9, 0x0062 };
    uint32_t const ces[9] = { 0x09D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_067)
{
    // 26BA 0021;	
    // (⚺) SEMISEXTILE	[09D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BA, 0x0021 };
    uint32_t const ces[9] = { 0x09D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_068)
{
    // 26BA 003F;	
    // (⚺) SEMISEXTILE	[09D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BA, 0x003F };
    uint32_t const ces[9] = { 0x09D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_069)
{
    // 26BA 0061;	
    // (⚺) SEMISEXTILE	[09D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BA, 0x0061 };
    uint32_t const ces[9] = { 0x09D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_070)
{
    // 26BA 0041;	
    // (⚺) SEMISEXTILE	[09D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26BA, 0x0041 };
    uint32_t const ces[9] = { 0x09D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_071)
{
    // 26BA 0062;	
    // (⚺) SEMISEXTILE	[09D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BA, 0x0062 };
    uint32_t const ces[9] = { 0x09D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_072)
{
    // 26BB 0021;	
    // (⚻) QUINCUNX	[09D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BB, 0x0021 };
    uint32_t const ces[9] = { 0x09D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_073)
{
    // 26BB 003F;	
    // (⚻) QUINCUNX	[09D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BB, 0x003F };
    uint32_t const ces[9] = { 0x09D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_074)
{
    // 26BB 0061;	
    // (⚻) QUINCUNX	[09D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BB, 0x0061 };
    uint32_t const ces[9] = { 0x09D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_075)
{
    // 26BB 0041;	
    // (⚻) QUINCUNX	[09D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26BB, 0x0041 };
    uint32_t const ces[9] = { 0x09D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_076)
{
    // 26BB 0062;	
    // (⚻) QUINCUNX	[09D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BB, 0x0062 };
    uint32_t const ces[9] = { 0x09D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_077)
{
    // 26BC 0021;	
    // (⚼) SESQUIQUADRATE	[09DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BC, 0x0021 };
    uint32_t const ces[9] = { 0x09DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_078)
{
    // 26BC 003F;	
    // (⚼) SESQUIQUADRATE	[09DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BC, 0x003F };
    uint32_t const ces[9] = { 0x09DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_079)
{
    // 26BC 0061;	
    // (⚼) SESQUIQUADRATE	[09DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BC, 0x0061 };
    uint32_t const ces[9] = { 0x09DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_080)
{
    // 26BC 0041;	
    // (⚼) SESQUIQUADRATE	[09DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26BC, 0x0041 };
    uint32_t const ces[9] = { 0x09DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_081)
{
    // 26BC 0062;	
    // (⚼) SESQUIQUADRATE	[09DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BC, 0x0062 };
    uint32_t const ces[9] = { 0x09DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_082)
{
    // 26BD 0021;	
    // (⚽) SOCCER BALL	[09DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BD, 0x0021 };
    uint32_t const ces[9] = { 0x09DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_083)
{
    // 26BD 003F;	
    // (⚽) SOCCER BALL	[09DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BD, 0x003F };
    uint32_t const ces[9] = { 0x09DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_084)
{
    // 26BD 0061;	
    // (⚽) SOCCER BALL	[09DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BD, 0x0061 };
    uint32_t const ces[9] = { 0x09DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_085)
{
    // 26BD 0041;	
    // (⚽) SOCCER BALL	[09DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26BD, 0x0041 };
    uint32_t const ces[9] = { 0x09DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_086)
{
    // 26BD 0062;	
    // (⚽) SOCCER BALL	[09DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BD, 0x0062 };
    uint32_t const ces[9] = { 0x09DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_087)
{
    // 26BE 0021;	
    // (⚾) BASEBALL	[09DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BE, 0x0021 };
    uint32_t const ces[9] = { 0x09DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_088)
{
    // 26BE 003F;	
    // (⚾) BASEBALL	[09DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BE, 0x003F };
    uint32_t const ces[9] = { 0x09DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_089)
{
    // 26BE 0061;	
    // (⚾) BASEBALL	[09DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BE, 0x0061 };
    uint32_t const ces[9] = { 0x09DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_090)
{
    // 26BE 0041;	
    // (⚾) BASEBALL	[09DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26BE, 0x0041 };
    uint32_t const ces[9] = { 0x09DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_091)
{
    // 26BE 0062;	
    // (⚾) BASEBALL	[09DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BE, 0x0062 };
    uint32_t const ces[9] = { 0x09DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_092)
{
    // 26BF 0021;	
    // (⚿) SQUARED KEY	[09DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BF, 0x0021 };
    uint32_t const ces[9] = { 0x09DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_093)
{
    // 26BF 003F;	
    // (⚿) SQUARED KEY	[09DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BF, 0x003F };
    uint32_t const ces[9] = { 0x09DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_094)
{
    // 26BF 0061;	
    // (⚿) SQUARED KEY	[09DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BF, 0x0061 };
    uint32_t const ces[9] = { 0x09DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_095)
{
    // 26BF 0041;	
    // (⚿) SQUARED KEY	[09DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26BF, 0x0041 };
    uint32_t const ces[9] = { 0x09DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_096)
{
    // 26BF 0062;	
    // (⚿) SQUARED KEY	[09DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26BF, 0x0062 };
    uint32_t const ces[9] = { 0x09DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_097)
{
    // 26C0 0021;	
    // (⛀) WHITE DRAUGHTS MAN	[09DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C0, 0x0021 };
    uint32_t const ces[9] = { 0x09DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_098)
{
    // 26C0 003F;	
    // (⛀) WHITE DRAUGHTS MAN	[09DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C0, 0x003F };
    uint32_t const ces[9] = { 0x09DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_099)
{
    // 26C0 0061;	
    // (⛀) WHITE DRAUGHTS MAN	[09DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C0, 0x0061 };
    uint32_t const ces[9] = { 0x09DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_100)
{
    // 26C0 0041;	
    // (⛀) WHITE DRAUGHTS MAN	[09DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26C0, 0x0041 };
    uint32_t const ces[9] = { 0x09DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_101)
{
    // 26C0 0062;	
    // (⛀) WHITE DRAUGHTS MAN	[09DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C0, 0x0062 };
    uint32_t const ces[9] = { 0x09DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_102)
{
    // 26C1 0021;	
    // (⛁) WHITE DRAUGHTS KING	[09DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C1, 0x0021 };
    uint32_t const ces[9] = { 0x09DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_103)
{
    // 26C1 003F;	
    // (⛁) WHITE DRAUGHTS KING	[09DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C1, 0x003F };
    uint32_t const ces[9] = { 0x09DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_104)
{
    // 26C1 0061;	
    // (⛁) WHITE DRAUGHTS KING	[09DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C1, 0x0061 };
    uint32_t const ces[9] = { 0x09DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_105)
{
    // 26C1 0041;	
    // (⛁) WHITE DRAUGHTS KING	[09DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26C1, 0x0041 };
    uint32_t const ces[9] = { 0x09DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_106)
{
    // 26C1 0062;	
    // (⛁) WHITE DRAUGHTS KING	[09DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C1, 0x0062 };
    uint32_t const ces[9] = { 0x09DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_107)
{
    // 26C2 0021;	
    // (⛂) BLACK DRAUGHTS MAN	[09E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C2, 0x0021 };
    uint32_t const ces[9] = { 0x09E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_108)
{
    // 26C2 003F;	
    // (⛂) BLACK DRAUGHTS MAN	[09E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C2, 0x003F };
    uint32_t const ces[9] = { 0x09E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_109)
{
    // 26C2 0061;	
    // (⛂) BLACK DRAUGHTS MAN	[09E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C2, 0x0061 };
    uint32_t const ces[9] = { 0x09E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_110)
{
    // 26C2 0041;	
    // (⛂) BLACK DRAUGHTS MAN	[09E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26C2, 0x0041 };
    uint32_t const ces[9] = { 0x09E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_111)
{
    // 26C2 0062;	
    // (⛂) BLACK DRAUGHTS MAN	[09E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C2, 0x0062 };
    uint32_t const ces[9] = { 0x09E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_112)
{
    // 26C3 0021;	
    // (⛃) BLACK DRAUGHTS KING	[09E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C3, 0x0021 };
    uint32_t const ces[9] = { 0x09E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_113)
{
    // 26C3 003F;	
    // (⛃) BLACK DRAUGHTS KING	[09E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C3, 0x003F };
    uint32_t const ces[9] = { 0x09E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_114)
{
    // 26C3 0061;	
    // (⛃) BLACK DRAUGHTS KING	[09E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C3, 0x0061 };
    uint32_t const ces[9] = { 0x09E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_115)
{
    // 26C3 0041;	
    // (⛃) BLACK DRAUGHTS KING	[09E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26C3, 0x0041 };
    uint32_t const ces[9] = { 0x09E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_116)
{
    // 26C3 0062;	
    // (⛃) BLACK DRAUGHTS KING	[09E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C3, 0x0062 };
    uint32_t const ces[9] = { 0x09E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_117)
{
    // 26C4 0021;	
    // (⛄) SNOWMAN WITHOUT SNOW	[09E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C4, 0x0021 };
    uint32_t const ces[9] = { 0x09E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_118)
{
    // 26C4 003F;	
    // (⛄) SNOWMAN WITHOUT SNOW	[09E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C4, 0x003F };
    uint32_t const ces[9] = { 0x09E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_119)
{
    // 26C4 0061;	
    // (⛄) SNOWMAN WITHOUT SNOW	[09E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C4, 0x0061 };
    uint32_t const ces[9] = { 0x09E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_120)
{
    // 26C4 0041;	
    // (⛄) SNOWMAN WITHOUT SNOW	[09E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26C4, 0x0041 };
    uint32_t const ces[9] = { 0x09E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_121)
{
    // 26C4 0062;	
    // (⛄) SNOWMAN WITHOUT SNOW	[09E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C4, 0x0062 };
    uint32_t const ces[9] = { 0x09E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_122)
{
    // 26C5 0021;	
    // (⛅) SUN BEHIND CLOUD	[09E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C5, 0x0021 };
    uint32_t const ces[9] = { 0x09E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_123)
{
    // 26C5 003F;	
    // (⛅) SUN BEHIND CLOUD	[09E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C5, 0x003F };
    uint32_t const ces[9] = { 0x09E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_124)
{
    // 26C5 0061;	
    // (⛅) SUN BEHIND CLOUD	[09E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C5, 0x0061 };
    uint32_t const ces[9] = { 0x09E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_125)
{
    // 26C5 0041;	
    // (⛅) SUN BEHIND CLOUD	[09E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26C5, 0x0041 };
    uint32_t const ces[9] = { 0x09E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_126)
{
    // 26C5 0062;	
    // (⛅) SUN BEHIND CLOUD	[09E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C5, 0x0062 };
    uint32_t const ces[9] = { 0x09E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_127)
{
    // 26C6 0021;	
    // (⛆) RAIN	[09E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C6, 0x0021 };
    uint32_t const ces[9] = { 0x09E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_128)
{
    // 26C6 003F;	
    // (⛆) RAIN	[09E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C6, 0x003F };
    uint32_t const ces[9] = { 0x09E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_129)
{
    // 26C6 0061;	
    // (⛆) RAIN	[09E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C6, 0x0061 };
    uint32_t const ces[9] = { 0x09E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_130)
{
    // 26C6 0041;	
    // (⛆) RAIN	[09E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26C6, 0x0041 };
    uint32_t const ces[9] = { 0x09E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_131)
{
    // 26C6 0062;	
    // (⛆) RAIN	[09E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C6, 0x0062 };
    uint32_t const ces[9] = { 0x09E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_132)
{
    // 26C7 0021;	
    // (⛇) BLACK SNOWMAN	[09E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C7, 0x0021 };
    uint32_t const ces[9] = { 0x09E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_133)
{
    // 26C7 003F;	
    // (⛇) BLACK SNOWMAN	[09E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C7, 0x003F };
    uint32_t const ces[9] = { 0x09E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_134)
{
    // 26C7 0061;	
    // (⛇) BLACK SNOWMAN	[09E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C7, 0x0061 };
    uint32_t const ces[9] = { 0x09E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_135)
{
    // 26C7 0041;	
    // (⛇) BLACK SNOWMAN	[09E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26C7, 0x0041 };
    uint32_t const ces[9] = { 0x09E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_136)
{
    // 26C7 0062;	
    // (⛇) BLACK SNOWMAN	[09E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C7, 0x0062 };
    uint32_t const ces[9] = { 0x09E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_137)
{
    // 26C8 0021;	
    // (⛈) THUNDER CLOUD AND RAIN	[09E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C8, 0x0021 };
    uint32_t const ces[9] = { 0x09E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_138)
{
    // 26C8 003F;	
    // (⛈) THUNDER CLOUD AND RAIN	[09E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C8, 0x003F };
    uint32_t const ces[9] = { 0x09E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_139)
{
    // 26C8 0061;	
    // (⛈) THUNDER CLOUD AND RAIN	[09E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C8, 0x0061 };
    uint32_t const ces[9] = { 0x09E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_140)
{
    // 26C8 0041;	
    // (⛈) THUNDER CLOUD AND RAIN	[09E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26C8, 0x0041 };
    uint32_t const ces[9] = { 0x09E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_141)
{
    // 26C8 0062;	
    // (⛈) THUNDER CLOUD AND RAIN	[09E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C8, 0x0062 };
    uint32_t const ces[9] = { 0x09E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_142)
{
    // 26C9 0021;	
    // (⛉) TURNED WHITE SHOGI PIECE	[09E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C9, 0x0021 };
    uint32_t const ces[9] = { 0x09E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_143)
{
    // 26C9 003F;	
    // (⛉) TURNED WHITE SHOGI PIECE	[09E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C9, 0x003F };
    uint32_t const ces[9] = { 0x09E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_144)
{
    // 26C9 0061;	
    // (⛉) TURNED WHITE SHOGI PIECE	[09E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C9, 0x0061 };
    uint32_t const ces[9] = { 0x09E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_145)
{
    // 26C9 0041;	
    // (⛉) TURNED WHITE SHOGI PIECE	[09E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26C9, 0x0041 };
    uint32_t const ces[9] = { 0x09E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_146)
{
    // 26C9 0062;	
    // (⛉) TURNED WHITE SHOGI PIECE	[09E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26C9, 0x0062 };
    uint32_t const ces[9] = { 0x09E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_147)
{
    // 26CA 0021;	
    // (⛊) TURNED BLACK SHOGI PIECE	[09E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CA, 0x0021 };
    uint32_t const ces[9] = { 0x09E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_148)
{
    // 26CA 003F;	
    // (⛊) TURNED BLACK SHOGI PIECE	[09E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CA, 0x003F };
    uint32_t const ces[9] = { 0x09E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_149)
{
    // 26CA 0061;	
    // (⛊) TURNED BLACK SHOGI PIECE	[09E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CA, 0x0061 };
    uint32_t const ces[9] = { 0x09E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_150)
{
    // 26CA 0041;	
    // (⛊) TURNED BLACK SHOGI PIECE	[09E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26CA, 0x0041 };
    uint32_t const ces[9] = { 0x09E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_151)
{
    // 26CA 0062;	
    // (⛊) TURNED BLACK SHOGI PIECE	[09E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CA, 0x0062 };
    uint32_t const ces[9] = { 0x09E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_152)
{
    // 26CB 0021;	
    // (⛋) WHITE DIAMOND IN SQUARE	[09E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CB, 0x0021 };
    uint32_t const ces[9] = { 0x09E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_153)
{
    // 26CB 003F;	
    // (⛋) WHITE DIAMOND IN SQUARE	[09E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CB, 0x003F };
    uint32_t const ces[9] = { 0x09E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_154)
{
    // 26CB 0061;	
    // (⛋) WHITE DIAMOND IN SQUARE	[09E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CB, 0x0061 };
    uint32_t const ces[9] = { 0x09E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_155)
{
    // 26CB 0041;	
    // (⛋) WHITE DIAMOND IN SQUARE	[09E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26CB, 0x0041 };
    uint32_t const ces[9] = { 0x09E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_156)
{
    // 26CB 0062;	
    // (⛋) WHITE DIAMOND IN SQUARE	[09E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CB, 0x0062 };
    uint32_t const ces[9] = { 0x09E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_157)
{
    // 26CC 0021;	
    // (⛌) CROSSING LANES	[09EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CC, 0x0021 };
    uint32_t const ces[9] = { 0x09EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_158)
{
    // 26CC 003F;	
    // (⛌) CROSSING LANES	[09EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CC, 0x003F };
    uint32_t const ces[9] = { 0x09EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_159)
{
    // 26CC 0061;	
    // (⛌) CROSSING LANES	[09EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CC, 0x0061 };
    uint32_t const ces[9] = { 0x09EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_160)
{
    // 26CC 0041;	
    // (⛌) CROSSING LANES	[09EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26CC, 0x0041 };
    uint32_t const ces[9] = { 0x09EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_161)
{
    // 26CC 0062;	
    // (⛌) CROSSING LANES	[09EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CC, 0x0062 };
    uint32_t const ces[9] = { 0x09EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_162)
{
    // 26CD 0021;	
    // (⛍) DISABLED CAR	[09EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CD, 0x0021 };
    uint32_t const ces[9] = { 0x09EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_163)
{
    // 26CD 003F;	
    // (⛍) DISABLED CAR	[09EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CD, 0x003F };
    uint32_t const ces[9] = { 0x09EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_164)
{
    // 26CD 0061;	
    // (⛍) DISABLED CAR	[09EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CD, 0x0061 };
    uint32_t const ces[9] = { 0x09EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_165)
{
    // 26CD 0041;	
    // (⛍) DISABLED CAR	[09EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26CD, 0x0041 };
    uint32_t const ces[9] = { 0x09EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_166)
{
    // 26CD 0062;	
    // (⛍) DISABLED CAR	[09EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CD, 0x0062 };
    uint32_t const ces[9] = { 0x09EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_167)
{
    // 26CE 0021;	
    // (⛎) OPHIUCHUS	[09EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CE, 0x0021 };
    uint32_t const ces[9] = { 0x09EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_168)
{
    // 26CE 003F;	
    // (⛎) OPHIUCHUS	[09EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CE, 0x003F };
    uint32_t const ces[9] = { 0x09EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_169)
{
    // 26CE 0061;	
    // (⛎) OPHIUCHUS	[09EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CE, 0x0061 };
    uint32_t const ces[9] = { 0x09EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_170)
{
    // 26CE 0041;	
    // (⛎) OPHIUCHUS	[09EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26CE, 0x0041 };
    uint32_t const ces[9] = { 0x09EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_171)
{
    // 26CE 0062;	
    // (⛎) OPHIUCHUS	[09EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CE, 0x0062 };
    uint32_t const ces[9] = { 0x09EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_172)
{
    // 26CF 0021;	
    // (⛏) PICK	[09ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CF, 0x0021 };
    uint32_t const ces[9] = { 0x09ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_173)
{
    // 26CF 003F;	
    // (⛏) PICK	[09ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CF, 0x003F };
    uint32_t const ces[9] = { 0x09ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_174)
{
    // 26CF 0061;	
    // (⛏) PICK	[09ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CF, 0x0061 };
    uint32_t const ces[9] = { 0x09ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_175)
{
    // 26CF 0041;	
    // (⛏) PICK	[09ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26CF, 0x0041 };
    uint32_t const ces[9] = { 0x09ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_176)
{
    // 26CF 0062;	
    // (⛏) PICK	[09ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26CF, 0x0062 };
    uint32_t const ces[9] = { 0x09ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_177)
{
    // 26D0 0021;	
    // (⛐) CAR SLIDING	[09EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D0, 0x0021 };
    uint32_t const ces[9] = { 0x09EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_178)
{
    // 26D0 003F;	
    // (⛐) CAR SLIDING	[09EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D0, 0x003F };
    uint32_t const ces[9] = { 0x09EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_179)
{
    // 26D0 0061;	
    // (⛐) CAR SLIDING	[09EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D0, 0x0061 };
    uint32_t const ces[9] = { 0x09EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_180)
{
    // 26D0 0041;	
    // (⛐) CAR SLIDING	[09EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26D0, 0x0041 };
    uint32_t const ces[9] = { 0x09EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_181)
{
    // 26D0 0062;	
    // (⛐) CAR SLIDING	[09EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D0, 0x0062 };
    uint32_t const ces[9] = { 0x09EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_182)
{
    // 26D1 0021;	
    // (⛑) HELMET WITH WHITE CROSS	[09EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D1, 0x0021 };
    uint32_t const ces[9] = { 0x09EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_183)
{
    // 26D1 003F;	
    // (⛑) HELMET WITH WHITE CROSS	[09EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D1, 0x003F };
    uint32_t const ces[9] = { 0x09EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_184)
{
    // 26D1 0061;	
    // (⛑) HELMET WITH WHITE CROSS	[09EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D1, 0x0061 };
    uint32_t const ces[9] = { 0x09EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_185)
{
    // 26D1 0041;	
    // (⛑) HELMET WITH WHITE CROSS	[09EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26D1, 0x0041 };
    uint32_t const ces[9] = { 0x09EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_186)
{
    // 26D1 0062;	
    // (⛑) HELMET WITH WHITE CROSS	[09EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D1, 0x0062 };
    uint32_t const ces[9] = { 0x09EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_187)
{
    // 26D2 0021;	
    // (⛒) CIRCLED CROSSING LANES	[09F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D2, 0x0021 };
    uint32_t const ces[9] = { 0x09F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_188)
{
    // 26D2 003F;	
    // (⛒) CIRCLED CROSSING LANES	[09F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D2, 0x003F };
    uint32_t const ces[9] = { 0x09F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_189)
{
    // 26D2 0061;	
    // (⛒) CIRCLED CROSSING LANES	[09F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D2, 0x0061 };
    uint32_t const ces[9] = { 0x09F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_190)
{
    // 26D2 0041;	
    // (⛒) CIRCLED CROSSING LANES	[09F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26D2, 0x0041 };
    uint32_t const ces[9] = { 0x09F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_191)
{
    // 26D2 0062;	
    // (⛒) CIRCLED CROSSING LANES	[09F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D2, 0x0062 };
    uint32_t const ces[9] = { 0x09F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_192)
{
    // 26D3 0021;	
    // (⛓) CHAINS	[09F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D3, 0x0021 };
    uint32_t const ces[9] = { 0x09F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_193)
{
    // 26D3 003F;	
    // (⛓) CHAINS	[09F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D3, 0x003F };
    uint32_t const ces[9] = { 0x09F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_194)
{
    // 26D3 0061;	
    // (⛓) CHAINS	[09F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D3, 0x0061 };
    uint32_t const ces[9] = { 0x09F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_195)
{
    // 26D3 0041;	
    // (⛓) CHAINS	[09F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26D3, 0x0041 };
    uint32_t const ces[9] = { 0x09F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_196)
{
    // 26D3 0062;	
    // (⛓) CHAINS	[09F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D3, 0x0062 };
    uint32_t const ces[9] = { 0x09F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_197)
{
    // 26D4 0021;	
    // (⛔) NO ENTRY	[09F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D4, 0x0021 };
    uint32_t const ces[9] = { 0x09F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_198)
{
    // 26D4 003F;	
    // (⛔) NO ENTRY	[09F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D4, 0x003F };
    uint32_t const ces[9] = { 0x09F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_199)
{
    // 26D4 0061;	
    // (⛔) NO ENTRY	[09F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D4, 0x0061 };
    uint32_t const ces[9] = { 0x09F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_200)
{
    // 26D4 0041;	
    // (⛔) NO ENTRY	[09F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26D4, 0x0041 };
    uint32_t const ces[9] = { 0x09F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_201)
{
    // 26D4 0062;	
    // (⛔) NO ENTRY	[09F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D4, 0x0062 };
    uint32_t const ces[9] = { 0x09F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_202)
{
    // 26D5 0021;	
    // (⛕) ALTERNATE ONE-WAY LEFT WAY TRAFFIC	[09F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D5, 0x0021 };
    uint32_t const ces[9] = { 0x09F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_203)
{
    // 26D5 003F;	
    // (⛕) ALTERNATE ONE-WAY LEFT WAY TRAFFIC	[09F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D5, 0x003F };
    uint32_t const ces[9] = { 0x09F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_204)
{
    // 26D5 0061;	
    // (⛕) ALTERNATE ONE-WAY LEFT WAY TRAFFIC	[09F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D5, 0x0061 };
    uint32_t const ces[9] = { 0x09F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_205)
{
    // 26D5 0041;	
    // (⛕) ALTERNATE ONE-WAY LEFT WAY TRAFFIC	[09F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26D5, 0x0041 };
    uint32_t const ces[9] = { 0x09F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_206)
{
    // 26D5 0062;	
    // (⛕) ALTERNATE ONE-WAY LEFT WAY TRAFFIC	[09F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D5, 0x0062 };
    uint32_t const ces[9] = { 0x09F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_207)
{
    // 26D6 0021;	
    // (⛖) BLACK TWO-WAY LEFT WAY TRAFFIC	[09F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D6, 0x0021 };
    uint32_t const ces[9] = { 0x09F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_208)
{
    // 26D6 003F;	
    // (⛖) BLACK TWO-WAY LEFT WAY TRAFFIC	[09F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D6, 0x003F };
    uint32_t const ces[9] = { 0x09F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_209)
{
    // 26D6 0061;	
    // (⛖) BLACK TWO-WAY LEFT WAY TRAFFIC	[09F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D6, 0x0061 };
    uint32_t const ces[9] = { 0x09F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_210)
{
    // 26D6 0041;	
    // (⛖) BLACK TWO-WAY LEFT WAY TRAFFIC	[09F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26D6, 0x0041 };
    uint32_t const ces[9] = { 0x09F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_211)
{
    // 26D6 0062;	
    // (⛖) BLACK TWO-WAY LEFT WAY TRAFFIC	[09F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D6, 0x0062 };
    uint32_t const ces[9] = { 0x09F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_212)
{
    // 26D7 0021;	
    // (⛗) WHITE TWO-WAY LEFT WAY TRAFFIC	[09F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D7, 0x0021 };
    uint32_t const ces[9] = { 0x09F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_213)
{
    // 26D7 003F;	
    // (⛗) WHITE TWO-WAY LEFT WAY TRAFFIC	[09F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D7, 0x003F };
    uint32_t const ces[9] = { 0x09F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_214)
{
    // 26D7 0061;	
    // (⛗) WHITE TWO-WAY LEFT WAY TRAFFIC	[09F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D7, 0x0061 };
    uint32_t const ces[9] = { 0x09F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_215)
{
    // 26D7 0041;	
    // (⛗) WHITE TWO-WAY LEFT WAY TRAFFIC	[09F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26D7, 0x0041 };
    uint32_t const ces[9] = { 0x09F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_216)
{
    // 26D7 0062;	
    // (⛗) WHITE TWO-WAY LEFT WAY TRAFFIC	[09F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D7, 0x0062 };
    uint32_t const ces[9] = { 0x09F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_217)
{
    // 26D8 0021;	
    // (⛘) BLACK LEFT LANE MERGE	[09F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D8, 0x0021 };
    uint32_t const ces[9] = { 0x09F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_218)
{
    // 26D8 003F;	
    // (⛘) BLACK LEFT LANE MERGE	[09F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D8, 0x003F };
    uint32_t const ces[9] = { 0x09F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_219)
{
    // 26D8 0061;	
    // (⛘) BLACK LEFT LANE MERGE	[09F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D8, 0x0061 };
    uint32_t const ces[9] = { 0x09F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_220)
{
    // 26D8 0041;	
    // (⛘) BLACK LEFT LANE MERGE	[09F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26D8, 0x0041 };
    uint32_t const ces[9] = { 0x09F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_221)
{
    // 26D8 0062;	
    // (⛘) BLACK LEFT LANE MERGE	[09F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D8, 0x0062 };
    uint32_t const ces[9] = { 0x09F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_222)
{
    // 26D9 0021;	
    // (⛙) WHITE LEFT LANE MERGE	[09F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D9, 0x0021 };
    uint32_t const ces[9] = { 0x09F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_223)
{
    // 26D9 003F;	
    // (⛙) WHITE LEFT LANE MERGE	[09F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D9, 0x003F };
    uint32_t const ces[9] = { 0x09F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_224)
{
    // 26D9 0061;	
    // (⛙) WHITE LEFT LANE MERGE	[09F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D9, 0x0061 };
    uint32_t const ces[9] = { 0x09F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_225)
{
    // 26D9 0041;	
    // (⛙) WHITE LEFT LANE MERGE	[09F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26D9, 0x0041 };
    uint32_t const ces[9] = { 0x09F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_226)
{
    // 26D9 0062;	
    // (⛙) WHITE LEFT LANE MERGE	[09F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26D9, 0x0062 };
    uint32_t const ces[9] = { 0x09F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_227)
{
    // 26DA 0021;	
    // (⛚) DRIVE SLOW SIGN	[09F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DA, 0x0021 };
    uint32_t const ces[9] = { 0x09F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_228)
{
    // 26DA 003F;	
    // (⛚) DRIVE SLOW SIGN	[09F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DA, 0x003F };
    uint32_t const ces[9] = { 0x09F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_229)
{
    // 26DA 0061;	
    // (⛚) DRIVE SLOW SIGN	[09F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DA, 0x0061 };
    uint32_t const ces[9] = { 0x09F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_230)
{
    // 26DA 0041;	
    // (⛚) DRIVE SLOW SIGN	[09F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26DA, 0x0041 };
    uint32_t const ces[9] = { 0x09F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_231)
{
    // 26DA 0062;	
    // (⛚) DRIVE SLOW SIGN	[09F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DA, 0x0062 };
    uint32_t const ces[9] = { 0x09F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_232)
{
    // 26DB 0021;	
    // (⛛) HEAVY WHITE DOWN-POINTING TRIANGLE	[09F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DB, 0x0021 };
    uint32_t const ces[9] = { 0x09F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_233)
{
    // 26DB 003F;	
    // (⛛) HEAVY WHITE DOWN-POINTING TRIANGLE	[09F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DB, 0x003F };
    uint32_t const ces[9] = { 0x09F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_234)
{
    // 26DB 0061;	
    // (⛛) HEAVY WHITE DOWN-POINTING TRIANGLE	[09F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DB, 0x0061 };
    uint32_t const ces[9] = { 0x09F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_235)
{
    // 26DB 0041;	
    // (⛛) HEAVY WHITE DOWN-POINTING TRIANGLE	[09F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26DB, 0x0041 };
    uint32_t const ces[9] = { 0x09F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_236)
{
    // 26DB 0062;	
    // (⛛) HEAVY WHITE DOWN-POINTING TRIANGLE	[09F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DB, 0x0062 };
    uint32_t const ces[9] = { 0x09F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_237)
{
    // 26DC 0021;	
    // (⛜) LEFT CLOSED ENTRY	[09FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DC, 0x0021 };
    uint32_t const ces[9] = { 0x09FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_238)
{
    // 26DC 003F;	
    // (⛜) LEFT CLOSED ENTRY	[09FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DC, 0x003F };
    uint32_t const ces[9] = { 0x09FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_239)
{
    // 26DC 0061;	
    // (⛜) LEFT CLOSED ENTRY	[09FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DC, 0x0061 };
    uint32_t const ces[9] = { 0x09FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_240)
{
    // 26DC 0041;	
    // (⛜) LEFT CLOSED ENTRY	[09FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26DC, 0x0041 };
    uint32_t const ces[9] = { 0x09FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_241)
{
    // 26DC 0062;	
    // (⛜) LEFT CLOSED ENTRY	[09FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DC, 0x0062 };
    uint32_t const ces[9] = { 0x09FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_242)
{
    // 26DD 0021;	
    // (⛝) SQUARED SALTIRE	[09FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DD, 0x0021 };
    uint32_t const ces[9] = { 0x09FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_243)
{
    // 26DD 003F;	
    // (⛝) SQUARED SALTIRE	[09FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DD, 0x003F };
    uint32_t const ces[9] = { 0x09FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_244)
{
    // 26DD 0061;	
    // (⛝) SQUARED SALTIRE	[09FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DD, 0x0061 };
    uint32_t const ces[9] = { 0x09FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_245)
{
    // 26DD 0041;	
    // (⛝) SQUARED SALTIRE	[09FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26DD, 0x0041 };
    uint32_t const ces[9] = { 0x09FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_246)
{
    // 26DD 0062;	
    // (⛝) SQUARED SALTIRE	[09FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DD, 0x0062 };
    uint32_t const ces[9] = { 0x09FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_247)
{
    // 26DE 0021;	
    // (⛞) FALLING DIAGONAL IN WHITE CIRCLE IN BLACK SQUARE	[09FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DE, 0x0021 };
    uint32_t const ces[9] = { 0x09FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_248)
{
    // 26DE 003F;	
    // (⛞) FALLING DIAGONAL IN WHITE CIRCLE IN BLACK SQUARE	[09FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DE, 0x003F };
    uint32_t const ces[9] = { 0x09FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_249)
{
    // 26DE 0061;	
    // (⛞) FALLING DIAGONAL IN WHITE CIRCLE IN BLACK SQUARE	[09FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DE, 0x0061 };
    uint32_t const ces[9] = { 0x09FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_250)
{
    // 26DE 0041;	
    // (⛞) FALLING DIAGONAL IN WHITE CIRCLE IN BLACK SQUARE	[09FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26DE, 0x0041 };
    uint32_t const ces[9] = { 0x09FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_251)
{
    // 26DE 0062;	
    // (⛞) FALLING DIAGONAL IN WHITE CIRCLE IN BLACK SQUARE	[09FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DE, 0x0062 };
    uint32_t const ces[9] = { 0x09FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_252)
{
    // 26DF 0021;	
    // (⛟) BLACK TRUCK	[09FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DF, 0x0021 };
    uint32_t const ces[9] = { 0x09FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_253)
{
    // 26DF 003F;	
    // (⛟) BLACK TRUCK	[09FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DF, 0x003F };
    uint32_t const ces[9] = { 0x09FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_254)
{
    // 26DF 0061;	
    // (⛟) BLACK TRUCK	[09FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DF, 0x0061 };
    uint32_t const ces[9] = { 0x09FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_255)
{
    // 26DF 0041;	
    // (⛟) BLACK TRUCK	[09FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26DF, 0x0041 };
    uint32_t const ces[9] = { 0x09FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_256)
{
    // 26DF 0062;	
    // (⛟) BLACK TRUCK	[09FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26DF, 0x0062 };
    uint32_t const ces[9] = { 0x09FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_257)
{
    // 26E0 0021;	
    // (⛠) RESTRICTED LEFT ENTRY-1	[09FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E0, 0x0021 };
    uint32_t const ces[9] = { 0x09FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_258)
{
    // 26E0 003F;	
    // (⛠) RESTRICTED LEFT ENTRY-1	[09FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E0, 0x003F };
    uint32_t const ces[9] = { 0x09FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_259)
{
    // 26E0 0061;	
    // (⛠) RESTRICTED LEFT ENTRY-1	[09FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E0, 0x0061 };
    uint32_t const ces[9] = { 0x09FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_260)
{
    // 26E0 0041;	
    // (⛠) RESTRICTED LEFT ENTRY-1	[09FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26E0, 0x0041 };
    uint32_t const ces[9] = { 0x09FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_261)
{
    // 26E0 0062;	
    // (⛠) RESTRICTED LEFT ENTRY-1	[09FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E0, 0x0062 };
    uint32_t const ces[9] = { 0x09FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_262)
{
    // 26E1 0021;	
    // (⛡) RESTRICTED LEFT ENTRY-2	[09FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E1, 0x0021 };
    uint32_t const ces[9] = { 0x09FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_263)
{
    // 26E1 003F;	
    // (⛡) RESTRICTED LEFT ENTRY-2	[09FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E1, 0x003F };
    uint32_t const ces[9] = { 0x09FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_264)
{
    // 26E1 0061;	
    // (⛡) RESTRICTED LEFT ENTRY-2	[09FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E1, 0x0061 };
    uint32_t const ces[9] = { 0x09FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_265)
{
    // 26E1 0041;	
    // (⛡) RESTRICTED LEFT ENTRY-2	[09FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26E1, 0x0041 };
    uint32_t const ces[9] = { 0x09FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_266)
{
    // 26E1 0062;	
    // (⛡) RESTRICTED LEFT ENTRY-2	[09FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E1, 0x0062 };
    uint32_t const ces[9] = { 0x09FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_267)
{
    // 26E2 0021;	
    // (⛢) ASTRONOMICAL SYMBOL FOR URANUS	[0A00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E2, 0x0021 };
    uint32_t const ces[9] = { 0x0A00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_268)
{
    // 26E2 003F;	
    // (⛢) ASTRONOMICAL SYMBOL FOR URANUS	[0A00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E2, 0x003F };
    uint32_t const ces[9] = { 0x0A00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_269)
{
    // 26E2 0061;	
    // (⛢) ASTRONOMICAL SYMBOL FOR URANUS	[0A00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E2, 0x0061 };
    uint32_t const ces[9] = { 0x0A00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_270)
{
    // 26E2 0041;	
    // (⛢) ASTRONOMICAL SYMBOL FOR URANUS	[0A00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26E2, 0x0041 };
    uint32_t const ces[9] = { 0x0A00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_271)
{
    // 26E2 0062;	
    // (⛢) ASTRONOMICAL SYMBOL FOR URANUS	[0A00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E2, 0x0062 };
    uint32_t const ces[9] = { 0x0A00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_272)
{
    // 26E3 0021;	
    // (⛣) HEAVY CIRCLE WITH STROKE AND TWO DOTS ABOVE	[0A01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E3, 0x0021 };
    uint32_t const ces[9] = { 0x0A01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_273)
{
    // 26E3 003F;	
    // (⛣) HEAVY CIRCLE WITH STROKE AND TWO DOTS ABOVE	[0A01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E3, 0x003F };
    uint32_t const ces[9] = { 0x0A01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_274)
{
    // 26E3 0061;	
    // (⛣) HEAVY CIRCLE WITH STROKE AND TWO DOTS ABOVE	[0A01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E3, 0x0061 };
    uint32_t const ces[9] = { 0x0A01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_275)
{
    // 26E3 0041;	
    // (⛣) HEAVY CIRCLE WITH STROKE AND TWO DOTS ABOVE	[0A01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26E3, 0x0041 };
    uint32_t const ces[9] = { 0x0A01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_276)
{
    // 26E3 0062;	
    // (⛣) HEAVY CIRCLE WITH STROKE AND TWO DOTS ABOVE	[0A01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E3, 0x0062 };
    uint32_t const ces[9] = { 0x0A01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_277)
{
    // 26E4 0021;	
    // (⛤) PENTAGRAM	[0A02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E4, 0x0021 };
    uint32_t const ces[9] = { 0x0A02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_278)
{
    // 26E4 003F;	
    // (⛤) PENTAGRAM	[0A02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E4, 0x003F };
    uint32_t const ces[9] = { 0x0A02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_279)
{
    // 26E4 0061;	
    // (⛤) PENTAGRAM	[0A02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E4, 0x0061 };
    uint32_t const ces[9] = { 0x0A02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_280)
{
    // 26E4 0041;	
    // (⛤) PENTAGRAM	[0A02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26E4, 0x0041 };
    uint32_t const ces[9] = { 0x0A02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_281)
{
    // 26E4 0062;	
    // (⛤) PENTAGRAM	[0A02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E4, 0x0062 };
    uint32_t const ces[9] = { 0x0A02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_282)
{
    // 26E5 0021;	
    // (⛥) RIGHT-HANDED INTERLACED PENTAGRAM	[0A03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E5, 0x0021 };
    uint32_t const ces[9] = { 0x0A03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_283)
{
    // 26E5 003F;	
    // (⛥) RIGHT-HANDED INTERLACED PENTAGRAM	[0A03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E5, 0x003F };
    uint32_t const ces[9] = { 0x0A03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_284)
{
    // 26E5 0061;	
    // (⛥) RIGHT-HANDED INTERLACED PENTAGRAM	[0A03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E5, 0x0061 };
    uint32_t const ces[9] = { 0x0A03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_285)
{
    // 26E5 0041;	
    // (⛥) RIGHT-HANDED INTERLACED PENTAGRAM	[0A03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26E5, 0x0041 };
    uint32_t const ces[9] = { 0x0A03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_286)
{
    // 26E5 0062;	
    // (⛥) RIGHT-HANDED INTERLACED PENTAGRAM	[0A03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E5, 0x0062 };
    uint32_t const ces[9] = { 0x0A03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_287)
{
    // 26E6 0021;	
    // (⛦) LEFT-HANDED INTERLACED PENTAGRAM	[0A04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E6, 0x0021 };
    uint32_t const ces[9] = { 0x0A04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_288)
{
    // 26E6 003F;	
    // (⛦) LEFT-HANDED INTERLACED PENTAGRAM	[0A04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E6, 0x003F };
    uint32_t const ces[9] = { 0x0A04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_289)
{
    // 26E6 0061;	
    // (⛦) LEFT-HANDED INTERLACED PENTAGRAM	[0A04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E6, 0x0061 };
    uint32_t const ces[9] = { 0x0A04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_290)
{
    // 26E6 0041;	
    // (⛦) LEFT-HANDED INTERLACED PENTAGRAM	[0A04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26E6, 0x0041 };
    uint32_t const ces[9] = { 0x0A04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_291)
{
    // 26E6 0062;	
    // (⛦) LEFT-HANDED INTERLACED PENTAGRAM	[0A04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E6, 0x0062 };
    uint32_t const ces[9] = { 0x0A04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_292)
{
    // 26E7 0021;	
    // (⛧) INVERTED PENTAGRAM	[0A05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E7, 0x0021 };
    uint32_t const ces[9] = { 0x0A05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_293)
{
    // 26E7 003F;	
    // (⛧) INVERTED PENTAGRAM	[0A05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E7, 0x003F };
    uint32_t const ces[9] = { 0x0A05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_294)
{
    // 26E7 0061;	
    // (⛧) INVERTED PENTAGRAM	[0A05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E7, 0x0061 };
    uint32_t const ces[9] = { 0x0A05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_295)
{
    // 26E7 0041;	
    // (⛧) INVERTED PENTAGRAM	[0A05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26E7, 0x0041 };
    uint32_t const ces[9] = { 0x0A05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_296)
{
    // 26E7 0062;	
    // (⛧) INVERTED PENTAGRAM	[0A05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E7, 0x0062 };
    uint32_t const ces[9] = { 0x0A05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_297)
{
    // 26E8 0021;	
    // (⛨) BLACK CROSS ON SHIELD	[0A06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E8, 0x0021 };
    uint32_t const ces[9] = { 0x0A06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_298)
{
    // 26E8 003F;	
    // (⛨) BLACK CROSS ON SHIELD	[0A06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E8, 0x003F };
    uint32_t const ces[9] = { 0x0A06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_299)
{
    // 26E8 0061;	
    // (⛨) BLACK CROSS ON SHIELD	[0A06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E8, 0x0061 };
    uint32_t const ces[9] = { 0x0A06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_300)
{
    // 26E8 0041;	
    // (⛨) BLACK CROSS ON SHIELD	[0A06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26E8, 0x0041 };
    uint32_t const ces[9] = { 0x0A06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_301)
{
    // 26E8 0062;	
    // (⛨) BLACK CROSS ON SHIELD	[0A06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E8, 0x0062 };
    uint32_t const ces[9] = { 0x0A06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_302)
{
    // 26E9 0021;	
    // (⛩) SHINTO SHRINE	[0A07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E9, 0x0021 };
    uint32_t const ces[9] = { 0x0A07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_303)
{
    // 26E9 003F;	
    // (⛩) SHINTO SHRINE	[0A07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E9, 0x003F };
    uint32_t const ces[9] = { 0x0A07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_304)
{
    // 26E9 0061;	
    // (⛩) SHINTO SHRINE	[0A07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E9, 0x0061 };
    uint32_t const ces[9] = { 0x0A07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_305)
{
    // 26E9 0041;	
    // (⛩) SHINTO SHRINE	[0A07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26E9, 0x0041 };
    uint32_t const ces[9] = { 0x0A07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_306)
{
    // 26E9 0062;	
    // (⛩) SHINTO SHRINE	[0A07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26E9, 0x0062 };
    uint32_t const ces[9] = { 0x0A07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_307)
{
    // 26EA 0021;	
    // (⛪) CHURCH	[0A08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26EA, 0x0021 };
    uint32_t const ces[9] = { 0x0A08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_308)
{
    // 26EA 003F;	
    // (⛪) CHURCH	[0A08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26EA, 0x003F };
    uint32_t const ces[9] = { 0x0A08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_309)
{
    // 26EA 0061;	
    // (⛪) CHURCH	[0A08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26EA, 0x0061 };
    uint32_t const ces[9] = { 0x0A08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_310)
{
    // 26EA 0041;	
    // (⛪) CHURCH	[0A08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26EA, 0x0041 };
    uint32_t const ces[9] = { 0x0A08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_311)
{
    // 26EA 0062;	
    // (⛪) CHURCH	[0A08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26EA, 0x0062 };
    uint32_t const ces[9] = { 0x0A08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_312)
{
    // 26EB 0021;	
    // (⛫) CASTLE	[0A09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26EB, 0x0021 };
    uint32_t const ces[9] = { 0x0A09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_313)
{
    // 26EB 003F;	
    // (⛫) CASTLE	[0A09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26EB, 0x003F };
    uint32_t const ces[9] = { 0x0A09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_314)
{
    // 26EB 0061;	
    // (⛫) CASTLE	[0A09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26EB, 0x0061 };
    uint32_t const ces[9] = { 0x0A09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_315)
{
    // 26EB 0041;	
    // (⛫) CASTLE	[0A09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26EB, 0x0041 };
    uint32_t const ces[9] = { 0x0A09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_316)
{
    // 26EB 0062;	
    // (⛫) CASTLE	[0A09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26EB, 0x0062 };
    uint32_t const ces[9] = { 0x0A09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_317)
{
    // 26EC 0021;	
    // (⛬) HISTORIC SITE	[0A0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26EC, 0x0021 };
    uint32_t const ces[9] = { 0x0A0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_318)
{
    // 26EC 003F;	
    // (⛬) HISTORIC SITE	[0A0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26EC, 0x003F };
    uint32_t const ces[9] = { 0x0A0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_319)
{
    // 26EC 0061;	
    // (⛬) HISTORIC SITE	[0A0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26EC, 0x0061 };
    uint32_t const ces[9] = { 0x0A0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_320)
{
    // 26EC 0041;	
    // (⛬) HISTORIC SITE	[0A0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26EC, 0x0041 };
    uint32_t const ces[9] = { 0x0A0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_321)
{
    // 26EC 0062;	
    // (⛬) HISTORIC SITE	[0A0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26EC, 0x0062 };
    uint32_t const ces[9] = { 0x0A0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_322)
{
    // 26ED 0021;	
    // (⛭) GEAR WITHOUT HUB	[0A0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26ED, 0x0021 };
    uint32_t const ces[9] = { 0x0A0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_323)
{
    // 26ED 003F;	
    // (⛭) GEAR WITHOUT HUB	[0A0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26ED, 0x003F };
    uint32_t const ces[9] = { 0x0A0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_324)
{
    // 26ED 0061;	
    // (⛭) GEAR WITHOUT HUB	[0A0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26ED, 0x0061 };
    uint32_t const ces[9] = { 0x0A0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_325)
{
    // 26ED 0041;	
    // (⛭) GEAR WITHOUT HUB	[0A0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26ED, 0x0041 };
    uint32_t const ces[9] = { 0x0A0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_326)
{
    // 26ED 0062;	
    // (⛭) GEAR WITHOUT HUB	[0A0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26ED, 0x0062 };
    uint32_t const ces[9] = { 0x0A0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_327)
{
    // 26EE 0021;	
    // (⛮) GEAR WITH HANDLES	[0A0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26EE, 0x0021 };
    uint32_t const ces[9] = { 0x0A0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_328)
{
    // 26EE 003F;	
    // (⛮) GEAR WITH HANDLES	[0A0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26EE, 0x003F };
    uint32_t const ces[9] = { 0x0A0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_329)
{
    // 26EE 0061;	
    // (⛮) GEAR WITH HANDLES	[0A0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26EE, 0x0061 };
    uint32_t const ces[9] = { 0x0A0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_330)
{
    // 26EE 0041;	
    // (⛮) GEAR WITH HANDLES	[0A0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26EE, 0x0041 };
    uint32_t const ces[9] = { 0x0A0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_331)
{
    // 26EE 0062;	
    // (⛮) GEAR WITH HANDLES	[0A0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26EE, 0x0062 };
    uint32_t const ces[9] = { 0x0A0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_332)
{
    // 26EF 0021;	
    // (⛯) MAP SYMBOL FOR LIGHTHOUSE	[0A0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26EF, 0x0021 };
    uint32_t const ces[9] = { 0x0A0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_333)
{
    // 26EF 003F;	
    // (⛯) MAP SYMBOL FOR LIGHTHOUSE	[0A0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26EF, 0x003F };
    uint32_t const ces[9] = { 0x0A0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_334)
{
    // 26EF 0061;	
    // (⛯) MAP SYMBOL FOR LIGHTHOUSE	[0A0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26EF, 0x0061 };
    uint32_t const ces[9] = { 0x0A0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_335)
{
    // 26EF 0041;	
    // (⛯) MAP SYMBOL FOR LIGHTHOUSE	[0A0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26EF, 0x0041 };
    uint32_t const ces[9] = { 0x0A0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_336)
{
    // 26EF 0062;	
    // (⛯) MAP SYMBOL FOR LIGHTHOUSE	[0A0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26EF, 0x0062 };
    uint32_t const ces[9] = { 0x0A0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_337)
{
    // 26F0 0021;	
    // (⛰) MOUNTAIN	[0A0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F0, 0x0021 };
    uint32_t const ces[9] = { 0x0A0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_338)
{
    // 26F0 003F;	
    // (⛰) MOUNTAIN	[0A0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F0, 0x003F };
    uint32_t const ces[9] = { 0x0A0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_339)
{
    // 26F0 0061;	
    // (⛰) MOUNTAIN	[0A0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F0, 0x0061 };
    uint32_t const ces[9] = { 0x0A0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_340)
{
    // 26F0 0041;	
    // (⛰) MOUNTAIN	[0A0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26F0, 0x0041 };
    uint32_t const ces[9] = { 0x0A0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_341)
{
    // 26F0 0062;	
    // (⛰) MOUNTAIN	[0A0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F0, 0x0062 };
    uint32_t const ces[9] = { 0x0A0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_342)
{
    // 26F1 0021;	
    // (⛱) UMBRELLA ON GROUND	[0A0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F1, 0x0021 };
    uint32_t const ces[9] = { 0x0A0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_343)
{
    // 26F1 003F;	
    // (⛱) UMBRELLA ON GROUND	[0A0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F1, 0x003F };
    uint32_t const ces[9] = { 0x0A0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_344)
{
    // 26F1 0061;	
    // (⛱) UMBRELLA ON GROUND	[0A0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F1, 0x0061 };
    uint32_t const ces[9] = { 0x0A0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_345)
{
    // 26F1 0041;	
    // (⛱) UMBRELLA ON GROUND	[0A0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26F1, 0x0041 };
    uint32_t const ces[9] = { 0x0A0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_346)
{
    // 26F1 0062;	
    // (⛱) UMBRELLA ON GROUND	[0A0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F1, 0x0062 };
    uint32_t const ces[9] = { 0x0A0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_347)
{
    // 26F2 0021;	
    // (⛲) FOUNTAIN	[0A10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F2, 0x0021 };
    uint32_t const ces[9] = { 0x0A10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_348)
{
    // 26F2 003F;	
    // (⛲) FOUNTAIN	[0A10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F2, 0x003F };
    uint32_t const ces[9] = { 0x0A10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_349)
{
    // 26F2 0061;	
    // (⛲) FOUNTAIN	[0A10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F2, 0x0061 };
    uint32_t const ces[9] = { 0x0A10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_350)
{
    // 26F2 0041;	
    // (⛲) FOUNTAIN	[0A10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26F2, 0x0041 };
    uint32_t const ces[9] = { 0x0A10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_351)
{
    // 26F2 0062;	
    // (⛲) FOUNTAIN	[0A10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F2, 0x0062 };
    uint32_t const ces[9] = { 0x0A10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_352)
{
    // 26F3 0021;	
    // (⛳) FLAG IN HOLE	[0A11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F3, 0x0021 };
    uint32_t const ces[9] = { 0x0A11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_353)
{
    // 26F3 003F;	
    // (⛳) FLAG IN HOLE	[0A11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F3, 0x003F };
    uint32_t const ces[9] = { 0x0A11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_354)
{
    // 26F3 0061;	
    // (⛳) FLAG IN HOLE	[0A11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F3, 0x0061 };
    uint32_t const ces[9] = { 0x0A11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_355)
{
    // 26F3 0041;	
    // (⛳) FLAG IN HOLE	[0A11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26F3, 0x0041 };
    uint32_t const ces[9] = { 0x0A11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_356)
{
    // 26F3 0062;	
    // (⛳) FLAG IN HOLE	[0A11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F3, 0x0062 };
    uint32_t const ces[9] = { 0x0A11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_357)
{
    // 26F4 0021;	
    // (⛴) FERRY	[0A12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F4, 0x0021 };
    uint32_t const ces[9] = { 0x0A12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_358)
{
    // 26F4 003F;	
    // (⛴) FERRY	[0A12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F4, 0x003F };
    uint32_t const ces[9] = { 0x0A12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_359)
{
    // 26F4 0061;	
    // (⛴) FERRY	[0A12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F4, 0x0061 };
    uint32_t const ces[9] = { 0x0A12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_360)
{
    // 26F4 0041;	
    // (⛴) FERRY	[0A12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26F4, 0x0041 };
    uint32_t const ces[9] = { 0x0A12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_361)
{
    // 26F4 0062;	
    // (⛴) FERRY	[0A12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F4, 0x0062 };
    uint32_t const ces[9] = { 0x0A12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_362)
{
    // 26F5 0021;	
    // (⛵) SAILBOAT	[0A13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F5, 0x0021 };
    uint32_t const ces[9] = { 0x0A13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_363)
{
    // 26F5 003F;	
    // (⛵) SAILBOAT	[0A13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F5, 0x003F };
    uint32_t const ces[9] = { 0x0A13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_364)
{
    // 26F5 0061;	
    // (⛵) SAILBOAT	[0A13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F5, 0x0061 };
    uint32_t const ces[9] = { 0x0A13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_365)
{
    // 26F5 0041;	
    // (⛵) SAILBOAT	[0A13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26F5, 0x0041 };
    uint32_t const ces[9] = { 0x0A13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_366)
{
    // 26F5 0062;	
    // (⛵) SAILBOAT	[0A13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F5, 0x0062 };
    uint32_t const ces[9] = { 0x0A13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_367)
{
    // 26F6 0021;	
    // (⛶) SQUARE FOUR CORNERS	[0A14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F6, 0x0021 };
    uint32_t const ces[9] = { 0x0A14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_368)
{
    // 26F6 003F;	
    // (⛶) SQUARE FOUR CORNERS	[0A14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F6, 0x003F };
    uint32_t const ces[9] = { 0x0A14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_369)
{
    // 26F6 0061;	
    // (⛶) SQUARE FOUR CORNERS	[0A14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F6, 0x0061 };
    uint32_t const ces[9] = { 0x0A14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_370)
{
    // 26F6 0041;	
    // (⛶) SQUARE FOUR CORNERS	[0A14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26F6, 0x0041 };
    uint32_t const ces[9] = { 0x0A14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_371)
{
    // 26F6 0062;	
    // (⛶) SQUARE FOUR CORNERS	[0A14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F6, 0x0062 };
    uint32_t const ces[9] = { 0x0A14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_372)
{
    // 26F7 0021;	
    // (⛷) SKIER	[0A15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F7, 0x0021 };
    uint32_t const ces[9] = { 0x0A15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_373)
{
    // 26F7 003F;	
    // (⛷) SKIER	[0A15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F7, 0x003F };
    uint32_t const ces[9] = { 0x0A15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_374)
{
    // 26F7 0061;	
    // (⛷) SKIER	[0A15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F7, 0x0061 };
    uint32_t const ces[9] = { 0x0A15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_375)
{
    // 26F7 0041;	
    // (⛷) SKIER	[0A15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26F7, 0x0041 };
    uint32_t const ces[9] = { 0x0A15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_376)
{
    // 26F7 0062;	
    // (⛷) SKIER	[0A15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F7, 0x0062 };
    uint32_t const ces[9] = { 0x0A15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_377)
{
    // 26F8 0021;	
    // (⛸) ICE SKATE	[0A16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F8, 0x0021 };
    uint32_t const ces[9] = { 0x0A16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_378)
{
    // 26F8 003F;	
    // (⛸) ICE SKATE	[0A16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F8, 0x003F };
    uint32_t const ces[9] = { 0x0A16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_379)
{
    // 26F8 0061;	
    // (⛸) ICE SKATE	[0A16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F8, 0x0061 };
    uint32_t const ces[9] = { 0x0A16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_380)
{
    // 26F8 0041;	
    // (⛸) ICE SKATE	[0A16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26F8, 0x0041 };
    uint32_t const ces[9] = { 0x0A16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_381)
{
    // 26F8 0062;	
    // (⛸) ICE SKATE	[0A16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F8, 0x0062 };
    uint32_t const ces[9] = { 0x0A16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_382)
{
    // 26F9 0021;	
    // (⛹) PERSON WITH BALL	[0A17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F9, 0x0021 };
    uint32_t const ces[9] = { 0x0A17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_383)
{
    // 26F9 003F;	
    // (⛹) PERSON WITH BALL	[0A17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F9, 0x003F };
    uint32_t const ces[9] = { 0x0A17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_384)
{
    // 26F9 0061;	
    // (⛹) PERSON WITH BALL	[0A17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F9, 0x0061 };
    uint32_t const ces[9] = { 0x0A17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_385)
{
    // 26F9 0041;	
    // (⛹) PERSON WITH BALL	[0A17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26F9, 0x0041 };
    uint32_t const ces[9] = { 0x0A17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_386)
{
    // 26F9 0062;	
    // (⛹) PERSON WITH BALL	[0A17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26F9, 0x0062 };
    uint32_t const ces[9] = { 0x0A17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_387)
{
    // 26FA 0021;	
    // (⛺) TENT	[0A18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FA, 0x0021 };
    uint32_t const ces[9] = { 0x0A18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_388)
{
    // 26FA 003F;	
    // (⛺) TENT	[0A18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FA, 0x003F };
    uint32_t const ces[9] = { 0x0A18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_389)
{
    // 26FA 0061;	
    // (⛺) TENT	[0A18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FA, 0x0061 };
    uint32_t const ces[9] = { 0x0A18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_390)
{
    // 26FA 0041;	
    // (⛺) TENT	[0A18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26FA, 0x0041 };
    uint32_t const ces[9] = { 0x0A18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_391)
{
    // 26FA 0062;	
    // (⛺) TENT	[0A18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FA, 0x0062 };
    uint32_t const ces[9] = { 0x0A18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_392)
{
    // 26FB 0021;	
    // (⛻) JAPANESE BANK SYMBOL	[0A19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FB, 0x0021 };
    uint32_t const ces[9] = { 0x0A19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_393)
{
    // 26FB 003F;	
    // (⛻) JAPANESE BANK SYMBOL	[0A19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FB, 0x003F };
    uint32_t const ces[9] = { 0x0A19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_394)
{
    // 26FB 0061;	
    // (⛻) JAPANESE BANK SYMBOL	[0A19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FB, 0x0061 };
    uint32_t const ces[9] = { 0x0A19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_395)
{
    // 26FB 0041;	
    // (⛻) JAPANESE BANK SYMBOL	[0A19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26FB, 0x0041 };
    uint32_t const ces[9] = { 0x0A19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_396)
{
    // 26FB 0062;	
    // (⛻) JAPANESE BANK SYMBOL	[0A19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FB, 0x0062 };
    uint32_t const ces[9] = { 0x0A19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_397)
{
    // 26FC 0021;	
    // (⛼) HEADSTONE GRAVEYARD SYMBOL	[0A1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FC, 0x0021 };
    uint32_t const ces[9] = { 0x0A1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_398)
{
    // 26FC 003F;	
    // (⛼) HEADSTONE GRAVEYARD SYMBOL	[0A1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FC, 0x003F };
    uint32_t const ces[9] = { 0x0A1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_399)
{
    // 26FC 0061;	
    // (⛼) HEADSTONE GRAVEYARD SYMBOL	[0A1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FC, 0x0061 };
    uint32_t const ces[9] = { 0x0A1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_400)
{
    // 26FC 0041;	
    // (⛼) HEADSTONE GRAVEYARD SYMBOL	[0A1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26FC, 0x0041 };
    uint32_t const ces[9] = { 0x0A1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_401)
{
    // 26FC 0062;	
    // (⛼) HEADSTONE GRAVEYARD SYMBOL	[0A1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FC, 0x0062 };
    uint32_t const ces[9] = { 0x0A1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_402)
{
    // 26FD 0021;	
    // (⛽) FUEL PUMP	[0A1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FD, 0x0021 };
    uint32_t const ces[9] = { 0x0A1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_403)
{
    // 26FD 003F;	
    // (⛽) FUEL PUMP	[0A1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FD, 0x003F };
    uint32_t const ces[9] = { 0x0A1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_404)
{
    // 26FD 0061;	
    // (⛽) FUEL PUMP	[0A1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FD, 0x0061 };
    uint32_t const ces[9] = { 0x0A1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_405)
{
    // 26FD 0041;	
    // (⛽) FUEL PUMP	[0A1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26FD, 0x0041 };
    uint32_t const ces[9] = { 0x0A1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_406)
{
    // 26FD 0062;	
    // (⛽) FUEL PUMP	[0A1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FD, 0x0062 };
    uint32_t const ces[9] = { 0x0A1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_407)
{
    // 26FE 0021;	
    // (⛾) CUP ON BLACK SQUARE	[0A1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FE, 0x0021 };
    uint32_t const ces[9] = { 0x0A1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_408)
{
    // 26FE 003F;	
    // (⛾) CUP ON BLACK SQUARE	[0A1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FE, 0x003F };
    uint32_t const ces[9] = { 0x0A1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_409)
{
    // 26FE 0061;	
    // (⛾) CUP ON BLACK SQUARE	[0A1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FE, 0x0061 };
    uint32_t const ces[9] = { 0x0A1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_410)
{
    // 26FE 0041;	
    // (⛾) CUP ON BLACK SQUARE	[0A1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26FE, 0x0041 };
    uint32_t const ces[9] = { 0x0A1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_411)
{
    // 26FE 0062;	
    // (⛾) CUP ON BLACK SQUARE	[0A1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FE, 0x0062 };
    uint32_t const ces[9] = { 0x0A1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_412)
{
    // 26FF 0021;	
    // (⛿) WHITE FLAG WITH HORIZONTAL MIDDLE BLACK STRIPE	[0A1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FF, 0x0021 };
    uint32_t const ces[9] = { 0x0A1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_413)
{
    // 26FF 003F;	
    // (⛿) WHITE FLAG WITH HORIZONTAL MIDDLE BLACK STRIPE	[0A1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FF, 0x003F };
    uint32_t const ces[9] = { 0x0A1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_414)
{
    // 26FF 0061;	
    // (⛿) WHITE FLAG WITH HORIZONTAL MIDDLE BLACK STRIPE	[0A1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FF, 0x0061 };
    uint32_t const ces[9] = { 0x0A1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_415)
{
    // 26FF 0041;	
    // (⛿) WHITE FLAG WITH HORIZONTAL MIDDLE BLACK STRIPE	[0A1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x26FF, 0x0041 };
    uint32_t const ces[9] = { 0x0A1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_416)
{
    // 26FF 0062;	
    // (⛿) WHITE FLAG WITH HORIZONTAL MIDDLE BLACK STRIPE	[0A1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x26FF, 0x0062 };
    uint32_t const ces[9] = { 0x0A1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_417)
{
    // 1F1E6 0021;	
    // (🇦) REGIONAL INDICATOR SYMBOL LETTER A	[0A1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1E6, 0x0021 };
    uint32_t const ces[9] = { 0x0A1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_418)
{
    // 1F1E6 003F;	
    // (🇦) REGIONAL INDICATOR SYMBOL LETTER A	[0A1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1E6, 0x003F };
    uint32_t const ces[9] = { 0x0A1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_419)
{
    // 1F1E6 0061;	
    // (🇦) REGIONAL INDICATOR SYMBOL LETTER A	[0A1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1E6, 0x0061 };
    uint32_t const ces[9] = { 0x0A1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_420)
{
    // 1F1E6 0041;	
    // (🇦) REGIONAL INDICATOR SYMBOL LETTER A	[0A1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1E6, 0x0041 };
    uint32_t const ces[9] = { 0x0A1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_421)
{
    // 1F1E6 0062;	
    // (🇦) REGIONAL INDICATOR SYMBOL LETTER A	[0A1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1E6, 0x0062 };
    uint32_t const ces[9] = { 0x0A1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_422)
{
    // 1F1E7 0021;	
    // (🇧) REGIONAL INDICATOR SYMBOL LETTER B	[0A1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1E7, 0x0021 };
    uint32_t const ces[9] = { 0x0A1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_423)
{
    // 1F1E7 003F;	
    // (🇧) REGIONAL INDICATOR SYMBOL LETTER B	[0A1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1E7, 0x003F };
    uint32_t const ces[9] = { 0x0A1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_424)
{
    // 1F1E7 0061;	
    // (🇧) REGIONAL INDICATOR SYMBOL LETTER B	[0A1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1E7, 0x0061 };
    uint32_t const ces[9] = { 0x0A1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_425)
{
    // 1F1E7 0041;	
    // (🇧) REGIONAL INDICATOR SYMBOL LETTER B	[0A1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1E7, 0x0041 };
    uint32_t const ces[9] = { 0x0A1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_426)
{
    // 1F1E7 0062;	
    // (🇧) REGIONAL INDICATOR SYMBOL LETTER B	[0A1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1E7, 0x0062 };
    uint32_t const ces[9] = { 0x0A1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_427)
{
    // 1F1E8 0021;	
    // (🇨) REGIONAL INDICATOR SYMBOL LETTER C	[0A20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1E8, 0x0021 };
    uint32_t const ces[9] = { 0x0A20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_428)
{
    // 1F1E8 003F;	
    // (🇨) REGIONAL INDICATOR SYMBOL LETTER C	[0A20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1E8, 0x003F };
    uint32_t const ces[9] = { 0x0A20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_429)
{
    // 1F1E8 0061;	
    // (🇨) REGIONAL INDICATOR SYMBOL LETTER C	[0A20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1E8, 0x0061 };
    uint32_t const ces[9] = { 0x0A20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_430)
{
    // 1F1E8 0041;	
    // (🇨) REGIONAL INDICATOR SYMBOL LETTER C	[0A20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1E8, 0x0041 };
    uint32_t const ces[9] = { 0x0A20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_431)
{
    // 1F1E8 0062;	
    // (🇨) REGIONAL INDICATOR SYMBOL LETTER C	[0A20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1E8, 0x0062 };
    uint32_t const ces[9] = { 0x0A20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_432)
{
    // 1F1E9 0021;	
    // (🇩) REGIONAL INDICATOR SYMBOL LETTER D	[0A21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1E9, 0x0021 };
    uint32_t const ces[9] = { 0x0A21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_433)
{
    // 1F1E9 003F;	
    // (🇩) REGIONAL INDICATOR SYMBOL LETTER D	[0A21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1E9, 0x003F };
    uint32_t const ces[9] = { 0x0A21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_434)
{
    // 1F1E9 0061;	
    // (🇩) REGIONAL INDICATOR SYMBOL LETTER D	[0A21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1E9, 0x0061 };
    uint32_t const ces[9] = { 0x0A21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_435)
{
    // 1F1E9 0041;	
    // (🇩) REGIONAL INDICATOR SYMBOL LETTER D	[0A21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1E9, 0x0041 };
    uint32_t const ces[9] = { 0x0A21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_436)
{
    // 1F1E9 0062;	
    // (🇩) REGIONAL INDICATOR SYMBOL LETTER D	[0A21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1E9, 0x0062 };
    uint32_t const ces[9] = { 0x0A21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_437)
{
    // 1F1EA 0021;	
    // (🇪) REGIONAL INDICATOR SYMBOL LETTER E	[0A22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1EA, 0x0021 };
    uint32_t const ces[9] = { 0x0A22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_438)
{
    // 1F1EA 003F;	
    // (🇪) REGIONAL INDICATOR SYMBOL LETTER E	[0A22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1EA, 0x003F };
    uint32_t const ces[9] = { 0x0A22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_439)
{
    // 1F1EA 0061;	
    // (🇪) REGIONAL INDICATOR SYMBOL LETTER E	[0A22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1EA, 0x0061 };
    uint32_t const ces[9] = { 0x0A22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_440)
{
    // 1F1EA 0041;	
    // (🇪) REGIONAL INDICATOR SYMBOL LETTER E	[0A22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1EA, 0x0041 };
    uint32_t const ces[9] = { 0x0A22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_441)
{
    // 1F1EA 0062;	
    // (🇪) REGIONAL INDICATOR SYMBOL LETTER E	[0A22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1EA, 0x0062 };
    uint32_t const ces[9] = { 0x0A22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_442)
{
    // 1F1EB 0021;	
    // (🇫) REGIONAL INDICATOR SYMBOL LETTER F	[0A23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1EB, 0x0021 };
    uint32_t const ces[9] = { 0x0A23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_443)
{
    // 1F1EB 003F;	
    // (🇫) REGIONAL INDICATOR SYMBOL LETTER F	[0A23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1EB, 0x003F };
    uint32_t const ces[9] = { 0x0A23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_444)
{
    // 1F1EB 0061;	
    // (🇫) REGIONAL INDICATOR SYMBOL LETTER F	[0A23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1EB, 0x0061 };
    uint32_t const ces[9] = { 0x0A23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_445)
{
    // 1F1EB 0041;	
    // (🇫) REGIONAL INDICATOR SYMBOL LETTER F	[0A23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1EB, 0x0041 };
    uint32_t const ces[9] = { 0x0A23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_446)
{
    // 1F1EB 0062;	
    // (🇫) REGIONAL INDICATOR SYMBOL LETTER F	[0A23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1EB, 0x0062 };
    uint32_t const ces[9] = { 0x0A23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_447)
{
    // 1F1EC 0021;	
    // (🇬) REGIONAL INDICATOR SYMBOL LETTER G	[0A24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1EC, 0x0021 };
    uint32_t const ces[9] = { 0x0A24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_448)
{
    // 1F1EC 003F;	
    // (🇬) REGIONAL INDICATOR SYMBOL LETTER G	[0A24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1EC, 0x003F };
    uint32_t const ces[9] = { 0x0A24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_449)
{
    // 1F1EC 0061;	
    // (🇬) REGIONAL INDICATOR SYMBOL LETTER G	[0A24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1EC, 0x0061 };
    uint32_t const ces[9] = { 0x0A24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_450)
{
    // 1F1EC 0041;	
    // (🇬) REGIONAL INDICATOR SYMBOL LETTER G	[0A24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1EC, 0x0041 };
    uint32_t const ces[9] = { 0x0A24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_451)
{
    // 1F1EC 0062;	
    // (🇬) REGIONAL INDICATOR SYMBOL LETTER G	[0A24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1EC, 0x0062 };
    uint32_t const ces[9] = { 0x0A24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_452)
{
    // 1F1ED 0021;	
    // (🇭) REGIONAL INDICATOR SYMBOL LETTER H	[0A25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1ED, 0x0021 };
    uint32_t const ces[9] = { 0x0A25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_453)
{
    // 1F1ED 003F;	
    // (🇭) REGIONAL INDICATOR SYMBOL LETTER H	[0A25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1ED, 0x003F };
    uint32_t const ces[9] = { 0x0A25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_454)
{
    // 1F1ED 0061;	
    // (🇭) REGIONAL INDICATOR SYMBOL LETTER H	[0A25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1ED, 0x0061 };
    uint32_t const ces[9] = { 0x0A25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_455)
{
    // 1F1ED 0041;	
    // (🇭) REGIONAL INDICATOR SYMBOL LETTER H	[0A25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1ED, 0x0041 };
    uint32_t const ces[9] = { 0x0A25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_456)
{
    // 1F1ED 0062;	
    // (🇭) REGIONAL INDICATOR SYMBOL LETTER H	[0A25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1ED, 0x0062 };
    uint32_t const ces[9] = { 0x0A25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_457)
{
    // 1F1EE 0021;	
    // (🇮) REGIONAL INDICATOR SYMBOL LETTER I	[0A26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1EE, 0x0021 };
    uint32_t const ces[9] = { 0x0A26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_458)
{
    // 1F1EE 003F;	
    // (🇮) REGIONAL INDICATOR SYMBOL LETTER I	[0A26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1EE, 0x003F };
    uint32_t const ces[9] = { 0x0A26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_459)
{
    // 1F1EE 0061;	
    // (🇮) REGIONAL INDICATOR SYMBOL LETTER I	[0A26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1EE, 0x0061 };
    uint32_t const ces[9] = { 0x0A26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_460)
{
    // 1F1EE 0041;	
    // (🇮) REGIONAL INDICATOR SYMBOL LETTER I	[0A26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1EE, 0x0041 };
    uint32_t const ces[9] = { 0x0A26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_461)
{
    // 1F1EE 0062;	
    // (🇮) REGIONAL INDICATOR SYMBOL LETTER I	[0A26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1EE, 0x0062 };
    uint32_t const ces[9] = { 0x0A26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_462)
{
    // 1F1EF 0021;	
    // (🇯) REGIONAL INDICATOR SYMBOL LETTER J	[0A27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1EF, 0x0021 };
    uint32_t const ces[9] = { 0x0A27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_463)
{
    // 1F1EF 003F;	
    // (🇯) REGIONAL INDICATOR SYMBOL LETTER J	[0A27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1EF, 0x003F };
    uint32_t const ces[9] = { 0x0A27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_464)
{
    // 1F1EF 0061;	
    // (🇯) REGIONAL INDICATOR SYMBOL LETTER J	[0A27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1EF, 0x0061 };
    uint32_t const ces[9] = { 0x0A27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_465)
{
    // 1F1EF 0041;	
    // (🇯) REGIONAL INDICATOR SYMBOL LETTER J	[0A27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1EF, 0x0041 };
    uint32_t const ces[9] = { 0x0A27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_466)
{
    // 1F1EF 0062;	
    // (🇯) REGIONAL INDICATOR SYMBOL LETTER J	[0A27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1EF, 0x0062 };
    uint32_t const ces[9] = { 0x0A27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_467)
{
    // 1F1F0 0021;	
    // (🇰) REGIONAL INDICATOR SYMBOL LETTER K	[0A28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F0, 0x0021 };
    uint32_t const ces[9] = { 0x0A28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_468)
{
    // 1F1F0 003F;	
    // (🇰) REGIONAL INDICATOR SYMBOL LETTER K	[0A28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F0, 0x003F };
    uint32_t const ces[9] = { 0x0A28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_469)
{
    // 1F1F0 0061;	
    // (🇰) REGIONAL INDICATOR SYMBOL LETTER K	[0A28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F0, 0x0061 };
    uint32_t const ces[9] = { 0x0A28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_470)
{
    // 1F1F0 0041;	
    // (🇰) REGIONAL INDICATOR SYMBOL LETTER K	[0A28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1F0, 0x0041 };
    uint32_t const ces[9] = { 0x0A28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_471)
{
    // 1F1F0 0062;	
    // (🇰) REGIONAL INDICATOR SYMBOL LETTER K	[0A28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F0, 0x0062 };
    uint32_t const ces[9] = { 0x0A28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_472)
{
    // 1F1F1 0021;	
    // (🇱) REGIONAL INDICATOR SYMBOL LETTER L	[0A29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F1, 0x0021 };
    uint32_t const ces[9] = { 0x0A29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_473)
{
    // 1F1F1 003F;	
    // (🇱) REGIONAL INDICATOR SYMBOL LETTER L	[0A29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F1, 0x003F };
    uint32_t const ces[9] = { 0x0A29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_474)
{
    // 1F1F1 0061;	
    // (🇱) REGIONAL INDICATOR SYMBOL LETTER L	[0A29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F1, 0x0061 };
    uint32_t const ces[9] = { 0x0A29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_475)
{
    // 1F1F1 0041;	
    // (🇱) REGIONAL INDICATOR SYMBOL LETTER L	[0A29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1F1, 0x0041 };
    uint32_t const ces[9] = { 0x0A29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_476)
{
    // 1F1F1 0062;	
    // (🇱) REGIONAL INDICATOR SYMBOL LETTER L	[0A29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F1, 0x0062 };
    uint32_t const ces[9] = { 0x0A29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_477)
{
    // 1F1F2 0021;	
    // (🇲) REGIONAL INDICATOR SYMBOL LETTER M	[0A2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F2, 0x0021 };
    uint32_t const ces[9] = { 0x0A2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_478)
{
    // 1F1F2 003F;	
    // (🇲) REGIONAL INDICATOR SYMBOL LETTER M	[0A2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F2, 0x003F };
    uint32_t const ces[9] = { 0x0A2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_479)
{
    // 1F1F2 0061;	
    // (🇲) REGIONAL INDICATOR SYMBOL LETTER M	[0A2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F2, 0x0061 };
    uint32_t const ces[9] = { 0x0A2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_480)
{
    // 1F1F2 0041;	
    // (🇲) REGIONAL INDICATOR SYMBOL LETTER M	[0A2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1F2, 0x0041 };
    uint32_t const ces[9] = { 0x0A2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_481)
{
    // 1F1F2 0062;	
    // (🇲) REGIONAL INDICATOR SYMBOL LETTER M	[0A2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F2, 0x0062 };
    uint32_t const ces[9] = { 0x0A2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_482)
{
    // 1F1F3 0021;	
    // (🇳) REGIONAL INDICATOR SYMBOL LETTER N	[0A2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F3, 0x0021 };
    uint32_t const ces[9] = { 0x0A2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_483)
{
    // 1F1F3 003F;	
    // (🇳) REGIONAL INDICATOR SYMBOL LETTER N	[0A2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F3, 0x003F };
    uint32_t const ces[9] = { 0x0A2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_484)
{
    // 1F1F3 0061;	
    // (🇳) REGIONAL INDICATOR SYMBOL LETTER N	[0A2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F3, 0x0061 };
    uint32_t const ces[9] = { 0x0A2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_485)
{
    // 1F1F3 0041;	
    // (🇳) REGIONAL INDICATOR SYMBOL LETTER N	[0A2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1F3, 0x0041 };
    uint32_t const ces[9] = { 0x0A2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_486)
{
    // 1F1F3 0062;	
    // (🇳) REGIONAL INDICATOR SYMBOL LETTER N	[0A2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F3, 0x0062 };
    uint32_t const ces[9] = { 0x0A2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_487)
{
    // 1F1F4 0021;	
    // (🇴) REGIONAL INDICATOR SYMBOL LETTER O	[0A2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F4, 0x0021 };
    uint32_t const ces[9] = { 0x0A2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_488)
{
    // 1F1F4 003F;	
    // (🇴) REGIONAL INDICATOR SYMBOL LETTER O	[0A2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F4, 0x003F };
    uint32_t const ces[9] = { 0x0A2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_489)
{
    // 1F1F4 0061;	
    // (🇴) REGIONAL INDICATOR SYMBOL LETTER O	[0A2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F4, 0x0061 };
    uint32_t const ces[9] = { 0x0A2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_490)
{
    // 1F1F4 0041;	
    // (🇴) REGIONAL INDICATOR SYMBOL LETTER O	[0A2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1F4, 0x0041 };
    uint32_t const ces[9] = { 0x0A2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_491)
{
    // 1F1F4 0062;	
    // (🇴) REGIONAL INDICATOR SYMBOL LETTER O	[0A2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F4, 0x0062 };
    uint32_t const ces[9] = { 0x0A2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_492)
{
    // 1F1F5 0021;	
    // (🇵) REGIONAL INDICATOR SYMBOL LETTER P	[0A2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F5, 0x0021 };
    uint32_t const ces[9] = { 0x0A2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_493)
{
    // 1F1F5 003F;	
    // (🇵) REGIONAL INDICATOR SYMBOL LETTER P	[0A2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F5, 0x003F };
    uint32_t const ces[9] = { 0x0A2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_494)
{
    // 1F1F5 0061;	
    // (🇵) REGIONAL INDICATOR SYMBOL LETTER P	[0A2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F5, 0x0061 };
    uint32_t const ces[9] = { 0x0A2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_495)
{
    // 1F1F5 0041;	
    // (🇵) REGIONAL INDICATOR SYMBOL LETTER P	[0A2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F1F5, 0x0041 };
    uint32_t const ces[9] = { 0x0A2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_496)
{
    // 1F1F5 0062;	
    // (🇵) REGIONAL INDICATOR SYMBOL LETTER P	[0A2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F5, 0x0062 };
    uint32_t const ces[9] = { 0x0A2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_497)
{
    // 1F1F6 0021;	
    // (🇶) REGIONAL INDICATOR SYMBOL LETTER Q	[0A2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F6, 0x0021 };
    uint32_t const ces[9] = { 0x0A2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_498)
{
    // 1F1F6 003F;	
    // (🇶) REGIONAL INDICATOR SYMBOL LETTER Q	[0A2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F6, 0x003F };
    uint32_t const ces[9] = { 0x0A2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_032_499)
{
    // 1F1F6 0061;	
    // (🇶) REGIONAL INDICATOR SYMBOL LETTER Q	[0A2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F1F6, 0x0061 };
    uint32_t const ces[9] = { 0x0A2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

