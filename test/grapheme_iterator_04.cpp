// Warning! This file is autogenerated.
#include <boost/text/grapheme_iterator.hpp>

#include <gtest/gtest.h>

#include <algorithm>


TEST(grapheme, iterator_4)
{
    // ÷ 0300 ÷ 1160 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 × 0308 ÷ 1160 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 ÷ 11A8 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 × 0308 ÷ 11A8 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 ÷ AC00 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 × 0308 ÷ AC00 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 ÷ AC01 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 × 0308 ÷ AC01 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 ÷ 1F1E6 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 × 0308 ÷ 1F1E6 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 ÷ 261D ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) ÷ [999.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 × 0308 ÷ 261D ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0x0308, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0x0308, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0x0308, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0x0308, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 ÷ 1F3FB ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) ÷ [999.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 × 0308 ÷ 1F3FB ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0x0308, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0x0308, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0x0308, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0x0308, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 × 200D ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) × [9.0] ZERO WIDTH JOINER (ZWJ) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 × 0308 × 200D ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) × [9.0] COMBINING DIAERESIS (Extend) × [9.0] ZERO WIDTH JOINER (ZWJ) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 ÷ 2640 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) ÷ [999.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 × 0308 ÷ 2640 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0x0308, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0x0308, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0x0308, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0x0308, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 ÷ 1F466 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) ÷ [999.0] BOY (EBG) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 × 0308 ÷ 1F466 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] BOY (EBG) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0x0308, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0x0308, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0x0308, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0x0308, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 ÷ 0378 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 × 0308 ÷ 0378 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 ÷ D800 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0300 × 0308 ÷ D800 ÷	
    // ÷ [0.2] COMBINING GRAVE ACCENT (Extend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0300, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0300, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0300, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0300, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × 0020 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.2] SPACE (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × 0308 ÷ 0020 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] SPACE (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 ÷ 000D ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × 0308 ÷ 000D ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 ÷ 000A ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × 0308 ÷ 000A ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 ÷ 0001 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × 0308 ÷ 0001 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x0308, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x0308, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x0308, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x0308, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × 0300 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.0] COMBINING GRAVE ACCENT (Extend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × 0308 × 0300 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.0] COMBINING DIAERESIS (Extend) × [9.0] COMBINING GRAVE ACCENT (Extend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × 0600 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.2] ARABIC NUMBER SIGN (Prepend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × 0308 ÷ 0600 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] ARABIC NUMBER SIGN (Prepend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x0308, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x0308, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x0308, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x0308, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × 0903 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × 0308 × 0903 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.0] COMBINING DIAERESIS (Extend) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × 1100 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.2] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × 0308 ÷ 1100 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × 1160 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.2] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × 0308 ÷ 1160 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × 11A8 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.2] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × 0308 ÷ 11A8 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × AC00 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.2] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × 0308 ÷ AC00 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × AC01 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.2] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × 0308 ÷ AC01 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × 1F1E6 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

    // ÷ 0600 × 0308 ÷ 1F1E6 ÷	
    // ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0600, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
    {
        // reverse
        uint32_t const cps[] = { 0x0600, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // forth and back
        uint32_t const cps[] = { 0x0600, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
    {
        // back and forth
        uint32_t const cps[] = { 0x0600, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }

}
