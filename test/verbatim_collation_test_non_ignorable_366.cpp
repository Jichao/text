// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_366_000)
{
    // 432B 003F;	
    // (䌫) CJK UNIFIED IDEOGRAPH-432B	[FB80 C32B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC32B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_001)
{
    // 432B 0061;	
    // (䌫) CJK UNIFIED IDEOGRAPH-432B	[FB80 C32B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC32B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_002)
{
    // 432B 0041;	
    // (䌫) CJK UNIFIED IDEOGRAPH-432B	[FB80 C32B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x432B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC32B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_003)
{
    // 432B 0062;	
    // (䌫) CJK UNIFIED IDEOGRAPH-432B	[FB80 C32B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC32B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_004)
{
    // 432C 0021;	
    // (䌬) CJK UNIFIED IDEOGRAPH-432C	[FB80 C32C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC32C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_005)
{
    // 432C 003F;	
    // (䌬) CJK UNIFIED IDEOGRAPH-432C	[FB80 C32C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC32C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_006)
{
    // 432C 0061;	
    // (䌬) CJK UNIFIED IDEOGRAPH-432C	[FB80 C32C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC32C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_007)
{
    // 432C 0041;	
    // (䌬) CJK UNIFIED IDEOGRAPH-432C	[FB80 C32C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x432C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC32C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_008)
{
    // 432C 0062;	
    // (䌬) CJK UNIFIED IDEOGRAPH-432C	[FB80 C32C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC32C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_009)
{
    // 432D 0021;	
    // (䌭) CJK UNIFIED IDEOGRAPH-432D	[FB80 C32D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC32D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_010)
{
    // 432D 003F;	
    // (䌭) CJK UNIFIED IDEOGRAPH-432D	[FB80 C32D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC32D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_011)
{
    // 432D 0061;	
    // (䌭) CJK UNIFIED IDEOGRAPH-432D	[FB80 C32D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC32D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_012)
{
    // 432D 0041;	
    // (䌭) CJK UNIFIED IDEOGRAPH-432D	[FB80 C32D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x432D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC32D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_013)
{
    // 432D 0062;	
    // (䌭) CJK UNIFIED IDEOGRAPH-432D	[FB80 C32D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC32D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_014)
{
    // 432E 0021;	
    // (䌮) CJK UNIFIED IDEOGRAPH-432E	[FB80 C32E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC32E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_015)
{
    // 432E 003F;	
    // (䌮) CJK UNIFIED IDEOGRAPH-432E	[FB80 C32E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC32E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_016)
{
    // 432E 0061;	
    // (䌮) CJK UNIFIED IDEOGRAPH-432E	[FB80 C32E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC32E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_017)
{
    // 432E 0041;	
    // (䌮) CJK UNIFIED IDEOGRAPH-432E	[FB80 C32E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x432E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC32E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_018)
{
    // 432E 0062;	
    // (䌮) CJK UNIFIED IDEOGRAPH-432E	[FB80 C32E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC32E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_019)
{
    // 432F 0021;	
    // (䌯) CJK UNIFIED IDEOGRAPH-432F	[FB80 C32F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC32F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_020)
{
    // 432F 003F;	
    // (䌯) CJK UNIFIED IDEOGRAPH-432F	[FB80 C32F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC32F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_021)
{
    // 432F 0061;	
    // (䌯) CJK UNIFIED IDEOGRAPH-432F	[FB80 C32F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC32F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_022)
{
    // 432F 0041;	
    // (䌯) CJK UNIFIED IDEOGRAPH-432F	[FB80 C32F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x432F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC32F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_023)
{
    // 432F 0062;	
    // (䌯) CJK UNIFIED IDEOGRAPH-432F	[FB80 C32F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x432F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC32F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_024)
{
    // 4330 0021;	
    // (䌰) CJK UNIFIED IDEOGRAPH-4330	[FB80 C330 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4330, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC330, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_025)
{
    // 4330 003F;	
    // (䌰) CJK UNIFIED IDEOGRAPH-4330	[FB80 C330 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4330, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC330, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_026)
{
    // 4330 0061;	
    // (䌰) CJK UNIFIED IDEOGRAPH-4330	[FB80 C330 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4330, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC330, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_027)
{
    // 4330 0041;	
    // (䌰) CJK UNIFIED IDEOGRAPH-4330	[FB80 C330 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4330, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC330, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_028)
{
    // 4330 0062;	
    // (䌰) CJK UNIFIED IDEOGRAPH-4330	[FB80 C330 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4330, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC330, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_029)
{
    // 4331 0021;	
    // (䌱) CJK UNIFIED IDEOGRAPH-4331	[FB80 C331 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4331, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC331, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_030)
{
    // 4331 003F;	
    // (䌱) CJK UNIFIED IDEOGRAPH-4331	[FB80 C331 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4331, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC331, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_031)
{
    // 4331 0061;	
    // (䌱) CJK UNIFIED IDEOGRAPH-4331	[FB80 C331 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4331, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC331, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_032)
{
    // 4331 0041;	
    // (䌱) CJK UNIFIED IDEOGRAPH-4331	[FB80 C331 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4331, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC331, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_033)
{
    // 4331 0062;	
    // (䌱) CJK UNIFIED IDEOGRAPH-4331	[FB80 C331 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4331, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC331, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_034)
{
    // 4332 0021;	
    // (䌲) CJK UNIFIED IDEOGRAPH-4332	[FB80 C332 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4332, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC332, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_035)
{
    // 4332 003F;	
    // (䌲) CJK UNIFIED IDEOGRAPH-4332	[FB80 C332 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4332, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC332, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_036)
{
    // 4332 0061;	
    // (䌲) CJK UNIFIED IDEOGRAPH-4332	[FB80 C332 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4332, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC332, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_037)
{
    // 4332 0041;	
    // (䌲) CJK UNIFIED IDEOGRAPH-4332	[FB80 C332 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4332, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC332, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_038)
{
    // 4332 0062;	
    // (䌲) CJK UNIFIED IDEOGRAPH-4332	[FB80 C332 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4332, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC332, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_039)
{
    // 4333 0021;	
    // (䌳) CJK UNIFIED IDEOGRAPH-4333	[FB80 C333 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4333, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC333, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_040)
{
    // 4333 003F;	
    // (䌳) CJK UNIFIED IDEOGRAPH-4333	[FB80 C333 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4333, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC333, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_041)
{
    // 4333 0061;	
    // (䌳) CJK UNIFIED IDEOGRAPH-4333	[FB80 C333 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4333, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC333, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_042)
{
    // 4333 0041;	
    // (䌳) CJK UNIFIED IDEOGRAPH-4333	[FB80 C333 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4333, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC333, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_043)
{
    // 4333 0062;	
    // (䌳) CJK UNIFIED IDEOGRAPH-4333	[FB80 C333 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4333, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC333, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_044)
{
    // 4334 0021;	
    // (䌴) CJK UNIFIED IDEOGRAPH-4334	[FB80 C334 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4334, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC334, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_045)
{
    // 2F971 0021;	
    // (䌴) CJK COMPATIBILITY IDEOGRAPH-2F971	[FB80 C334 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F971, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC334, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_046)
{
    // 4334 003F;	
    // (䌴) CJK UNIFIED IDEOGRAPH-4334	[FB80 C334 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4334, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC334, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_047)
{
    // 2F971 003F;	
    // (䌴) CJK COMPATIBILITY IDEOGRAPH-2F971	[FB80 C334 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F971, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC334, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_048)
{
    // 4334 0061;	
    // (䌴) CJK UNIFIED IDEOGRAPH-4334	[FB80 C334 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4334, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC334, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_049)
{
    // 2F971 0061;	
    // (䌴) CJK COMPATIBILITY IDEOGRAPH-2F971	[FB80 C334 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F971, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC334, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_050)
{
    // 4334 0041;	
    // (䌴) CJK UNIFIED IDEOGRAPH-4334	[FB80 C334 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4334, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC334, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_051)
{
    // 2F971 0041;	
    // (䌴) CJK COMPATIBILITY IDEOGRAPH-2F971	[FB80 C334 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F971, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC334, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_052)
{
    // 4334 0062;	
    // (䌴) CJK UNIFIED IDEOGRAPH-4334	[FB80 C334 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4334, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC334, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_053)
{
    // 2F971 0062;	
    // (䌴) CJK COMPATIBILITY IDEOGRAPH-2F971	[FB80 C334 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F971, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC334, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_054)
{
    // 4335 0021;	
    // (䌵) CJK UNIFIED IDEOGRAPH-4335	[FB80 C335 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4335, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC335, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_055)
{
    // 4335 003F;	
    // (䌵) CJK UNIFIED IDEOGRAPH-4335	[FB80 C335 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4335, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC335, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_056)
{
    // 4335 0061;	
    // (䌵) CJK UNIFIED IDEOGRAPH-4335	[FB80 C335 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4335, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC335, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_057)
{
    // 4335 0041;	
    // (䌵) CJK UNIFIED IDEOGRAPH-4335	[FB80 C335 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4335, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC335, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_058)
{
    // 4335 0062;	
    // (䌵) CJK UNIFIED IDEOGRAPH-4335	[FB80 C335 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4335, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC335, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_059)
{
    // 4336 0021;	
    // (䌶) CJK UNIFIED IDEOGRAPH-4336	[FB80 C336 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4336, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC336, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_060)
{
    // 4336 003F;	
    // (䌶) CJK UNIFIED IDEOGRAPH-4336	[FB80 C336 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4336, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC336, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_061)
{
    // 4336 0061;	
    // (䌶) CJK UNIFIED IDEOGRAPH-4336	[FB80 C336 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4336, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC336, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_062)
{
    // 4336 0041;	
    // (䌶) CJK UNIFIED IDEOGRAPH-4336	[FB80 C336 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4336, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC336, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_063)
{
    // 4336 0062;	
    // (䌶) CJK UNIFIED IDEOGRAPH-4336	[FB80 C336 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4336, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC336, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_064)
{
    // 4337 0021;	
    // (䌷) CJK UNIFIED IDEOGRAPH-4337	[FB80 C337 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4337, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC337, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_065)
{
    // 4337 003F;	
    // (䌷) CJK UNIFIED IDEOGRAPH-4337	[FB80 C337 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4337, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC337, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_066)
{
    // 4337 0061;	
    // (䌷) CJK UNIFIED IDEOGRAPH-4337	[FB80 C337 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4337, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC337, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_067)
{
    // 4337 0041;	
    // (䌷) CJK UNIFIED IDEOGRAPH-4337	[FB80 C337 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4337, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC337, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_068)
{
    // 4337 0062;	
    // (䌷) CJK UNIFIED IDEOGRAPH-4337	[FB80 C337 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4337, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC337, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_069)
{
    // 4338 0021;	
    // (䌸) CJK UNIFIED IDEOGRAPH-4338	[FB80 C338 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4338, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC338, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_070)
{
    // 4338 003F;	
    // (䌸) CJK UNIFIED IDEOGRAPH-4338	[FB80 C338 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4338, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC338, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_071)
{
    // 4338 0061;	
    // (䌸) CJK UNIFIED IDEOGRAPH-4338	[FB80 C338 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4338, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC338, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_072)
{
    // 4338 0041;	
    // (䌸) CJK UNIFIED IDEOGRAPH-4338	[FB80 C338 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4338, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC338, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_073)
{
    // 4338 0062;	
    // (䌸) CJK UNIFIED IDEOGRAPH-4338	[FB80 C338 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4338, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC338, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_074)
{
    // 4339 0021;	
    // (䌹) CJK UNIFIED IDEOGRAPH-4339	[FB80 C339 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4339, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC339, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_075)
{
    // 4339 003F;	
    // (䌹) CJK UNIFIED IDEOGRAPH-4339	[FB80 C339 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4339, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC339, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_076)
{
    // 4339 0061;	
    // (䌹) CJK UNIFIED IDEOGRAPH-4339	[FB80 C339 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4339, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC339, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_077)
{
    // 4339 0041;	
    // (䌹) CJK UNIFIED IDEOGRAPH-4339	[FB80 C339 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4339, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC339, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_078)
{
    // 4339 0062;	
    // (䌹) CJK UNIFIED IDEOGRAPH-4339	[FB80 C339 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4339, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC339, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_079)
{
    // 433A 0021;	
    // (䌺) CJK UNIFIED IDEOGRAPH-433A	[FB80 C33A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC33A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_080)
{
    // 433A 003F;	
    // (䌺) CJK UNIFIED IDEOGRAPH-433A	[FB80 C33A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC33A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_081)
{
    // 433A 0061;	
    // (䌺) CJK UNIFIED IDEOGRAPH-433A	[FB80 C33A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC33A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_082)
{
    // 433A 0041;	
    // (䌺) CJK UNIFIED IDEOGRAPH-433A	[FB80 C33A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x433A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC33A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_083)
{
    // 433A 0062;	
    // (䌺) CJK UNIFIED IDEOGRAPH-433A	[FB80 C33A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC33A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_084)
{
    // 433B 0021;	
    // (䌻) CJK UNIFIED IDEOGRAPH-433B	[FB80 C33B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC33B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_085)
{
    // 433B 003F;	
    // (䌻) CJK UNIFIED IDEOGRAPH-433B	[FB80 C33B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC33B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_086)
{
    // 433B 0061;	
    // (䌻) CJK UNIFIED IDEOGRAPH-433B	[FB80 C33B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC33B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_087)
{
    // 433B 0041;	
    // (䌻) CJK UNIFIED IDEOGRAPH-433B	[FB80 C33B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x433B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC33B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_088)
{
    // 433B 0062;	
    // (䌻) CJK UNIFIED IDEOGRAPH-433B	[FB80 C33B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC33B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_089)
{
    // 433C 0021;	
    // (䌼) CJK UNIFIED IDEOGRAPH-433C	[FB80 C33C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC33C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_090)
{
    // 433C 003F;	
    // (䌼) CJK UNIFIED IDEOGRAPH-433C	[FB80 C33C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC33C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_091)
{
    // 433C 0061;	
    // (䌼) CJK UNIFIED IDEOGRAPH-433C	[FB80 C33C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC33C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_092)
{
    // 433C 0041;	
    // (䌼) CJK UNIFIED IDEOGRAPH-433C	[FB80 C33C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x433C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC33C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_093)
{
    // 433C 0062;	
    // (䌼) CJK UNIFIED IDEOGRAPH-433C	[FB80 C33C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC33C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_094)
{
    // 433D 0021;	
    // (䌽) CJK UNIFIED IDEOGRAPH-433D	[FB80 C33D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC33D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_095)
{
    // 433D 003F;	
    // (䌽) CJK UNIFIED IDEOGRAPH-433D	[FB80 C33D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC33D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_096)
{
    // 433D 0061;	
    // (䌽) CJK UNIFIED IDEOGRAPH-433D	[FB80 C33D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC33D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_097)
{
    // 433D 0041;	
    // (䌽) CJK UNIFIED IDEOGRAPH-433D	[FB80 C33D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x433D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC33D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_098)
{
    // 433D 0062;	
    // (䌽) CJK UNIFIED IDEOGRAPH-433D	[FB80 C33D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC33D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_099)
{
    // 433E 0021;	
    // (䌾) CJK UNIFIED IDEOGRAPH-433E	[FB80 C33E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC33E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_100)
{
    // 433E 003F;	
    // (䌾) CJK UNIFIED IDEOGRAPH-433E	[FB80 C33E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC33E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_101)
{
    // 433E 0061;	
    // (䌾) CJK UNIFIED IDEOGRAPH-433E	[FB80 C33E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC33E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_102)
{
    // 433E 0041;	
    // (䌾) CJK UNIFIED IDEOGRAPH-433E	[FB80 C33E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x433E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC33E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_103)
{
    // 433E 0062;	
    // (䌾) CJK UNIFIED IDEOGRAPH-433E	[FB80 C33E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC33E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_104)
{
    // 433F 0021;	
    // (䌿) CJK UNIFIED IDEOGRAPH-433F	[FB80 C33F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC33F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_105)
{
    // 433F 003F;	
    // (䌿) CJK UNIFIED IDEOGRAPH-433F	[FB80 C33F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC33F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_106)
{
    // 433F 0061;	
    // (䌿) CJK UNIFIED IDEOGRAPH-433F	[FB80 C33F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC33F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_107)
{
    // 433F 0041;	
    // (䌿) CJK UNIFIED IDEOGRAPH-433F	[FB80 C33F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x433F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC33F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_108)
{
    // 433F 0062;	
    // (䌿) CJK UNIFIED IDEOGRAPH-433F	[FB80 C33F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x433F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC33F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_109)
{
    // 4340 0021;	
    // (䍀) CJK UNIFIED IDEOGRAPH-4340	[FB80 C340 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4340, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC340, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_110)
{
    // 4340 003F;	
    // (䍀) CJK UNIFIED IDEOGRAPH-4340	[FB80 C340 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4340, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC340, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_111)
{
    // 4340 0061;	
    // (䍀) CJK UNIFIED IDEOGRAPH-4340	[FB80 C340 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4340, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC340, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_112)
{
    // 4340 0041;	
    // (䍀) CJK UNIFIED IDEOGRAPH-4340	[FB80 C340 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4340, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC340, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_113)
{
    // 4340 0062;	
    // (䍀) CJK UNIFIED IDEOGRAPH-4340	[FB80 C340 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4340, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC340, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_114)
{
    // 4341 0021;	
    // (䍁) CJK UNIFIED IDEOGRAPH-4341	[FB80 C341 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4341, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC341, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_115)
{
    // 4341 003F;	
    // (䍁) CJK UNIFIED IDEOGRAPH-4341	[FB80 C341 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4341, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC341, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_116)
{
    // 4341 0061;	
    // (䍁) CJK UNIFIED IDEOGRAPH-4341	[FB80 C341 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4341, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_117)
{
    // 4341 0041;	
    // (䍁) CJK UNIFIED IDEOGRAPH-4341	[FB80 C341 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4341, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_118)
{
    // 4341 0062;	
    // (䍁) CJK UNIFIED IDEOGRAPH-4341	[FB80 C341 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4341, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC341, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_119)
{
    // 4342 0021;	
    // (䍂) CJK UNIFIED IDEOGRAPH-4342	[FB80 C342 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4342, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC342, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_120)
{
    // 4342 003F;	
    // (䍂) CJK UNIFIED IDEOGRAPH-4342	[FB80 C342 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4342, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC342, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_121)
{
    // 4342 0061;	
    // (䍂) CJK UNIFIED IDEOGRAPH-4342	[FB80 C342 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4342, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC342, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_122)
{
    // 4342 0041;	
    // (䍂) CJK UNIFIED IDEOGRAPH-4342	[FB80 C342 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4342, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC342, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_123)
{
    // 4342 0062;	
    // (䍂) CJK UNIFIED IDEOGRAPH-4342	[FB80 C342 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4342, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC342, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_124)
{
    // 4343 0021;	
    // (䍃) CJK UNIFIED IDEOGRAPH-4343	[FB80 C343 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4343, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC343, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_125)
{
    // 4343 003F;	
    // (䍃) CJK UNIFIED IDEOGRAPH-4343	[FB80 C343 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4343, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC343, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_126)
{
    // 4343 0061;	
    // (䍃) CJK UNIFIED IDEOGRAPH-4343	[FB80 C343 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4343, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC343, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_127)
{
    // 4343 0041;	
    // (䍃) CJK UNIFIED IDEOGRAPH-4343	[FB80 C343 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4343, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC343, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_128)
{
    // 4343 0062;	
    // (䍃) CJK UNIFIED IDEOGRAPH-4343	[FB80 C343 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4343, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC343, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_129)
{
    // 4344 0021;	
    // (䍄) CJK UNIFIED IDEOGRAPH-4344	[FB80 C344 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4344, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC344, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_130)
{
    // 4344 003F;	
    // (䍄) CJK UNIFIED IDEOGRAPH-4344	[FB80 C344 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4344, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC344, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_131)
{
    // 4344 0061;	
    // (䍄) CJK UNIFIED IDEOGRAPH-4344	[FB80 C344 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4344, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC344, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_132)
{
    // 4344 0041;	
    // (䍄) CJK UNIFIED IDEOGRAPH-4344	[FB80 C344 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4344, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC344, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_133)
{
    // 4344 0062;	
    // (䍄) CJK UNIFIED IDEOGRAPH-4344	[FB80 C344 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4344, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC344, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_134)
{
    // 4345 0021;	
    // (䍅) CJK UNIFIED IDEOGRAPH-4345	[FB80 C345 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4345, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC345, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_135)
{
    // 4345 003F;	
    // (䍅) CJK UNIFIED IDEOGRAPH-4345	[FB80 C345 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4345, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC345, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_136)
{
    // 4345 0061;	
    // (䍅) CJK UNIFIED IDEOGRAPH-4345	[FB80 C345 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4345, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC345, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_137)
{
    // 4345 0041;	
    // (䍅) CJK UNIFIED IDEOGRAPH-4345	[FB80 C345 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4345, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC345, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_138)
{
    // 4345 0062;	
    // (䍅) CJK UNIFIED IDEOGRAPH-4345	[FB80 C345 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4345, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC345, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_139)
{
    // 4346 0021;	
    // (䍆) CJK UNIFIED IDEOGRAPH-4346	[FB80 C346 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4346, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC346, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_140)
{
    // 4346 003F;	
    // (䍆) CJK UNIFIED IDEOGRAPH-4346	[FB80 C346 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4346, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC346, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_141)
{
    // 4346 0061;	
    // (䍆) CJK UNIFIED IDEOGRAPH-4346	[FB80 C346 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4346, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC346, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_142)
{
    // 4346 0041;	
    // (䍆) CJK UNIFIED IDEOGRAPH-4346	[FB80 C346 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4346, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC346, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_143)
{
    // 4346 0062;	
    // (䍆) CJK UNIFIED IDEOGRAPH-4346	[FB80 C346 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4346, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC346, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_144)
{
    // 4347 0021;	
    // (䍇) CJK UNIFIED IDEOGRAPH-4347	[FB80 C347 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4347, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC347, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_145)
{
    // 4347 003F;	
    // (䍇) CJK UNIFIED IDEOGRAPH-4347	[FB80 C347 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4347, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC347, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_146)
{
    // 4347 0061;	
    // (䍇) CJK UNIFIED IDEOGRAPH-4347	[FB80 C347 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4347, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC347, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_147)
{
    // 4347 0041;	
    // (䍇) CJK UNIFIED IDEOGRAPH-4347	[FB80 C347 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4347, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC347, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_148)
{
    // 4347 0062;	
    // (䍇) CJK UNIFIED IDEOGRAPH-4347	[FB80 C347 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4347, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC347, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_149)
{
    // 4348 0021;	
    // (䍈) CJK UNIFIED IDEOGRAPH-4348	[FB80 C348 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4348, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC348, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_150)
{
    // 4348 003F;	
    // (䍈) CJK UNIFIED IDEOGRAPH-4348	[FB80 C348 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4348, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC348, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_151)
{
    // 4348 0061;	
    // (䍈) CJK UNIFIED IDEOGRAPH-4348	[FB80 C348 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4348, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC348, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_152)
{
    // 4348 0041;	
    // (䍈) CJK UNIFIED IDEOGRAPH-4348	[FB80 C348 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4348, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC348, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_153)
{
    // 4348 0062;	
    // (䍈) CJK UNIFIED IDEOGRAPH-4348	[FB80 C348 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4348, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC348, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_154)
{
    // 4349 0021;	
    // (䍉) CJK UNIFIED IDEOGRAPH-4349	[FB80 C349 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4349, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC349, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_155)
{
    // 4349 003F;	
    // (䍉) CJK UNIFIED IDEOGRAPH-4349	[FB80 C349 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4349, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC349, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_156)
{
    // 4349 0061;	
    // (䍉) CJK UNIFIED IDEOGRAPH-4349	[FB80 C349 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4349, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC349, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_157)
{
    // 4349 0041;	
    // (䍉) CJK UNIFIED IDEOGRAPH-4349	[FB80 C349 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4349, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC349, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_158)
{
    // 4349 0062;	
    // (䍉) CJK UNIFIED IDEOGRAPH-4349	[FB80 C349 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4349, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC349, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_159)
{
    // 434A 0021;	
    // (䍊) CJK UNIFIED IDEOGRAPH-434A	[FB80 C34A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC34A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_160)
{
    // 434A 003F;	
    // (䍊) CJK UNIFIED IDEOGRAPH-434A	[FB80 C34A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC34A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_161)
{
    // 434A 0061;	
    // (䍊) CJK UNIFIED IDEOGRAPH-434A	[FB80 C34A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC34A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_162)
{
    // 434A 0041;	
    // (䍊) CJK UNIFIED IDEOGRAPH-434A	[FB80 C34A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x434A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC34A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_163)
{
    // 434A 0062;	
    // (䍊) CJK UNIFIED IDEOGRAPH-434A	[FB80 C34A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC34A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_164)
{
    // 434B 0021;	
    // (䍋) CJK UNIFIED IDEOGRAPH-434B	[FB80 C34B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC34B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_165)
{
    // 434B 003F;	
    // (䍋) CJK UNIFIED IDEOGRAPH-434B	[FB80 C34B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC34B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_166)
{
    // 434B 0061;	
    // (䍋) CJK UNIFIED IDEOGRAPH-434B	[FB80 C34B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC34B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_167)
{
    // 434B 0041;	
    // (䍋) CJK UNIFIED IDEOGRAPH-434B	[FB80 C34B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x434B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC34B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_168)
{
    // 434B 0062;	
    // (䍋) CJK UNIFIED IDEOGRAPH-434B	[FB80 C34B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC34B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_169)
{
    // 434C 0021;	
    // (䍌) CJK UNIFIED IDEOGRAPH-434C	[FB80 C34C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC34C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_170)
{
    // 434C 003F;	
    // (䍌) CJK UNIFIED IDEOGRAPH-434C	[FB80 C34C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC34C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_171)
{
    // 434C 0061;	
    // (䍌) CJK UNIFIED IDEOGRAPH-434C	[FB80 C34C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC34C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_172)
{
    // 434C 0041;	
    // (䍌) CJK UNIFIED IDEOGRAPH-434C	[FB80 C34C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x434C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC34C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_173)
{
    // 434C 0062;	
    // (䍌) CJK UNIFIED IDEOGRAPH-434C	[FB80 C34C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC34C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_174)
{
    // 434D 0021;	
    // (䍍) CJK UNIFIED IDEOGRAPH-434D	[FB80 C34D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC34D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_175)
{
    // 434D 003F;	
    // (䍍) CJK UNIFIED IDEOGRAPH-434D	[FB80 C34D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC34D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_176)
{
    // 434D 0061;	
    // (䍍) CJK UNIFIED IDEOGRAPH-434D	[FB80 C34D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC34D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_177)
{
    // 434D 0041;	
    // (䍍) CJK UNIFIED IDEOGRAPH-434D	[FB80 C34D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x434D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC34D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_178)
{
    // 434D 0062;	
    // (䍍) CJK UNIFIED IDEOGRAPH-434D	[FB80 C34D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC34D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_179)
{
    // 434E 0021;	
    // (䍎) CJK UNIFIED IDEOGRAPH-434E	[FB80 C34E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC34E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_180)
{
    // 434E 003F;	
    // (䍎) CJK UNIFIED IDEOGRAPH-434E	[FB80 C34E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC34E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_181)
{
    // 434E 0061;	
    // (䍎) CJK UNIFIED IDEOGRAPH-434E	[FB80 C34E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC34E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_182)
{
    // 434E 0041;	
    // (䍎) CJK UNIFIED IDEOGRAPH-434E	[FB80 C34E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x434E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC34E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_183)
{
    // 434E 0062;	
    // (䍎) CJK UNIFIED IDEOGRAPH-434E	[FB80 C34E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC34E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_184)
{
    // 434F 0021;	
    // (䍏) CJK UNIFIED IDEOGRAPH-434F	[FB80 C34F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC34F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_185)
{
    // 434F 003F;	
    // (䍏) CJK UNIFIED IDEOGRAPH-434F	[FB80 C34F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC34F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_186)
{
    // 434F 0061;	
    // (䍏) CJK UNIFIED IDEOGRAPH-434F	[FB80 C34F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC34F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_187)
{
    // 434F 0041;	
    // (䍏) CJK UNIFIED IDEOGRAPH-434F	[FB80 C34F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x434F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC34F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_188)
{
    // 434F 0062;	
    // (䍏) CJK UNIFIED IDEOGRAPH-434F	[FB80 C34F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x434F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC34F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_189)
{
    // 4350 0021;	
    // (䍐) CJK UNIFIED IDEOGRAPH-4350	[FB80 C350 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4350, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC350, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_190)
{
    // 4350 003F;	
    // (䍐) CJK UNIFIED IDEOGRAPH-4350	[FB80 C350 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4350, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC350, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_191)
{
    // 4350 0061;	
    // (䍐) CJK UNIFIED IDEOGRAPH-4350	[FB80 C350 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4350, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC350, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_192)
{
    // 4350 0041;	
    // (䍐) CJK UNIFIED IDEOGRAPH-4350	[FB80 C350 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4350, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC350, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_193)
{
    // 4350 0062;	
    // (䍐) CJK UNIFIED IDEOGRAPH-4350	[FB80 C350 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4350, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC350, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_194)
{
    // 4351 0021;	
    // (䍑) CJK UNIFIED IDEOGRAPH-4351	[FB80 C351 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4351, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC351, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_195)
{
    // 4351 003F;	
    // (䍑) CJK UNIFIED IDEOGRAPH-4351	[FB80 C351 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4351, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC351, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_196)
{
    // 4351 0061;	
    // (䍑) CJK UNIFIED IDEOGRAPH-4351	[FB80 C351 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4351, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC351, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_197)
{
    // 4351 0041;	
    // (䍑) CJK UNIFIED IDEOGRAPH-4351	[FB80 C351 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4351, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC351, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_198)
{
    // 4351 0062;	
    // (䍑) CJK UNIFIED IDEOGRAPH-4351	[FB80 C351 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4351, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC351, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_199)
{
    // 4352 0021;	
    // (䍒) CJK UNIFIED IDEOGRAPH-4352	[FB80 C352 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4352, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC352, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_200)
{
    // 4352 003F;	
    // (䍒) CJK UNIFIED IDEOGRAPH-4352	[FB80 C352 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4352, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC352, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_201)
{
    // 4352 0061;	
    // (䍒) CJK UNIFIED IDEOGRAPH-4352	[FB80 C352 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4352, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC352, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_202)
{
    // 4352 0041;	
    // (䍒) CJK UNIFIED IDEOGRAPH-4352	[FB80 C352 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4352, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC352, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_203)
{
    // 4352 0062;	
    // (䍒) CJK UNIFIED IDEOGRAPH-4352	[FB80 C352 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4352, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC352, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_204)
{
    // 4353 0021;	
    // (䍓) CJK UNIFIED IDEOGRAPH-4353	[FB80 C353 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4353, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC353, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_205)
{
    // 4353 003F;	
    // (䍓) CJK UNIFIED IDEOGRAPH-4353	[FB80 C353 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4353, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC353, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_206)
{
    // 4353 0061;	
    // (䍓) CJK UNIFIED IDEOGRAPH-4353	[FB80 C353 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4353, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC353, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_207)
{
    // 4353 0041;	
    // (䍓) CJK UNIFIED IDEOGRAPH-4353	[FB80 C353 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4353, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC353, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_208)
{
    // 4353 0062;	
    // (䍓) CJK UNIFIED IDEOGRAPH-4353	[FB80 C353 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4353, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC353, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_209)
{
    // 4354 0021;	
    // (䍔) CJK UNIFIED IDEOGRAPH-4354	[FB80 C354 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4354, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC354, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_210)
{
    // 4354 003F;	
    // (䍔) CJK UNIFIED IDEOGRAPH-4354	[FB80 C354 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4354, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC354, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_211)
{
    // 4354 0061;	
    // (䍔) CJK UNIFIED IDEOGRAPH-4354	[FB80 C354 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4354, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC354, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_212)
{
    // 4354 0041;	
    // (䍔) CJK UNIFIED IDEOGRAPH-4354	[FB80 C354 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4354, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC354, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_213)
{
    // 4354 0062;	
    // (䍔) CJK UNIFIED IDEOGRAPH-4354	[FB80 C354 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4354, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC354, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_214)
{
    // 4355 0021;	
    // (䍕) CJK UNIFIED IDEOGRAPH-4355	[FB80 C355 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4355, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC355, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_215)
{
    // 4355 003F;	
    // (䍕) CJK UNIFIED IDEOGRAPH-4355	[FB80 C355 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4355, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC355, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_216)
{
    // 4355 0061;	
    // (䍕) CJK UNIFIED IDEOGRAPH-4355	[FB80 C355 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4355, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC355, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_217)
{
    // 4355 0041;	
    // (䍕) CJK UNIFIED IDEOGRAPH-4355	[FB80 C355 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4355, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC355, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_218)
{
    // 4355 0062;	
    // (䍕) CJK UNIFIED IDEOGRAPH-4355	[FB80 C355 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4355, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC355, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_219)
{
    // 4356 0021;	
    // (䍖) CJK UNIFIED IDEOGRAPH-4356	[FB80 C356 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4356, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC356, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_220)
{
    // 4356 003F;	
    // (䍖) CJK UNIFIED IDEOGRAPH-4356	[FB80 C356 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4356, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC356, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_221)
{
    // 4356 0061;	
    // (䍖) CJK UNIFIED IDEOGRAPH-4356	[FB80 C356 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4356, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC356, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_222)
{
    // 4356 0041;	
    // (䍖) CJK UNIFIED IDEOGRAPH-4356	[FB80 C356 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4356, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC356, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_223)
{
    // 4356 0062;	
    // (䍖) CJK UNIFIED IDEOGRAPH-4356	[FB80 C356 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4356, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC356, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_224)
{
    // 4357 0021;	
    // (䍗) CJK UNIFIED IDEOGRAPH-4357	[FB80 C357 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4357, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC357, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_225)
{
    // 4357 003F;	
    // (䍗) CJK UNIFIED IDEOGRAPH-4357	[FB80 C357 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4357, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC357, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_226)
{
    // 4357 0061;	
    // (䍗) CJK UNIFIED IDEOGRAPH-4357	[FB80 C357 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4357, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC357, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_227)
{
    // 4357 0041;	
    // (䍗) CJK UNIFIED IDEOGRAPH-4357	[FB80 C357 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4357, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC357, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_228)
{
    // 4357 0062;	
    // (䍗) CJK UNIFIED IDEOGRAPH-4357	[FB80 C357 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4357, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC357, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_229)
{
    // 4358 0021;	
    // (䍘) CJK UNIFIED IDEOGRAPH-4358	[FB80 C358 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4358, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC358, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_230)
{
    // 4358 003F;	
    // (䍘) CJK UNIFIED IDEOGRAPH-4358	[FB80 C358 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4358, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC358, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_231)
{
    // 4358 0061;	
    // (䍘) CJK UNIFIED IDEOGRAPH-4358	[FB80 C358 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4358, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC358, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_232)
{
    // 4358 0041;	
    // (䍘) CJK UNIFIED IDEOGRAPH-4358	[FB80 C358 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4358, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC358, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_233)
{
    // 4358 0062;	
    // (䍘) CJK UNIFIED IDEOGRAPH-4358	[FB80 C358 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4358, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC358, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_234)
{
    // 4359 0021;	
    // (䍙) CJK UNIFIED IDEOGRAPH-4359	[FB80 C359 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4359, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC359, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_235)
{
    // 2F974 0021;	
    // (䍙) CJK COMPATIBILITY IDEOGRAPH-2F974	[FB80 C359 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F974, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC359, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_236)
{
    // 4359 003F;	
    // (䍙) CJK UNIFIED IDEOGRAPH-4359	[FB80 C359 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4359, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC359, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_237)
{
    // 2F974 003F;	
    // (䍙) CJK COMPATIBILITY IDEOGRAPH-2F974	[FB80 C359 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F974, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC359, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_238)
{
    // 4359 0061;	
    // (䍙) CJK UNIFIED IDEOGRAPH-4359	[FB80 C359 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4359, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC359, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_239)
{
    // 2F974 0061;	
    // (䍙) CJK COMPATIBILITY IDEOGRAPH-2F974	[FB80 C359 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F974, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC359, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_240)
{
    // 4359 0041;	
    // (䍙) CJK UNIFIED IDEOGRAPH-4359	[FB80 C359 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4359, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC359, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_241)
{
    // 2F974 0041;	
    // (䍙) CJK COMPATIBILITY IDEOGRAPH-2F974	[FB80 C359 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F974, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC359, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_242)
{
    // 4359 0062;	
    // (䍙) CJK UNIFIED IDEOGRAPH-4359	[FB80 C359 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4359, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC359, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_243)
{
    // 2F974 0062;	
    // (䍙) CJK COMPATIBILITY IDEOGRAPH-2F974	[FB80 C359 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F974, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC359, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_244)
{
    // 435A 0021;	
    // (䍚) CJK UNIFIED IDEOGRAPH-435A	[FB80 C35A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC35A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_245)
{
    // 435A 003F;	
    // (䍚) CJK UNIFIED IDEOGRAPH-435A	[FB80 C35A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC35A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_246)
{
    // 435A 0061;	
    // (䍚) CJK UNIFIED IDEOGRAPH-435A	[FB80 C35A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC35A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_247)
{
    // 435A 0041;	
    // (䍚) CJK UNIFIED IDEOGRAPH-435A	[FB80 C35A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x435A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC35A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_248)
{
    // 435A 0062;	
    // (䍚) CJK UNIFIED IDEOGRAPH-435A	[FB80 C35A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC35A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_249)
{
    // 435B 0021;	
    // (䍛) CJK UNIFIED IDEOGRAPH-435B	[FB80 C35B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC35B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_250)
{
    // 435B 003F;	
    // (䍛) CJK UNIFIED IDEOGRAPH-435B	[FB80 C35B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC35B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_251)
{
    // 435B 0061;	
    // (䍛) CJK UNIFIED IDEOGRAPH-435B	[FB80 C35B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC35B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_252)
{
    // 435B 0041;	
    // (䍛) CJK UNIFIED IDEOGRAPH-435B	[FB80 C35B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x435B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC35B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_253)
{
    // 435B 0062;	
    // (䍛) CJK UNIFIED IDEOGRAPH-435B	[FB80 C35B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC35B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_254)
{
    // 435C 0021;	
    // (䍜) CJK UNIFIED IDEOGRAPH-435C	[FB80 C35C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC35C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_255)
{
    // 435C 003F;	
    // (䍜) CJK UNIFIED IDEOGRAPH-435C	[FB80 C35C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC35C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_256)
{
    // 435C 0061;	
    // (䍜) CJK UNIFIED IDEOGRAPH-435C	[FB80 C35C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC35C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_257)
{
    // 435C 0041;	
    // (䍜) CJK UNIFIED IDEOGRAPH-435C	[FB80 C35C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x435C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC35C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_258)
{
    // 435C 0062;	
    // (䍜) CJK UNIFIED IDEOGRAPH-435C	[FB80 C35C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC35C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_259)
{
    // 435D 0021;	
    // (䍝) CJK UNIFIED IDEOGRAPH-435D	[FB80 C35D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC35D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_260)
{
    // 435D 003F;	
    // (䍝) CJK UNIFIED IDEOGRAPH-435D	[FB80 C35D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC35D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_261)
{
    // 435D 0061;	
    // (䍝) CJK UNIFIED IDEOGRAPH-435D	[FB80 C35D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC35D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_262)
{
    // 435D 0041;	
    // (䍝) CJK UNIFIED IDEOGRAPH-435D	[FB80 C35D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x435D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC35D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_263)
{
    // 435D 0062;	
    // (䍝) CJK UNIFIED IDEOGRAPH-435D	[FB80 C35D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC35D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_264)
{
    // 435E 0021;	
    // (䍞) CJK UNIFIED IDEOGRAPH-435E	[FB80 C35E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC35E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_265)
{
    // 435E 003F;	
    // (䍞) CJK UNIFIED IDEOGRAPH-435E	[FB80 C35E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC35E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_266)
{
    // 435E 0061;	
    // (䍞) CJK UNIFIED IDEOGRAPH-435E	[FB80 C35E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC35E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_267)
{
    // 435E 0041;	
    // (䍞) CJK UNIFIED IDEOGRAPH-435E	[FB80 C35E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x435E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC35E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_268)
{
    // 435E 0062;	
    // (䍞) CJK UNIFIED IDEOGRAPH-435E	[FB80 C35E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC35E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_269)
{
    // 435F 0021;	
    // (䍟) CJK UNIFIED IDEOGRAPH-435F	[FB80 C35F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC35F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_270)
{
    // 435F 003F;	
    // (䍟) CJK UNIFIED IDEOGRAPH-435F	[FB80 C35F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC35F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_271)
{
    // 435F 0061;	
    // (䍟) CJK UNIFIED IDEOGRAPH-435F	[FB80 C35F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC35F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_272)
{
    // 435F 0041;	
    // (䍟) CJK UNIFIED IDEOGRAPH-435F	[FB80 C35F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x435F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC35F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_273)
{
    // 435F 0062;	
    // (䍟) CJK UNIFIED IDEOGRAPH-435F	[FB80 C35F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x435F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC35F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_274)
{
    // 4360 0021;	
    // (䍠) CJK UNIFIED IDEOGRAPH-4360	[FB80 C360 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4360, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC360, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_275)
{
    // 4360 003F;	
    // (䍠) CJK UNIFIED IDEOGRAPH-4360	[FB80 C360 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4360, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC360, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_276)
{
    // 4360 0061;	
    // (䍠) CJK UNIFIED IDEOGRAPH-4360	[FB80 C360 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4360, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC360, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_277)
{
    // 4360 0041;	
    // (䍠) CJK UNIFIED IDEOGRAPH-4360	[FB80 C360 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4360, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC360, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_278)
{
    // 4360 0062;	
    // (䍠) CJK UNIFIED IDEOGRAPH-4360	[FB80 C360 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4360, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC360, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_279)
{
    // 4361 0021;	
    // (䍡) CJK UNIFIED IDEOGRAPH-4361	[FB80 C361 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4361, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC361, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_280)
{
    // 4361 003F;	
    // (䍡) CJK UNIFIED IDEOGRAPH-4361	[FB80 C361 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4361, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC361, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_281)
{
    // 4361 0061;	
    // (䍡) CJK UNIFIED IDEOGRAPH-4361	[FB80 C361 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4361, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC361, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_282)
{
    // 4361 0041;	
    // (䍡) CJK UNIFIED IDEOGRAPH-4361	[FB80 C361 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4361, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC361, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_283)
{
    // 4361 0062;	
    // (䍡) CJK UNIFIED IDEOGRAPH-4361	[FB80 C361 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4361, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC361, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_284)
{
    // 4362 0021;	
    // (䍢) CJK UNIFIED IDEOGRAPH-4362	[FB80 C362 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4362, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC362, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_285)
{
    // 4362 003F;	
    // (䍢) CJK UNIFIED IDEOGRAPH-4362	[FB80 C362 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4362, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC362, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_286)
{
    // 4362 0061;	
    // (䍢) CJK UNIFIED IDEOGRAPH-4362	[FB80 C362 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4362, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC362, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_287)
{
    // 4362 0041;	
    // (䍢) CJK UNIFIED IDEOGRAPH-4362	[FB80 C362 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4362, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC362, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_288)
{
    // 4362 0062;	
    // (䍢) CJK UNIFIED IDEOGRAPH-4362	[FB80 C362 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4362, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC362, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_289)
{
    // 4363 0021;	
    // (䍣) CJK UNIFIED IDEOGRAPH-4363	[FB80 C363 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4363, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC363, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_290)
{
    // 4363 003F;	
    // (䍣) CJK UNIFIED IDEOGRAPH-4363	[FB80 C363 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4363, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC363, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_291)
{
    // 4363 0061;	
    // (䍣) CJK UNIFIED IDEOGRAPH-4363	[FB80 C363 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4363, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_292)
{
    // 4363 0041;	
    // (䍣) CJK UNIFIED IDEOGRAPH-4363	[FB80 C363 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4363, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_293)
{
    // 4363 0062;	
    // (䍣) CJK UNIFIED IDEOGRAPH-4363	[FB80 C363 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4363, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC363, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_294)
{
    // 4364 0021;	
    // (䍤) CJK UNIFIED IDEOGRAPH-4364	[FB80 C364 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4364, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC364, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_295)
{
    // 4364 003F;	
    // (䍤) CJK UNIFIED IDEOGRAPH-4364	[FB80 C364 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4364, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC364, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_296)
{
    // 4364 0061;	
    // (䍤) CJK UNIFIED IDEOGRAPH-4364	[FB80 C364 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4364, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_297)
{
    // 4364 0041;	
    // (䍤) CJK UNIFIED IDEOGRAPH-4364	[FB80 C364 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4364, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_298)
{
    // 4364 0062;	
    // (䍤) CJK UNIFIED IDEOGRAPH-4364	[FB80 C364 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4364, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC364, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_299)
{
    // 4365 0021;	
    // (䍥) CJK UNIFIED IDEOGRAPH-4365	[FB80 C365 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4365, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC365, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_300)
{
    // 4365 003F;	
    // (䍥) CJK UNIFIED IDEOGRAPH-4365	[FB80 C365 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4365, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC365, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_301)
{
    // 4365 0061;	
    // (䍥) CJK UNIFIED IDEOGRAPH-4365	[FB80 C365 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4365, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_302)
{
    // 4365 0041;	
    // (䍥) CJK UNIFIED IDEOGRAPH-4365	[FB80 C365 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4365, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_303)
{
    // 4365 0062;	
    // (䍥) CJK UNIFIED IDEOGRAPH-4365	[FB80 C365 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4365, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC365, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_304)
{
    // 4366 0021;	
    // (䍦) CJK UNIFIED IDEOGRAPH-4366	[FB80 C366 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4366, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC366, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_305)
{
    // 4366 003F;	
    // (䍦) CJK UNIFIED IDEOGRAPH-4366	[FB80 C366 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4366, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC366, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_306)
{
    // 4366 0061;	
    // (䍦) CJK UNIFIED IDEOGRAPH-4366	[FB80 C366 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4366, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC366, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_307)
{
    // 4366 0041;	
    // (䍦) CJK UNIFIED IDEOGRAPH-4366	[FB80 C366 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4366, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC366, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_308)
{
    // 4366 0062;	
    // (䍦) CJK UNIFIED IDEOGRAPH-4366	[FB80 C366 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4366, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC366, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_309)
{
    // 4367 0021;	
    // (䍧) CJK UNIFIED IDEOGRAPH-4367	[FB80 C367 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4367, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC367, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_310)
{
    // 4367 003F;	
    // (䍧) CJK UNIFIED IDEOGRAPH-4367	[FB80 C367 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4367, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC367, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_311)
{
    // 4367 0061;	
    // (䍧) CJK UNIFIED IDEOGRAPH-4367	[FB80 C367 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4367, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC367, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_312)
{
    // 4367 0041;	
    // (䍧) CJK UNIFIED IDEOGRAPH-4367	[FB80 C367 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4367, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC367, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_313)
{
    // 4367 0062;	
    // (䍧) CJK UNIFIED IDEOGRAPH-4367	[FB80 C367 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4367, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC367, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_314)
{
    // 4368 0021;	
    // (䍨) CJK UNIFIED IDEOGRAPH-4368	[FB80 C368 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4368, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC368, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_315)
{
    // 4368 003F;	
    // (䍨) CJK UNIFIED IDEOGRAPH-4368	[FB80 C368 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4368, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC368, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_316)
{
    // 4368 0061;	
    // (䍨) CJK UNIFIED IDEOGRAPH-4368	[FB80 C368 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4368, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_317)
{
    // 4368 0041;	
    // (䍨) CJK UNIFIED IDEOGRAPH-4368	[FB80 C368 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4368, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_318)
{
    // 4368 0062;	
    // (䍨) CJK UNIFIED IDEOGRAPH-4368	[FB80 C368 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4368, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC368, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_319)
{
    // 4369 0021;	
    // (䍩) CJK UNIFIED IDEOGRAPH-4369	[FB80 C369 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4369, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC369, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_320)
{
    // 4369 003F;	
    // (䍩) CJK UNIFIED IDEOGRAPH-4369	[FB80 C369 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4369, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC369, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_321)
{
    // 4369 0061;	
    // (䍩) CJK UNIFIED IDEOGRAPH-4369	[FB80 C369 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4369, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_322)
{
    // 4369 0041;	
    // (䍩) CJK UNIFIED IDEOGRAPH-4369	[FB80 C369 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4369, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_323)
{
    // 4369 0062;	
    // (䍩) CJK UNIFIED IDEOGRAPH-4369	[FB80 C369 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4369, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC369, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_324)
{
    // 436A 0021;	
    // (䍪) CJK UNIFIED IDEOGRAPH-436A	[FB80 C36A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC36A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_325)
{
    // 436A 003F;	
    // (䍪) CJK UNIFIED IDEOGRAPH-436A	[FB80 C36A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC36A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_326)
{
    // 436A 0061;	
    // (䍪) CJK UNIFIED IDEOGRAPH-436A	[FB80 C36A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC36A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_327)
{
    // 436A 0041;	
    // (䍪) CJK UNIFIED IDEOGRAPH-436A	[FB80 C36A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x436A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC36A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_328)
{
    // 436A 0062;	
    // (䍪) CJK UNIFIED IDEOGRAPH-436A	[FB80 C36A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC36A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_329)
{
    // 436B 0021;	
    // (䍫) CJK UNIFIED IDEOGRAPH-436B	[FB80 C36B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC36B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_330)
{
    // 436B 003F;	
    // (䍫) CJK UNIFIED IDEOGRAPH-436B	[FB80 C36B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC36B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_331)
{
    // 436B 0061;	
    // (䍫) CJK UNIFIED IDEOGRAPH-436B	[FB80 C36B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC36B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_332)
{
    // 436B 0041;	
    // (䍫) CJK UNIFIED IDEOGRAPH-436B	[FB80 C36B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x436B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC36B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_333)
{
    // 436B 0062;	
    // (䍫) CJK UNIFIED IDEOGRAPH-436B	[FB80 C36B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC36B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_334)
{
    // 436C 0021;	
    // (䍬) CJK UNIFIED IDEOGRAPH-436C	[FB80 C36C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC36C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_335)
{
    // 436C 003F;	
    // (䍬) CJK UNIFIED IDEOGRAPH-436C	[FB80 C36C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC36C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_336)
{
    // 436C 0061;	
    // (䍬) CJK UNIFIED IDEOGRAPH-436C	[FB80 C36C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC36C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_337)
{
    // 436C 0041;	
    // (䍬) CJK UNIFIED IDEOGRAPH-436C	[FB80 C36C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x436C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC36C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_338)
{
    // 436C 0062;	
    // (䍬) CJK UNIFIED IDEOGRAPH-436C	[FB80 C36C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC36C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_339)
{
    // 436D 0021;	
    // (䍭) CJK UNIFIED IDEOGRAPH-436D	[FB80 C36D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC36D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_340)
{
    // 436D 003F;	
    // (䍭) CJK UNIFIED IDEOGRAPH-436D	[FB80 C36D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC36D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_341)
{
    // 436D 0061;	
    // (䍭) CJK UNIFIED IDEOGRAPH-436D	[FB80 C36D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC36D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_342)
{
    // 436D 0041;	
    // (䍭) CJK UNIFIED IDEOGRAPH-436D	[FB80 C36D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x436D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC36D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_343)
{
    // 436D 0062;	
    // (䍭) CJK UNIFIED IDEOGRAPH-436D	[FB80 C36D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC36D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_344)
{
    // 436E 0021;	
    // (䍮) CJK UNIFIED IDEOGRAPH-436E	[FB80 C36E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC36E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_345)
{
    // 436E 003F;	
    // (䍮) CJK UNIFIED IDEOGRAPH-436E	[FB80 C36E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC36E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_346)
{
    // 436E 0061;	
    // (䍮) CJK UNIFIED IDEOGRAPH-436E	[FB80 C36E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC36E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_347)
{
    // 436E 0041;	
    // (䍮) CJK UNIFIED IDEOGRAPH-436E	[FB80 C36E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x436E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC36E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_348)
{
    // 436E 0062;	
    // (䍮) CJK UNIFIED IDEOGRAPH-436E	[FB80 C36E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC36E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_349)
{
    // 436F 0021;	
    // (䍯) CJK UNIFIED IDEOGRAPH-436F	[FB80 C36F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC36F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_350)
{
    // 436F 003F;	
    // (䍯) CJK UNIFIED IDEOGRAPH-436F	[FB80 C36F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC36F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_351)
{
    // 436F 0061;	
    // (䍯) CJK UNIFIED IDEOGRAPH-436F	[FB80 C36F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC36F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_352)
{
    // 436F 0041;	
    // (䍯) CJK UNIFIED IDEOGRAPH-436F	[FB80 C36F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x436F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC36F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_353)
{
    // 436F 0062;	
    // (䍯) CJK UNIFIED IDEOGRAPH-436F	[FB80 C36F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x436F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC36F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_354)
{
    // 4370 0021;	
    // (䍰) CJK UNIFIED IDEOGRAPH-4370	[FB80 C370 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4370, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC370, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_355)
{
    // 4370 003F;	
    // (䍰) CJK UNIFIED IDEOGRAPH-4370	[FB80 C370 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4370, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC370, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_356)
{
    // 4370 0061;	
    // (䍰) CJK UNIFIED IDEOGRAPH-4370	[FB80 C370 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4370, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC370, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_357)
{
    // 4370 0041;	
    // (䍰) CJK UNIFIED IDEOGRAPH-4370	[FB80 C370 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4370, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC370, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_358)
{
    // 4370 0062;	
    // (䍰) CJK UNIFIED IDEOGRAPH-4370	[FB80 C370 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4370, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC370, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_359)
{
    // 4371 0021;	
    // (䍱) CJK UNIFIED IDEOGRAPH-4371	[FB80 C371 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4371, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC371, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_360)
{
    // 4371 003F;	
    // (䍱) CJK UNIFIED IDEOGRAPH-4371	[FB80 C371 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4371, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC371, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_361)
{
    // 4371 0061;	
    // (䍱) CJK UNIFIED IDEOGRAPH-4371	[FB80 C371 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4371, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_362)
{
    // 4371 0041;	
    // (䍱) CJK UNIFIED IDEOGRAPH-4371	[FB80 C371 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4371, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_363)
{
    // 4371 0062;	
    // (䍱) CJK UNIFIED IDEOGRAPH-4371	[FB80 C371 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4371, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC371, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_364)
{
    // 4372 0021;	
    // (䍲) CJK UNIFIED IDEOGRAPH-4372	[FB80 C372 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4372, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC372, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_365)
{
    // 4372 003F;	
    // (䍲) CJK UNIFIED IDEOGRAPH-4372	[FB80 C372 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4372, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC372, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_366)
{
    // 4372 0061;	
    // (䍲) CJK UNIFIED IDEOGRAPH-4372	[FB80 C372 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4372, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC372, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_367)
{
    // 4372 0041;	
    // (䍲) CJK UNIFIED IDEOGRAPH-4372	[FB80 C372 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4372, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC372, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_368)
{
    // 4372 0062;	
    // (䍲) CJK UNIFIED IDEOGRAPH-4372	[FB80 C372 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4372, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC372, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_369)
{
    // 4373 0021;	
    // (䍳) CJK UNIFIED IDEOGRAPH-4373	[FB80 C373 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4373, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC373, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_370)
{
    // 4373 003F;	
    // (䍳) CJK UNIFIED IDEOGRAPH-4373	[FB80 C373 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4373, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC373, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_371)
{
    // 4373 0061;	
    // (䍳) CJK UNIFIED IDEOGRAPH-4373	[FB80 C373 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4373, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_372)
{
    // 4373 0041;	
    // (䍳) CJK UNIFIED IDEOGRAPH-4373	[FB80 C373 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4373, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_373)
{
    // 4373 0062;	
    // (䍳) CJK UNIFIED IDEOGRAPH-4373	[FB80 C373 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4373, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC373, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_374)
{
    // 4374 0021;	
    // (䍴) CJK UNIFIED IDEOGRAPH-4374	[FB80 C374 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4374, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC374, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_375)
{
    // 4374 003F;	
    // (䍴) CJK UNIFIED IDEOGRAPH-4374	[FB80 C374 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4374, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC374, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_376)
{
    // 4374 0061;	
    // (䍴) CJK UNIFIED IDEOGRAPH-4374	[FB80 C374 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4374, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_377)
{
    // 4374 0041;	
    // (䍴) CJK UNIFIED IDEOGRAPH-4374	[FB80 C374 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4374, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_378)
{
    // 4374 0062;	
    // (䍴) CJK UNIFIED IDEOGRAPH-4374	[FB80 C374 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4374, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC374, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_379)
{
    // 4375 0021;	
    // (䍵) CJK UNIFIED IDEOGRAPH-4375	[FB80 C375 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4375, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC375, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_380)
{
    // 4375 003F;	
    // (䍵) CJK UNIFIED IDEOGRAPH-4375	[FB80 C375 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4375, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC375, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_381)
{
    // 4375 0061;	
    // (䍵) CJK UNIFIED IDEOGRAPH-4375	[FB80 C375 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4375, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_382)
{
    // 4375 0041;	
    // (䍵) CJK UNIFIED IDEOGRAPH-4375	[FB80 C375 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4375, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_383)
{
    // 4375 0062;	
    // (䍵) CJK UNIFIED IDEOGRAPH-4375	[FB80 C375 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4375, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC375, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_384)
{
    // 4376 0021;	
    // (䍶) CJK UNIFIED IDEOGRAPH-4376	[FB80 C376 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4376, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC376, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_385)
{
    // 4376 003F;	
    // (䍶) CJK UNIFIED IDEOGRAPH-4376	[FB80 C376 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4376, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC376, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_386)
{
    // 4376 0061;	
    // (䍶) CJK UNIFIED IDEOGRAPH-4376	[FB80 C376 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4376, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_387)
{
    // 4376 0041;	
    // (䍶) CJK UNIFIED IDEOGRAPH-4376	[FB80 C376 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4376, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_388)
{
    // 4376 0062;	
    // (䍶) CJK UNIFIED IDEOGRAPH-4376	[FB80 C376 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4376, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC376, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_389)
{
    // 4377 0021;	
    // (䍷) CJK UNIFIED IDEOGRAPH-4377	[FB80 C377 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4377, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC377, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_390)
{
    // 4377 003F;	
    // (䍷) CJK UNIFIED IDEOGRAPH-4377	[FB80 C377 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4377, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC377, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_391)
{
    // 4377 0061;	
    // (䍷) CJK UNIFIED IDEOGRAPH-4377	[FB80 C377 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4377, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC377, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_392)
{
    // 4377 0041;	
    // (䍷) CJK UNIFIED IDEOGRAPH-4377	[FB80 C377 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4377, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC377, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_393)
{
    // 4377 0062;	
    // (䍷) CJK UNIFIED IDEOGRAPH-4377	[FB80 C377 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4377, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC377, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_394)
{
    // 4378 0021;	
    // (䍸) CJK UNIFIED IDEOGRAPH-4378	[FB80 C378 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4378, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC378, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_395)
{
    // 4378 003F;	
    // (䍸) CJK UNIFIED IDEOGRAPH-4378	[FB80 C378 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4378, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC378, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_396)
{
    // 4378 0061;	
    // (䍸) CJK UNIFIED IDEOGRAPH-4378	[FB80 C378 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4378, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC378, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_397)
{
    // 4378 0041;	
    // (䍸) CJK UNIFIED IDEOGRAPH-4378	[FB80 C378 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4378, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC378, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_398)
{
    // 4378 0062;	
    // (䍸) CJK UNIFIED IDEOGRAPH-4378	[FB80 C378 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4378, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC378, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_399)
{
    // 4379 0021;	
    // (䍹) CJK UNIFIED IDEOGRAPH-4379	[FB80 C379 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4379, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC379, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_400)
{
    // 4379 003F;	
    // (䍹) CJK UNIFIED IDEOGRAPH-4379	[FB80 C379 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4379, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC379, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_401)
{
    // 4379 0061;	
    // (䍹) CJK UNIFIED IDEOGRAPH-4379	[FB80 C379 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4379, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC379, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_402)
{
    // 4379 0041;	
    // (䍹) CJK UNIFIED IDEOGRAPH-4379	[FB80 C379 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4379, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC379, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_403)
{
    // 4379 0062;	
    // (䍹) CJK UNIFIED IDEOGRAPH-4379	[FB80 C379 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4379, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC379, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_404)
{
    // 437A 0021;	
    // (䍺) CJK UNIFIED IDEOGRAPH-437A	[FB80 C37A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC37A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_405)
{
    // 437A 003F;	
    // (䍺) CJK UNIFIED IDEOGRAPH-437A	[FB80 C37A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC37A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_406)
{
    // 437A 0061;	
    // (䍺) CJK UNIFIED IDEOGRAPH-437A	[FB80 C37A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC37A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_407)
{
    // 437A 0041;	
    // (䍺) CJK UNIFIED IDEOGRAPH-437A	[FB80 C37A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x437A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC37A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_408)
{
    // 437A 0062;	
    // (䍺) CJK UNIFIED IDEOGRAPH-437A	[FB80 C37A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC37A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_409)
{
    // 437B 0021;	
    // (䍻) CJK UNIFIED IDEOGRAPH-437B	[FB80 C37B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC37B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_410)
{
    // 437B 003F;	
    // (䍻) CJK UNIFIED IDEOGRAPH-437B	[FB80 C37B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC37B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_411)
{
    // 437B 0061;	
    // (䍻) CJK UNIFIED IDEOGRAPH-437B	[FB80 C37B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC37B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_412)
{
    // 437B 0041;	
    // (䍻) CJK UNIFIED IDEOGRAPH-437B	[FB80 C37B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x437B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC37B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_413)
{
    // 437B 0062;	
    // (䍻) CJK UNIFIED IDEOGRAPH-437B	[FB80 C37B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC37B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_414)
{
    // 437C 0021;	
    // (䍼) CJK UNIFIED IDEOGRAPH-437C	[FB80 C37C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC37C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_415)
{
    // 437C 003F;	
    // (䍼) CJK UNIFIED IDEOGRAPH-437C	[FB80 C37C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC37C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_416)
{
    // 437C 0061;	
    // (䍼) CJK UNIFIED IDEOGRAPH-437C	[FB80 C37C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC37C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_417)
{
    // 437C 0041;	
    // (䍼) CJK UNIFIED IDEOGRAPH-437C	[FB80 C37C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x437C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC37C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_418)
{
    // 437C 0062;	
    // (䍼) CJK UNIFIED IDEOGRAPH-437C	[FB80 C37C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC37C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_419)
{
    // 437D 0021;	
    // (䍽) CJK UNIFIED IDEOGRAPH-437D	[FB80 C37D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC37D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_420)
{
    // 437D 003F;	
    // (䍽) CJK UNIFIED IDEOGRAPH-437D	[FB80 C37D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC37D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_421)
{
    // 437D 0061;	
    // (䍽) CJK UNIFIED IDEOGRAPH-437D	[FB80 C37D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC37D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_422)
{
    // 437D 0041;	
    // (䍽) CJK UNIFIED IDEOGRAPH-437D	[FB80 C37D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x437D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC37D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_423)
{
    // 437D 0062;	
    // (䍽) CJK UNIFIED IDEOGRAPH-437D	[FB80 C37D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC37D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_424)
{
    // 437E 0021;	
    // (䍾) CJK UNIFIED IDEOGRAPH-437E	[FB80 C37E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC37E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_425)
{
    // 437E 003F;	
    // (䍾) CJK UNIFIED IDEOGRAPH-437E	[FB80 C37E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC37E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_426)
{
    // 437E 0061;	
    // (䍾) CJK UNIFIED IDEOGRAPH-437E	[FB80 C37E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC37E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_427)
{
    // 437E 0041;	
    // (䍾) CJK UNIFIED IDEOGRAPH-437E	[FB80 C37E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x437E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC37E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_428)
{
    // 437E 0062;	
    // (䍾) CJK UNIFIED IDEOGRAPH-437E	[FB80 C37E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC37E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_429)
{
    // 437F 0021;	
    // (䍿) CJK UNIFIED IDEOGRAPH-437F	[FB80 C37F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC37F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_430)
{
    // 437F 003F;	
    // (䍿) CJK UNIFIED IDEOGRAPH-437F	[FB80 C37F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC37F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_431)
{
    // 437F 0061;	
    // (䍿) CJK UNIFIED IDEOGRAPH-437F	[FB80 C37F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC37F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_432)
{
    // 437F 0041;	
    // (䍿) CJK UNIFIED IDEOGRAPH-437F	[FB80 C37F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x437F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC37F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_433)
{
    // 437F 0062;	
    // (䍿) CJK UNIFIED IDEOGRAPH-437F	[FB80 C37F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x437F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC37F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_434)
{
    // 4380 0021;	
    // (䎀) CJK UNIFIED IDEOGRAPH-4380	[FB80 C380 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4380, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC380, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_435)
{
    // 4380 003F;	
    // (䎀) CJK UNIFIED IDEOGRAPH-4380	[FB80 C380 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4380, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC380, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_436)
{
    // 4380 0061;	
    // (䎀) CJK UNIFIED IDEOGRAPH-4380	[FB80 C380 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4380, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC380, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_437)
{
    // 4380 0041;	
    // (䎀) CJK UNIFIED IDEOGRAPH-4380	[FB80 C380 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4380, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC380, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_438)
{
    // 4380 0062;	
    // (䎀) CJK UNIFIED IDEOGRAPH-4380	[FB80 C380 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4380, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC380, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_439)
{
    // 4381 0021;	
    // (䎁) CJK UNIFIED IDEOGRAPH-4381	[FB80 C381 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4381, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC381, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_440)
{
    // 4381 003F;	
    // (䎁) CJK UNIFIED IDEOGRAPH-4381	[FB80 C381 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4381, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC381, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_441)
{
    // 4381 0061;	
    // (䎁) CJK UNIFIED IDEOGRAPH-4381	[FB80 C381 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4381, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC381, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_442)
{
    // 4381 0041;	
    // (䎁) CJK UNIFIED IDEOGRAPH-4381	[FB80 C381 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4381, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC381, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_443)
{
    // 4381 0062;	
    // (䎁) CJK UNIFIED IDEOGRAPH-4381	[FB80 C381 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4381, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC381, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_444)
{
    // 4382 0021;	
    // (䎂) CJK UNIFIED IDEOGRAPH-4382	[FB80 C382 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4382, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC382, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_445)
{
    // 4382 003F;	
    // (䎂) CJK UNIFIED IDEOGRAPH-4382	[FB80 C382 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4382, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC382, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_446)
{
    // 4382 0061;	
    // (䎂) CJK UNIFIED IDEOGRAPH-4382	[FB80 C382 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4382, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC382, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_447)
{
    // 4382 0041;	
    // (䎂) CJK UNIFIED IDEOGRAPH-4382	[FB80 C382 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4382, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC382, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_448)
{
    // 4382 0062;	
    // (䎂) CJK UNIFIED IDEOGRAPH-4382	[FB80 C382 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4382, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC382, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_449)
{
    // 4383 0021;	
    // (䎃) CJK UNIFIED IDEOGRAPH-4383	[FB80 C383 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4383, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC383, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_450)
{
    // 4383 003F;	
    // (䎃) CJK UNIFIED IDEOGRAPH-4383	[FB80 C383 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4383, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC383, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_451)
{
    // 4383 0061;	
    // (䎃) CJK UNIFIED IDEOGRAPH-4383	[FB80 C383 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4383, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_452)
{
    // 4383 0041;	
    // (䎃) CJK UNIFIED IDEOGRAPH-4383	[FB80 C383 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4383, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_453)
{
    // 4383 0062;	
    // (䎃) CJK UNIFIED IDEOGRAPH-4383	[FB80 C383 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4383, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC383, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_454)
{
    // 4384 0021;	
    // (䎄) CJK UNIFIED IDEOGRAPH-4384	[FB80 C384 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4384, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC384, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_455)
{
    // 4384 003F;	
    // (䎄) CJK UNIFIED IDEOGRAPH-4384	[FB80 C384 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4384, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC384, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_456)
{
    // 4384 0061;	
    // (䎄) CJK UNIFIED IDEOGRAPH-4384	[FB80 C384 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4384, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_457)
{
    // 4384 0041;	
    // (䎄) CJK UNIFIED IDEOGRAPH-4384	[FB80 C384 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4384, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_458)
{
    // 4384 0062;	
    // (䎄) CJK UNIFIED IDEOGRAPH-4384	[FB80 C384 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4384, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_459)
{
    // 4385 0021;	
    // (䎅) CJK UNIFIED IDEOGRAPH-4385	[FB80 C385 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4385, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC385, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_460)
{
    // 4385 003F;	
    // (䎅) CJK UNIFIED IDEOGRAPH-4385	[FB80 C385 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4385, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC385, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_461)
{
    // 4385 0061;	
    // (䎅) CJK UNIFIED IDEOGRAPH-4385	[FB80 C385 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4385, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_462)
{
    // 4385 0041;	
    // (䎅) CJK UNIFIED IDEOGRAPH-4385	[FB80 C385 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4385, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_463)
{
    // 4385 0062;	
    // (䎅) CJK UNIFIED IDEOGRAPH-4385	[FB80 C385 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4385, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC385, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_464)
{
    // 4386 0021;	
    // (䎆) CJK UNIFIED IDEOGRAPH-4386	[FB80 C386 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4386, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC386, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_465)
{
    // 4386 003F;	
    // (䎆) CJK UNIFIED IDEOGRAPH-4386	[FB80 C386 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4386, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC386, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_466)
{
    // 4386 0061;	
    // (䎆) CJK UNIFIED IDEOGRAPH-4386	[FB80 C386 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4386, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_467)
{
    // 4386 0041;	
    // (䎆) CJK UNIFIED IDEOGRAPH-4386	[FB80 C386 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4386, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_468)
{
    // 4386 0062;	
    // (䎆) CJK UNIFIED IDEOGRAPH-4386	[FB80 C386 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4386, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC386, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_469)
{
    // 4387 0021;	
    // (䎇) CJK UNIFIED IDEOGRAPH-4387	[FB80 C387 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4387, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC387, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_470)
{
    // 4387 003F;	
    // (䎇) CJK UNIFIED IDEOGRAPH-4387	[FB80 C387 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4387, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC387, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_471)
{
    // 4387 0061;	
    // (䎇) CJK UNIFIED IDEOGRAPH-4387	[FB80 C387 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4387, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_472)
{
    // 4387 0041;	
    // (䎇) CJK UNIFIED IDEOGRAPH-4387	[FB80 C387 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4387, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_473)
{
    // 4387 0062;	
    // (䎇) CJK UNIFIED IDEOGRAPH-4387	[FB80 C387 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4387, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC387, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_474)
{
    // 4388 0021;	
    // (䎈) CJK UNIFIED IDEOGRAPH-4388	[FB80 C388 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4388, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC388, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_475)
{
    // 4388 003F;	
    // (䎈) CJK UNIFIED IDEOGRAPH-4388	[FB80 C388 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4388, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC388, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_476)
{
    // 4388 0061;	
    // (䎈) CJK UNIFIED IDEOGRAPH-4388	[FB80 C388 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4388, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC388, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_477)
{
    // 4388 0041;	
    // (䎈) CJK UNIFIED IDEOGRAPH-4388	[FB80 C388 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4388, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC388, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_478)
{
    // 4388 0062;	
    // (䎈) CJK UNIFIED IDEOGRAPH-4388	[FB80 C388 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4388, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC388, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_479)
{
    // 4389 0021;	
    // (䎉) CJK UNIFIED IDEOGRAPH-4389	[FB80 C389 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4389, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC389, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_480)
{
    // 4389 003F;	
    // (䎉) CJK UNIFIED IDEOGRAPH-4389	[FB80 C389 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4389, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC389, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_481)
{
    // 4389 0061;	
    // (䎉) CJK UNIFIED IDEOGRAPH-4389	[FB80 C389 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4389, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_482)
{
    // 4389 0041;	
    // (䎉) CJK UNIFIED IDEOGRAPH-4389	[FB80 C389 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4389, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_483)
{
    // 4389 0062;	
    // (䎉) CJK UNIFIED IDEOGRAPH-4389	[FB80 C389 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4389, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC389, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_484)
{
    // 438A 0021;	
    // (䎊) CJK UNIFIED IDEOGRAPH-438A	[FB80 C38A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC38A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_485)
{
    // 438A 003F;	
    // (䎊) CJK UNIFIED IDEOGRAPH-438A	[FB80 C38A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC38A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_486)
{
    // 438A 0061;	
    // (䎊) CJK UNIFIED IDEOGRAPH-438A	[FB80 C38A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC38A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_487)
{
    // 438A 0041;	
    // (䎊) CJK UNIFIED IDEOGRAPH-438A	[FB80 C38A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x438A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC38A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_488)
{
    // 438A 0062;	
    // (䎊) CJK UNIFIED IDEOGRAPH-438A	[FB80 C38A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC38A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_489)
{
    // 438B 0021;	
    // (䎋) CJK UNIFIED IDEOGRAPH-438B	[FB80 C38B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC38B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_490)
{
    // 438B 003F;	
    // (䎋) CJK UNIFIED IDEOGRAPH-438B	[FB80 C38B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC38B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_491)
{
    // 438B 0061;	
    // (䎋) CJK UNIFIED IDEOGRAPH-438B	[FB80 C38B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC38B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_492)
{
    // 438B 0041;	
    // (䎋) CJK UNIFIED IDEOGRAPH-438B	[FB80 C38B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x438B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC38B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_493)
{
    // 438B 0062;	
    // (䎋) CJK UNIFIED IDEOGRAPH-438B	[FB80 C38B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC38B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_494)
{
    // 438C 0021;	
    // (䎌) CJK UNIFIED IDEOGRAPH-438C	[FB80 C38C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC38C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_495)
{
    // 438C 003F;	
    // (䎌) CJK UNIFIED IDEOGRAPH-438C	[FB80 C38C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC38C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_496)
{
    // 438C 0061;	
    // (䎌) CJK UNIFIED IDEOGRAPH-438C	[FB80 C38C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC38C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_497)
{
    // 438C 0041;	
    // (䎌) CJK UNIFIED IDEOGRAPH-438C	[FB80 C38C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x438C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC38C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_498)
{
    // 438C 0062;	
    // (䎌) CJK UNIFIED IDEOGRAPH-438C	[FB80 C38C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC38C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_366_499)
{
    // 438D 0021;	
    // (䎍) CJK UNIFIED IDEOGRAPH-438D	[FB80 C38D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC38D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

