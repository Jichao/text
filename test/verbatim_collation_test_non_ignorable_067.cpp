// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_067_000)
{
    // 1F718 0041;	
    // (🜘) ALCHEMICAL SYMBOL FOR ROCK SALT	[175E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F718, 0x0041 };
    uint32_t const ces[9] = { 0x175E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_001)
{
    // 1F718 0062;	
    // (🜘) ALCHEMICAL SYMBOL FOR ROCK SALT	[175E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F718, 0x0062 };
    uint32_t const ces[9] = { 0x175E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_002)
{
    // 1F719 0021;	
    // (🜙) ALCHEMICAL SYMBOL FOR ROCK SALT-2	[175F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F719, 0x0021 };
    uint32_t const ces[9] = { 0x175F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_003)
{
    // 1F719 003F;	
    // (🜙) ALCHEMICAL SYMBOL FOR ROCK SALT-2	[175F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F719, 0x003F };
    uint32_t const ces[9] = { 0x175F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_004)
{
    // 1F719 0061;	
    // (🜙) ALCHEMICAL SYMBOL FOR ROCK SALT-2	[175F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F719, 0x0061 };
    uint32_t const ces[9] = { 0x175F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_005)
{
    // 1F719 0041;	
    // (🜙) ALCHEMICAL SYMBOL FOR ROCK SALT-2	[175F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F719, 0x0041 };
    uint32_t const ces[9] = { 0x175F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_006)
{
    // 1F719 0062;	
    // (🜙) ALCHEMICAL SYMBOL FOR ROCK SALT-2	[175F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F719, 0x0062 };
    uint32_t const ces[9] = { 0x175F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_007)
{
    // 1F71A 0021;	
    // (🜚) ALCHEMICAL SYMBOL FOR GOLD	[1760 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71A, 0x0021 };
    uint32_t const ces[9] = { 0x1760, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_008)
{
    // 1F71A 003F;	
    // (🜚) ALCHEMICAL SYMBOL FOR GOLD	[1760 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71A, 0x003F };
    uint32_t const ces[9] = { 0x1760, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_009)
{
    // 1F71A 0061;	
    // (🜚) ALCHEMICAL SYMBOL FOR GOLD	[1760 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71A, 0x0061 };
    uint32_t const ces[9] = { 0x1760, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_010)
{
    // 1F71A 0041;	
    // (🜚) ALCHEMICAL SYMBOL FOR GOLD	[1760 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F71A, 0x0041 };
    uint32_t const ces[9] = { 0x1760, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_011)
{
    // 1F71A 0062;	
    // (🜚) ALCHEMICAL SYMBOL FOR GOLD	[1760 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71A, 0x0062 };
    uint32_t const ces[9] = { 0x1760, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_012)
{
    // 1F71B 0021;	
    // (🜛) ALCHEMICAL SYMBOL FOR SILVER	[1761 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71B, 0x0021 };
    uint32_t const ces[9] = { 0x1761, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_013)
{
    // 1F71B 003F;	
    // (🜛) ALCHEMICAL SYMBOL FOR SILVER	[1761 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71B, 0x003F };
    uint32_t const ces[9] = { 0x1761, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_014)
{
    // 1F71B 0061;	
    // (🜛) ALCHEMICAL SYMBOL FOR SILVER	[1761 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71B, 0x0061 };
    uint32_t const ces[9] = { 0x1761, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_015)
{
    // 1F71B 0041;	
    // (🜛) ALCHEMICAL SYMBOL FOR SILVER	[1761 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F71B, 0x0041 };
    uint32_t const ces[9] = { 0x1761, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_016)
{
    // 1F71B 0062;	
    // (🜛) ALCHEMICAL SYMBOL FOR SILVER	[1761 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71B, 0x0062 };
    uint32_t const ces[9] = { 0x1761, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_017)
{
    // 1F71C 0021;	
    // (🜜) ALCHEMICAL SYMBOL FOR IRON ORE	[1762 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71C, 0x0021 };
    uint32_t const ces[9] = { 0x1762, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_018)
{
    // 1F71C 003F;	
    // (🜜) ALCHEMICAL SYMBOL FOR IRON ORE	[1762 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71C, 0x003F };
    uint32_t const ces[9] = { 0x1762, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_019)
{
    // 1F71C 0061;	
    // (🜜) ALCHEMICAL SYMBOL FOR IRON ORE	[1762 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71C, 0x0061 };
    uint32_t const ces[9] = { 0x1762, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_020)
{
    // 1F71C 0041;	
    // (🜜) ALCHEMICAL SYMBOL FOR IRON ORE	[1762 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F71C, 0x0041 };
    uint32_t const ces[9] = { 0x1762, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_021)
{
    // 1F71C 0062;	
    // (🜜) ALCHEMICAL SYMBOL FOR IRON ORE	[1762 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71C, 0x0062 };
    uint32_t const ces[9] = { 0x1762, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_022)
{
    // 1F71D 0021;	
    // (🜝) ALCHEMICAL SYMBOL FOR IRON ORE-2	[1763 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71D, 0x0021 };
    uint32_t const ces[9] = { 0x1763, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_023)
{
    // 1F71D 003F;	
    // (🜝) ALCHEMICAL SYMBOL FOR IRON ORE-2	[1763 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71D, 0x003F };
    uint32_t const ces[9] = { 0x1763, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_024)
{
    // 1F71D 0061;	
    // (🜝) ALCHEMICAL SYMBOL FOR IRON ORE-2	[1763 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71D, 0x0061 };
    uint32_t const ces[9] = { 0x1763, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_025)
{
    // 1F71D 0041;	
    // (🜝) ALCHEMICAL SYMBOL FOR IRON ORE-2	[1763 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F71D, 0x0041 };
    uint32_t const ces[9] = { 0x1763, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_026)
{
    // 1F71D 0062;	
    // (🜝) ALCHEMICAL SYMBOL FOR IRON ORE-2	[1763 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71D, 0x0062 };
    uint32_t const ces[9] = { 0x1763, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_027)
{
    // 1F71E 0021;	
    // (🜞) ALCHEMICAL SYMBOL FOR CROCUS OF IRON	[1764 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71E, 0x0021 };
    uint32_t const ces[9] = { 0x1764, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_028)
{
    // 1F71E 003F;	
    // (🜞) ALCHEMICAL SYMBOL FOR CROCUS OF IRON	[1764 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71E, 0x003F };
    uint32_t const ces[9] = { 0x1764, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_029)
{
    // 1F71E 0061;	
    // (🜞) ALCHEMICAL SYMBOL FOR CROCUS OF IRON	[1764 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71E, 0x0061 };
    uint32_t const ces[9] = { 0x1764, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_030)
{
    // 1F71E 0041;	
    // (🜞) ALCHEMICAL SYMBOL FOR CROCUS OF IRON	[1764 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F71E, 0x0041 };
    uint32_t const ces[9] = { 0x1764, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_031)
{
    // 1F71E 0062;	
    // (🜞) ALCHEMICAL SYMBOL FOR CROCUS OF IRON	[1764 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71E, 0x0062 };
    uint32_t const ces[9] = { 0x1764, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_032)
{
    // 1F71F 0021;	
    // (🜟) ALCHEMICAL SYMBOL FOR REGULUS OF IRON	[1765 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71F, 0x0021 };
    uint32_t const ces[9] = { 0x1765, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_033)
{
    // 1F71F 003F;	
    // (🜟) ALCHEMICAL SYMBOL FOR REGULUS OF IRON	[1765 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71F, 0x003F };
    uint32_t const ces[9] = { 0x1765, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_034)
{
    // 1F71F 0061;	
    // (🜟) ALCHEMICAL SYMBOL FOR REGULUS OF IRON	[1765 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71F, 0x0061 };
    uint32_t const ces[9] = { 0x1765, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_035)
{
    // 1F71F 0041;	
    // (🜟) ALCHEMICAL SYMBOL FOR REGULUS OF IRON	[1765 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F71F, 0x0041 };
    uint32_t const ces[9] = { 0x1765, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_036)
{
    // 1F71F 0062;	
    // (🜟) ALCHEMICAL SYMBOL FOR REGULUS OF IRON	[1765 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F71F, 0x0062 };
    uint32_t const ces[9] = { 0x1765, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_037)
{
    // 1F720 0021;	
    // (🜠) ALCHEMICAL SYMBOL FOR COPPER ORE	[1766 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F720, 0x0021 };
    uint32_t const ces[9] = { 0x1766, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_038)
{
    // 1F720 003F;	
    // (🜠) ALCHEMICAL SYMBOL FOR COPPER ORE	[1766 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F720, 0x003F };
    uint32_t const ces[9] = { 0x1766, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_039)
{
    // 1F720 0061;	
    // (🜠) ALCHEMICAL SYMBOL FOR COPPER ORE	[1766 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F720, 0x0061 };
    uint32_t const ces[9] = { 0x1766, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_040)
{
    // 1F720 0041;	
    // (🜠) ALCHEMICAL SYMBOL FOR COPPER ORE	[1766 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F720, 0x0041 };
    uint32_t const ces[9] = { 0x1766, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_041)
{
    // 1F720 0062;	
    // (🜠) ALCHEMICAL SYMBOL FOR COPPER ORE	[1766 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F720, 0x0062 };
    uint32_t const ces[9] = { 0x1766, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_042)
{
    // 1F721 0021;	
    // (🜡) ALCHEMICAL SYMBOL FOR IRON-COPPER ORE	[1767 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F721, 0x0021 };
    uint32_t const ces[9] = { 0x1767, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_043)
{
    // 1F721 003F;	
    // (🜡) ALCHEMICAL SYMBOL FOR IRON-COPPER ORE	[1767 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F721, 0x003F };
    uint32_t const ces[9] = { 0x1767, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_044)
{
    // 1F721 0061;	
    // (🜡) ALCHEMICAL SYMBOL FOR IRON-COPPER ORE	[1767 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F721, 0x0061 };
    uint32_t const ces[9] = { 0x1767, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_045)
{
    // 1F721 0041;	
    // (🜡) ALCHEMICAL SYMBOL FOR IRON-COPPER ORE	[1767 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F721, 0x0041 };
    uint32_t const ces[9] = { 0x1767, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_046)
{
    // 1F721 0062;	
    // (🜡) ALCHEMICAL SYMBOL FOR IRON-COPPER ORE	[1767 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F721, 0x0062 };
    uint32_t const ces[9] = { 0x1767, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_047)
{
    // 1F722 0021;	
    // (🜢) ALCHEMICAL SYMBOL FOR SUBLIMATE OF COPPER	[1768 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F722, 0x0021 };
    uint32_t const ces[9] = { 0x1768, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_048)
{
    // 1F722 003F;	
    // (🜢) ALCHEMICAL SYMBOL FOR SUBLIMATE OF COPPER	[1768 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F722, 0x003F };
    uint32_t const ces[9] = { 0x1768, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_049)
{
    // 1F722 0061;	
    // (🜢) ALCHEMICAL SYMBOL FOR SUBLIMATE OF COPPER	[1768 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F722, 0x0061 };
    uint32_t const ces[9] = { 0x1768, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_050)
{
    // 1F722 0041;	
    // (🜢) ALCHEMICAL SYMBOL FOR SUBLIMATE OF COPPER	[1768 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F722, 0x0041 };
    uint32_t const ces[9] = { 0x1768, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_051)
{
    // 1F722 0062;	
    // (🜢) ALCHEMICAL SYMBOL FOR SUBLIMATE OF COPPER	[1768 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F722, 0x0062 };
    uint32_t const ces[9] = { 0x1768, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_052)
{
    // 1F723 0021;	
    // (🜣) ALCHEMICAL SYMBOL FOR CROCUS OF COPPER	[1769 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F723, 0x0021 };
    uint32_t const ces[9] = { 0x1769, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_053)
{
    // 1F723 003F;	
    // (🜣) ALCHEMICAL SYMBOL FOR CROCUS OF COPPER	[1769 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F723, 0x003F };
    uint32_t const ces[9] = { 0x1769, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_054)
{
    // 1F723 0061;	
    // (🜣) ALCHEMICAL SYMBOL FOR CROCUS OF COPPER	[1769 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F723, 0x0061 };
    uint32_t const ces[9] = { 0x1769, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_055)
{
    // 1F723 0041;	
    // (🜣) ALCHEMICAL SYMBOL FOR CROCUS OF COPPER	[1769 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F723, 0x0041 };
    uint32_t const ces[9] = { 0x1769, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_056)
{
    // 1F723 0062;	
    // (🜣) ALCHEMICAL SYMBOL FOR CROCUS OF COPPER	[1769 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F723, 0x0062 };
    uint32_t const ces[9] = { 0x1769, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_057)
{
    // 1F724 0021;	
    // (🜤) ALCHEMICAL SYMBOL FOR CROCUS OF COPPER-2	[176A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F724, 0x0021 };
    uint32_t const ces[9] = { 0x176A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_058)
{
    // 1F724 003F;	
    // (🜤) ALCHEMICAL SYMBOL FOR CROCUS OF COPPER-2	[176A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F724, 0x003F };
    uint32_t const ces[9] = { 0x176A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_059)
{
    // 1F724 0061;	
    // (🜤) ALCHEMICAL SYMBOL FOR CROCUS OF COPPER-2	[176A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F724, 0x0061 };
    uint32_t const ces[9] = { 0x176A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_060)
{
    // 1F724 0041;	
    // (🜤) ALCHEMICAL SYMBOL FOR CROCUS OF COPPER-2	[176A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F724, 0x0041 };
    uint32_t const ces[9] = { 0x176A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_061)
{
    // 1F724 0062;	
    // (🜤) ALCHEMICAL SYMBOL FOR CROCUS OF COPPER-2	[176A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F724, 0x0062 };
    uint32_t const ces[9] = { 0x176A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_062)
{
    // 1F725 0021;	
    // (🜥) ALCHEMICAL SYMBOL FOR COPPER ANTIMONIATE	[176B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F725, 0x0021 };
    uint32_t const ces[9] = { 0x176B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_063)
{
    // 1F725 003F;	
    // (🜥) ALCHEMICAL SYMBOL FOR COPPER ANTIMONIATE	[176B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F725, 0x003F };
    uint32_t const ces[9] = { 0x176B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_064)
{
    // 1F725 0061;	
    // (🜥) ALCHEMICAL SYMBOL FOR COPPER ANTIMONIATE	[176B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F725, 0x0061 };
    uint32_t const ces[9] = { 0x176B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_065)
{
    // 1F725 0041;	
    // (🜥) ALCHEMICAL SYMBOL FOR COPPER ANTIMONIATE	[176B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F725, 0x0041 };
    uint32_t const ces[9] = { 0x176B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_066)
{
    // 1F725 0062;	
    // (🜥) ALCHEMICAL SYMBOL FOR COPPER ANTIMONIATE	[176B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F725, 0x0062 };
    uint32_t const ces[9] = { 0x176B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_067)
{
    // 1F726 0021;	
    // (🜦) ALCHEMICAL SYMBOL FOR SALT OF COPPER ANTIMONIATE	[176C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F726, 0x0021 };
    uint32_t const ces[9] = { 0x176C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_068)
{
    // 1F726 003F;	
    // (🜦) ALCHEMICAL SYMBOL FOR SALT OF COPPER ANTIMONIATE	[176C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F726, 0x003F };
    uint32_t const ces[9] = { 0x176C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_069)
{
    // 1F726 0061;	
    // (🜦) ALCHEMICAL SYMBOL FOR SALT OF COPPER ANTIMONIATE	[176C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F726, 0x0061 };
    uint32_t const ces[9] = { 0x176C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_070)
{
    // 1F726 0041;	
    // (🜦) ALCHEMICAL SYMBOL FOR SALT OF COPPER ANTIMONIATE	[176C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F726, 0x0041 };
    uint32_t const ces[9] = { 0x176C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_071)
{
    // 1F726 0062;	
    // (🜦) ALCHEMICAL SYMBOL FOR SALT OF COPPER ANTIMONIATE	[176C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F726, 0x0062 };
    uint32_t const ces[9] = { 0x176C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_072)
{
    // 1F727 0021;	
    // (🜧) ALCHEMICAL SYMBOL FOR SUBLIMATE OF SALT OF COPPER	[176D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F727, 0x0021 };
    uint32_t const ces[9] = { 0x176D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_073)
{
    // 1F727 003F;	
    // (🜧) ALCHEMICAL SYMBOL FOR SUBLIMATE OF SALT OF COPPER	[176D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F727, 0x003F };
    uint32_t const ces[9] = { 0x176D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_074)
{
    // 1F727 0061;	
    // (🜧) ALCHEMICAL SYMBOL FOR SUBLIMATE OF SALT OF COPPER	[176D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F727, 0x0061 };
    uint32_t const ces[9] = { 0x176D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_075)
{
    // 1F727 0041;	
    // (🜧) ALCHEMICAL SYMBOL FOR SUBLIMATE OF SALT OF COPPER	[176D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F727, 0x0041 };
    uint32_t const ces[9] = { 0x176D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_076)
{
    // 1F727 0062;	
    // (🜧) ALCHEMICAL SYMBOL FOR SUBLIMATE OF SALT OF COPPER	[176D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F727, 0x0062 };
    uint32_t const ces[9] = { 0x176D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_077)
{
    // 1F728 0021;	
    // (🜨) ALCHEMICAL SYMBOL FOR VERDIGRIS	[176E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F728, 0x0021 };
    uint32_t const ces[9] = { 0x176E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_078)
{
    // 1F728 003F;	
    // (🜨) ALCHEMICAL SYMBOL FOR VERDIGRIS	[176E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F728, 0x003F };
    uint32_t const ces[9] = { 0x176E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_079)
{
    // 1F728 0061;	
    // (🜨) ALCHEMICAL SYMBOL FOR VERDIGRIS	[176E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F728, 0x0061 };
    uint32_t const ces[9] = { 0x176E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_080)
{
    // 1F728 0041;	
    // (🜨) ALCHEMICAL SYMBOL FOR VERDIGRIS	[176E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F728, 0x0041 };
    uint32_t const ces[9] = { 0x176E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_081)
{
    // 1F728 0062;	
    // (🜨) ALCHEMICAL SYMBOL FOR VERDIGRIS	[176E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F728, 0x0062 };
    uint32_t const ces[9] = { 0x176E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_082)
{
    // 1F729 0021;	
    // (🜩) ALCHEMICAL SYMBOL FOR TIN ORE	[176F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F729, 0x0021 };
    uint32_t const ces[9] = { 0x176F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_083)
{
    // 1F729 003F;	
    // (🜩) ALCHEMICAL SYMBOL FOR TIN ORE	[176F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F729, 0x003F };
    uint32_t const ces[9] = { 0x176F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_084)
{
    // 1F729 0061;	
    // (🜩) ALCHEMICAL SYMBOL FOR TIN ORE	[176F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F729, 0x0061 };
    uint32_t const ces[9] = { 0x176F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_085)
{
    // 1F729 0041;	
    // (🜩) ALCHEMICAL SYMBOL FOR TIN ORE	[176F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F729, 0x0041 };
    uint32_t const ces[9] = { 0x176F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_086)
{
    // 1F729 0062;	
    // (🜩) ALCHEMICAL SYMBOL FOR TIN ORE	[176F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F729, 0x0062 };
    uint32_t const ces[9] = { 0x176F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_087)
{
    // 1F72A 0021;	
    // (🜪) ALCHEMICAL SYMBOL FOR LEAD ORE	[1770 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72A, 0x0021 };
    uint32_t const ces[9] = { 0x1770, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_088)
{
    // 1F72A 003F;	
    // (🜪) ALCHEMICAL SYMBOL FOR LEAD ORE	[1770 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72A, 0x003F };
    uint32_t const ces[9] = { 0x1770, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_089)
{
    // 1F72A 0061;	
    // (🜪) ALCHEMICAL SYMBOL FOR LEAD ORE	[1770 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72A, 0x0061 };
    uint32_t const ces[9] = { 0x1770, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_090)
{
    // 1F72A 0041;	
    // (🜪) ALCHEMICAL SYMBOL FOR LEAD ORE	[1770 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F72A, 0x0041 };
    uint32_t const ces[9] = { 0x1770, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_091)
{
    // 1F72A 0062;	
    // (🜪) ALCHEMICAL SYMBOL FOR LEAD ORE	[1770 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72A, 0x0062 };
    uint32_t const ces[9] = { 0x1770, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_092)
{
    // 1F72B 0021;	
    // (🜫) ALCHEMICAL SYMBOL FOR ANTIMONY ORE	[1771 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72B, 0x0021 };
    uint32_t const ces[9] = { 0x1771, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_093)
{
    // 1F72B 003F;	
    // (🜫) ALCHEMICAL SYMBOL FOR ANTIMONY ORE	[1771 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72B, 0x003F };
    uint32_t const ces[9] = { 0x1771, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_094)
{
    // 1F72B 0061;	
    // (🜫) ALCHEMICAL SYMBOL FOR ANTIMONY ORE	[1771 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72B, 0x0061 };
    uint32_t const ces[9] = { 0x1771, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_095)
{
    // 1F72B 0041;	
    // (🜫) ALCHEMICAL SYMBOL FOR ANTIMONY ORE	[1771 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F72B, 0x0041 };
    uint32_t const ces[9] = { 0x1771, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_096)
{
    // 1F72B 0062;	
    // (🜫) ALCHEMICAL SYMBOL FOR ANTIMONY ORE	[1771 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72B, 0x0062 };
    uint32_t const ces[9] = { 0x1771, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_097)
{
    // 1F72C 0021;	
    // (🜬) ALCHEMICAL SYMBOL FOR SUBLIMATE OF ANTIMONY	[1772 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72C, 0x0021 };
    uint32_t const ces[9] = { 0x1772, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_098)
{
    // 1F72C 003F;	
    // (🜬) ALCHEMICAL SYMBOL FOR SUBLIMATE OF ANTIMONY	[1772 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72C, 0x003F };
    uint32_t const ces[9] = { 0x1772, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_099)
{
    // 1F72C 0061;	
    // (🜬) ALCHEMICAL SYMBOL FOR SUBLIMATE OF ANTIMONY	[1772 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72C, 0x0061 };
    uint32_t const ces[9] = { 0x1772, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_100)
{
    // 1F72C 0041;	
    // (🜬) ALCHEMICAL SYMBOL FOR SUBLIMATE OF ANTIMONY	[1772 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F72C, 0x0041 };
    uint32_t const ces[9] = { 0x1772, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_101)
{
    // 1F72C 0062;	
    // (🜬) ALCHEMICAL SYMBOL FOR SUBLIMATE OF ANTIMONY	[1772 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72C, 0x0062 };
    uint32_t const ces[9] = { 0x1772, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_102)
{
    // 1F72D 0021;	
    // (🜭) ALCHEMICAL SYMBOL FOR SALT OF ANTIMONY	[1773 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72D, 0x0021 };
    uint32_t const ces[9] = { 0x1773, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_103)
{
    // 1F72D 003F;	
    // (🜭) ALCHEMICAL SYMBOL FOR SALT OF ANTIMONY	[1773 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72D, 0x003F };
    uint32_t const ces[9] = { 0x1773, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_104)
{
    // 1F72D 0061;	
    // (🜭) ALCHEMICAL SYMBOL FOR SALT OF ANTIMONY	[1773 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72D, 0x0061 };
    uint32_t const ces[9] = { 0x1773, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_105)
{
    // 1F72D 0041;	
    // (🜭) ALCHEMICAL SYMBOL FOR SALT OF ANTIMONY	[1773 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F72D, 0x0041 };
    uint32_t const ces[9] = { 0x1773, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_106)
{
    // 1F72D 0062;	
    // (🜭) ALCHEMICAL SYMBOL FOR SALT OF ANTIMONY	[1773 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72D, 0x0062 };
    uint32_t const ces[9] = { 0x1773, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_107)
{
    // 1F72E 0021;	
    // (🜮) ALCHEMICAL SYMBOL FOR SUBLIMATE OF SALT OF ANTIMONY	[1774 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72E, 0x0021 };
    uint32_t const ces[9] = { 0x1774, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_108)
{
    // 1F72E 003F;	
    // (🜮) ALCHEMICAL SYMBOL FOR SUBLIMATE OF SALT OF ANTIMONY	[1774 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72E, 0x003F };
    uint32_t const ces[9] = { 0x1774, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_109)
{
    // 1F72E 0061;	
    // (🜮) ALCHEMICAL SYMBOL FOR SUBLIMATE OF SALT OF ANTIMONY	[1774 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72E, 0x0061 };
    uint32_t const ces[9] = { 0x1774, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_110)
{
    // 1F72E 0041;	
    // (🜮) ALCHEMICAL SYMBOL FOR SUBLIMATE OF SALT OF ANTIMONY	[1774 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F72E, 0x0041 };
    uint32_t const ces[9] = { 0x1774, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_111)
{
    // 1F72E 0062;	
    // (🜮) ALCHEMICAL SYMBOL FOR SUBLIMATE OF SALT OF ANTIMONY	[1774 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72E, 0x0062 };
    uint32_t const ces[9] = { 0x1774, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_112)
{
    // 1F72F 0021;	
    // (🜯) ALCHEMICAL SYMBOL FOR VINEGAR OF ANTIMONY	[1775 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72F, 0x0021 };
    uint32_t const ces[9] = { 0x1775, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_113)
{
    // 1F72F 003F;	
    // (🜯) ALCHEMICAL SYMBOL FOR VINEGAR OF ANTIMONY	[1775 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72F, 0x003F };
    uint32_t const ces[9] = { 0x1775, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_114)
{
    // 1F72F 0061;	
    // (🜯) ALCHEMICAL SYMBOL FOR VINEGAR OF ANTIMONY	[1775 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72F, 0x0061 };
    uint32_t const ces[9] = { 0x1775, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_115)
{
    // 1F72F 0041;	
    // (🜯) ALCHEMICAL SYMBOL FOR VINEGAR OF ANTIMONY	[1775 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F72F, 0x0041 };
    uint32_t const ces[9] = { 0x1775, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_116)
{
    // 1F72F 0062;	
    // (🜯) ALCHEMICAL SYMBOL FOR VINEGAR OF ANTIMONY	[1775 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F72F, 0x0062 };
    uint32_t const ces[9] = { 0x1775, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_117)
{
    // 1F730 0021;	
    // (🜰) ALCHEMICAL SYMBOL FOR REGULUS OF ANTIMONY	[1776 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F730, 0x0021 };
    uint32_t const ces[9] = { 0x1776, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_118)
{
    // 1F730 003F;	
    // (🜰) ALCHEMICAL SYMBOL FOR REGULUS OF ANTIMONY	[1776 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F730, 0x003F };
    uint32_t const ces[9] = { 0x1776, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_119)
{
    // 1F730 0061;	
    // (🜰) ALCHEMICAL SYMBOL FOR REGULUS OF ANTIMONY	[1776 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F730, 0x0061 };
    uint32_t const ces[9] = { 0x1776, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_120)
{
    // 1F730 0041;	
    // (🜰) ALCHEMICAL SYMBOL FOR REGULUS OF ANTIMONY	[1776 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F730, 0x0041 };
    uint32_t const ces[9] = { 0x1776, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_121)
{
    // 1F730 0062;	
    // (🜰) ALCHEMICAL SYMBOL FOR REGULUS OF ANTIMONY	[1776 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F730, 0x0062 };
    uint32_t const ces[9] = { 0x1776, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_122)
{
    // 1F731 0021;	
    // (🜱) ALCHEMICAL SYMBOL FOR REGULUS OF ANTIMONY-2	[1777 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F731, 0x0021 };
    uint32_t const ces[9] = { 0x1777, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_123)
{
    // 1F731 003F;	
    // (🜱) ALCHEMICAL SYMBOL FOR REGULUS OF ANTIMONY-2	[1777 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F731, 0x003F };
    uint32_t const ces[9] = { 0x1777, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_124)
{
    // 1F731 0061;	
    // (🜱) ALCHEMICAL SYMBOL FOR REGULUS OF ANTIMONY-2	[1777 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F731, 0x0061 };
    uint32_t const ces[9] = { 0x1777, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_125)
{
    // 1F731 0041;	
    // (🜱) ALCHEMICAL SYMBOL FOR REGULUS OF ANTIMONY-2	[1777 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F731, 0x0041 };
    uint32_t const ces[9] = { 0x1777, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_126)
{
    // 1F731 0062;	
    // (🜱) ALCHEMICAL SYMBOL FOR REGULUS OF ANTIMONY-2	[1777 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F731, 0x0062 };
    uint32_t const ces[9] = { 0x1777, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_127)
{
    // 1F732 0021;	
    // (🜲) ALCHEMICAL SYMBOL FOR REGULUS	[1778 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F732, 0x0021 };
    uint32_t const ces[9] = { 0x1778, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_128)
{
    // 1F732 003F;	
    // (🜲) ALCHEMICAL SYMBOL FOR REGULUS	[1778 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F732, 0x003F };
    uint32_t const ces[9] = { 0x1778, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_129)
{
    // 1F732 0061;	
    // (🜲) ALCHEMICAL SYMBOL FOR REGULUS	[1778 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F732, 0x0061 };
    uint32_t const ces[9] = { 0x1778, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_130)
{
    // 1F732 0041;	
    // (🜲) ALCHEMICAL SYMBOL FOR REGULUS	[1778 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F732, 0x0041 };
    uint32_t const ces[9] = { 0x1778, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_131)
{
    // 1F732 0062;	
    // (🜲) ALCHEMICAL SYMBOL FOR REGULUS	[1778 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F732, 0x0062 };
    uint32_t const ces[9] = { 0x1778, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_132)
{
    // 1F733 0021;	
    // (🜳) ALCHEMICAL SYMBOL FOR REGULUS-2	[1779 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F733, 0x0021 };
    uint32_t const ces[9] = { 0x1779, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_133)
{
    // 1F733 003F;	
    // (🜳) ALCHEMICAL SYMBOL FOR REGULUS-2	[1779 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F733, 0x003F };
    uint32_t const ces[9] = { 0x1779, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_134)
{
    // 1F733 0061;	
    // (🜳) ALCHEMICAL SYMBOL FOR REGULUS-2	[1779 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F733, 0x0061 };
    uint32_t const ces[9] = { 0x1779, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_135)
{
    // 1F733 0041;	
    // (🜳) ALCHEMICAL SYMBOL FOR REGULUS-2	[1779 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F733, 0x0041 };
    uint32_t const ces[9] = { 0x1779, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_136)
{
    // 1F733 0062;	
    // (🜳) ALCHEMICAL SYMBOL FOR REGULUS-2	[1779 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F733, 0x0062 };
    uint32_t const ces[9] = { 0x1779, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_137)
{
    // 1F734 0021;	
    // (🜴) ALCHEMICAL SYMBOL FOR REGULUS-3	[177A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F734, 0x0021 };
    uint32_t const ces[9] = { 0x177A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_138)
{
    // 1F734 003F;	
    // (🜴) ALCHEMICAL SYMBOL FOR REGULUS-3	[177A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F734, 0x003F };
    uint32_t const ces[9] = { 0x177A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_139)
{
    // 1F734 0061;	
    // (🜴) ALCHEMICAL SYMBOL FOR REGULUS-3	[177A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F734, 0x0061 };
    uint32_t const ces[9] = { 0x177A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_140)
{
    // 1F734 0041;	
    // (🜴) ALCHEMICAL SYMBOL FOR REGULUS-3	[177A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F734, 0x0041 };
    uint32_t const ces[9] = { 0x177A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_141)
{
    // 1F734 0062;	
    // (🜴) ALCHEMICAL SYMBOL FOR REGULUS-3	[177A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F734, 0x0062 };
    uint32_t const ces[9] = { 0x177A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_142)
{
    // 1F735 0021;	
    // (🜵) ALCHEMICAL SYMBOL FOR REGULUS-4	[177B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F735, 0x0021 };
    uint32_t const ces[9] = { 0x177B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_143)
{
    // 1F735 003F;	
    // (🜵) ALCHEMICAL SYMBOL FOR REGULUS-4	[177B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F735, 0x003F };
    uint32_t const ces[9] = { 0x177B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_144)
{
    // 1F735 0061;	
    // (🜵) ALCHEMICAL SYMBOL FOR REGULUS-4	[177B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F735, 0x0061 };
    uint32_t const ces[9] = { 0x177B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_145)
{
    // 1F735 0041;	
    // (🜵) ALCHEMICAL SYMBOL FOR REGULUS-4	[177B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F735, 0x0041 };
    uint32_t const ces[9] = { 0x177B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_146)
{
    // 1F735 0062;	
    // (🜵) ALCHEMICAL SYMBOL FOR REGULUS-4	[177B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F735, 0x0062 };
    uint32_t const ces[9] = { 0x177B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_147)
{
    // 1F736 0021;	
    // (🜶) ALCHEMICAL SYMBOL FOR ALKALI	[177C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F736, 0x0021 };
    uint32_t const ces[9] = { 0x177C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_148)
{
    // 1F736 003F;	
    // (🜶) ALCHEMICAL SYMBOL FOR ALKALI	[177C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F736, 0x003F };
    uint32_t const ces[9] = { 0x177C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_149)
{
    // 1F736 0061;	
    // (🜶) ALCHEMICAL SYMBOL FOR ALKALI	[177C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F736, 0x0061 };
    uint32_t const ces[9] = { 0x177C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_150)
{
    // 1F736 0041;	
    // (🜶) ALCHEMICAL SYMBOL FOR ALKALI	[177C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F736, 0x0041 };
    uint32_t const ces[9] = { 0x177C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_151)
{
    // 1F736 0062;	
    // (🜶) ALCHEMICAL SYMBOL FOR ALKALI	[177C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F736, 0x0062 };
    uint32_t const ces[9] = { 0x177C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_152)
{
    // 1F737 0021;	
    // (🜷) ALCHEMICAL SYMBOL FOR ALKALI-2	[177D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F737, 0x0021 };
    uint32_t const ces[9] = { 0x177D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_153)
{
    // 1F737 003F;	
    // (🜷) ALCHEMICAL SYMBOL FOR ALKALI-2	[177D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F737, 0x003F };
    uint32_t const ces[9] = { 0x177D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_154)
{
    // 1F737 0061;	
    // (🜷) ALCHEMICAL SYMBOL FOR ALKALI-2	[177D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F737, 0x0061 };
    uint32_t const ces[9] = { 0x177D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_155)
{
    // 1F737 0041;	
    // (🜷) ALCHEMICAL SYMBOL FOR ALKALI-2	[177D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F737, 0x0041 };
    uint32_t const ces[9] = { 0x177D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_156)
{
    // 1F737 0062;	
    // (🜷) ALCHEMICAL SYMBOL FOR ALKALI-2	[177D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F737, 0x0062 };
    uint32_t const ces[9] = { 0x177D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_157)
{
    // 1F738 0021;	
    // (🜸) ALCHEMICAL SYMBOL FOR MARCASITE	[177E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F738, 0x0021 };
    uint32_t const ces[9] = { 0x177E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_158)
{
    // 1F738 003F;	
    // (🜸) ALCHEMICAL SYMBOL FOR MARCASITE	[177E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F738, 0x003F };
    uint32_t const ces[9] = { 0x177E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_159)
{
    // 1F738 0061;	
    // (🜸) ALCHEMICAL SYMBOL FOR MARCASITE	[177E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F738, 0x0061 };
    uint32_t const ces[9] = { 0x177E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_160)
{
    // 1F738 0041;	
    // (🜸) ALCHEMICAL SYMBOL FOR MARCASITE	[177E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F738, 0x0041 };
    uint32_t const ces[9] = { 0x177E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_161)
{
    // 1F738 0062;	
    // (🜸) ALCHEMICAL SYMBOL FOR MARCASITE	[177E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F738, 0x0062 };
    uint32_t const ces[9] = { 0x177E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_162)
{
    // 1F739 0021;	
    // (🜹) ALCHEMICAL SYMBOL FOR SAL-AMMONIAC	[177F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F739, 0x0021 };
    uint32_t const ces[9] = { 0x177F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_163)
{
    // 1F739 003F;	
    // (🜹) ALCHEMICAL SYMBOL FOR SAL-AMMONIAC	[177F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F739, 0x003F };
    uint32_t const ces[9] = { 0x177F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_164)
{
    // 1F739 0061;	
    // (🜹) ALCHEMICAL SYMBOL FOR SAL-AMMONIAC	[177F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F739, 0x0061 };
    uint32_t const ces[9] = { 0x177F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_165)
{
    // 1F739 0041;	
    // (🜹) ALCHEMICAL SYMBOL FOR SAL-AMMONIAC	[177F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F739, 0x0041 };
    uint32_t const ces[9] = { 0x177F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_166)
{
    // 1F739 0062;	
    // (🜹) ALCHEMICAL SYMBOL FOR SAL-AMMONIAC	[177F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F739, 0x0062 };
    uint32_t const ces[9] = { 0x177F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_167)
{
    // 1F73A 0021;	
    // (🜺) ALCHEMICAL SYMBOL FOR ARSENIC	[1780 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73A, 0x0021 };
    uint32_t const ces[9] = { 0x1780, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_168)
{
    // 1F73A 003F;	
    // (🜺) ALCHEMICAL SYMBOL FOR ARSENIC	[1780 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73A, 0x003F };
    uint32_t const ces[9] = { 0x1780, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_169)
{
    // 1F73A 0061;	
    // (🜺) ALCHEMICAL SYMBOL FOR ARSENIC	[1780 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73A, 0x0061 };
    uint32_t const ces[9] = { 0x1780, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_170)
{
    // 1F73A 0041;	
    // (🜺) ALCHEMICAL SYMBOL FOR ARSENIC	[1780 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F73A, 0x0041 };
    uint32_t const ces[9] = { 0x1780, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_171)
{
    // 1F73A 0062;	
    // (🜺) ALCHEMICAL SYMBOL FOR ARSENIC	[1780 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73A, 0x0062 };
    uint32_t const ces[9] = { 0x1780, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_172)
{
    // 1F73B 0021;	
    // (🜻) ALCHEMICAL SYMBOL FOR REALGAR	[1781 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73B, 0x0021 };
    uint32_t const ces[9] = { 0x1781, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_173)
{
    // 1F73B 003F;	
    // (🜻) ALCHEMICAL SYMBOL FOR REALGAR	[1781 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73B, 0x003F };
    uint32_t const ces[9] = { 0x1781, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_174)
{
    // 1F73B 0061;	
    // (🜻) ALCHEMICAL SYMBOL FOR REALGAR	[1781 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73B, 0x0061 };
    uint32_t const ces[9] = { 0x1781, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_175)
{
    // 1F73B 0041;	
    // (🜻) ALCHEMICAL SYMBOL FOR REALGAR	[1781 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F73B, 0x0041 };
    uint32_t const ces[9] = { 0x1781, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_176)
{
    // 1F73B 0062;	
    // (🜻) ALCHEMICAL SYMBOL FOR REALGAR	[1781 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73B, 0x0062 };
    uint32_t const ces[9] = { 0x1781, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_177)
{
    // 1F73C 0021;	
    // (🜼) ALCHEMICAL SYMBOL FOR REALGAR-2	[1782 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73C, 0x0021 };
    uint32_t const ces[9] = { 0x1782, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_178)
{
    // 1F73C 003F;	
    // (🜼) ALCHEMICAL SYMBOL FOR REALGAR-2	[1782 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73C, 0x003F };
    uint32_t const ces[9] = { 0x1782, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_179)
{
    // 1F73C 0061;	
    // (🜼) ALCHEMICAL SYMBOL FOR REALGAR-2	[1782 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73C, 0x0061 };
    uint32_t const ces[9] = { 0x1782, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_180)
{
    // 1F73C 0041;	
    // (🜼) ALCHEMICAL SYMBOL FOR REALGAR-2	[1782 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F73C, 0x0041 };
    uint32_t const ces[9] = { 0x1782, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_181)
{
    // 1F73C 0062;	
    // (🜼) ALCHEMICAL SYMBOL FOR REALGAR-2	[1782 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73C, 0x0062 };
    uint32_t const ces[9] = { 0x1782, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_182)
{
    // 1F73D 0021;	
    // (🜽) ALCHEMICAL SYMBOL FOR AURIPIGMENT	[1783 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73D, 0x0021 };
    uint32_t const ces[9] = { 0x1783, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_183)
{
    // 1F73D 003F;	
    // (🜽) ALCHEMICAL SYMBOL FOR AURIPIGMENT	[1783 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73D, 0x003F };
    uint32_t const ces[9] = { 0x1783, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_184)
{
    // 1F73D 0061;	
    // (🜽) ALCHEMICAL SYMBOL FOR AURIPIGMENT	[1783 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73D, 0x0061 };
    uint32_t const ces[9] = { 0x1783, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_185)
{
    // 1F73D 0041;	
    // (🜽) ALCHEMICAL SYMBOL FOR AURIPIGMENT	[1783 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F73D, 0x0041 };
    uint32_t const ces[9] = { 0x1783, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_186)
{
    // 1F73D 0062;	
    // (🜽) ALCHEMICAL SYMBOL FOR AURIPIGMENT	[1783 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73D, 0x0062 };
    uint32_t const ces[9] = { 0x1783, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_187)
{
    // 1F73E 0021;	
    // (🜾) ALCHEMICAL SYMBOL FOR BISMUTH ORE	[1784 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73E, 0x0021 };
    uint32_t const ces[9] = { 0x1784, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_188)
{
    // 1F73E 003F;	
    // (🜾) ALCHEMICAL SYMBOL FOR BISMUTH ORE	[1784 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73E, 0x003F };
    uint32_t const ces[9] = { 0x1784, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_189)
{
    // 1F73E 0061;	
    // (🜾) ALCHEMICAL SYMBOL FOR BISMUTH ORE	[1784 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73E, 0x0061 };
    uint32_t const ces[9] = { 0x1784, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_190)
{
    // 1F73E 0041;	
    // (🜾) ALCHEMICAL SYMBOL FOR BISMUTH ORE	[1784 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F73E, 0x0041 };
    uint32_t const ces[9] = { 0x1784, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_191)
{
    // 1F73E 0062;	
    // (🜾) ALCHEMICAL SYMBOL FOR BISMUTH ORE	[1784 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73E, 0x0062 };
    uint32_t const ces[9] = { 0x1784, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_192)
{
    // 1F73F 0021;	
    // (🜿) ALCHEMICAL SYMBOL FOR TARTAR	[1785 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73F, 0x0021 };
    uint32_t const ces[9] = { 0x1785, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_193)
{
    // 1F73F 003F;	
    // (🜿) ALCHEMICAL SYMBOL FOR TARTAR	[1785 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73F, 0x003F };
    uint32_t const ces[9] = { 0x1785, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_194)
{
    // 1F73F 0061;	
    // (🜿) ALCHEMICAL SYMBOL FOR TARTAR	[1785 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73F, 0x0061 };
    uint32_t const ces[9] = { 0x1785, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_195)
{
    // 1F73F 0041;	
    // (🜿) ALCHEMICAL SYMBOL FOR TARTAR	[1785 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F73F, 0x0041 };
    uint32_t const ces[9] = { 0x1785, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_196)
{
    // 1F73F 0062;	
    // (🜿) ALCHEMICAL SYMBOL FOR TARTAR	[1785 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F73F, 0x0062 };
    uint32_t const ces[9] = { 0x1785, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_197)
{
    // 1F740 0021;	
    // (🝀) ALCHEMICAL SYMBOL FOR TARTAR-2	[1786 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F740, 0x0021 };
    uint32_t const ces[9] = { 0x1786, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_198)
{
    // 1F740 003F;	
    // (🝀) ALCHEMICAL SYMBOL FOR TARTAR-2	[1786 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F740, 0x003F };
    uint32_t const ces[9] = { 0x1786, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_199)
{
    // 1F740 0061;	
    // (🝀) ALCHEMICAL SYMBOL FOR TARTAR-2	[1786 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F740, 0x0061 };
    uint32_t const ces[9] = { 0x1786, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_200)
{
    // 1F740 0041;	
    // (🝀) ALCHEMICAL SYMBOL FOR TARTAR-2	[1786 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F740, 0x0041 };
    uint32_t const ces[9] = { 0x1786, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_201)
{
    // 1F740 0062;	
    // (🝀) ALCHEMICAL SYMBOL FOR TARTAR-2	[1786 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F740, 0x0062 };
    uint32_t const ces[9] = { 0x1786, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_202)
{
    // 1F741 0021;	
    // (🝁) ALCHEMICAL SYMBOL FOR QUICK LIME	[1787 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F741, 0x0021 };
    uint32_t const ces[9] = { 0x1787, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_203)
{
    // 1F741 003F;	
    // (🝁) ALCHEMICAL SYMBOL FOR QUICK LIME	[1787 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F741, 0x003F };
    uint32_t const ces[9] = { 0x1787, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_204)
{
    // 1F741 0061;	
    // (🝁) ALCHEMICAL SYMBOL FOR QUICK LIME	[1787 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F741, 0x0061 };
    uint32_t const ces[9] = { 0x1787, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_205)
{
    // 1F741 0041;	
    // (🝁) ALCHEMICAL SYMBOL FOR QUICK LIME	[1787 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F741, 0x0041 };
    uint32_t const ces[9] = { 0x1787, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_206)
{
    // 1F741 0062;	
    // (🝁) ALCHEMICAL SYMBOL FOR QUICK LIME	[1787 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F741, 0x0062 };
    uint32_t const ces[9] = { 0x1787, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_207)
{
    // 1F742 0021;	
    // (🝂) ALCHEMICAL SYMBOL FOR BORAX	[1788 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F742, 0x0021 };
    uint32_t const ces[9] = { 0x1788, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_208)
{
    // 1F742 003F;	
    // (🝂) ALCHEMICAL SYMBOL FOR BORAX	[1788 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F742, 0x003F };
    uint32_t const ces[9] = { 0x1788, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_209)
{
    // 1F742 0061;	
    // (🝂) ALCHEMICAL SYMBOL FOR BORAX	[1788 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F742, 0x0061 };
    uint32_t const ces[9] = { 0x1788, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_210)
{
    // 1F742 0041;	
    // (🝂) ALCHEMICAL SYMBOL FOR BORAX	[1788 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F742, 0x0041 };
    uint32_t const ces[9] = { 0x1788, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_211)
{
    // 1F742 0062;	
    // (🝂) ALCHEMICAL SYMBOL FOR BORAX	[1788 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F742, 0x0062 };
    uint32_t const ces[9] = { 0x1788, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_212)
{
    // 1F743 0021;	
    // (🝃) ALCHEMICAL SYMBOL FOR BORAX-2	[1789 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F743, 0x0021 };
    uint32_t const ces[9] = { 0x1789, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_213)
{
    // 1F743 003F;	
    // (🝃) ALCHEMICAL SYMBOL FOR BORAX-2	[1789 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F743, 0x003F };
    uint32_t const ces[9] = { 0x1789, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_214)
{
    // 1F743 0061;	
    // (🝃) ALCHEMICAL SYMBOL FOR BORAX-2	[1789 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F743, 0x0061 };
    uint32_t const ces[9] = { 0x1789, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_215)
{
    // 1F743 0041;	
    // (🝃) ALCHEMICAL SYMBOL FOR BORAX-2	[1789 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F743, 0x0041 };
    uint32_t const ces[9] = { 0x1789, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_216)
{
    // 1F743 0062;	
    // (🝃) ALCHEMICAL SYMBOL FOR BORAX-2	[1789 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F743, 0x0062 };
    uint32_t const ces[9] = { 0x1789, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_217)
{
    // 1F744 0021;	
    // (🝄) ALCHEMICAL SYMBOL FOR BORAX-3	[178A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F744, 0x0021 };
    uint32_t const ces[9] = { 0x178A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_218)
{
    // 1F744 003F;	
    // (🝄) ALCHEMICAL SYMBOL FOR BORAX-3	[178A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F744, 0x003F };
    uint32_t const ces[9] = { 0x178A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_219)
{
    // 1F744 0061;	
    // (🝄) ALCHEMICAL SYMBOL FOR BORAX-3	[178A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F744, 0x0061 };
    uint32_t const ces[9] = { 0x178A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_220)
{
    // 1F744 0041;	
    // (🝄) ALCHEMICAL SYMBOL FOR BORAX-3	[178A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F744, 0x0041 };
    uint32_t const ces[9] = { 0x178A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_221)
{
    // 1F744 0062;	
    // (🝄) ALCHEMICAL SYMBOL FOR BORAX-3	[178A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F744, 0x0062 };
    uint32_t const ces[9] = { 0x178A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_222)
{
    // 1F745 0021;	
    // (🝅) ALCHEMICAL SYMBOL FOR ALUM	[178B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F745, 0x0021 };
    uint32_t const ces[9] = { 0x178B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_223)
{
    // 1F745 003F;	
    // (🝅) ALCHEMICAL SYMBOL FOR ALUM	[178B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F745, 0x003F };
    uint32_t const ces[9] = { 0x178B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_224)
{
    // 1F745 0061;	
    // (🝅) ALCHEMICAL SYMBOL FOR ALUM	[178B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F745, 0x0061 };
    uint32_t const ces[9] = { 0x178B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_225)
{
    // 1F745 0041;	
    // (🝅) ALCHEMICAL SYMBOL FOR ALUM	[178B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F745, 0x0041 };
    uint32_t const ces[9] = { 0x178B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_226)
{
    // 1F745 0062;	
    // (🝅) ALCHEMICAL SYMBOL FOR ALUM	[178B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F745, 0x0062 };
    uint32_t const ces[9] = { 0x178B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_227)
{
    // 1F746 0021;	
    // (🝆) ALCHEMICAL SYMBOL FOR OIL	[178C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F746, 0x0021 };
    uint32_t const ces[9] = { 0x178C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_228)
{
    // 1F746 003F;	
    // (🝆) ALCHEMICAL SYMBOL FOR OIL	[178C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F746, 0x003F };
    uint32_t const ces[9] = { 0x178C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_229)
{
    // 1F746 0061;	
    // (🝆) ALCHEMICAL SYMBOL FOR OIL	[178C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F746, 0x0061 };
    uint32_t const ces[9] = { 0x178C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_230)
{
    // 1F746 0041;	
    // (🝆) ALCHEMICAL SYMBOL FOR OIL	[178C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F746, 0x0041 };
    uint32_t const ces[9] = { 0x178C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_231)
{
    // 1F746 0062;	
    // (🝆) ALCHEMICAL SYMBOL FOR OIL	[178C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F746, 0x0062 };
    uint32_t const ces[9] = { 0x178C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_232)
{
    // 1F747 0021;	
    // (🝇) ALCHEMICAL SYMBOL FOR SPIRIT	[178D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F747, 0x0021 };
    uint32_t const ces[9] = { 0x178D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_233)
{
    // 1F747 003F;	
    // (🝇) ALCHEMICAL SYMBOL FOR SPIRIT	[178D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F747, 0x003F };
    uint32_t const ces[9] = { 0x178D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_234)
{
    // 1F747 0061;	
    // (🝇) ALCHEMICAL SYMBOL FOR SPIRIT	[178D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F747, 0x0061 };
    uint32_t const ces[9] = { 0x178D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_235)
{
    // 1F747 0041;	
    // (🝇) ALCHEMICAL SYMBOL FOR SPIRIT	[178D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F747, 0x0041 };
    uint32_t const ces[9] = { 0x178D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_236)
{
    // 1F747 0062;	
    // (🝇) ALCHEMICAL SYMBOL FOR SPIRIT	[178D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F747, 0x0062 };
    uint32_t const ces[9] = { 0x178D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_237)
{
    // 1F748 0021;	
    // (🝈) ALCHEMICAL SYMBOL FOR TINCTURE	[178E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F748, 0x0021 };
    uint32_t const ces[9] = { 0x178E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_238)
{
    // 1F748 003F;	
    // (🝈) ALCHEMICAL SYMBOL FOR TINCTURE	[178E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F748, 0x003F };
    uint32_t const ces[9] = { 0x178E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_239)
{
    // 1F748 0061;	
    // (🝈) ALCHEMICAL SYMBOL FOR TINCTURE	[178E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F748, 0x0061 };
    uint32_t const ces[9] = { 0x178E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_240)
{
    // 1F748 0041;	
    // (🝈) ALCHEMICAL SYMBOL FOR TINCTURE	[178E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F748, 0x0041 };
    uint32_t const ces[9] = { 0x178E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_241)
{
    // 1F748 0062;	
    // (🝈) ALCHEMICAL SYMBOL FOR TINCTURE	[178E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F748, 0x0062 };
    uint32_t const ces[9] = { 0x178E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_242)
{
    // 1F749 0021;	
    // (🝉) ALCHEMICAL SYMBOL FOR GUM	[178F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F749, 0x0021 };
    uint32_t const ces[9] = { 0x178F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_243)
{
    // 1F749 003F;	
    // (🝉) ALCHEMICAL SYMBOL FOR GUM	[178F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F749, 0x003F };
    uint32_t const ces[9] = { 0x178F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_244)
{
    // 1F749 0061;	
    // (🝉) ALCHEMICAL SYMBOL FOR GUM	[178F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F749, 0x0061 };
    uint32_t const ces[9] = { 0x178F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_245)
{
    // 1F749 0041;	
    // (🝉) ALCHEMICAL SYMBOL FOR GUM	[178F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F749, 0x0041 };
    uint32_t const ces[9] = { 0x178F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_246)
{
    // 1F749 0062;	
    // (🝉) ALCHEMICAL SYMBOL FOR GUM	[178F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F749, 0x0062 };
    uint32_t const ces[9] = { 0x178F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_247)
{
    // 1F74A 0021;	
    // (🝊) ALCHEMICAL SYMBOL FOR WAX	[1790 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74A, 0x0021 };
    uint32_t const ces[9] = { 0x1790, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_248)
{
    // 1F74A 003F;	
    // (🝊) ALCHEMICAL SYMBOL FOR WAX	[1790 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74A, 0x003F };
    uint32_t const ces[9] = { 0x1790, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_249)
{
    // 1F74A 0061;	
    // (🝊) ALCHEMICAL SYMBOL FOR WAX	[1790 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74A, 0x0061 };
    uint32_t const ces[9] = { 0x1790, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_250)
{
    // 1F74A 0041;	
    // (🝊) ALCHEMICAL SYMBOL FOR WAX	[1790 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F74A, 0x0041 };
    uint32_t const ces[9] = { 0x1790, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_251)
{
    // 1F74A 0062;	
    // (🝊) ALCHEMICAL SYMBOL FOR WAX	[1790 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74A, 0x0062 };
    uint32_t const ces[9] = { 0x1790, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_252)
{
    // 1F74B 0021;	
    // (🝋) ALCHEMICAL SYMBOL FOR POWDER	[1791 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74B, 0x0021 };
    uint32_t const ces[9] = { 0x1791, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_253)
{
    // 1F74B 003F;	
    // (🝋) ALCHEMICAL SYMBOL FOR POWDER	[1791 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74B, 0x003F };
    uint32_t const ces[9] = { 0x1791, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_254)
{
    // 1F74B 0061;	
    // (🝋) ALCHEMICAL SYMBOL FOR POWDER	[1791 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74B, 0x0061 };
    uint32_t const ces[9] = { 0x1791, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_255)
{
    // 1F74B 0041;	
    // (🝋) ALCHEMICAL SYMBOL FOR POWDER	[1791 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F74B, 0x0041 };
    uint32_t const ces[9] = { 0x1791, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_256)
{
    // 1F74B 0062;	
    // (🝋) ALCHEMICAL SYMBOL FOR POWDER	[1791 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74B, 0x0062 };
    uint32_t const ces[9] = { 0x1791, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_257)
{
    // 1F74C 0021;	
    // (🝌) ALCHEMICAL SYMBOL FOR CALX	[1792 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74C, 0x0021 };
    uint32_t const ces[9] = { 0x1792, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_258)
{
    // 1F74C 003F;	
    // (🝌) ALCHEMICAL SYMBOL FOR CALX	[1792 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74C, 0x003F };
    uint32_t const ces[9] = { 0x1792, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_259)
{
    // 1F74C 0061;	
    // (🝌) ALCHEMICAL SYMBOL FOR CALX	[1792 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74C, 0x0061 };
    uint32_t const ces[9] = { 0x1792, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_260)
{
    // 1F74C 0041;	
    // (🝌) ALCHEMICAL SYMBOL FOR CALX	[1792 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F74C, 0x0041 };
    uint32_t const ces[9] = { 0x1792, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_261)
{
    // 1F74C 0062;	
    // (🝌) ALCHEMICAL SYMBOL FOR CALX	[1792 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74C, 0x0062 };
    uint32_t const ces[9] = { 0x1792, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_262)
{
    // 1F74D 0021;	
    // (🝍) ALCHEMICAL SYMBOL FOR TUTTY	[1793 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74D, 0x0021 };
    uint32_t const ces[9] = { 0x1793, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_263)
{
    // 1F74D 003F;	
    // (🝍) ALCHEMICAL SYMBOL FOR TUTTY	[1793 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74D, 0x003F };
    uint32_t const ces[9] = { 0x1793, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_264)
{
    // 1F74D 0061;	
    // (🝍) ALCHEMICAL SYMBOL FOR TUTTY	[1793 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74D, 0x0061 };
    uint32_t const ces[9] = { 0x1793, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_265)
{
    // 1F74D 0041;	
    // (🝍) ALCHEMICAL SYMBOL FOR TUTTY	[1793 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F74D, 0x0041 };
    uint32_t const ces[9] = { 0x1793, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_266)
{
    // 1F74D 0062;	
    // (🝍) ALCHEMICAL SYMBOL FOR TUTTY	[1793 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74D, 0x0062 };
    uint32_t const ces[9] = { 0x1793, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_267)
{
    // 1F74E 0021;	
    // (🝎) ALCHEMICAL SYMBOL FOR CAPUT MORTUUM	[1794 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74E, 0x0021 };
    uint32_t const ces[9] = { 0x1794, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_268)
{
    // 1F74E 003F;	
    // (🝎) ALCHEMICAL SYMBOL FOR CAPUT MORTUUM	[1794 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74E, 0x003F };
    uint32_t const ces[9] = { 0x1794, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_269)
{
    // 1F74E 0061;	
    // (🝎) ALCHEMICAL SYMBOL FOR CAPUT MORTUUM	[1794 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74E, 0x0061 };
    uint32_t const ces[9] = { 0x1794, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_270)
{
    // 1F74E 0041;	
    // (🝎) ALCHEMICAL SYMBOL FOR CAPUT MORTUUM	[1794 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F74E, 0x0041 };
    uint32_t const ces[9] = { 0x1794, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_271)
{
    // 1F74E 0062;	
    // (🝎) ALCHEMICAL SYMBOL FOR CAPUT MORTUUM	[1794 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74E, 0x0062 };
    uint32_t const ces[9] = { 0x1794, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_272)
{
    // 1F74F 0021;	
    // (🝏) ALCHEMICAL SYMBOL FOR SCEPTER OF JOVE	[1795 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74F, 0x0021 };
    uint32_t const ces[9] = { 0x1795, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_273)
{
    // 1F74F 003F;	
    // (🝏) ALCHEMICAL SYMBOL FOR SCEPTER OF JOVE	[1795 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74F, 0x003F };
    uint32_t const ces[9] = { 0x1795, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_274)
{
    // 1F74F 0061;	
    // (🝏) ALCHEMICAL SYMBOL FOR SCEPTER OF JOVE	[1795 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74F, 0x0061 };
    uint32_t const ces[9] = { 0x1795, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_275)
{
    // 1F74F 0041;	
    // (🝏) ALCHEMICAL SYMBOL FOR SCEPTER OF JOVE	[1795 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F74F, 0x0041 };
    uint32_t const ces[9] = { 0x1795, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_276)
{
    // 1F74F 0062;	
    // (🝏) ALCHEMICAL SYMBOL FOR SCEPTER OF JOVE	[1795 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F74F, 0x0062 };
    uint32_t const ces[9] = { 0x1795, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_277)
{
    // 1F750 0021;	
    // (🝐) ALCHEMICAL SYMBOL FOR CADUCEUS	[1796 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F750, 0x0021 };
    uint32_t const ces[9] = { 0x1796, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_278)
{
    // 1F750 003F;	
    // (🝐) ALCHEMICAL SYMBOL FOR CADUCEUS	[1796 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F750, 0x003F };
    uint32_t const ces[9] = { 0x1796, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_279)
{
    // 1F750 0061;	
    // (🝐) ALCHEMICAL SYMBOL FOR CADUCEUS	[1796 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F750, 0x0061 };
    uint32_t const ces[9] = { 0x1796, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_280)
{
    // 1F750 0041;	
    // (🝐) ALCHEMICAL SYMBOL FOR CADUCEUS	[1796 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F750, 0x0041 };
    uint32_t const ces[9] = { 0x1796, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_281)
{
    // 1F750 0062;	
    // (🝐) ALCHEMICAL SYMBOL FOR CADUCEUS	[1796 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F750, 0x0062 };
    uint32_t const ces[9] = { 0x1796, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_282)
{
    // 1F751 0021;	
    // (🝑) ALCHEMICAL SYMBOL FOR TRIDENT	[1797 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F751, 0x0021 };
    uint32_t const ces[9] = { 0x1797, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_283)
{
    // 1F751 003F;	
    // (🝑) ALCHEMICAL SYMBOL FOR TRIDENT	[1797 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F751, 0x003F };
    uint32_t const ces[9] = { 0x1797, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_284)
{
    // 1F751 0061;	
    // (🝑) ALCHEMICAL SYMBOL FOR TRIDENT	[1797 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F751, 0x0061 };
    uint32_t const ces[9] = { 0x1797, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_285)
{
    // 1F751 0041;	
    // (🝑) ALCHEMICAL SYMBOL FOR TRIDENT	[1797 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F751, 0x0041 };
    uint32_t const ces[9] = { 0x1797, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_286)
{
    // 1F751 0062;	
    // (🝑) ALCHEMICAL SYMBOL FOR TRIDENT	[1797 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F751, 0x0062 };
    uint32_t const ces[9] = { 0x1797, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_287)
{
    // 1F752 0021;	
    // (🝒) ALCHEMICAL SYMBOL FOR STARRED TRIDENT	[1798 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F752, 0x0021 };
    uint32_t const ces[9] = { 0x1798, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_288)
{
    // 1F752 003F;	
    // (🝒) ALCHEMICAL SYMBOL FOR STARRED TRIDENT	[1798 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F752, 0x003F };
    uint32_t const ces[9] = { 0x1798, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_289)
{
    // 1F752 0061;	
    // (🝒) ALCHEMICAL SYMBOL FOR STARRED TRIDENT	[1798 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F752, 0x0061 };
    uint32_t const ces[9] = { 0x1798, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_290)
{
    // 1F752 0041;	
    // (🝒) ALCHEMICAL SYMBOL FOR STARRED TRIDENT	[1798 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F752, 0x0041 };
    uint32_t const ces[9] = { 0x1798, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_291)
{
    // 1F752 0062;	
    // (🝒) ALCHEMICAL SYMBOL FOR STARRED TRIDENT	[1798 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F752, 0x0062 };
    uint32_t const ces[9] = { 0x1798, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_292)
{
    // 1F753 0021;	
    // (🝓) ALCHEMICAL SYMBOL FOR LODESTONE	[1799 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F753, 0x0021 };
    uint32_t const ces[9] = { 0x1799, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_293)
{
    // 1F753 003F;	
    // (🝓) ALCHEMICAL SYMBOL FOR LODESTONE	[1799 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F753, 0x003F };
    uint32_t const ces[9] = { 0x1799, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_294)
{
    // 1F753 0061;	
    // (🝓) ALCHEMICAL SYMBOL FOR LODESTONE	[1799 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F753, 0x0061 };
    uint32_t const ces[9] = { 0x1799, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_295)
{
    // 1F753 0041;	
    // (🝓) ALCHEMICAL SYMBOL FOR LODESTONE	[1799 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F753, 0x0041 };
    uint32_t const ces[9] = { 0x1799, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_296)
{
    // 1F753 0062;	
    // (🝓) ALCHEMICAL SYMBOL FOR LODESTONE	[1799 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F753, 0x0062 };
    uint32_t const ces[9] = { 0x1799, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_297)
{
    // 1F754 0021;	
    // (🝔) ALCHEMICAL SYMBOL FOR SOAP	[179A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F754, 0x0021 };
    uint32_t const ces[9] = { 0x179A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_298)
{
    // 1F754 003F;	
    // (🝔) ALCHEMICAL SYMBOL FOR SOAP	[179A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F754, 0x003F };
    uint32_t const ces[9] = { 0x179A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_299)
{
    // 1F754 0061;	
    // (🝔) ALCHEMICAL SYMBOL FOR SOAP	[179A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F754, 0x0061 };
    uint32_t const ces[9] = { 0x179A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_300)
{
    // 1F754 0041;	
    // (🝔) ALCHEMICAL SYMBOL FOR SOAP	[179A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F754, 0x0041 };
    uint32_t const ces[9] = { 0x179A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_301)
{
    // 1F754 0062;	
    // (🝔) ALCHEMICAL SYMBOL FOR SOAP	[179A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F754, 0x0062 };
    uint32_t const ces[9] = { 0x179A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_302)
{
    // 1F755 0021;	
    // (🝕) ALCHEMICAL SYMBOL FOR URINE	[179B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F755, 0x0021 };
    uint32_t const ces[9] = { 0x179B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_303)
{
    // 1F755 003F;	
    // (🝕) ALCHEMICAL SYMBOL FOR URINE	[179B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F755, 0x003F };
    uint32_t const ces[9] = { 0x179B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_304)
{
    // 1F755 0061;	
    // (🝕) ALCHEMICAL SYMBOL FOR URINE	[179B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F755, 0x0061 };
    uint32_t const ces[9] = { 0x179B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_305)
{
    // 1F755 0041;	
    // (🝕) ALCHEMICAL SYMBOL FOR URINE	[179B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F755, 0x0041 };
    uint32_t const ces[9] = { 0x179B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_306)
{
    // 1F755 0062;	
    // (🝕) ALCHEMICAL SYMBOL FOR URINE	[179B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F755, 0x0062 };
    uint32_t const ces[9] = { 0x179B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_307)
{
    // 1F756 0021;	
    // (🝖) ALCHEMICAL SYMBOL FOR HORSE DUNG	[179C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F756, 0x0021 };
    uint32_t const ces[9] = { 0x179C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_308)
{
    // 1F756 003F;	
    // (🝖) ALCHEMICAL SYMBOL FOR HORSE DUNG	[179C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F756, 0x003F };
    uint32_t const ces[9] = { 0x179C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_309)
{
    // 1F756 0061;	
    // (🝖) ALCHEMICAL SYMBOL FOR HORSE DUNG	[179C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F756, 0x0061 };
    uint32_t const ces[9] = { 0x179C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_310)
{
    // 1F756 0041;	
    // (🝖) ALCHEMICAL SYMBOL FOR HORSE DUNG	[179C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F756, 0x0041 };
    uint32_t const ces[9] = { 0x179C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_311)
{
    // 1F756 0062;	
    // (🝖) ALCHEMICAL SYMBOL FOR HORSE DUNG	[179C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F756, 0x0062 };
    uint32_t const ces[9] = { 0x179C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_312)
{
    // 1F757 0021;	
    // (🝗) ALCHEMICAL SYMBOL FOR ASHES	[179D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F757, 0x0021 };
    uint32_t const ces[9] = { 0x179D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_313)
{
    // 1F757 003F;	
    // (🝗) ALCHEMICAL SYMBOL FOR ASHES	[179D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F757, 0x003F };
    uint32_t const ces[9] = { 0x179D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_314)
{
    // 1F757 0061;	
    // (🝗) ALCHEMICAL SYMBOL FOR ASHES	[179D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F757, 0x0061 };
    uint32_t const ces[9] = { 0x179D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_315)
{
    // 1F757 0041;	
    // (🝗) ALCHEMICAL SYMBOL FOR ASHES	[179D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F757, 0x0041 };
    uint32_t const ces[9] = { 0x179D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_316)
{
    // 1F757 0062;	
    // (🝗) ALCHEMICAL SYMBOL FOR ASHES	[179D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F757, 0x0062 };
    uint32_t const ces[9] = { 0x179D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_317)
{
    // 1F758 0021;	
    // (🝘) ALCHEMICAL SYMBOL FOR POT ASHES	[179E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F758, 0x0021 };
    uint32_t const ces[9] = { 0x179E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_318)
{
    // 1F758 003F;	
    // (🝘) ALCHEMICAL SYMBOL FOR POT ASHES	[179E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F758, 0x003F };
    uint32_t const ces[9] = { 0x179E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_319)
{
    // 1F758 0061;	
    // (🝘) ALCHEMICAL SYMBOL FOR POT ASHES	[179E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F758, 0x0061 };
    uint32_t const ces[9] = { 0x179E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_320)
{
    // 1F758 0041;	
    // (🝘) ALCHEMICAL SYMBOL FOR POT ASHES	[179E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F758, 0x0041 };
    uint32_t const ces[9] = { 0x179E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_321)
{
    // 1F758 0062;	
    // (🝘) ALCHEMICAL SYMBOL FOR POT ASHES	[179E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F758, 0x0062 };
    uint32_t const ces[9] = { 0x179E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_322)
{
    // 1F759 0021;	
    // (🝙) ALCHEMICAL SYMBOL FOR BRICK	[179F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F759, 0x0021 };
    uint32_t const ces[9] = { 0x179F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_323)
{
    // 1F759 003F;	
    // (🝙) ALCHEMICAL SYMBOL FOR BRICK	[179F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F759, 0x003F };
    uint32_t const ces[9] = { 0x179F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_324)
{
    // 1F759 0061;	
    // (🝙) ALCHEMICAL SYMBOL FOR BRICK	[179F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F759, 0x0061 };
    uint32_t const ces[9] = { 0x179F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_325)
{
    // 1F759 0041;	
    // (🝙) ALCHEMICAL SYMBOL FOR BRICK	[179F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F759, 0x0041 };
    uint32_t const ces[9] = { 0x179F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_326)
{
    // 1F759 0062;	
    // (🝙) ALCHEMICAL SYMBOL FOR BRICK	[179F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F759, 0x0062 };
    uint32_t const ces[9] = { 0x179F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_327)
{
    // 1F75A 0021;	
    // (🝚) ALCHEMICAL SYMBOL FOR POWDERED BRICK	[17A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75A, 0x0021 };
    uint32_t const ces[9] = { 0x17A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_328)
{
    // 1F75A 003F;	
    // (🝚) ALCHEMICAL SYMBOL FOR POWDERED BRICK	[17A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75A, 0x003F };
    uint32_t const ces[9] = { 0x17A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_329)
{
    // 1F75A 0061;	
    // (🝚) ALCHEMICAL SYMBOL FOR POWDERED BRICK	[17A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75A, 0x0061 };
    uint32_t const ces[9] = { 0x17A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_330)
{
    // 1F75A 0041;	
    // (🝚) ALCHEMICAL SYMBOL FOR POWDERED BRICK	[17A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F75A, 0x0041 };
    uint32_t const ces[9] = { 0x17A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_331)
{
    // 1F75A 0062;	
    // (🝚) ALCHEMICAL SYMBOL FOR POWDERED BRICK	[17A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75A, 0x0062 };
    uint32_t const ces[9] = { 0x17A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_332)
{
    // 1F75B 0021;	
    // (🝛) ALCHEMICAL SYMBOL FOR AMALGAM	[17A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75B, 0x0021 };
    uint32_t const ces[9] = { 0x17A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_333)
{
    // 1F75B 003F;	
    // (🝛) ALCHEMICAL SYMBOL FOR AMALGAM	[17A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75B, 0x003F };
    uint32_t const ces[9] = { 0x17A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_334)
{
    // 1F75B 0061;	
    // (🝛) ALCHEMICAL SYMBOL FOR AMALGAM	[17A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75B, 0x0061 };
    uint32_t const ces[9] = { 0x17A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_335)
{
    // 1F75B 0041;	
    // (🝛) ALCHEMICAL SYMBOL FOR AMALGAM	[17A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F75B, 0x0041 };
    uint32_t const ces[9] = { 0x17A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_336)
{
    // 1F75B 0062;	
    // (🝛) ALCHEMICAL SYMBOL FOR AMALGAM	[17A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75B, 0x0062 };
    uint32_t const ces[9] = { 0x17A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_337)
{
    // 1F75C 0021;	
    // (🝜) ALCHEMICAL SYMBOL FOR STRATUM SUPER STRATUM	[17A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75C, 0x0021 };
    uint32_t const ces[9] = { 0x17A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_338)
{
    // 1F75C 003F;	
    // (🝜) ALCHEMICAL SYMBOL FOR STRATUM SUPER STRATUM	[17A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75C, 0x003F };
    uint32_t const ces[9] = { 0x17A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_339)
{
    // 1F75C 0061;	
    // (🝜) ALCHEMICAL SYMBOL FOR STRATUM SUPER STRATUM	[17A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75C, 0x0061 };
    uint32_t const ces[9] = { 0x17A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_340)
{
    // 1F75C 0041;	
    // (🝜) ALCHEMICAL SYMBOL FOR STRATUM SUPER STRATUM	[17A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F75C, 0x0041 };
    uint32_t const ces[9] = { 0x17A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_341)
{
    // 1F75C 0062;	
    // (🝜) ALCHEMICAL SYMBOL FOR STRATUM SUPER STRATUM	[17A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75C, 0x0062 };
    uint32_t const ces[9] = { 0x17A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_342)
{
    // 1F75D 0021;	
    // (🝝) ALCHEMICAL SYMBOL FOR STRATUM SUPER STRATUM-2	[17A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75D, 0x0021 };
    uint32_t const ces[9] = { 0x17A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_343)
{
    // 1F75D 003F;	
    // (🝝) ALCHEMICAL SYMBOL FOR STRATUM SUPER STRATUM-2	[17A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75D, 0x003F };
    uint32_t const ces[9] = { 0x17A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_344)
{
    // 1F75D 0061;	
    // (🝝) ALCHEMICAL SYMBOL FOR STRATUM SUPER STRATUM-2	[17A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75D, 0x0061 };
    uint32_t const ces[9] = { 0x17A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_345)
{
    // 1F75D 0041;	
    // (🝝) ALCHEMICAL SYMBOL FOR STRATUM SUPER STRATUM-2	[17A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F75D, 0x0041 };
    uint32_t const ces[9] = { 0x17A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_346)
{
    // 1F75D 0062;	
    // (🝝) ALCHEMICAL SYMBOL FOR STRATUM SUPER STRATUM-2	[17A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75D, 0x0062 };
    uint32_t const ces[9] = { 0x17A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_347)
{
    // 1F75E 0021;	
    // (🝞) ALCHEMICAL SYMBOL FOR SUBLIMATION	[17A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75E, 0x0021 };
    uint32_t const ces[9] = { 0x17A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_348)
{
    // 1F75E 003F;	
    // (🝞) ALCHEMICAL SYMBOL FOR SUBLIMATION	[17A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75E, 0x003F };
    uint32_t const ces[9] = { 0x17A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_349)
{
    // 1F75E 0061;	
    // (🝞) ALCHEMICAL SYMBOL FOR SUBLIMATION	[17A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75E, 0x0061 };
    uint32_t const ces[9] = { 0x17A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_350)
{
    // 1F75E 0041;	
    // (🝞) ALCHEMICAL SYMBOL FOR SUBLIMATION	[17A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F75E, 0x0041 };
    uint32_t const ces[9] = { 0x17A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_351)
{
    // 1F75E 0062;	
    // (🝞) ALCHEMICAL SYMBOL FOR SUBLIMATION	[17A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75E, 0x0062 };
    uint32_t const ces[9] = { 0x17A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_352)
{
    // 1F75F 0021;	
    // (🝟) ALCHEMICAL SYMBOL FOR PRECIPITATE	[17A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75F, 0x0021 };
    uint32_t const ces[9] = { 0x17A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_353)
{
    // 1F75F 003F;	
    // (🝟) ALCHEMICAL SYMBOL FOR PRECIPITATE	[17A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75F, 0x003F };
    uint32_t const ces[9] = { 0x17A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_354)
{
    // 1F75F 0061;	
    // (🝟) ALCHEMICAL SYMBOL FOR PRECIPITATE	[17A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75F, 0x0061 };
    uint32_t const ces[9] = { 0x17A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_355)
{
    // 1F75F 0041;	
    // (🝟) ALCHEMICAL SYMBOL FOR PRECIPITATE	[17A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F75F, 0x0041 };
    uint32_t const ces[9] = { 0x17A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_356)
{
    // 1F75F 0062;	
    // (🝟) ALCHEMICAL SYMBOL FOR PRECIPITATE	[17A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F75F, 0x0062 };
    uint32_t const ces[9] = { 0x17A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_357)
{
    // 1F760 0021;	
    // (🝠) ALCHEMICAL SYMBOL FOR DISTILL	[17A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F760, 0x0021 };
    uint32_t const ces[9] = { 0x17A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_358)
{
    // 1F760 003F;	
    // (🝠) ALCHEMICAL SYMBOL FOR DISTILL	[17A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F760, 0x003F };
    uint32_t const ces[9] = { 0x17A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_359)
{
    // 1F760 0061;	
    // (🝠) ALCHEMICAL SYMBOL FOR DISTILL	[17A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F760, 0x0061 };
    uint32_t const ces[9] = { 0x17A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_360)
{
    // 1F760 0041;	
    // (🝠) ALCHEMICAL SYMBOL FOR DISTILL	[17A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F760, 0x0041 };
    uint32_t const ces[9] = { 0x17A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_361)
{
    // 1F760 0062;	
    // (🝠) ALCHEMICAL SYMBOL FOR DISTILL	[17A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F760, 0x0062 };
    uint32_t const ces[9] = { 0x17A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_362)
{
    // 1F761 0021;	
    // (🝡) ALCHEMICAL SYMBOL FOR DISSOLVE	[17A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F761, 0x0021 };
    uint32_t const ces[9] = { 0x17A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_363)
{
    // 1F761 003F;	
    // (🝡) ALCHEMICAL SYMBOL FOR DISSOLVE	[17A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F761, 0x003F };
    uint32_t const ces[9] = { 0x17A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_364)
{
    // 1F761 0061;	
    // (🝡) ALCHEMICAL SYMBOL FOR DISSOLVE	[17A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F761, 0x0061 };
    uint32_t const ces[9] = { 0x17A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_365)
{
    // 1F761 0041;	
    // (🝡) ALCHEMICAL SYMBOL FOR DISSOLVE	[17A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F761, 0x0041 };
    uint32_t const ces[9] = { 0x17A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_366)
{
    // 1F761 0062;	
    // (🝡) ALCHEMICAL SYMBOL FOR DISSOLVE	[17A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F761, 0x0062 };
    uint32_t const ces[9] = { 0x17A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_367)
{
    // 1F762 0021;	
    // (🝢) ALCHEMICAL SYMBOL FOR DISSOLVE-2	[17A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F762, 0x0021 };
    uint32_t const ces[9] = { 0x17A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_368)
{
    // 1F762 003F;	
    // (🝢) ALCHEMICAL SYMBOL FOR DISSOLVE-2	[17A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F762, 0x003F };
    uint32_t const ces[9] = { 0x17A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_369)
{
    // 1F762 0061;	
    // (🝢) ALCHEMICAL SYMBOL FOR DISSOLVE-2	[17A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F762, 0x0061 };
    uint32_t const ces[9] = { 0x17A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_370)
{
    // 1F762 0041;	
    // (🝢) ALCHEMICAL SYMBOL FOR DISSOLVE-2	[17A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F762, 0x0041 };
    uint32_t const ces[9] = { 0x17A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_371)
{
    // 1F762 0062;	
    // (🝢) ALCHEMICAL SYMBOL FOR DISSOLVE-2	[17A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F762, 0x0062 };
    uint32_t const ces[9] = { 0x17A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_372)
{
    // 1F763 0021;	
    // (🝣) ALCHEMICAL SYMBOL FOR PURIFY	[17A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F763, 0x0021 };
    uint32_t const ces[9] = { 0x17A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_373)
{
    // 1F763 003F;	
    // (🝣) ALCHEMICAL SYMBOL FOR PURIFY	[17A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F763, 0x003F };
    uint32_t const ces[9] = { 0x17A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_374)
{
    // 1F763 0061;	
    // (🝣) ALCHEMICAL SYMBOL FOR PURIFY	[17A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F763, 0x0061 };
    uint32_t const ces[9] = { 0x17A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_375)
{
    // 1F763 0041;	
    // (🝣) ALCHEMICAL SYMBOL FOR PURIFY	[17A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F763, 0x0041 };
    uint32_t const ces[9] = { 0x17A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_376)
{
    // 1F763 0062;	
    // (🝣) ALCHEMICAL SYMBOL FOR PURIFY	[17A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F763, 0x0062 };
    uint32_t const ces[9] = { 0x17A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_377)
{
    // 1F764 0021;	
    // (🝤) ALCHEMICAL SYMBOL FOR PUTREFACTION	[17AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F764, 0x0021 };
    uint32_t const ces[9] = { 0x17AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_378)
{
    // 1F764 003F;	
    // (🝤) ALCHEMICAL SYMBOL FOR PUTREFACTION	[17AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F764, 0x003F };
    uint32_t const ces[9] = { 0x17AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_379)
{
    // 1F764 0061;	
    // (🝤) ALCHEMICAL SYMBOL FOR PUTREFACTION	[17AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F764, 0x0061 };
    uint32_t const ces[9] = { 0x17AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_380)
{
    // 1F764 0041;	
    // (🝤) ALCHEMICAL SYMBOL FOR PUTREFACTION	[17AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F764, 0x0041 };
    uint32_t const ces[9] = { 0x17AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_381)
{
    // 1F764 0062;	
    // (🝤) ALCHEMICAL SYMBOL FOR PUTREFACTION	[17AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F764, 0x0062 };
    uint32_t const ces[9] = { 0x17AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_382)
{
    // 1F765 0021;	
    // (🝥) ALCHEMICAL SYMBOL FOR CRUCIBLE	[17AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F765, 0x0021 };
    uint32_t const ces[9] = { 0x17AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_383)
{
    // 1F765 003F;	
    // (🝥) ALCHEMICAL SYMBOL FOR CRUCIBLE	[17AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F765, 0x003F };
    uint32_t const ces[9] = { 0x17AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_384)
{
    // 1F765 0061;	
    // (🝥) ALCHEMICAL SYMBOL FOR CRUCIBLE	[17AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F765, 0x0061 };
    uint32_t const ces[9] = { 0x17AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_385)
{
    // 1F765 0041;	
    // (🝥) ALCHEMICAL SYMBOL FOR CRUCIBLE	[17AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F765, 0x0041 };
    uint32_t const ces[9] = { 0x17AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_386)
{
    // 1F765 0062;	
    // (🝥) ALCHEMICAL SYMBOL FOR CRUCIBLE	[17AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F765, 0x0062 };
    uint32_t const ces[9] = { 0x17AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_387)
{
    // 1F766 0021;	
    // (🝦) ALCHEMICAL SYMBOL FOR CRUCIBLE-2	[17AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F766, 0x0021 };
    uint32_t const ces[9] = { 0x17AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_388)
{
    // 1F766 003F;	
    // (🝦) ALCHEMICAL SYMBOL FOR CRUCIBLE-2	[17AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F766, 0x003F };
    uint32_t const ces[9] = { 0x17AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_389)
{
    // 1F766 0061;	
    // (🝦) ALCHEMICAL SYMBOL FOR CRUCIBLE-2	[17AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F766, 0x0061 };
    uint32_t const ces[9] = { 0x17AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_390)
{
    // 1F766 0041;	
    // (🝦) ALCHEMICAL SYMBOL FOR CRUCIBLE-2	[17AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F766, 0x0041 };
    uint32_t const ces[9] = { 0x17AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_391)
{
    // 1F766 0062;	
    // (🝦) ALCHEMICAL SYMBOL FOR CRUCIBLE-2	[17AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F766, 0x0062 };
    uint32_t const ces[9] = { 0x17AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_392)
{
    // 1F767 0021;	
    // (🝧) ALCHEMICAL SYMBOL FOR CRUCIBLE-3	[17AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F767, 0x0021 };
    uint32_t const ces[9] = { 0x17AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_393)
{
    // 1F767 003F;	
    // (🝧) ALCHEMICAL SYMBOL FOR CRUCIBLE-3	[17AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F767, 0x003F };
    uint32_t const ces[9] = { 0x17AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_394)
{
    // 1F767 0061;	
    // (🝧) ALCHEMICAL SYMBOL FOR CRUCIBLE-3	[17AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F767, 0x0061 };
    uint32_t const ces[9] = { 0x17AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_395)
{
    // 1F767 0041;	
    // (🝧) ALCHEMICAL SYMBOL FOR CRUCIBLE-3	[17AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F767, 0x0041 };
    uint32_t const ces[9] = { 0x17AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_396)
{
    // 1F767 0062;	
    // (🝧) ALCHEMICAL SYMBOL FOR CRUCIBLE-3	[17AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F767, 0x0062 };
    uint32_t const ces[9] = { 0x17AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_397)
{
    // 1F768 0021;	
    // (🝨) ALCHEMICAL SYMBOL FOR CRUCIBLE-4	[17AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F768, 0x0021 };
    uint32_t const ces[9] = { 0x17AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_398)
{
    // 1F768 003F;	
    // (🝨) ALCHEMICAL SYMBOL FOR CRUCIBLE-4	[17AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F768, 0x003F };
    uint32_t const ces[9] = { 0x17AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_399)
{
    // 1F768 0061;	
    // (🝨) ALCHEMICAL SYMBOL FOR CRUCIBLE-4	[17AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F768, 0x0061 };
    uint32_t const ces[9] = { 0x17AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_400)
{
    // 1F768 0041;	
    // (🝨) ALCHEMICAL SYMBOL FOR CRUCIBLE-4	[17AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F768, 0x0041 };
    uint32_t const ces[9] = { 0x17AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_401)
{
    // 1F768 0062;	
    // (🝨) ALCHEMICAL SYMBOL FOR CRUCIBLE-4	[17AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F768, 0x0062 };
    uint32_t const ces[9] = { 0x17AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_402)
{
    // 1F769 0021;	
    // (🝩) ALCHEMICAL SYMBOL FOR CRUCIBLE-5	[17AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F769, 0x0021 };
    uint32_t const ces[9] = { 0x17AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_403)
{
    // 1F769 003F;	
    // (🝩) ALCHEMICAL SYMBOL FOR CRUCIBLE-5	[17AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F769, 0x003F };
    uint32_t const ces[9] = { 0x17AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_404)
{
    // 1F769 0061;	
    // (🝩) ALCHEMICAL SYMBOL FOR CRUCIBLE-5	[17AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F769, 0x0061 };
    uint32_t const ces[9] = { 0x17AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_405)
{
    // 1F769 0041;	
    // (🝩) ALCHEMICAL SYMBOL FOR CRUCIBLE-5	[17AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F769, 0x0041 };
    uint32_t const ces[9] = { 0x17AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_406)
{
    // 1F769 0062;	
    // (🝩) ALCHEMICAL SYMBOL FOR CRUCIBLE-5	[17AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F769, 0x0062 };
    uint32_t const ces[9] = { 0x17AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_407)
{
    // 1F76A 0021;	
    // (🝪) ALCHEMICAL SYMBOL FOR ALEMBIC	[17B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76A, 0x0021 };
    uint32_t const ces[9] = { 0x17B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_408)
{
    // 1F76A 003F;	
    // (🝪) ALCHEMICAL SYMBOL FOR ALEMBIC	[17B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76A, 0x003F };
    uint32_t const ces[9] = { 0x17B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_409)
{
    // 1F76A 0061;	
    // (🝪) ALCHEMICAL SYMBOL FOR ALEMBIC	[17B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76A, 0x0061 };
    uint32_t const ces[9] = { 0x17B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_410)
{
    // 1F76A 0041;	
    // (🝪) ALCHEMICAL SYMBOL FOR ALEMBIC	[17B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F76A, 0x0041 };
    uint32_t const ces[9] = { 0x17B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_411)
{
    // 1F76A 0062;	
    // (🝪) ALCHEMICAL SYMBOL FOR ALEMBIC	[17B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76A, 0x0062 };
    uint32_t const ces[9] = { 0x17B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_412)
{
    // 1F76B 0021;	
    // (🝫) ALCHEMICAL SYMBOL FOR BATH OF MARY	[17B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76B, 0x0021 };
    uint32_t const ces[9] = { 0x17B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_413)
{
    // 1F76B 003F;	
    // (🝫) ALCHEMICAL SYMBOL FOR BATH OF MARY	[17B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76B, 0x003F };
    uint32_t const ces[9] = { 0x17B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_414)
{
    // 1F76B 0061;	
    // (🝫) ALCHEMICAL SYMBOL FOR BATH OF MARY	[17B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76B, 0x0061 };
    uint32_t const ces[9] = { 0x17B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_415)
{
    // 1F76B 0041;	
    // (🝫) ALCHEMICAL SYMBOL FOR BATH OF MARY	[17B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F76B, 0x0041 };
    uint32_t const ces[9] = { 0x17B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_416)
{
    // 1F76B 0062;	
    // (🝫) ALCHEMICAL SYMBOL FOR BATH OF MARY	[17B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76B, 0x0062 };
    uint32_t const ces[9] = { 0x17B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_417)
{
    // 1F76C 0021;	
    // (🝬) ALCHEMICAL SYMBOL FOR BATH OF VAPOURS	[17B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76C, 0x0021 };
    uint32_t const ces[9] = { 0x17B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_418)
{
    // 1F76C 003F;	
    // (🝬) ALCHEMICAL SYMBOL FOR BATH OF VAPOURS	[17B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76C, 0x003F };
    uint32_t const ces[9] = { 0x17B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_419)
{
    // 1F76C 0061;	
    // (🝬) ALCHEMICAL SYMBOL FOR BATH OF VAPOURS	[17B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76C, 0x0061 };
    uint32_t const ces[9] = { 0x17B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_420)
{
    // 1F76C 0041;	
    // (🝬) ALCHEMICAL SYMBOL FOR BATH OF VAPOURS	[17B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F76C, 0x0041 };
    uint32_t const ces[9] = { 0x17B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_421)
{
    // 1F76C 0062;	
    // (🝬) ALCHEMICAL SYMBOL FOR BATH OF VAPOURS	[17B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76C, 0x0062 };
    uint32_t const ces[9] = { 0x17B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_422)
{
    // 1F76D 0021;	
    // (🝭) ALCHEMICAL SYMBOL FOR RETORT	[17B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76D, 0x0021 };
    uint32_t const ces[9] = { 0x17B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_423)
{
    // 1F76D 003F;	
    // (🝭) ALCHEMICAL SYMBOL FOR RETORT	[17B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76D, 0x003F };
    uint32_t const ces[9] = { 0x17B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_424)
{
    // 1F76D 0061;	
    // (🝭) ALCHEMICAL SYMBOL FOR RETORT	[17B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76D, 0x0061 };
    uint32_t const ces[9] = { 0x17B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_425)
{
    // 1F76D 0041;	
    // (🝭) ALCHEMICAL SYMBOL FOR RETORT	[17B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F76D, 0x0041 };
    uint32_t const ces[9] = { 0x17B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_426)
{
    // 1F76D 0062;	
    // (🝭) ALCHEMICAL SYMBOL FOR RETORT	[17B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76D, 0x0062 };
    uint32_t const ces[9] = { 0x17B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_427)
{
    // 1F76E 0021;	
    // (🝮) ALCHEMICAL SYMBOL FOR HOUR	[17B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76E, 0x0021 };
    uint32_t const ces[9] = { 0x17B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_428)
{
    // 1F76E 003F;	
    // (🝮) ALCHEMICAL SYMBOL FOR HOUR	[17B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76E, 0x003F };
    uint32_t const ces[9] = { 0x17B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_429)
{
    // 1F76E 0061;	
    // (🝮) ALCHEMICAL SYMBOL FOR HOUR	[17B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76E, 0x0061 };
    uint32_t const ces[9] = { 0x17B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_430)
{
    // 1F76E 0041;	
    // (🝮) ALCHEMICAL SYMBOL FOR HOUR	[17B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F76E, 0x0041 };
    uint32_t const ces[9] = { 0x17B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_431)
{
    // 1F76E 0062;	
    // (🝮) ALCHEMICAL SYMBOL FOR HOUR	[17B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76E, 0x0062 };
    uint32_t const ces[9] = { 0x17B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_432)
{
    // 1F76F 0021;	
    // (🝯) ALCHEMICAL SYMBOL FOR NIGHT	[17B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76F, 0x0021 };
    uint32_t const ces[9] = { 0x17B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_433)
{
    // 1F76F 003F;	
    // (🝯) ALCHEMICAL SYMBOL FOR NIGHT	[17B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76F, 0x003F };
    uint32_t const ces[9] = { 0x17B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_434)
{
    // 1F76F 0061;	
    // (🝯) ALCHEMICAL SYMBOL FOR NIGHT	[17B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76F, 0x0061 };
    uint32_t const ces[9] = { 0x17B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_435)
{
    // 1F76F 0041;	
    // (🝯) ALCHEMICAL SYMBOL FOR NIGHT	[17B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F76F, 0x0041 };
    uint32_t const ces[9] = { 0x17B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_436)
{
    // 1F76F 0062;	
    // (🝯) ALCHEMICAL SYMBOL FOR NIGHT	[17B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F76F, 0x0062 };
    uint32_t const ces[9] = { 0x17B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_437)
{
    // 1F770 0021;	
    // (🝰) ALCHEMICAL SYMBOL FOR DAY-NIGHT	[17B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F770, 0x0021 };
    uint32_t const ces[9] = { 0x17B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_438)
{
    // 1F770 003F;	
    // (🝰) ALCHEMICAL SYMBOL FOR DAY-NIGHT	[17B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F770, 0x003F };
    uint32_t const ces[9] = { 0x17B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_439)
{
    // 1F770 0061;	
    // (🝰) ALCHEMICAL SYMBOL FOR DAY-NIGHT	[17B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F770, 0x0061 };
    uint32_t const ces[9] = { 0x17B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_440)
{
    // 1F770 0041;	
    // (🝰) ALCHEMICAL SYMBOL FOR DAY-NIGHT	[17B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F770, 0x0041 };
    uint32_t const ces[9] = { 0x17B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_441)
{
    // 1F770 0062;	
    // (🝰) ALCHEMICAL SYMBOL FOR DAY-NIGHT	[17B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F770, 0x0062 };
    uint32_t const ces[9] = { 0x17B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_442)
{
    // 1F771 0021;	
    // (🝱) ALCHEMICAL SYMBOL FOR MONTH	[17B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F771, 0x0021 };
    uint32_t const ces[9] = { 0x17B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_443)
{
    // 1F771 003F;	
    // (🝱) ALCHEMICAL SYMBOL FOR MONTH	[17B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F771, 0x003F };
    uint32_t const ces[9] = { 0x17B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_444)
{
    // 1F771 0061;	
    // (🝱) ALCHEMICAL SYMBOL FOR MONTH	[17B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F771, 0x0061 };
    uint32_t const ces[9] = { 0x17B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_445)
{
    // 1F771 0041;	
    // (🝱) ALCHEMICAL SYMBOL FOR MONTH	[17B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F771, 0x0041 };
    uint32_t const ces[9] = { 0x17B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_446)
{
    // 1F771 0062;	
    // (🝱) ALCHEMICAL SYMBOL FOR MONTH	[17B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F771, 0x0062 };
    uint32_t const ces[9] = { 0x17B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_447)
{
    // 1F772 0021;	
    // (🝲) ALCHEMICAL SYMBOL FOR HALF DRAM	[17B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F772, 0x0021 };
    uint32_t const ces[9] = { 0x17B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_448)
{
    // 1F772 003F;	
    // (🝲) ALCHEMICAL SYMBOL FOR HALF DRAM	[17B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F772, 0x003F };
    uint32_t const ces[9] = { 0x17B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_449)
{
    // 1F772 0061;	
    // (🝲) ALCHEMICAL SYMBOL FOR HALF DRAM	[17B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F772, 0x0061 };
    uint32_t const ces[9] = { 0x17B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_450)
{
    // 1F772 0041;	
    // (🝲) ALCHEMICAL SYMBOL FOR HALF DRAM	[17B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F772, 0x0041 };
    uint32_t const ces[9] = { 0x17B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_451)
{
    // 1F772 0062;	
    // (🝲) ALCHEMICAL SYMBOL FOR HALF DRAM	[17B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F772, 0x0062 };
    uint32_t const ces[9] = { 0x17B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_452)
{
    // 1F773 0021;	
    // (🝳) ALCHEMICAL SYMBOL FOR HALF OUNCE	[17B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F773, 0x0021 };
    uint32_t const ces[9] = { 0x17B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_453)
{
    // 1F773 003F;	
    // (🝳) ALCHEMICAL SYMBOL FOR HALF OUNCE	[17B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F773, 0x003F };
    uint32_t const ces[9] = { 0x17B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_454)
{
    // 1F773 0061;	
    // (🝳) ALCHEMICAL SYMBOL FOR HALF OUNCE	[17B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F773, 0x0061 };
    uint32_t const ces[9] = { 0x17B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_455)
{
    // 1F773 0041;	
    // (🝳) ALCHEMICAL SYMBOL FOR HALF OUNCE	[17B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F773, 0x0041 };
    uint32_t const ces[9] = { 0x17B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_456)
{
    // 1F773 0062;	
    // (🝳) ALCHEMICAL SYMBOL FOR HALF OUNCE	[17B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F773, 0x0062 };
    uint32_t const ces[9] = { 0x17B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_457)
{
    // 1F780 0021;	
    // (🞀) BLACK LEFT-POINTING ISOSCELES RIGHT TRIANGLE	[17BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F780, 0x0021 };
    uint32_t const ces[9] = { 0x17BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_458)
{
    // 1F780 003F;	
    // (🞀) BLACK LEFT-POINTING ISOSCELES RIGHT TRIANGLE	[17BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F780, 0x003F };
    uint32_t const ces[9] = { 0x17BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_459)
{
    // 1F780 0061;	
    // (🞀) BLACK LEFT-POINTING ISOSCELES RIGHT TRIANGLE	[17BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F780, 0x0061 };
    uint32_t const ces[9] = { 0x17BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_460)
{
    // 1F780 0041;	
    // (🞀) BLACK LEFT-POINTING ISOSCELES RIGHT TRIANGLE	[17BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F780, 0x0041 };
    uint32_t const ces[9] = { 0x17BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_461)
{
    // 1F780 0062;	
    // (🞀) BLACK LEFT-POINTING ISOSCELES RIGHT TRIANGLE	[17BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F780, 0x0062 };
    uint32_t const ces[9] = { 0x17BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_462)
{
    // 1F781 0021;	
    // (🞁) BLACK UP-POINTING ISOSCELES RIGHT TRIANGLE	[17BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F781, 0x0021 };
    uint32_t const ces[9] = { 0x17BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_463)
{
    // 1F781 003F;	
    // (🞁) BLACK UP-POINTING ISOSCELES RIGHT TRIANGLE	[17BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F781, 0x003F };
    uint32_t const ces[9] = { 0x17BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_464)
{
    // 1F781 0061;	
    // (🞁) BLACK UP-POINTING ISOSCELES RIGHT TRIANGLE	[17BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F781, 0x0061 };
    uint32_t const ces[9] = { 0x17BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_465)
{
    // 1F781 0041;	
    // (🞁) BLACK UP-POINTING ISOSCELES RIGHT TRIANGLE	[17BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F781, 0x0041 };
    uint32_t const ces[9] = { 0x17BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_466)
{
    // 1F781 0062;	
    // (🞁) BLACK UP-POINTING ISOSCELES RIGHT TRIANGLE	[17BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F781, 0x0062 };
    uint32_t const ces[9] = { 0x17BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_467)
{
    // 1F782 0021;	
    // (🞂) BLACK RIGHT-POINTING ISOSCELES RIGHT TRIANGLE	[17BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F782, 0x0021 };
    uint32_t const ces[9] = { 0x17BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_468)
{
    // 1F782 003F;	
    // (🞂) BLACK RIGHT-POINTING ISOSCELES RIGHT TRIANGLE	[17BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F782, 0x003F };
    uint32_t const ces[9] = { 0x17BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_469)
{
    // 1F782 0061;	
    // (🞂) BLACK RIGHT-POINTING ISOSCELES RIGHT TRIANGLE	[17BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F782, 0x0061 };
    uint32_t const ces[9] = { 0x17BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_470)
{
    // 1F782 0041;	
    // (🞂) BLACK RIGHT-POINTING ISOSCELES RIGHT TRIANGLE	[17BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F782, 0x0041 };
    uint32_t const ces[9] = { 0x17BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_471)
{
    // 1F782 0062;	
    // (🞂) BLACK RIGHT-POINTING ISOSCELES RIGHT TRIANGLE	[17BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F782, 0x0062 };
    uint32_t const ces[9] = { 0x17BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_472)
{
    // 1F783 0021;	
    // (🞃) BLACK DOWN-POINTING ISOSCELES RIGHT TRIANGLE	[17BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F783, 0x0021 };
    uint32_t const ces[9] = { 0x17BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_473)
{
    // 1F783 003F;	
    // (🞃) BLACK DOWN-POINTING ISOSCELES RIGHT TRIANGLE	[17BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F783, 0x003F };
    uint32_t const ces[9] = { 0x17BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_474)
{
    // 1F783 0061;	
    // (🞃) BLACK DOWN-POINTING ISOSCELES RIGHT TRIANGLE	[17BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F783, 0x0061 };
    uint32_t const ces[9] = { 0x17BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_475)
{
    // 1F783 0041;	
    // (🞃) BLACK DOWN-POINTING ISOSCELES RIGHT TRIANGLE	[17BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F783, 0x0041 };
    uint32_t const ces[9] = { 0x17BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_476)
{
    // 1F783 0062;	
    // (🞃) BLACK DOWN-POINTING ISOSCELES RIGHT TRIANGLE	[17BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F783, 0x0062 };
    uint32_t const ces[9] = { 0x17BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_477)
{
    // 1F784 0021;	
    // (🞄) BLACK SLIGHTLY SMALL CIRCLE	[17BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F784, 0x0021 };
    uint32_t const ces[9] = { 0x17BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_478)
{
    // 1F784 003F;	
    // (🞄) BLACK SLIGHTLY SMALL CIRCLE	[17BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F784, 0x003F };
    uint32_t const ces[9] = { 0x17BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_479)
{
    // 1F784 0061;	
    // (🞄) BLACK SLIGHTLY SMALL CIRCLE	[17BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F784, 0x0061 };
    uint32_t const ces[9] = { 0x17BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_480)
{
    // 1F784 0041;	
    // (🞄) BLACK SLIGHTLY SMALL CIRCLE	[17BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F784, 0x0041 };
    uint32_t const ces[9] = { 0x17BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_481)
{
    // 1F784 0062;	
    // (🞄) BLACK SLIGHTLY SMALL CIRCLE	[17BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F784, 0x0062 };
    uint32_t const ces[9] = { 0x17BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_482)
{
    // 1F785 0021;	
    // (🞅) MEDIUM BOLD WHITE CIRCLE	[17BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F785, 0x0021 };
    uint32_t const ces[9] = { 0x17BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_483)
{
    // 1F785 003F;	
    // (🞅) MEDIUM BOLD WHITE CIRCLE	[17BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F785, 0x003F };
    uint32_t const ces[9] = { 0x17BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_484)
{
    // 1F785 0061;	
    // (🞅) MEDIUM BOLD WHITE CIRCLE	[17BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F785, 0x0061 };
    uint32_t const ces[9] = { 0x17BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_485)
{
    // 1F785 0041;	
    // (🞅) MEDIUM BOLD WHITE CIRCLE	[17BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F785, 0x0041 };
    uint32_t const ces[9] = { 0x17BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_486)
{
    // 1F785 0062;	
    // (🞅) MEDIUM BOLD WHITE CIRCLE	[17BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F785, 0x0062 };
    uint32_t const ces[9] = { 0x17BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_487)
{
    // 1F786 0021;	
    // (🞆) BOLD WHITE CIRCLE	[17C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F786, 0x0021 };
    uint32_t const ces[9] = { 0x17C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_488)
{
    // 1F786 003F;	
    // (🞆) BOLD WHITE CIRCLE	[17C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F786, 0x003F };
    uint32_t const ces[9] = { 0x17C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_489)
{
    // 1F786 0061;	
    // (🞆) BOLD WHITE CIRCLE	[17C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F786, 0x0061 };
    uint32_t const ces[9] = { 0x17C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_490)
{
    // 1F786 0041;	
    // (🞆) BOLD WHITE CIRCLE	[17C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F786, 0x0041 };
    uint32_t const ces[9] = { 0x17C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_491)
{
    // 1F786 0062;	
    // (🞆) BOLD WHITE CIRCLE	[17C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F786, 0x0062 };
    uint32_t const ces[9] = { 0x17C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_492)
{
    // 1F787 0021;	
    // (🞇) HEAVY WHITE CIRCLE	[17C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F787, 0x0021 };
    uint32_t const ces[9] = { 0x17C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_493)
{
    // 1F787 003F;	
    // (🞇) HEAVY WHITE CIRCLE	[17C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F787, 0x003F };
    uint32_t const ces[9] = { 0x17C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_494)
{
    // 1F787 0061;	
    // (🞇) HEAVY WHITE CIRCLE	[17C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F787, 0x0061 };
    uint32_t const ces[9] = { 0x17C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_495)
{
    // 1F787 0041;	
    // (🞇) HEAVY WHITE CIRCLE	[17C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F787, 0x0041 };
    uint32_t const ces[9] = { 0x17C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_496)
{
    // 1F787 0062;	
    // (🞇) HEAVY WHITE CIRCLE	[17C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F787, 0x0062 };
    uint32_t const ces[9] = { 0x17C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_497)
{
    // 1F788 0021;	
    // (🞈) VERY HEAVY WHITE CIRCLE	[17C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F788, 0x0021 };
    uint32_t const ces[9] = { 0x17C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_498)
{
    // 1F788 003F;	
    // (🞈) VERY HEAVY WHITE CIRCLE	[17C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F788, 0x003F };
    uint32_t const ces[9] = { 0x17C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_067_499)
{
    // 1F788 0061;	
    // (🞈) VERY HEAVY WHITE CIRCLE	[17C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F788, 0x0061 };
    uint32_t const ces[9] = { 0x17C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

