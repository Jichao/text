// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_313_000)
{
    // 14604 003F;	
    // (𔘄) ANATOLIAN HIEROGLYPH A461	[5698 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14604, 0x003F };
    uint32_t const ces[9] = { 0x5698, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_001)
{
    // 14604 0061;	
    // (𔘄) ANATOLIAN HIEROGLYPH A461	[5698 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14604, 0x0061 };
    uint32_t const ces[9] = { 0x5698, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_002)
{
    // 14604 0041;	
    // (𔘄) ANATOLIAN HIEROGLYPH A461	[5698 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14604, 0x0041 };
    uint32_t const ces[9] = { 0x5698, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_003)
{
    // 14604 0062;	
    // (𔘄) ANATOLIAN HIEROGLYPH A461	[5698 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14604, 0x0062 };
    uint32_t const ces[9] = { 0x5698, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_004)
{
    // 14605 0021;	
    // (𔘅) ANATOLIAN HIEROGLYPH A462	[5699 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14605, 0x0021 };
    uint32_t const ces[9] = { 0x5699, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_005)
{
    // 14605 003F;	
    // (𔘅) ANATOLIAN HIEROGLYPH A462	[5699 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14605, 0x003F };
    uint32_t const ces[9] = { 0x5699, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_006)
{
    // 14605 0061;	
    // (𔘅) ANATOLIAN HIEROGLYPH A462	[5699 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14605, 0x0061 };
    uint32_t const ces[9] = { 0x5699, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_007)
{
    // 14605 0041;	
    // (𔘅) ANATOLIAN HIEROGLYPH A462	[5699 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14605, 0x0041 };
    uint32_t const ces[9] = { 0x5699, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_008)
{
    // 14605 0062;	
    // (𔘅) ANATOLIAN HIEROGLYPH A462	[5699 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14605, 0x0062 };
    uint32_t const ces[9] = { 0x5699, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_009)
{
    // 14606 0021;	
    // (𔘆) ANATOLIAN HIEROGLYPH A463	[569A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14606, 0x0021 };
    uint32_t const ces[9] = { 0x569A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_010)
{
    // 14606 003F;	
    // (𔘆) ANATOLIAN HIEROGLYPH A463	[569A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14606, 0x003F };
    uint32_t const ces[9] = { 0x569A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_011)
{
    // 14606 0061;	
    // (𔘆) ANATOLIAN HIEROGLYPH A463	[569A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14606, 0x0061 };
    uint32_t const ces[9] = { 0x569A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_012)
{
    // 14606 0041;	
    // (𔘆) ANATOLIAN HIEROGLYPH A463	[569A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14606, 0x0041 };
    uint32_t const ces[9] = { 0x569A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_013)
{
    // 14606 0062;	
    // (𔘆) ANATOLIAN HIEROGLYPH A463	[569A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14606, 0x0062 };
    uint32_t const ces[9] = { 0x569A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_014)
{
    // 14607 0021;	
    // (𔘇) ANATOLIAN HIEROGLYPH A464	[569B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14607, 0x0021 };
    uint32_t const ces[9] = { 0x569B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_015)
{
    // 14607 003F;	
    // (𔘇) ANATOLIAN HIEROGLYPH A464	[569B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14607, 0x003F };
    uint32_t const ces[9] = { 0x569B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_016)
{
    // 14607 0061;	
    // (𔘇) ANATOLIAN HIEROGLYPH A464	[569B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14607, 0x0061 };
    uint32_t const ces[9] = { 0x569B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_017)
{
    // 14607 0041;	
    // (𔘇) ANATOLIAN HIEROGLYPH A464	[569B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14607, 0x0041 };
    uint32_t const ces[9] = { 0x569B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_018)
{
    // 14607 0062;	
    // (𔘇) ANATOLIAN HIEROGLYPH A464	[569B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14607, 0x0062 };
    uint32_t const ces[9] = { 0x569B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_019)
{
    // 14608 0021;	
    // (𔘈) ANATOLIAN HIEROGLYPH A465	[569C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14608, 0x0021 };
    uint32_t const ces[9] = { 0x569C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_020)
{
    // 14608 003F;	
    // (𔘈) ANATOLIAN HIEROGLYPH A465	[569C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14608, 0x003F };
    uint32_t const ces[9] = { 0x569C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_021)
{
    // 14608 0061;	
    // (𔘈) ANATOLIAN HIEROGLYPH A465	[569C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14608, 0x0061 };
    uint32_t const ces[9] = { 0x569C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_022)
{
    // 14608 0041;	
    // (𔘈) ANATOLIAN HIEROGLYPH A465	[569C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14608, 0x0041 };
    uint32_t const ces[9] = { 0x569C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_023)
{
    // 14608 0062;	
    // (𔘈) ANATOLIAN HIEROGLYPH A465	[569C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14608, 0x0062 };
    uint32_t const ces[9] = { 0x569C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_024)
{
    // 14609 0021;	
    // (𔘉) ANATOLIAN HIEROGLYPH A466	[569D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14609, 0x0021 };
    uint32_t const ces[9] = { 0x569D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_025)
{
    // 14609 003F;	
    // (𔘉) ANATOLIAN HIEROGLYPH A466	[569D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14609, 0x003F };
    uint32_t const ces[9] = { 0x569D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_026)
{
    // 14609 0061;	
    // (𔘉) ANATOLIAN HIEROGLYPH A466	[569D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14609, 0x0061 };
    uint32_t const ces[9] = { 0x569D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_027)
{
    // 14609 0041;	
    // (𔘉) ANATOLIAN HIEROGLYPH A466	[569D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14609, 0x0041 };
    uint32_t const ces[9] = { 0x569D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_028)
{
    // 14609 0062;	
    // (𔘉) ANATOLIAN HIEROGLYPH A466	[569D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14609, 0x0062 };
    uint32_t const ces[9] = { 0x569D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_029)
{
    // 1460A 0021;	
    // (𔘊) ANATOLIAN HIEROGLYPH A467	[569E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460A, 0x0021 };
    uint32_t const ces[9] = { 0x569E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_030)
{
    // 1460A 003F;	
    // (𔘊) ANATOLIAN HIEROGLYPH A467	[569E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460A, 0x003F };
    uint32_t const ces[9] = { 0x569E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_031)
{
    // 1460A 0061;	
    // (𔘊) ANATOLIAN HIEROGLYPH A467	[569E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460A, 0x0061 };
    uint32_t const ces[9] = { 0x569E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_032)
{
    // 1460A 0041;	
    // (𔘊) ANATOLIAN HIEROGLYPH A467	[569E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1460A, 0x0041 };
    uint32_t const ces[9] = { 0x569E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_033)
{
    // 1460A 0062;	
    // (𔘊) ANATOLIAN HIEROGLYPH A467	[569E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460A, 0x0062 };
    uint32_t const ces[9] = { 0x569E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_034)
{
    // 1460B 0021;	
    // (𔘋) ANATOLIAN HIEROGLYPH A468	[569F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460B, 0x0021 };
    uint32_t const ces[9] = { 0x569F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_035)
{
    // 1460B 003F;	
    // (𔘋) ANATOLIAN HIEROGLYPH A468	[569F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460B, 0x003F };
    uint32_t const ces[9] = { 0x569F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_036)
{
    // 1460B 0061;	
    // (𔘋) ANATOLIAN HIEROGLYPH A468	[569F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460B, 0x0061 };
    uint32_t const ces[9] = { 0x569F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_037)
{
    // 1460B 0041;	
    // (𔘋) ANATOLIAN HIEROGLYPH A468	[569F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1460B, 0x0041 };
    uint32_t const ces[9] = { 0x569F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_038)
{
    // 1460B 0062;	
    // (𔘋) ANATOLIAN HIEROGLYPH A468	[569F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460B, 0x0062 };
    uint32_t const ces[9] = { 0x569F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_039)
{
    // 1460C 0021;	
    // (𔘌) ANATOLIAN HIEROGLYPH A469	[56A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460C, 0x0021 };
    uint32_t const ces[9] = { 0x56A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_040)
{
    // 1460C 003F;	
    // (𔘌) ANATOLIAN HIEROGLYPH A469	[56A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460C, 0x003F };
    uint32_t const ces[9] = { 0x56A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_041)
{
    // 1460C 0061;	
    // (𔘌) ANATOLIAN HIEROGLYPH A469	[56A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460C, 0x0061 };
    uint32_t const ces[9] = { 0x56A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_042)
{
    // 1460C 0041;	
    // (𔘌) ANATOLIAN HIEROGLYPH A469	[56A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1460C, 0x0041 };
    uint32_t const ces[9] = { 0x56A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_043)
{
    // 1460C 0062;	
    // (𔘌) ANATOLIAN HIEROGLYPH A469	[56A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460C, 0x0062 };
    uint32_t const ces[9] = { 0x56A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_044)
{
    // 1460D 0021;	
    // (𔘍) ANATOLIAN HIEROGLYPH A470	[56A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460D, 0x0021 };
    uint32_t const ces[9] = { 0x56A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_045)
{
    // 1460D 003F;	
    // (𔘍) ANATOLIAN HIEROGLYPH A470	[56A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460D, 0x003F };
    uint32_t const ces[9] = { 0x56A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_046)
{
    // 1460D 0061;	
    // (𔘍) ANATOLIAN HIEROGLYPH A470	[56A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460D, 0x0061 };
    uint32_t const ces[9] = { 0x56A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_047)
{
    // 1460D 0041;	
    // (𔘍) ANATOLIAN HIEROGLYPH A470	[56A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1460D, 0x0041 };
    uint32_t const ces[9] = { 0x56A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_048)
{
    // 1460D 0062;	
    // (𔘍) ANATOLIAN HIEROGLYPH A470	[56A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460D, 0x0062 };
    uint32_t const ces[9] = { 0x56A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_049)
{
    // 1460E 0021;	
    // (𔘎) ANATOLIAN HIEROGLYPH A471	[56A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460E, 0x0021 };
    uint32_t const ces[9] = { 0x56A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_050)
{
    // 1460E 003F;	
    // (𔘎) ANATOLIAN HIEROGLYPH A471	[56A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460E, 0x003F };
    uint32_t const ces[9] = { 0x56A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_051)
{
    // 1460E 0061;	
    // (𔘎) ANATOLIAN HIEROGLYPH A471	[56A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460E, 0x0061 };
    uint32_t const ces[9] = { 0x56A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_052)
{
    // 1460E 0041;	
    // (𔘎) ANATOLIAN HIEROGLYPH A471	[56A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1460E, 0x0041 };
    uint32_t const ces[9] = { 0x56A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_053)
{
    // 1460E 0062;	
    // (𔘎) ANATOLIAN HIEROGLYPH A471	[56A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460E, 0x0062 };
    uint32_t const ces[9] = { 0x56A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_054)
{
    // 1460F 0021;	
    // (𔘏) ANATOLIAN HIEROGLYPH A472	[56A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460F, 0x0021 };
    uint32_t const ces[9] = { 0x56A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_055)
{
    // 1460F 003F;	
    // (𔘏) ANATOLIAN HIEROGLYPH A472	[56A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460F, 0x003F };
    uint32_t const ces[9] = { 0x56A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_056)
{
    // 1460F 0061;	
    // (𔘏) ANATOLIAN HIEROGLYPH A472	[56A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460F, 0x0061 };
    uint32_t const ces[9] = { 0x56A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_057)
{
    // 1460F 0041;	
    // (𔘏) ANATOLIAN HIEROGLYPH A472	[56A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1460F, 0x0041 };
    uint32_t const ces[9] = { 0x56A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_058)
{
    // 1460F 0062;	
    // (𔘏) ANATOLIAN HIEROGLYPH A472	[56A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460F, 0x0062 };
    uint32_t const ces[9] = { 0x56A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_059)
{
    // 14610 0021;	
    // (𔘐) ANATOLIAN HIEROGLYPH A473	[56A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14610, 0x0021 };
    uint32_t const ces[9] = { 0x56A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_060)
{
    // 14610 003F;	
    // (𔘐) ANATOLIAN HIEROGLYPH A473	[56A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14610, 0x003F };
    uint32_t const ces[9] = { 0x56A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_061)
{
    // 14610 0061;	
    // (𔘐) ANATOLIAN HIEROGLYPH A473	[56A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14610, 0x0061 };
    uint32_t const ces[9] = { 0x56A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_062)
{
    // 14610 0041;	
    // (𔘐) ANATOLIAN HIEROGLYPH A473	[56A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14610, 0x0041 };
    uint32_t const ces[9] = { 0x56A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_063)
{
    // 14610 0062;	
    // (𔘐) ANATOLIAN HIEROGLYPH A473	[56A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14610, 0x0062 };
    uint32_t const ces[9] = { 0x56A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_064)
{
    // 14611 0021;	
    // (𔘑) ANATOLIAN HIEROGLYPH A474	[56A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14611, 0x0021 };
    uint32_t const ces[9] = { 0x56A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_065)
{
    // 14611 003F;	
    // (𔘑) ANATOLIAN HIEROGLYPH A474	[56A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14611, 0x003F };
    uint32_t const ces[9] = { 0x56A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_066)
{
    // 14611 0061;	
    // (𔘑) ANATOLIAN HIEROGLYPH A474	[56A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14611, 0x0061 };
    uint32_t const ces[9] = { 0x56A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_067)
{
    // 14611 0041;	
    // (𔘑) ANATOLIAN HIEROGLYPH A474	[56A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14611, 0x0041 };
    uint32_t const ces[9] = { 0x56A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_068)
{
    // 14611 0062;	
    // (𔘑) ANATOLIAN HIEROGLYPH A474	[56A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14611, 0x0062 };
    uint32_t const ces[9] = { 0x56A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_069)
{
    // 14612 0021;	
    // (𔘒) ANATOLIAN HIEROGLYPH A475	[56A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14612, 0x0021 };
    uint32_t const ces[9] = { 0x56A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_070)
{
    // 14612 003F;	
    // (𔘒) ANATOLIAN HIEROGLYPH A475	[56A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14612, 0x003F };
    uint32_t const ces[9] = { 0x56A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_071)
{
    // 14612 0061;	
    // (𔘒) ANATOLIAN HIEROGLYPH A475	[56A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14612, 0x0061 };
    uint32_t const ces[9] = { 0x56A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_072)
{
    // 14612 0041;	
    // (𔘒) ANATOLIAN HIEROGLYPH A475	[56A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14612, 0x0041 };
    uint32_t const ces[9] = { 0x56A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_073)
{
    // 14612 0062;	
    // (𔘒) ANATOLIAN HIEROGLYPH A475	[56A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14612, 0x0062 };
    uint32_t const ces[9] = { 0x56A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_074)
{
    // 14613 0021;	
    // (𔘓) ANATOLIAN HIEROGLYPH A476	[56A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14613, 0x0021 };
    uint32_t const ces[9] = { 0x56A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_075)
{
    // 14613 003F;	
    // (𔘓) ANATOLIAN HIEROGLYPH A476	[56A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14613, 0x003F };
    uint32_t const ces[9] = { 0x56A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_076)
{
    // 14613 0061;	
    // (𔘓) ANATOLIAN HIEROGLYPH A476	[56A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14613, 0x0061 };
    uint32_t const ces[9] = { 0x56A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_077)
{
    // 14613 0041;	
    // (𔘓) ANATOLIAN HIEROGLYPH A476	[56A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14613, 0x0041 };
    uint32_t const ces[9] = { 0x56A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_078)
{
    // 14613 0062;	
    // (𔘓) ANATOLIAN HIEROGLYPH A476	[56A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14613, 0x0062 };
    uint32_t const ces[9] = { 0x56A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_079)
{
    // 14614 0021;	
    // (𔘔) ANATOLIAN HIEROGLYPH A477	[56A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14614, 0x0021 };
    uint32_t const ces[9] = { 0x56A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_080)
{
    // 14614 003F;	
    // (𔘔) ANATOLIAN HIEROGLYPH A477	[56A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14614, 0x003F };
    uint32_t const ces[9] = { 0x56A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_081)
{
    // 14614 0061;	
    // (𔘔) ANATOLIAN HIEROGLYPH A477	[56A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14614, 0x0061 };
    uint32_t const ces[9] = { 0x56A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_082)
{
    // 14614 0041;	
    // (𔘔) ANATOLIAN HIEROGLYPH A477	[56A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14614, 0x0041 };
    uint32_t const ces[9] = { 0x56A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_083)
{
    // 14614 0062;	
    // (𔘔) ANATOLIAN HIEROGLYPH A477	[56A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14614, 0x0062 };
    uint32_t const ces[9] = { 0x56A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_084)
{
    // 14615 0021;	
    // (𔘕) ANATOLIAN HIEROGLYPH A478	[56A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14615, 0x0021 };
    uint32_t const ces[9] = { 0x56A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_085)
{
    // 14615 003F;	
    // (𔘕) ANATOLIAN HIEROGLYPH A478	[56A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14615, 0x003F };
    uint32_t const ces[9] = { 0x56A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_086)
{
    // 14615 0061;	
    // (𔘕) ANATOLIAN HIEROGLYPH A478	[56A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14615, 0x0061 };
    uint32_t const ces[9] = { 0x56A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_087)
{
    // 14615 0041;	
    // (𔘕) ANATOLIAN HIEROGLYPH A478	[56A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14615, 0x0041 };
    uint32_t const ces[9] = { 0x56A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_088)
{
    // 14615 0062;	
    // (𔘕) ANATOLIAN HIEROGLYPH A478	[56A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14615, 0x0062 };
    uint32_t const ces[9] = { 0x56A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_089)
{
    // 14616 0021;	
    // (𔘖) ANATOLIAN HIEROGLYPH A479	[56AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14616, 0x0021 };
    uint32_t const ces[9] = { 0x56AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_090)
{
    // 14616 003F;	
    // (𔘖) ANATOLIAN HIEROGLYPH A479	[56AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14616, 0x003F };
    uint32_t const ces[9] = { 0x56AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_091)
{
    // 14616 0061;	
    // (𔘖) ANATOLIAN HIEROGLYPH A479	[56AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14616, 0x0061 };
    uint32_t const ces[9] = { 0x56AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_092)
{
    // 14616 0041;	
    // (𔘖) ANATOLIAN HIEROGLYPH A479	[56AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14616, 0x0041 };
    uint32_t const ces[9] = { 0x56AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_093)
{
    // 14616 0062;	
    // (𔘖) ANATOLIAN HIEROGLYPH A479	[56AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14616, 0x0062 };
    uint32_t const ces[9] = { 0x56AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_094)
{
    // 14617 0021;	
    // (𔘗) ANATOLIAN HIEROGLYPH A480	[56AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14617, 0x0021 };
    uint32_t const ces[9] = { 0x56AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_095)
{
    // 14617 003F;	
    // (𔘗) ANATOLIAN HIEROGLYPH A480	[56AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14617, 0x003F };
    uint32_t const ces[9] = { 0x56AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_096)
{
    // 14617 0061;	
    // (𔘗) ANATOLIAN HIEROGLYPH A480	[56AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14617, 0x0061 };
    uint32_t const ces[9] = { 0x56AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_097)
{
    // 14617 0041;	
    // (𔘗) ANATOLIAN HIEROGLYPH A480	[56AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14617, 0x0041 };
    uint32_t const ces[9] = { 0x56AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_098)
{
    // 14617 0062;	
    // (𔘗) ANATOLIAN HIEROGLYPH A480	[56AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14617, 0x0062 };
    uint32_t const ces[9] = { 0x56AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_099)
{
    // 14618 0021;	
    // (𔘘) ANATOLIAN HIEROGLYPH A481	[56AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14618, 0x0021 };
    uint32_t const ces[9] = { 0x56AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_100)
{
    // 14618 003F;	
    // (𔘘) ANATOLIAN HIEROGLYPH A481	[56AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14618, 0x003F };
    uint32_t const ces[9] = { 0x56AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_101)
{
    // 14618 0061;	
    // (𔘘) ANATOLIAN HIEROGLYPH A481	[56AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14618, 0x0061 };
    uint32_t const ces[9] = { 0x56AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_102)
{
    // 14618 0041;	
    // (𔘘) ANATOLIAN HIEROGLYPH A481	[56AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14618, 0x0041 };
    uint32_t const ces[9] = { 0x56AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_103)
{
    // 14618 0062;	
    // (𔘘) ANATOLIAN HIEROGLYPH A481	[56AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14618, 0x0062 };
    uint32_t const ces[9] = { 0x56AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_104)
{
    // 14619 0021;	
    // (𔘙) ANATOLIAN HIEROGLYPH A482	[56AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14619, 0x0021 };
    uint32_t const ces[9] = { 0x56AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_105)
{
    // 14619 003F;	
    // (𔘙) ANATOLIAN HIEROGLYPH A482	[56AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14619, 0x003F };
    uint32_t const ces[9] = { 0x56AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_106)
{
    // 14619 0061;	
    // (𔘙) ANATOLIAN HIEROGLYPH A482	[56AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14619, 0x0061 };
    uint32_t const ces[9] = { 0x56AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_107)
{
    // 14619 0041;	
    // (𔘙) ANATOLIAN HIEROGLYPH A482	[56AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14619, 0x0041 };
    uint32_t const ces[9] = { 0x56AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_108)
{
    // 14619 0062;	
    // (𔘙) ANATOLIAN HIEROGLYPH A482	[56AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14619, 0x0062 };
    uint32_t const ces[9] = { 0x56AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_109)
{
    // 1461A 0021;	
    // (𔘚) ANATOLIAN HIEROGLYPH A483	[56AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461A, 0x0021 };
    uint32_t const ces[9] = { 0x56AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_110)
{
    // 1461A 003F;	
    // (𔘚) ANATOLIAN HIEROGLYPH A483	[56AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461A, 0x003F };
    uint32_t const ces[9] = { 0x56AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_111)
{
    // 1461A 0061;	
    // (𔘚) ANATOLIAN HIEROGLYPH A483	[56AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461A, 0x0061 };
    uint32_t const ces[9] = { 0x56AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_112)
{
    // 1461A 0041;	
    // (𔘚) ANATOLIAN HIEROGLYPH A483	[56AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1461A, 0x0041 };
    uint32_t const ces[9] = { 0x56AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_113)
{
    // 1461A 0062;	
    // (𔘚) ANATOLIAN HIEROGLYPH A483	[56AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461A, 0x0062 };
    uint32_t const ces[9] = { 0x56AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_114)
{
    // 1461B 0021;	
    // (𔘛) ANATOLIAN HIEROGLYPH A484	[56AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461B, 0x0021 };
    uint32_t const ces[9] = { 0x56AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_115)
{
    // 1461B 003F;	
    // (𔘛) ANATOLIAN HIEROGLYPH A484	[56AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461B, 0x003F };
    uint32_t const ces[9] = { 0x56AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_116)
{
    // 1461B 0061;	
    // (𔘛) ANATOLIAN HIEROGLYPH A484	[56AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461B, 0x0061 };
    uint32_t const ces[9] = { 0x56AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_117)
{
    // 1461B 0041;	
    // (𔘛) ANATOLIAN HIEROGLYPH A484	[56AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1461B, 0x0041 };
    uint32_t const ces[9] = { 0x56AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_118)
{
    // 1461B 0062;	
    // (𔘛) ANATOLIAN HIEROGLYPH A484	[56AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461B, 0x0062 };
    uint32_t const ces[9] = { 0x56AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_119)
{
    // 1461C 0021;	
    // (𔘜) ANATOLIAN HIEROGLYPH A485	[56B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461C, 0x0021 };
    uint32_t const ces[9] = { 0x56B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_120)
{
    // 1461C 003F;	
    // (𔘜) ANATOLIAN HIEROGLYPH A485	[56B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461C, 0x003F };
    uint32_t const ces[9] = { 0x56B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_121)
{
    // 1461C 0061;	
    // (𔘜) ANATOLIAN HIEROGLYPH A485	[56B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461C, 0x0061 };
    uint32_t const ces[9] = { 0x56B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_122)
{
    // 1461C 0041;	
    // (𔘜) ANATOLIAN HIEROGLYPH A485	[56B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1461C, 0x0041 };
    uint32_t const ces[9] = { 0x56B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_123)
{
    // 1461C 0062;	
    // (𔘜) ANATOLIAN HIEROGLYPH A485	[56B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461C, 0x0062 };
    uint32_t const ces[9] = { 0x56B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_124)
{
    // 1461D 0021;	
    // (𔘝) ANATOLIAN HIEROGLYPH A486	[56B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461D, 0x0021 };
    uint32_t const ces[9] = { 0x56B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_125)
{
    // 1461D 003F;	
    // (𔘝) ANATOLIAN HIEROGLYPH A486	[56B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461D, 0x003F };
    uint32_t const ces[9] = { 0x56B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_126)
{
    // 1461D 0061;	
    // (𔘝) ANATOLIAN HIEROGLYPH A486	[56B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461D, 0x0061 };
    uint32_t const ces[9] = { 0x56B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_127)
{
    // 1461D 0041;	
    // (𔘝) ANATOLIAN HIEROGLYPH A486	[56B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1461D, 0x0041 };
    uint32_t const ces[9] = { 0x56B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_128)
{
    // 1461D 0062;	
    // (𔘝) ANATOLIAN HIEROGLYPH A486	[56B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461D, 0x0062 };
    uint32_t const ces[9] = { 0x56B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_129)
{
    // 1461E 0021;	
    // (𔘞) ANATOLIAN HIEROGLYPH A487	[56B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461E, 0x0021 };
    uint32_t const ces[9] = { 0x56B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_130)
{
    // 1461E 003F;	
    // (𔘞) ANATOLIAN HIEROGLYPH A487	[56B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461E, 0x003F };
    uint32_t const ces[9] = { 0x56B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_131)
{
    // 1461E 0061;	
    // (𔘞) ANATOLIAN HIEROGLYPH A487	[56B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461E, 0x0061 };
    uint32_t const ces[9] = { 0x56B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_132)
{
    // 1461E 0041;	
    // (𔘞) ANATOLIAN HIEROGLYPH A487	[56B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1461E, 0x0041 };
    uint32_t const ces[9] = { 0x56B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_133)
{
    // 1461E 0062;	
    // (𔘞) ANATOLIAN HIEROGLYPH A487	[56B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461E, 0x0062 };
    uint32_t const ces[9] = { 0x56B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_134)
{
    // 1461F 0021;	
    // (𔘟) ANATOLIAN HIEROGLYPH A488	[56B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461F, 0x0021 };
    uint32_t const ces[9] = { 0x56B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_135)
{
    // 1461F 003F;	
    // (𔘟) ANATOLIAN HIEROGLYPH A488	[56B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461F, 0x003F };
    uint32_t const ces[9] = { 0x56B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_136)
{
    // 1461F 0061;	
    // (𔘟) ANATOLIAN HIEROGLYPH A488	[56B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461F, 0x0061 };
    uint32_t const ces[9] = { 0x56B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_137)
{
    // 1461F 0041;	
    // (𔘟) ANATOLIAN HIEROGLYPH A488	[56B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1461F, 0x0041 };
    uint32_t const ces[9] = { 0x56B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_138)
{
    // 1461F 0062;	
    // (𔘟) ANATOLIAN HIEROGLYPH A488	[56B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461F, 0x0062 };
    uint32_t const ces[9] = { 0x56B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_139)
{
    // 14620 0021;	
    // (𔘠) ANATOLIAN HIEROGLYPH A489	[56B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14620, 0x0021 };
    uint32_t const ces[9] = { 0x56B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_140)
{
    // 14620 003F;	
    // (𔘠) ANATOLIAN HIEROGLYPH A489	[56B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14620, 0x003F };
    uint32_t const ces[9] = { 0x56B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_141)
{
    // 14620 0061;	
    // (𔘠) ANATOLIAN HIEROGLYPH A489	[56B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14620, 0x0061 };
    uint32_t const ces[9] = { 0x56B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_142)
{
    // 14620 0041;	
    // (𔘠) ANATOLIAN HIEROGLYPH A489	[56B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14620, 0x0041 };
    uint32_t const ces[9] = { 0x56B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_143)
{
    // 14620 0062;	
    // (𔘠) ANATOLIAN HIEROGLYPH A489	[56B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14620, 0x0062 };
    uint32_t const ces[9] = { 0x56B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_144)
{
    // 14621 0021;	
    // (𔘡) ANATOLIAN HIEROGLYPH A490	[56B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14621, 0x0021 };
    uint32_t const ces[9] = { 0x56B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_145)
{
    // 14621 003F;	
    // (𔘡) ANATOLIAN HIEROGLYPH A490	[56B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14621, 0x003F };
    uint32_t const ces[9] = { 0x56B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_146)
{
    // 14621 0061;	
    // (𔘡) ANATOLIAN HIEROGLYPH A490	[56B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14621, 0x0061 };
    uint32_t const ces[9] = { 0x56B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_147)
{
    // 14621 0041;	
    // (𔘡) ANATOLIAN HIEROGLYPH A490	[56B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14621, 0x0041 };
    uint32_t const ces[9] = { 0x56B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_148)
{
    // 14621 0062;	
    // (𔘡) ANATOLIAN HIEROGLYPH A490	[56B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14621, 0x0062 };
    uint32_t const ces[9] = { 0x56B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_149)
{
    // 14622 0021;	
    // (𔘢) ANATOLIAN HIEROGLYPH A491	[56B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14622, 0x0021 };
    uint32_t const ces[9] = { 0x56B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_150)
{
    // 14622 003F;	
    // (𔘢) ANATOLIAN HIEROGLYPH A491	[56B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14622, 0x003F };
    uint32_t const ces[9] = { 0x56B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_151)
{
    // 14622 0061;	
    // (𔘢) ANATOLIAN HIEROGLYPH A491	[56B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14622, 0x0061 };
    uint32_t const ces[9] = { 0x56B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_152)
{
    // 14622 0041;	
    // (𔘢) ANATOLIAN HIEROGLYPH A491	[56B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14622, 0x0041 };
    uint32_t const ces[9] = { 0x56B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_153)
{
    // 14622 0062;	
    // (𔘢) ANATOLIAN HIEROGLYPH A491	[56B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14622, 0x0062 };
    uint32_t const ces[9] = { 0x56B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_154)
{
    // 14623 0021;	
    // (𔘣) ANATOLIAN HIEROGLYPH A492	[56B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14623, 0x0021 };
    uint32_t const ces[9] = { 0x56B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_155)
{
    // 14623 003F;	
    // (𔘣) ANATOLIAN HIEROGLYPH A492	[56B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14623, 0x003F };
    uint32_t const ces[9] = { 0x56B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_156)
{
    // 14623 0061;	
    // (𔘣) ANATOLIAN HIEROGLYPH A492	[56B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14623, 0x0061 };
    uint32_t const ces[9] = { 0x56B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_157)
{
    // 14623 0041;	
    // (𔘣) ANATOLIAN HIEROGLYPH A492	[56B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14623, 0x0041 };
    uint32_t const ces[9] = { 0x56B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_158)
{
    // 14623 0062;	
    // (𔘣) ANATOLIAN HIEROGLYPH A492	[56B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14623, 0x0062 };
    uint32_t const ces[9] = { 0x56B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_159)
{
    // 14624 0021;	
    // (𔘤) ANATOLIAN HIEROGLYPH A493	[56B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14624, 0x0021 };
    uint32_t const ces[9] = { 0x56B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_160)
{
    // 14624 003F;	
    // (𔘤) ANATOLIAN HIEROGLYPH A493	[56B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14624, 0x003F };
    uint32_t const ces[9] = { 0x56B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_161)
{
    // 14624 0061;	
    // (𔘤) ANATOLIAN HIEROGLYPH A493	[56B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14624, 0x0061 };
    uint32_t const ces[9] = { 0x56B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_162)
{
    // 14624 0041;	
    // (𔘤) ANATOLIAN HIEROGLYPH A493	[56B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14624, 0x0041 };
    uint32_t const ces[9] = { 0x56B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_163)
{
    // 14624 0062;	
    // (𔘤) ANATOLIAN HIEROGLYPH A493	[56B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14624, 0x0062 };
    uint32_t const ces[9] = { 0x56B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_164)
{
    // 14625 0021;	
    // (𔘥) ANATOLIAN HIEROGLYPH A494	[56B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14625, 0x0021 };
    uint32_t const ces[9] = { 0x56B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_165)
{
    // 14625 003F;	
    // (𔘥) ANATOLIAN HIEROGLYPH A494	[56B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14625, 0x003F };
    uint32_t const ces[9] = { 0x56B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_166)
{
    // 14625 0061;	
    // (𔘥) ANATOLIAN HIEROGLYPH A494	[56B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14625, 0x0061 };
    uint32_t const ces[9] = { 0x56B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_167)
{
    // 14625 0041;	
    // (𔘥) ANATOLIAN HIEROGLYPH A494	[56B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14625, 0x0041 };
    uint32_t const ces[9] = { 0x56B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_168)
{
    // 14625 0062;	
    // (𔘥) ANATOLIAN HIEROGLYPH A494	[56B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14625, 0x0062 };
    uint32_t const ces[9] = { 0x56B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_169)
{
    // 14626 0021;	
    // (𔘦) ANATOLIAN HIEROGLYPH A495	[56BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14626, 0x0021 };
    uint32_t const ces[9] = { 0x56BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_170)
{
    // 14626 003F;	
    // (𔘦) ANATOLIAN HIEROGLYPH A495	[56BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14626, 0x003F };
    uint32_t const ces[9] = { 0x56BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_171)
{
    // 14626 0061;	
    // (𔘦) ANATOLIAN HIEROGLYPH A495	[56BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14626, 0x0061 };
    uint32_t const ces[9] = { 0x56BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_172)
{
    // 14626 0041;	
    // (𔘦) ANATOLIAN HIEROGLYPH A495	[56BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14626, 0x0041 };
    uint32_t const ces[9] = { 0x56BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_173)
{
    // 14626 0062;	
    // (𔘦) ANATOLIAN HIEROGLYPH A495	[56BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14626, 0x0062 };
    uint32_t const ces[9] = { 0x56BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_174)
{
    // 14627 0021;	
    // (𔘧) ANATOLIAN HIEROGLYPH A496	[56BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14627, 0x0021 };
    uint32_t const ces[9] = { 0x56BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_175)
{
    // 14627 003F;	
    // (𔘧) ANATOLIAN HIEROGLYPH A496	[56BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14627, 0x003F };
    uint32_t const ces[9] = { 0x56BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_176)
{
    // 14627 0061;	
    // (𔘧) ANATOLIAN HIEROGLYPH A496	[56BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14627, 0x0061 };
    uint32_t const ces[9] = { 0x56BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_177)
{
    // 14627 0041;	
    // (𔘧) ANATOLIAN HIEROGLYPH A496	[56BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14627, 0x0041 };
    uint32_t const ces[9] = { 0x56BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_178)
{
    // 14627 0062;	
    // (𔘧) ANATOLIAN HIEROGLYPH A496	[56BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14627, 0x0062 };
    uint32_t const ces[9] = { 0x56BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_179)
{
    // 14628 0021;	
    // (𔘨) ANATOLIAN HIEROGLYPH A497	[56BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14628, 0x0021 };
    uint32_t const ces[9] = { 0x56BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_180)
{
    // 14628 003F;	
    // (𔘨) ANATOLIAN HIEROGLYPH A497	[56BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14628, 0x003F };
    uint32_t const ces[9] = { 0x56BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_181)
{
    // 14628 0061;	
    // (𔘨) ANATOLIAN HIEROGLYPH A497	[56BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14628, 0x0061 };
    uint32_t const ces[9] = { 0x56BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_182)
{
    // 14628 0041;	
    // (𔘨) ANATOLIAN HIEROGLYPH A497	[56BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14628, 0x0041 };
    uint32_t const ces[9] = { 0x56BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_183)
{
    // 14628 0062;	
    // (𔘨) ANATOLIAN HIEROGLYPH A497	[56BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14628, 0x0062 };
    uint32_t const ces[9] = { 0x56BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_184)
{
    // 14629 0021;	
    // (𔘩) ANATOLIAN HIEROGLYPH A501	[56BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14629, 0x0021 };
    uint32_t const ces[9] = { 0x56BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_185)
{
    // 14629 003F;	
    // (𔘩) ANATOLIAN HIEROGLYPH A501	[56BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14629, 0x003F };
    uint32_t const ces[9] = { 0x56BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_186)
{
    // 14629 0061;	
    // (𔘩) ANATOLIAN HIEROGLYPH A501	[56BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14629, 0x0061 };
    uint32_t const ces[9] = { 0x56BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_187)
{
    // 14629 0041;	
    // (𔘩) ANATOLIAN HIEROGLYPH A501	[56BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14629, 0x0041 };
    uint32_t const ces[9] = { 0x56BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_188)
{
    // 14629 0062;	
    // (𔘩) ANATOLIAN HIEROGLYPH A501	[56BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14629, 0x0062 };
    uint32_t const ces[9] = { 0x56BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_189)
{
    // 1462A 0021;	
    // (𔘪) ANATOLIAN HIEROGLYPH A502	[56BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462A, 0x0021 };
    uint32_t const ces[9] = { 0x56BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_190)
{
    // 1462A 003F;	
    // (𔘪) ANATOLIAN HIEROGLYPH A502	[56BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462A, 0x003F };
    uint32_t const ces[9] = { 0x56BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_191)
{
    // 1462A 0061;	
    // (𔘪) ANATOLIAN HIEROGLYPH A502	[56BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462A, 0x0061 };
    uint32_t const ces[9] = { 0x56BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_192)
{
    // 1462A 0041;	
    // (𔘪) ANATOLIAN HIEROGLYPH A502	[56BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1462A, 0x0041 };
    uint32_t const ces[9] = { 0x56BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_193)
{
    // 1462A 0062;	
    // (𔘪) ANATOLIAN HIEROGLYPH A502	[56BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462A, 0x0062 };
    uint32_t const ces[9] = { 0x56BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_194)
{
    // 1462B 0021;	
    // (𔘫) ANATOLIAN HIEROGLYPH A503	[56BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462B, 0x0021 };
    uint32_t const ces[9] = { 0x56BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_195)
{
    // 1462B 003F;	
    // (𔘫) ANATOLIAN HIEROGLYPH A503	[56BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462B, 0x003F };
    uint32_t const ces[9] = { 0x56BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_196)
{
    // 1462B 0061;	
    // (𔘫) ANATOLIAN HIEROGLYPH A503	[56BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462B, 0x0061 };
    uint32_t const ces[9] = { 0x56BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_197)
{
    // 1462B 0041;	
    // (𔘫) ANATOLIAN HIEROGLYPH A503	[56BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1462B, 0x0041 };
    uint32_t const ces[9] = { 0x56BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_198)
{
    // 1462B 0062;	
    // (𔘫) ANATOLIAN HIEROGLYPH A503	[56BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462B, 0x0062 };
    uint32_t const ces[9] = { 0x56BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_199)
{
    // 1462C 0021;	
    // (𔘬) ANATOLIAN HIEROGLYPH A504	[56C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462C, 0x0021 };
    uint32_t const ces[9] = { 0x56C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_200)
{
    // 1462C 003F;	
    // (𔘬) ANATOLIAN HIEROGLYPH A504	[56C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462C, 0x003F };
    uint32_t const ces[9] = { 0x56C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_201)
{
    // 1462C 0061;	
    // (𔘬) ANATOLIAN HIEROGLYPH A504	[56C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462C, 0x0061 };
    uint32_t const ces[9] = { 0x56C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_202)
{
    // 1462C 0041;	
    // (𔘬) ANATOLIAN HIEROGLYPH A504	[56C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1462C, 0x0041 };
    uint32_t const ces[9] = { 0x56C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_203)
{
    // 1462C 0062;	
    // (𔘬) ANATOLIAN HIEROGLYPH A504	[56C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462C, 0x0062 };
    uint32_t const ces[9] = { 0x56C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_204)
{
    // 1462D 0021;	
    // (𔘭) ANATOLIAN HIEROGLYPH A505	[56C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462D, 0x0021 };
    uint32_t const ces[9] = { 0x56C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_205)
{
    // 1462D 003F;	
    // (𔘭) ANATOLIAN HIEROGLYPH A505	[56C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462D, 0x003F };
    uint32_t const ces[9] = { 0x56C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_206)
{
    // 1462D 0061;	
    // (𔘭) ANATOLIAN HIEROGLYPH A505	[56C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462D, 0x0061 };
    uint32_t const ces[9] = { 0x56C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_207)
{
    // 1462D 0041;	
    // (𔘭) ANATOLIAN HIEROGLYPH A505	[56C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1462D, 0x0041 };
    uint32_t const ces[9] = { 0x56C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_208)
{
    // 1462D 0062;	
    // (𔘭) ANATOLIAN HIEROGLYPH A505	[56C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462D, 0x0062 };
    uint32_t const ces[9] = { 0x56C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_209)
{
    // 1462E 0021;	
    // (𔘮) ANATOLIAN HIEROGLYPH A506	[56C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462E, 0x0021 };
    uint32_t const ces[9] = { 0x56C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_210)
{
    // 1462E 003F;	
    // (𔘮) ANATOLIAN HIEROGLYPH A506	[56C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462E, 0x003F };
    uint32_t const ces[9] = { 0x56C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_211)
{
    // 1462E 0061;	
    // (𔘮) ANATOLIAN HIEROGLYPH A506	[56C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462E, 0x0061 };
    uint32_t const ces[9] = { 0x56C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_212)
{
    // 1462E 0041;	
    // (𔘮) ANATOLIAN HIEROGLYPH A506	[56C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1462E, 0x0041 };
    uint32_t const ces[9] = { 0x56C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_213)
{
    // 1462E 0062;	
    // (𔘮) ANATOLIAN HIEROGLYPH A506	[56C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462E, 0x0062 };
    uint32_t const ces[9] = { 0x56C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_214)
{
    // 1462F 0021;	
    // (𔘯) ANATOLIAN HIEROGLYPH A507	[56C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462F, 0x0021 };
    uint32_t const ces[9] = { 0x56C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_215)
{
    // 1462F 003F;	
    // (𔘯) ANATOLIAN HIEROGLYPH A507	[56C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462F, 0x003F };
    uint32_t const ces[9] = { 0x56C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_216)
{
    // 1462F 0061;	
    // (𔘯) ANATOLIAN HIEROGLYPH A507	[56C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462F, 0x0061 };
    uint32_t const ces[9] = { 0x56C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_217)
{
    // 1462F 0041;	
    // (𔘯) ANATOLIAN HIEROGLYPH A507	[56C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1462F, 0x0041 };
    uint32_t const ces[9] = { 0x56C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_218)
{
    // 1462F 0062;	
    // (𔘯) ANATOLIAN HIEROGLYPH A507	[56C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462F, 0x0062 };
    uint32_t const ces[9] = { 0x56C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_219)
{
    // 14630 0021;	
    // (𔘰) ANATOLIAN HIEROGLYPH A508	[56C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14630, 0x0021 };
    uint32_t const ces[9] = { 0x56C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_220)
{
    // 14630 003F;	
    // (𔘰) ANATOLIAN HIEROGLYPH A508	[56C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14630, 0x003F };
    uint32_t const ces[9] = { 0x56C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_221)
{
    // 14630 0061;	
    // (𔘰) ANATOLIAN HIEROGLYPH A508	[56C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14630, 0x0061 };
    uint32_t const ces[9] = { 0x56C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_222)
{
    // 14630 0041;	
    // (𔘰) ANATOLIAN HIEROGLYPH A508	[56C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14630, 0x0041 };
    uint32_t const ces[9] = { 0x56C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_223)
{
    // 14630 0062;	
    // (𔘰) ANATOLIAN HIEROGLYPH A508	[56C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14630, 0x0062 };
    uint32_t const ces[9] = { 0x56C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_224)
{
    // 14631 0021;	
    // (𔘱) ANATOLIAN HIEROGLYPH A509	[56C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14631, 0x0021 };
    uint32_t const ces[9] = { 0x56C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_225)
{
    // 14631 003F;	
    // (𔘱) ANATOLIAN HIEROGLYPH A509	[56C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14631, 0x003F };
    uint32_t const ces[9] = { 0x56C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_226)
{
    // 14631 0061;	
    // (𔘱) ANATOLIAN HIEROGLYPH A509	[56C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14631, 0x0061 };
    uint32_t const ces[9] = { 0x56C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_227)
{
    // 14631 0041;	
    // (𔘱) ANATOLIAN HIEROGLYPH A509	[56C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14631, 0x0041 };
    uint32_t const ces[9] = { 0x56C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_228)
{
    // 14631 0062;	
    // (𔘱) ANATOLIAN HIEROGLYPH A509	[56C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14631, 0x0062 };
    uint32_t const ces[9] = { 0x56C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_229)
{
    // 14632 0021;	
    // (𔘲) ANATOLIAN HIEROGLYPH A510	[56C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14632, 0x0021 };
    uint32_t const ces[9] = { 0x56C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_230)
{
    // 14632 003F;	
    // (𔘲) ANATOLIAN HIEROGLYPH A510	[56C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14632, 0x003F };
    uint32_t const ces[9] = { 0x56C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_231)
{
    // 14632 0061;	
    // (𔘲) ANATOLIAN HIEROGLYPH A510	[56C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14632, 0x0061 };
    uint32_t const ces[9] = { 0x56C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_232)
{
    // 14632 0041;	
    // (𔘲) ANATOLIAN HIEROGLYPH A510	[56C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14632, 0x0041 };
    uint32_t const ces[9] = { 0x56C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_233)
{
    // 14632 0062;	
    // (𔘲) ANATOLIAN HIEROGLYPH A510	[56C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14632, 0x0062 };
    uint32_t const ces[9] = { 0x56C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_234)
{
    // 14633 0021;	
    // (𔘳) ANATOLIAN HIEROGLYPH A511	[56C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14633, 0x0021 };
    uint32_t const ces[9] = { 0x56C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_235)
{
    // 14633 003F;	
    // (𔘳) ANATOLIAN HIEROGLYPH A511	[56C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14633, 0x003F };
    uint32_t const ces[9] = { 0x56C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_236)
{
    // 14633 0061;	
    // (𔘳) ANATOLIAN HIEROGLYPH A511	[56C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14633, 0x0061 };
    uint32_t const ces[9] = { 0x56C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_237)
{
    // 14633 0041;	
    // (𔘳) ANATOLIAN HIEROGLYPH A511	[56C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14633, 0x0041 };
    uint32_t const ces[9] = { 0x56C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_238)
{
    // 14633 0062;	
    // (𔘳) ANATOLIAN HIEROGLYPH A511	[56C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14633, 0x0062 };
    uint32_t const ces[9] = { 0x56C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_239)
{
    // 14634 0021;	
    // (𔘴) ANATOLIAN HIEROGLYPH A512	[56C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14634, 0x0021 };
    uint32_t const ces[9] = { 0x56C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_240)
{
    // 14634 003F;	
    // (𔘴) ANATOLIAN HIEROGLYPH A512	[56C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14634, 0x003F };
    uint32_t const ces[9] = { 0x56C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_241)
{
    // 14634 0061;	
    // (𔘴) ANATOLIAN HIEROGLYPH A512	[56C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14634, 0x0061 };
    uint32_t const ces[9] = { 0x56C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_242)
{
    // 14634 0041;	
    // (𔘴) ANATOLIAN HIEROGLYPH A512	[56C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14634, 0x0041 };
    uint32_t const ces[9] = { 0x56C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_243)
{
    // 14634 0062;	
    // (𔘴) ANATOLIAN HIEROGLYPH A512	[56C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14634, 0x0062 };
    uint32_t const ces[9] = { 0x56C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_244)
{
    // 14635 0021;	
    // (𔘵) ANATOLIAN HIEROGLYPH A513	[56C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14635, 0x0021 };
    uint32_t const ces[9] = { 0x56C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_245)
{
    // 14635 003F;	
    // (𔘵) ANATOLIAN HIEROGLYPH A513	[56C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14635, 0x003F };
    uint32_t const ces[9] = { 0x56C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_246)
{
    // 14635 0061;	
    // (𔘵) ANATOLIAN HIEROGLYPH A513	[56C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14635, 0x0061 };
    uint32_t const ces[9] = { 0x56C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_247)
{
    // 14635 0041;	
    // (𔘵) ANATOLIAN HIEROGLYPH A513	[56C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14635, 0x0041 };
    uint32_t const ces[9] = { 0x56C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_248)
{
    // 14635 0062;	
    // (𔘵) ANATOLIAN HIEROGLYPH A513	[56C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14635, 0x0062 };
    uint32_t const ces[9] = { 0x56C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_249)
{
    // 14636 0021;	
    // (𔘶) ANATOLIAN HIEROGLYPH A514	[56CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14636, 0x0021 };
    uint32_t const ces[9] = { 0x56CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_250)
{
    // 14636 003F;	
    // (𔘶) ANATOLIAN HIEROGLYPH A514	[56CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14636, 0x003F };
    uint32_t const ces[9] = { 0x56CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_251)
{
    // 14636 0061;	
    // (𔘶) ANATOLIAN HIEROGLYPH A514	[56CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14636, 0x0061 };
    uint32_t const ces[9] = { 0x56CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_252)
{
    // 14636 0041;	
    // (𔘶) ANATOLIAN HIEROGLYPH A514	[56CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14636, 0x0041 };
    uint32_t const ces[9] = { 0x56CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_253)
{
    // 14636 0062;	
    // (𔘶) ANATOLIAN HIEROGLYPH A514	[56CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14636, 0x0062 };
    uint32_t const ces[9] = { 0x56CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_254)
{
    // 14637 0021;	
    // (𔘷) ANATOLIAN HIEROGLYPH A515	[56CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14637, 0x0021 };
    uint32_t const ces[9] = { 0x56CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_255)
{
    // 14637 003F;	
    // (𔘷) ANATOLIAN HIEROGLYPH A515	[56CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14637, 0x003F };
    uint32_t const ces[9] = { 0x56CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_256)
{
    // 14637 0061;	
    // (𔘷) ANATOLIAN HIEROGLYPH A515	[56CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14637, 0x0061 };
    uint32_t const ces[9] = { 0x56CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_257)
{
    // 14637 0041;	
    // (𔘷) ANATOLIAN HIEROGLYPH A515	[56CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14637, 0x0041 };
    uint32_t const ces[9] = { 0x56CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_258)
{
    // 14637 0062;	
    // (𔘷) ANATOLIAN HIEROGLYPH A515	[56CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14637, 0x0062 };
    uint32_t const ces[9] = { 0x56CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_259)
{
    // 14638 0021;	
    // (𔘸) ANATOLIAN HIEROGLYPH A516	[56CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14638, 0x0021 };
    uint32_t const ces[9] = { 0x56CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_260)
{
    // 14638 003F;	
    // (𔘸) ANATOLIAN HIEROGLYPH A516	[56CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14638, 0x003F };
    uint32_t const ces[9] = { 0x56CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_261)
{
    // 14638 0061;	
    // (𔘸) ANATOLIAN HIEROGLYPH A516	[56CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14638, 0x0061 };
    uint32_t const ces[9] = { 0x56CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_262)
{
    // 14638 0041;	
    // (𔘸) ANATOLIAN HIEROGLYPH A516	[56CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14638, 0x0041 };
    uint32_t const ces[9] = { 0x56CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_263)
{
    // 14638 0062;	
    // (𔘸) ANATOLIAN HIEROGLYPH A516	[56CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14638, 0x0062 };
    uint32_t const ces[9] = { 0x56CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_264)
{
    // 14639 0021;	
    // (𔘹) ANATOLIAN HIEROGLYPH A517	[56CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14639, 0x0021 };
    uint32_t const ces[9] = { 0x56CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_265)
{
    // 14639 003F;	
    // (𔘹) ANATOLIAN HIEROGLYPH A517	[56CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14639, 0x003F };
    uint32_t const ces[9] = { 0x56CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_266)
{
    // 14639 0061;	
    // (𔘹) ANATOLIAN HIEROGLYPH A517	[56CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14639, 0x0061 };
    uint32_t const ces[9] = { 0x56CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_267)
{
    // 14639 0041;	
    // (𔘹) ANATOLIAN HIEROGLYPH A517	[56CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14639, 0x0041 };
    uint32_t const ces[9] = { 0x56CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_268)
{
    // 14639 0062;	
    // (𔘹) ANATOLIAN HIEROGLYPH A517	[56CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14639, 0x0062 };
    uint32_t const ces[9] = { 0x56CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_269)
{
    // 1463A 0021;	
    // (𔘺) ANATOLIAN HIEROGLYPH A518	[56CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463A, 0x0021 };
    uint32_t const ces[9] = { 0x56CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_270)
{
    // 1463A 003F;	
    // (𔘺) ANATOLIAN HIEROGLYPH A518	[56CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463A, 0x003F };
    uint32_t const ces[9] = { 0x56CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_271)
{
    // 1463A 0061;	
    // (𔘺) ANATOLIAN HIEROGLYPH A518	[56CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463A, 0x0061 };
    uint32_t const ces[9] = { 0x56CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_272)
{
    // 1463A 0041;	
    // (𔘺) ANATOLIAN HIEROGLYPH A518	[56CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1463A, 0x0041 };
    uint32_t const ces[9] = { 0x56CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_273)
{
    // 1463A 0062;	
    // (𔘺) ANATOLIAN HIEROGLYPH A518	[56CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463A, 0x0062 };
    uint32_t const ces[9] = { 0x56CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_274)
{
    // 1463B 0021;	
    // (𔘻) ANATOLIAN HIEROGLYPH A519	[56CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463B, 0x0021 };
    uint32_t const ces[9] = { 0x56CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_275)
{
    // 1463B 003F;	
    // (𔘻) ANATOLIAN HIEROGLYPH A519	[56CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463B, 0x003F };
    uint32_t const ces[9] = { 0x56CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_276)
{
    // 1463B 0061;	
    // (𔘻) ANATOLIAN HIEROGLYPH A519	[56CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463B, 0x0061 };
    uint32_t const ces[9] = { 0x56CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_277)
{
    // 1463B 0041;	
    // (𔘻) ANATOLIAN HIEROGLYPH A519	[56CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1463B, 0x0041 };
    uint32_t const ces[9] = { 0x56CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_278)
{
    // 1463B 0062;	
    // (𔘻) ANATOLIAN HIEROGLYPH A519	[56CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463B, 0x0062 };
    uint32_t const ces[9] = { 0x56CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_279)
{
    // 1463C 0021;	
    // (𔘼) ANATOLIAN HIEROGLYPH A520	[56D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463C, 0x0021 };
    uint32_t const ces[9] = { 0x56D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_280)
{
    // 1463C 003F;	
    // (𔘼) ANATOLIAN HIEROGLYPH A520	[56D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463C, 0x003F };
    uint32_t const ces[9] = { 0x56D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_281)
{
    // 1463C 0061;	
    // (𔘼) ANATOLIAN HIEROGLYPH A520	[56D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463C, 0x0061 };
    uint32_t const ces[9] = { 0x56D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_282)
{
    // 1463C 0041;	
    // (𔘼) ANATOLIAN HIEROGLYPH A520	[56D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1463C, 0x0041 };
    uint32_t const ces[9] = { 0x56D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_283)
{
    // 1463C 0062;	
    // (𔘼) ANATOLIAN HIEROGLYPH A520	[56D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463C, 0x0062 };
    uint32_t const ces[9] = { 0x56D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_284)
{
    // 1463D 0021;	
    // (𔘽) ANATOLIAN HIEROGLYPH A521	[56D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463D, 0x0021 };
    uint32_t const ces[9] = { 0x56D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_285)
{
    // 1463D 003F;	
    // (𔘽) ANATOLIAN HIEROGLYPH A521	[56D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463D, 0x003F };
    uint32_t const ces[9] = { 0x56D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_286)
{
    // 1463D 0061;	
    // (𔘽) ANATOLIAN HIEROGLYPH A521	[56D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463D, 0x0061 };
    uint32_t const ces[9] = { 0x56D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_287)
{
    // 1463D 0041;	
    // (𔘽) ANATOLIAN HIEROGLYPH A521	[56D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1463D, 0x0041 };
    uint32_t const ces[9] = { 0x56D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_288)
{
    // 1463D 0062;	
    // (𔘽) ANATOLIAN HIEROGLYPH A521	[56D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463D, 0x0062 };
    uint32_t const ces[9] = { 0x56D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_289)
{
    // 1463E 0021;	
    // (𔘾) ANATOLIAN HIEROGLYPH A522	[56D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463E, 0x0021 };
    uint32_t const ces[9] = { 0x56D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_290)
{
    // 1463E 003F;	
    // (𔘾) ANATOLIAN HIEROGLYPH A522	[56D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463E, 0x003F };
    uint32_t const ces[9] = { 0x56D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_291)
{
    // 1463E 0061;	
    // (𔘾) ANATOLIAN HIEROGLYPH A522	[56D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463E, 0x0061 };
    uint32_t const ces[9] = { 0x56D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_292)
{
    // 1463E 0041;	
    // (𔘾) ANATOLIAN HIEROGLYPH A522	[56D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1463E, 0x0041 };
    uint32_t const ces[9] = { 0x56D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_293)
{
    // 1463E 0062;	
    // (𔘾) ANATOLIAN HIEROGLYPH A522	[56D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463E, 0x0062 };
    uint32_t const ces[9] = { 0x56D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_294)
{
    // 1463F 0021;	
    // (𔘿) ANATOLIAN HIEROGLYPH A523	[56D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463F, 0x0021 };
    uint32_t const ces[9] = { 0x56D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_295)
{
    // 1463F 003F;	
    // (𔘿) ANATOLIAN HIEROGLYPH A523	[56D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463F, 0x003F };
    uint32_t const ces[9] = { 0x56D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_296)
{
    // 1463F 0061;	
    // (𔘿) ANATOLIAN HIEROGLYPH A523	[56D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463F, 0x0061 };
    uint32_t const ces[9] = { 0x56D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_297)
{
    // 1463F 0041;	
    // (𔘿) ANATOLIAN HIEROGLYPH A523	[56D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1463F, 0x0041 };
    uint32_t const ces[9] = { 0x56D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_298)
{
    // 1463F 0062;	
    // (𔘿) ANATOLIAN HIEROGLYPH A523	[56D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463F, 0x0062 };
    uint32_t const ces[9] = { 0x56D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_299)
{
    // 14640 0021;	
    // (𔙀) ANATOLIAN HIEROGLYPH A524	[56D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14640, 0x0021 };
    uint32_t const ces[9] = { 0x56D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_300)
{
    // 14640 003F;	
    // (𔙀) ANATOLIAN HIEROGLYPH A524	[56D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14640, 0x003F };
    uint32_t const ces[9] = { 0x56D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_301)
{
    // 14640 0061;	
    // (𔙀) ANATOLIAN HIEROGLYPH A524	[56D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14640, 0x0061 };
    uint32_t const ces[9] = { 0x56D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_302)
{
    // 14640 0041;	
    // (𔙀) ANATOLIAN HIEROGLYPH A524	[56D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14640, 0x0041 };
    uint32_t const ces[9] = { 0x56D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_303)
{
    // 14640 0062;	
    // (𔙀) ANATOLIAN HIEROGLYPH A524	[56D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14640, 0x0062 };
    uint32_t const ces[9] = { 0x56D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_304)
{
    // 14641 0021;	
    // (𔙁) ANATOLIAN HIEROGLYPH A525	[56D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14641, 0x0021 };
    uint32_t const ces[9] = { 0x56D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_305)
{
    // 14641 003F;	
    // (𔙁) ANATOLIAN HIEROGLYPH A525	[56D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14641, 0x003F };
    uint32_t const ces[9] = { 0x56D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_306)
{
    // 14641 0061;	
    // (𔙁) ANATOLIAN HIEROGLYPH A525	[56D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14641, 0x0061 };
    uint32_t const ces[9] = { 0x56D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_307)
{
    // 14641 0041;	
    // (𔙁) ANATOLIAN HIEROGLYPH A525	[56D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14641, 0x0041 };
    uint32_t const ces[9] = { 0x56D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_308)
{
    // 14641 0062;	
    // (𔙁) ANATOLIAN HIEROGLYPH A525	[56D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14641, 0x0062 };
    uint32_t const ces[9] = { 0x56D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_309)
{
    // 14642 0021;	
    // (𔙂) ANATOLIAN HIEROGLYPH A526	[56D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14642, 0x0021 };
    uint32_t const ces[9] = { 0x56D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_310)
{
    // 14642 003F;	
    // (𔙂) ANATOLIAN HIEROGLYPH A526	[56D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14642, 0x003F };
    uint32_t const ces[9] = { 0x56D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_311)
{
    // 14642 0061;	
    // (𔙂) ANATOLIAN HIEROGLYPH A526	[56D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14642, 0x0061 };
    uint32_t const ces[9] = { 0x56D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_312)
{
    // 14642 0041;	
    // (𔙂) ANATOLIAN HIEROGLYPH A526	[56D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14642, 0x0041 };
    uint32_t const ces[9] = { 0x56D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_313)
{
    // 14642 0062;	
    // (𔙂) ANATOLIAN HIEROGLYPH A526	[56D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14642, 0x0062 };
    uint32_t const ces[9] = { 0x56D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_314)
{
    // 14643 0021;	
    // (𔙃) ANATOLIAN HIEROGLYPH A527	[56D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14643, 0x0021 };
    uint32_t const ces[9] = { 0x56D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_315)
{
    // 14643 003F;	
    // (𔙃) ANATOLIAN HIEROGLYPH A527	[56D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14643, 0x003F };
    uint32_t const ces[9] = { 0x56D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_316)
{
    // 14643 0061;	
    // (𔙃) ANATOLIAN HIEROGLYPH A527	[56D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14643, 0x0061 };
    uint32_t const ces[9] = { 0x56D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_317)
{
    // 14643 0041;	
    // (𔙃) ANATOLIAN HIEROGLYPH A527	[56D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14643, 0x0041 };
    uint32_t const ces[9] = { 0x56D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_318)
{
    // 14643 0062;	
    // (𔙃) ANATOLIAN HIEROGLYPH A527	[56D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14643, 0x0062 };
    uint32_t const ces[9] = { 0x56D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_319)
{
    // 14644 0021;	
    // (𔙄) ANATOLIAN HIEROGLYPH A528	[56D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14644, 0x0021 };
    uint32_t const ces[9] = { 0x56D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_320)
{
    // 14644 003F;	
    // (𔙄) ANATOLIAN HIEROGLYPH A528	[56D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14644, 0x003F };
    uint32_t const ces[9] = { 0x56D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_321)
{
    // 14644 0061;	
    // (𔙄) ANATOLIAN HIEROGLYPH A528	[56D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14644, 0x0061 };
    uint32_t const ces[9] = { 0x56D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_322)
{
    // 14644 0041;	
    // (𔙄) ANATOLIAN HIEROGLYPH A528	[56D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14644, 0x0041 };
    uint32_t const ces[9] = { 0x56D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_323)
{
    // 14644 0062;	
    // (𔙄) ANATOLIAN HIEROGLYPH A528	[56D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14644, 0x0062 };
    uint32_t const ces[9] = { 0x56D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_324)
{
    // 14645 0021;	
    // (𔙅) ANATOLIAN HIEROGLYPH A529	[56D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14645, 0x0021 };
    uint32_t const ces[9] = { 0x56D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_325)
{
    // 14645 003F;	
    // (𔙅) ANATOLIAN HIEROGLYPH A529	[56D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14645, 0x003F };
    uint32_t const ces[9] = { 0x56D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_326)
{
    // 14645 0061;	
    // (𔙅) ANATOLIAN HIEROGLYPH A529	[56D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14645, 0x0061 };
    uint32_t const ces[9] = { 0x56D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_327)
{
    // 14645 0041;	
    // (𔙅) ANATOLIAN HIEROGLYPH A529	[56D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14645, 0x0041 };
    uint32_t const ces[9] = { 0x56D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_328)
{
    // 14645 0062;	
    // (𔙅) ANATOLIAN HIEROGLYPH A529	[56D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14645, 0x0062 };
    uint32_t const ces[9] = { 0x56D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_329)
{
    // 14646 0021;	
    // (𔙆) ANATOLIAN HIEROGLYPH A530	[56DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14646, 0x0021 };
    uint32_t const ces[9] = { 0x56DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_330)
{
    // 14646 003F;	
    // (𔙆) ANATOLIAN HIEROGLYPH A530	[56DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14646, 0x003F };
    uint32_t const ces[9] = { 0x56DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_331)
{
    // 14646 0061;	
    // (𔙆) ANATOLIAN HIEROGLYPH A530	[56DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14646, 0x0061 };
    uint32_t const ces[9] = { 0x56DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_332)
{
    // 14646 0041;	
    // (𔙆) ANATOLIAN HIEROGLYPH A530	[56DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14646, 0x0041 };
    uint32_t const ces[9] = { 0x56DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_333)
{
    // 14646 0062;	
    // (𔙆) ANATOLIAN HIEROGLYPH A530	[56DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14646, 0x0062 };
    uint32_t const ces[9] = { 0x56DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_334)
{
    // 17000 0021;	
    // (𗀀) TANGUT IDEOGRAPH-17000	[FB00 8000 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17000, 0x0021 };
    uint32_t const ces[10] = { 0xFB00, 0x8000, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_335)
{
    // 17000 003F;	
    // (𗀀) TANGUT IDEOGRAPH-17000	[FB00 8000 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17000, 0x003F };
    uint32_t const ces[10] = { 0xFB00, 0x8000, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_336)
{
    // 17000 0061;	
    // (𗀀) TANGUT IDEOGRAPH-17000	[FB00 8000 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17000, 0x0061 };
    uint32_t const ces[10] = { 0xFB00, 0x8000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_337)
{
    // 17000 0041;	
    // (𗀀) TANGUT IDEOGRAPH-17000	[FB00 8000 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17000, 0x0041 };
    uint32_t const ces[10] = { 0xFB00, 0x8000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_338)
{
    // 17000 0062;	
    // (𗀀) TANGUT IDEOGRAPH-17000	[FB00 8000 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17000, 0x0062 };
    uint32_t const ces[10] = { 0xFB00, 0x8000, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_339)
{
    // 17001 0021;	
    // (𗀁) TANGUT IDEOGRAPH-17001	[FB00 8001 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17001, 0x0021 };
    uint32_t const ces[10] = { 0xFB00, 0x8001, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_340)
{
    // 17001 003F;	
    // (𗀁) TANGUT IDEOGRAPH-17001	[FB00 8001 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17001, 0x003F };
    uint32_t const ces[10] = { 0xFB00, 0x8001, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_341)
{
    // 17001 0061;	
    // (𗀁) TANGUT IDEOGRAPH-17001	[FB00 8001 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17001, 0x0061 };
    uint32_t const ces[10] = { 0xFB00, 0x8001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_342)
{
    // 17001 0041;	
    // (𗀁) TANGUT IDEOGRAPH-17001	[FB00 8001 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17001, 0x0041 };
    uint32_t const ces[10] = { 0xFB00, 0x8001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_343)
{
    // 17001 0062;	
    // (𗀁) TANGUT IDEOGRAPH-17001	[FB00 8001 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17001, 0x0062 };
    uint32_t const ces[10] = { 0xFB00, 0x8001, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_344)
{
    // 17002 0021;	
    // (𗀂) TANGUT IDEOGRAPH-17002	[FB00 8002 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17002, 0x0021 };
    uint32_t const ces[10] = { 0xFB00, 0x8002, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_345)
{
    // 17002 003F;	
    // (𗀂) TANGUT IDEOGRAPH-17002	[FB00 8002 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17002, 0x003F };
    uint32_t const ces[10] = { 0xFB00, 0x8002, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_346)
{
    // 17002 0061;	
    // (𗀂) TANGUT IDEOGRAPH-17002	[FB00 8002 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17002, 0x0061 };
    uint32_t const ces[10] = { 0xFB00, 0x8002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_347)
{
    // 17002 0041;	
    // (𗀂) TANGUT IDEOGRAPH-17002	[FB00 8002 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17002, 0x0041 };
    uint32_t const ces[10] = { 0xFB00, 0x8002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_348)
{
    // 17002 0062;	
    // (𗀂) TANGUT IDEOGRAPH-17002	[FB00 8002 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17002, 0x0062 };
    uint32_t const ces[10] = { 0xFB00, 0x8002, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_349)
{
    // 17003 0021;	
    // (𗀃) TANGUT IDEOGRAPH-17003	[FB00 8003 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17003, 0x0021 };
    uint32_t const ces[10] = { 0xFB00, 0x8003, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_350)
{
    // 17003 003F;	
    // (𗀃) TANGUT IDEOGRAPH-17003	[FB00 8003 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17003, 0x003F };
    uint32_t const ces[10] = { 0xFB00, 0x8003, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_351)
{
    // 17003 0061;	
    // (𗀃) TANGUT IDEOGRAPH-17003	[FB00 8003 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17003, 0x0061 };
    uint32_t const ces[10] = { 0xFB00, 0x8003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_352)
{
    // 17003 0041;	
    // (𗀃) TANGUT IDEOGRAPH-17003	[FB00 8003 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x17003, 0x0041 };
    uint32_t const ces[10] = { 0xFB00, 0x8003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_353)
{
    // 17003 0062;	
    // (𗀃) TANGUT IDEOGRAPH-17003	[FB00 8003 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17003, 0x0062 };
    uint32_t const ces[10] = { 0xFB00, 0x8003, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_354)
{
    // 18800 0021;	
    // (𘠀) TANGUT COMPONENT-001	[FB00 9800 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18800, 0x0021 };
    uint32_t const ces[10] = { 0xFB00, 0x9800, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_355)
{
    // 18800 003F;	
    // (𘠀) TANGUT COMPONENT-001	[FB00 9800 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18800, 0x003F };
    uint32_t const ces[10] = { 0xFB00, 0x9800, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_356)
{
    // 18800 0061;	
    // (𘠀) TANGUT COMPONENT-001	[FB00 9800 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18800, 0x0061 };
    uint32_t const ces[10] = { 0xFB00, 0x9800, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_357)
{
    // 18800 0041;	
    // (𘠀) TANGUT COMPONENT-001	[FB00 9800 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18800, 0x0041 };
    uint32_t const ces[10] = { 0xFB00, 0x9800, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_358)
{
    // 18800 0062;	
    // (𘠀) TANGUT COMPONENT-001	[FB00 9800 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18800, 0x0062 };
    uint32_t const ces[10] = { 0xFB00, 0x9800, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_359)
{
    // 18801 0021;	
    // (𘠁) TANGUT COMPONENT-002	[FB00 9801 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18801, 0x0021 };
    uint32_t const ces[10] = { 0xFB00, 0x9801, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_360)
{
    // 18801 003F;	
    // (𘠁) TANGUT COMPONENT-002	[FB00 9801 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18801, 0x003F };
    uint32_t const ces[10] = { 0xFB00, 0x9801, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_361)
{
    // 18801 0061;	
    // (𘠁) TANGUT COMPONENT-002	[FB00 9801 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18801, 0x0061 };
    uint32_t const ces[10] = { 0xFB00, 0x9801, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_362)
{
    // 18801 0041;	
    // (𘠁) TANGUT COMPONENT-002	[FB00 9801 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18801, 0x0041 };
    uint32_t const ces[10] = { 0xFB00, 0x9801, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_363)
{
    // 18801 0062;	
    // (𘠁) TANGUT COMPONENT-002	[FB00 9801 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18801, 0x0062 };
    uint32_t const ces[10] = { 0xFB00, 0x9801, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_364)
{
    // 18802 0021;	
    // (𘠂) TANGUT COMPONENT-003	[FB00 9802 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18802, 0x0021 };
    uint32_t const ces[10] = { 0xFB00, 0x9802, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_365)
{
    // 18802 003F;	
    // (𘠂) TANGUT COMPONENT-003	[FB00 9802 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18802, 0x003F };
    uint32_t const ces[10] = { 0xFB00, 0x9802, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_366)
{
    // 18802 0061;	
    // (𘠂) TANGUT COMPONENT-003	[FB00 9802 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18802, 0x0061 };
    uint32_t const ces[10] = { 0xFB00, 0x9802, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_367)
{
    // 18802 0041;	
    // (𘠂) TANGUT COMPONENT-003	[FB00 9802 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18802, 0x0041 };
    uint32_t const ces[10] = { 0xFB00, 0x9802, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_368)
{
    // 18802 0062;	
    // (𘠂) TANGUT COMPONENT-003	[FB00 9802 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18802, 0x0062 };
    uint32_t const ces[10] = { 0xFB00, 0x9802, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_369)
{
    // 18803 0021;	
    // (𘠃) TANGUT COMPONENT-004	[FB00 9803 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18803, 0x0021 };
    uint32_t const ces[10] = { 0xFB00, 0x9803, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_370)
{
    // 18803 003F;	
    // (𘠃) TANGUT COMPONENT-004	[FB00 9803 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18803, 0x003F };
    uint32_t const ces[10] = { 0xFB00, 0x9803, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_371)
{
    // 18803 0061;	
    // (𘠃) TANGUT COMPONENT-004	[FB00 9803 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18803, 0x0061 };
    uint32_t const ces[10] = { 0xFB00, 0x9803, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_372)
{
    // 18803 0041;	
    // (𘠃) TANGUT COMPONENT-004	[FB00 9803 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18803, 0x0041 };
    uint32_t const ces[10] = { 0xFB00, 0x9803, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_373)
{
    // 18803 0062;	
    // (𘠃) TANGUT COMPONENT-004	[FB00 9803 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18803, 0x0062 };
    uint32_t const ces[10] = { 0xFB00, 0x9803, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_374)
{
    // 18AF2 0021;	
    // (𘫲) TANGUT COMPONENT-755	[FB00 9AF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18AF2, 0x0021 };
    uint32_t const ces[10] = { 0xFB00, 0x9AF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_375)
{
    // 18AF2 003F;	
    // (𘫲) TANGUT COMPONENT-755	[FB00 9AF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18AF2, 0x003F };
    uint32_t const ces[10] = { 0xFB00, 0x9AF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_376)
{
    // 18AF2 0061;	
    // (𘫲) TANGUT COMPONENT-755	[FB00 9AF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18AF2, 0x0061 };
    uint32_t const ces[10] = { 0xFB00, 0x9AF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_377)
{
    // 18AF2 0041;	
    // (𘫲) TANGUT COMPONENT-755	[FB00 9AF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x18AF2, 0x0041 };
    uint32_t const ces[10] = { 0xFB00, 0x9AF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_378)
{
    // 18AF2 0062;	
    // (𘫲) TANGUT COMPONENT-755	[FB00 9AF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x18AF2, 0x0062 };
    uint32_t const ces[10] = { 0xFB00, 0x9AF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_379)
{
    // 1B170 0021;	
    // (𛅰) NUSHU CHARACTER-1B170	[FB01 8000 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B170, 0x0021 };
    uint32_t const ces[10] = { 0xFB01, 0x8000, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_380)
{
    // 1B170 003F;	
    // (𛅰) NUSHU CHARACTER-1B170	[FB01 8000 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B170, 0x003F };
    uint32_t const ces[10] = { 0xFB01, 0x8000, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_381)
{
    // 1B170 0061;	
    // (𛅰) NUSHU CHARACTER-1B170	[FB01 8000 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B170, 0x0061 };
    uint32_t const ces[10] = { 0xFB01, 0x8000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_382)
{
    // 1B170 0041;	
    // (𛅰) NUSHU CHARACTER-1B170	[FB01 8000 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B170, 0x0041 };
    uint32_t const ces[10] = { 0xFB01, 0x8000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_383)
{
    // 1B170 0062;	
    // (𛅰) NUSHU CHARACTER-1B170	[FB01 8000 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B170, 0x0062 };
    uint32_t const ces[10] = { 0xFB01, 0x8000, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_384)
{
    // 1B171 0021;	
    // (𛅱) NUSHU CHARACTER-1B171	[FB01 8001 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B171, 0x0021 };
    uint32_t const ces[10] = { 0xFB01, 0x8001, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_385)
{
    // 1B171 003F;	
    // (𛅱) NUSHU CHARACTER-1B171	[FB01 8001 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B171, 0x003F };
    uint32_t const ces[10] = { 0xFB01, 0x8001, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_386)
{
    // 1B171 0061;	
    // (𛅱) NUSHU CHARACTER-1B171	[FB01 8001 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B171, 0x0061 };
    uint32_t const ces[10] = { 0xFB01, 0x8001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_387)
{
    // 1B171 0041;	
    // (𛅱) NUSHU CHARACTER-1B171	[FB01 8001 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B171, 0x0041 };
    uint32_t const ces[10] = { 0xFB01, 0x8001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_388)
{
    // 1B171 0062;	
    // (𛅱) NUSHU CHARACTER-1B171	[FB01 8001 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B171, 0x0062 };
    uint32_t const ces[10] = { 0xFB01, 0x8001, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_389)
{
    // 1B172 0021;	
    // (𛅲) NUSHU CHARACTER-1B172	[FB01 8002 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B172, 0x0021 };
    uint32_t const ces[10] = { 0xFB01, 0x8002, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_390)
{
    // 1B172 003F;	
    // (𛅲) NUSHU CHARACTER-1B172	[FB01 8002 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B172, 0x003F };
    uint32_t const ces[10] = { 0xFB01, 0x8002, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_391)
{
    // 1B172 0061;	
    // (𛅲) NUSHU CHARACTER-1B172	[FB01 8002 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B172, 0x0061 };
    uint32_t const ces[10] = { 0xFB01, 0x8002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_392)
{
    // 1B172 0041;	
    // (𛅲) NUSHU CHARACTER-1B172	[FB01 8002 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B172, 0x0041 };
    uint32_t const ces[10] = { 0xFB01, 0x8002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_393)
{
    // 1B172 0062;	
    // (𛅲) NUSHU CHARACTER-1B172	[FB01 8002 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B172, 0x0062 };
    uint32_t const ces[10] = { 0xFB01, 0x8002, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_394)
{
    // 1B173 0021;	
    // (𛅳) NUSHU CHARACTER-1B173	[FB01 8003 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B173, 0x0021 };
    uint32_t const ces[10] = { 0xFB01, 0x8003, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_395)
{
    // 1B173 003F;	
    // (𛅳) NUSHU CHARACTER-1B173	[FB01 8003 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B173, 0x003F };
    uint32_t const ces[10] = { 0xFB01, 0x8003, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_396)
{
    // 1B173 0061;	
    // (𛅳) NUSHU CHARACTER-1B173	[FB01 8003 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B173, 0x0061 };
    uint32_t const ces[10] = { 0xFB01, 0x8003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_397)
{
    // 1B173 0041;	
    // (𛅳) NUSHU CHARACTER-1B173	[FB01 8003 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B173, 0x0041 };
    uint32_t const ces[10] = { 0xFB01, 0x8003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_398)
{
    // 1B173 0062;	
    // (𛅳) NUSHU CHARACTER-1B173	[FB01 8003 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B173, 0x0062 };
    uint32_t const ces[10] = { 0xFB01, 0x8003, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_399)
{
    // 1B2FB 0021;	
    // (𛋻) NUSHU CHARACTER-1B2FB	[FB01 818B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B2FB, 0x0021 };
    uint32_t const ces[10] = { 0xFB01, 0x818B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_400)
{
    // 1B2FB 003F;	
    // (𛋻) NUSHU CHARACTER-1B2FB	[FB01 818B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B2FB, 0x003F };
    uint32_t const ces[10] = { 0xFB01, 0x818B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_401)
{
    // 1B2FB 0061;	
    // (𛋻) NUSHU CHARACTER-1B2FB	[FB01 818B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B2FB, 0x0061 };
    uint32_t const ces[10] = { 0xFB01, 0x818B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_402)
{
    // 1B2FB 0041;	
    // (𛋻) NUSHU CHARACTER-1B2FB	[FB01 818B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B2FB, 0x0041 };
    uint32_t const ces[10] = { 0xFB01, 0x818B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_403)
{
    // 1B2FB 0062;	
    // (𛋻) NUSHU CHARACTER-1B2FB	[FB01 818B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B2FB, 0x0062 };
    uint32_t const ces[10] = { 0xFB01, 0x818B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_404)
{
    // 4E00 0021;	
    // (一) CJK UNIFIED IDEOGRAPH-4E00	[FB40 CE00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E00, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_405)
{
    // 2F00 0021;	
    // (⼀) KANGXI RADICAL ONE	[FB40 CE00 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F00, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_406)
{
    // 3280 0021;	
    // (㊀) CIRCLED IDEOGRAPH ONE	[FB40 CE00 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3280, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_407)
{
    // 3192 0021;	
    // (㆒) IDEOGRAPHIC ANNOTATION ONE MARK	[FB40 CE00 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3192, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_408)
{
    // 1F229 0021;	
    // (🈩) SQUARED CJK UNIFIED IDEOGRAPH-4E00	[FB40 CE00 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F229, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_409)
{
    // 4E00 003F;	
    // (一) CJK UNIFIED IDEOGRAPH-4E00	[FB40 CE00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E00, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_410)
{
    // 2F00 003F;	
    // (⼀) KANGXI RADICAL ONE	[FB40 CE00 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F00, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_411)
{
    // 3280 003F;	
    // (㊀) CIRCLED IDEOGRAPH ONE	[FB40 CE00 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3280, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_412)
{
    // 3192 003F;	
    // (㆒) IDEOGRAPHIC ANNOTATION ONE MARK	[FB40 CE00 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3192, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_413)
{
    // 1F229 003F;	
    // (🈩) SQUARED CJK UNIFIED IDEOGRAPH-4E00	[FB40 CE00 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F229, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_414)
{
    // 4E00 0061;	
    // (一) CJK UNIFIED IDEOGRAPH-4E00	[FB40 CE00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E00, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_415)
{
    // 4E00 0041;	
    // (一) CJK UNIFIED IDEOGRAPH-4E00	[FB40 CE00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4E00, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_416)
{
    // 2F00 0061;	
    // (⼀) KANGXI RADICAL ONE	[FB40 CE00 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F00, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_417)
{
    // 2F00 0041;	
    // (⼀) KANGXI RADICAL ONE	[FB40 CE00 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F00, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_418)
{
    // 3280 0061;	
    // (㊀) CIRCLED IDEOGRAPH ONE	[FB40 CE00 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3280, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_419)
{
    // 3280 0041;	
    // (㊀) CIRCLED IDEOGRAPH ONE	[FB40 CE00 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x3280, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_420)
{
    // 3192 0061;	
    // (㆒) IDEOGRAPHIC ANNOTATION ONE MARK	[FB40 CE00 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3192, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_421)
{
    // 3192 0041;	
    // (㆒) IDEOGRAPHIC ANNOTATION ONE MARK	[FB40 CE00 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x3192, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_422)
{
    // 1F229 0061;	
    // (🈩) SQUARED CJK UNIFIED IDEOGRAPH-4E00	[FB40 CE00 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F229, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_423)
{
    // 1F229 0041;	
    // (🈩) SQUARED CJK UNIFIED IDEOGRAPH-4E00	[FB40 CE00 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F229, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_424)
{
    // 4E00 0062;	
    // (一) CJK UNIFIED IDEOGRAPH-4E00	[FB40 CE00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E00, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_425)
{
    // 2F00 0062;	
    // (⼀) KANGXI RADICAL ONE	[FB40 CE00 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F00, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_426)
{
    // 3280 0062;	
    // (㊀) CIRCLED IDEOGRAPH ONE	[FB40 CE00 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3280, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_427)
{
    // 3192 0062;	
    // (㆒) IDEOGRAPHIC ANNOTATION ONE MARK	[FB40 CE00 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3192, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_428)
{
    // 1F229 0062;	
    // (🈩) SQUARED CJK UNIFIED IDEOGRAPH-4E00	[FB40 CE00 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F229, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_429)
{
    // 4E01 0021;	
    // (丁) CJK UNIFIED IDEOGRAPH-4E01	[FB40 CE01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E01, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_430)
{
    // 319C 0021;	
    // (㆜) IDEOGRAPHIC ANNOTATION FOURTH MARK	[FB40 CE01 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_431)
{
    // 4E01 003F;	
    // (丁) CJK UNIFIED IDEOGRAPH-4E01	[FB40 CE01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E01, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_432)
{
    // 319C 003F;	
    // (㆜) IDEOGRAPHIC ANNOTATION FOURTH MARK	[FB40 CE01 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_433)
{
    // 4E01 0061;	
    // (丁) CJK UNIFIED IDEOGRAPH-4E01	[FB40 CE01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E01, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_434)
{
    // 4E01 0041;	
    // (丁) CJK UNIFIED IDEOGRAPH-4E01	[FB40 CE01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4E01, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_435)
{
    // 319C 0061;	
    // (㆜) IDEOGRAPHIC ANNOTATION FOURTH MARK	[FB40 CE01 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_436)
{
    // 319C 0041;	
    // (㆜) IDEOGRAPHIC ANNOTATION FOURTH MARK	[FB40 CE01 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x319C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_437)
{
    // 4E01 0062;	
    // (丁) CJK UNIFIED IDEOGRAPH-4E01	[FB40 CE01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E01, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_438)
{
    // 319C 0062;	
    // (㆜) IDEOGRAPHIC ANNOTATION FOURTH MARK	[FB40 CE01 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_439)
{
    // 4E02 0021;	
    // (丂) CJK UNIFIED IDEOGRAPH-4E02	[FB40 CE02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E02, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_440)
{
    // 4E02 003F;	
    // (丂) CJK UNIFIED IDEOGRAPH-4E02	[FB40 CE02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E02, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_441)
{
    // 4E02 0061;	
    // (丂) CJK UNIFIED IDEOGRAPH-4E02	[FB40 CE02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E02, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_442)
{
    // 4E02 0041;	
    // (丂) CJK UNIFIED IDEOGRAPH-4E02	[FB40 CE02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4E02, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_443)
{
    // 4E02 0062;	
    // (丂) CJK UNIFIED IDEOGRAPH-4E02	[FB40 CE02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E02, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_444)
{
    // 4E03 0021;	
    // (七) CJK UNIFIED IDEOGRAPH-4E03	[FB40 CE03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E03, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_445)
{
    // 3286 0021;	
    // (㊆) CIRCLED IDEOGRAPH SEVEN	[FB40 CE03 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3286, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_446)
{
    // 4E03 003F;	
    // (七) CJK UNIFIED IDEOGRAPH-4E03	[FB40 CE03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E03, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_447)
{
    // 3286 003F;	
    // (㊆) CIRCLED IDEOGRAPH SEVEN	[FB40 CE03 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3286, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_448)
{
    // 4E03 0061;	
    // (七) CJK UNIFIED IDEOGRAPH-4E03	[FB40 CE03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E03, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_449)
{
    // 4E03 0041;	
    // (七) CJK UNIFIED IDEOGRAPH-4E03	[FB40 CE03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4E03, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_450)
{
    // 3286 0061;	
    // (㊆) CIRCLED IDEOGRAPH SEVEN	[FB40 CE03 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3286, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_451)
{
    // 3286 0041;	
    // (㊆) CIRCLED IDEOGRAPH SEVEN	[FB40 CE03 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x3286, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_452)
{
    // 4E03 0062;	
    // (七) CJK UNIFIED IDEOGRAPH-4E03	[FB40 CE03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E03, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_453)
{
    // 3286 0062;	
    // (㊆) CIRCLED IDEOGRAPH SEVEN	[FB40 CE03 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3286, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_454)
{
    // 4E04 0021;	
    // (丄) CJK UNIFIED IDEOGRAPH-4E04	[FB40 CE04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E04, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_455)
{
    // 4E04 003F;	
    // (丄) CJK UNIFIED IDEOGRAPH-4E04	[FB40 CE04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E04, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_456)
{
    // 4E04 0061;	
    // (丄) CJK UNIFIED IDEOGRAPH-4E04	[FB40 CE04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E04, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_457)
{
    // 4E04 0041;	
    // (丄) CJK UNIFIED IDEOGRAPH-4E04	[FB40 CE04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4E04, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_458)
{
    // 4E04 0062;	
    // (丄) CJK UNIFIED IDEOGRAPH-4E04	[FB40 CE04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E04, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_459)
{
    // 4E05 0021;	
    // (丅) CJK UNIFIED IDEOGRAPH-4E05	[FB40 CE05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E05, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_460)
{
    // 4E05 003F;	
    // (丅) CJK UNIFIED IDEOGRAPH-4E05	[FB40 CE05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E05, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_461)
{
    // 4E05 0061;	
    // (丅) CJK UNIFIED IDEOGRAPH-4E05	[FB40 CE05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E05, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_462)
{
    // 4E05 0041;	
    // (丅) CJK UNIFIED IDEOGRAPH-4E05	[FB40 CE05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4E05, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_463)
{
    // 4E05 0062;	
    // (丅) CJK UNIFIED IDEOGRAPH-4E05	[FB40 CE05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4E05, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_464)
{
    // 3282 0021;	
    // (㊂) CIRCLED IDEOGRAPH THREE	[FB40 CE09 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3282, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_465)
{
    // 3194 0021;	
    // (㆔) IDEOGRAPHIC ANNOTATION THREE MARK	[FB40 CE09 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3194, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_466)
{
    // 1F22A 0021;	
    // (🈪) SQUARED CJK UNIFIED IDEOGRAPH-4E09	[FB40 CE09 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F22A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_467)
{
    // 3282 003F;	
    // (㊂) CIRCLED IDEOGRAPH THREE	[FB40 CE09 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3282, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_468)
{
    // 3194 003F;	
    // (㆔) IDEOGRAPHIC ANNOTATION THREE MARK	[FB40 CE09 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3194, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_469)
{
    // 1F22A 003F;	
    // (🈪) SQUARED CJK UNIFIED IDEOGRAPH-4E09	[FB40 CE09 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F22A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_470)
{
    // 3282 0061;	
    // (㊂) CIRCLED IDEOGRAPH THREE	[FB40 CE09 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3282, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_471)
{
    // 3282 0041;	
    // (㊂) CIRCLED IDEOGRAPH THREE	[FB40 CE09 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x3282, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_472)
{
    // 3194 0061;	
    // (㆔) IDEOGRAPHIC ANNOTATION THREE MARK	[FB40 CE09 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3194, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_473)
{
    // 3194 0041;	
    // (㆔) IDEOGRAPHIC ANNOTATION THREE MARK	[FB40 CE09 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x3194, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_474)
{
    // 1F22A 0061;	
    // (🈪) SQUARED CJK UNIFIED IDEOGRAPH-4E09	[FB40 CE09 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F22A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_475)
{
    // 1F22A 0041;	
    // (🈪) SQUARED CJK UNIFIED IDEOGRAPH-4E09	[FB40 CE09 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F22A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_476)
{
    // 3282 0062;	
    // (㊂) CIRCLED IDEOGRAPH THREE	[FB40 CE09 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3282, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_477)
{
    // 3194 0062;	
    // (㆔) IDEOGRAPHIC ANNOTATION THREE MARK	[FB40 CE09 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3194, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_478)
{
    // 1F22A 0062;	
    // (🈪) SQUARED CJK UNIFIED IDEOGRAPH-4E09	[FB40 CE09 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F22A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_479)
{
    // 32A4 0021;	
    // (㊤) CIRCLED IDEOGRAPH HIGH	[FB40 CE0A 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A4, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_480)
{
    // 3196 0021;	
    // (㆖) IDEOGRAPHIC ANNOTATION TOP MARK	[FB40 CE0A 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3196, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_481)
{
    // 32A4 003F;	
    // (㊤) CIRCLED IDEOGRAPH HIGH	[FB40 CE0A 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A4, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_482)
{
    // 3196 003F;	
    // (㆖) IDEOGRAPHIC ANNOTATION TOP MARK	[FB40 CE0A 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3196, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_483)
{
    // 32A4 0061;	
    // (㊤) CIRCLED IDEOGRAPH HIGH	[FB40 CE0A 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A4, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_484)
{
    // 32A4 0041;	
    // (㊤) CIRCLED IDEOGRAPH HIGH	[FB40 CE0A 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x32A4, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_485)
{
    // 3196 0061;	
    // (㆖) IDEOGRAPHIC ANNOTATION TOP MARK	[FB40 CE0A 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3196, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_486)
{
    // 3196 0041;	
    // (㆖) IDEOGRAPHIC ANNOTATION TOP MARK	[FB40 CE0A 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x3196, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_487)
{
    // 32A4 0062;	
    // (㊤) CIRCLED IDEOGRAPH HIGH	[FB40 CE0A 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A4, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_488)
{
    // 3196 0062;	
    // (㆖) IDEOGRAPHIC ANNOTATION TOP MARK	[FB40 CE0A 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3196, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_489)
{
    // 32A6 0021;	
    // (㊦) CIRCLED IDEOGRAPH LOW	[FB40 CE0B 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A6, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_490)
{
    // 3198 0021;	
    // (㆘) IDEOGRAPHIC ANNOTATION BOTTOM MARK	[FB40 CE0B 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3198, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_491)
{
    // 32A6 003F;	
    // (㊦) CIRCLED IDEOGRAPH LOW	[FB40 CE0B 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A6, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_492)
{
    // 3198 003F;	
    // (㆘) IDEOGRAPHIC ANNOTATION BOTTOM MARK	[FB40 CE0B 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3198, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_493)
{
    // 32A6 0061;	
    // (㊦) CIRCLED IDEOGRAPH LOW	[FB40 CE0B 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A6, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_494)
{
    // 32A6 0041;	
    // (㊦) CIRCLED IDEOGRAPH LOW	[FB40 CE0B 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x32A6, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_495)
{
    // 3198 0061;	
    // (㆘) IDEOGRAPHIC ANNOTATION BOTTOM MARK	[FB40 CE0B 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3198, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_496)
{
    // 3198 0041;	
    // (㆘) IDEOGRAPHIC ANNOTATION BOTTOM MARK	[FB40 CE0B 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x3198, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_497)
{
    // 32A6 0062;	
    // (㊦) CIRCLED IDEOGRAPH LOW	[FB40 CE0B 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A6, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_498)
{
    // 3198 0062;	
    // (㆘) IDEOGRAPHIC ANNOTATION BOTTOM MARK	[FB40 CE0B 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3198, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_313_499)
{
    // F967 0021;	
    // (不) CJK COMPATIBILITY IDEOGRAPH-F967	[FB40 CE0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF967, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

