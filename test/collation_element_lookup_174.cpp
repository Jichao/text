// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_174_000)
{
    // 1D1D4 ; [*1186.0020.0002] 
    // MUSICAL SYMBOL PODATUS

    uint32_t const cps[1] = { 0x1d1d4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1186), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_001)
{
    // 1D1D5 ; [*1187.0020.0002] 
    // MUSICAL SYMBOL CLIVIS

    uint32_t const cps[1] = { 0x1d1d5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1187), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_002)
{
    // 1D1D6 ; [*1188.0020.0002] 
    // MUSICAL SYMBOL SCANDICUS

    uint32_t const cps[1] = { 0x1d1d6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1188), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_003)
{
    // 1D1D7 ; [*1189.0020.0002] 
    // MUSICAL SYMBOL CLIMACUS

    uint32_t const cps[1] = { 0x1d1d7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1189), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_004)
{
    // 1D1D8 ; [*118A.0020.0002] 
    // MUSICAL SYMBOL TORCULUS

    uint32_t const cps[1] = { 0x1d1d8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x118a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_005)
{
    // 1D1D9 ; [*118B.0020.0002] 
    // MUSICAL SYMBOL PORRECTUS

    uint32_t const cps[1] = { 0x1d1d9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x118b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_006)
{
    // 1D1DA ; [*118C.0020.0002] 
    // MUSICAL SYMBOL PORRECTUS FLEXUS

    uint32_t const cps[1] = { 0x1d1da };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x118c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_007)
{
    // 1D1DB ; [*118D.0020.0002] 
    // MUSICAL SYMBOL SCANDICUS FLEXUS

    uint32_t const cps[1] = { 0x1d1db };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x118d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_008)
{
    // 1D1DC ; [*118E.0020.0002] 
    // MUSICAL SYMBOL TORCULUS RESUPINUS

    uint32_t const cps[1] = { 0x1d1dc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x118e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_009)
{
    // 1D1DD ; [*118F.0020.0002] 
    // MUSICAL SYMBOL PES SUBPUNCTIS

    uint32_t const cps[1] = { 0x1d1dd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x118f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_010)
{
    // 1D1DE ; [*1190.0020.0002] 
    // MUSICAL SYMBOL KIEVAN C CLEF

    uint32_t const cps[1] = { 0x1d1de };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1190), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_011)
{
    // 1D1DF ; [*1191.0020.0002] 
    // MUSICAL SYMBOL KIEVAN END OF PIECE

    uint32_t const cps[1] = { 0x1d1df };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1191), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_012)
{
    // 1D1E0 ; [*1192.0020.0002] 
    // MUSICAL SYMBOL KIEVAN FINAL NOTE

    uint32_t const cps[1] = { 0x1d1e0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1192), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_013)
{
    // 1D1E1 ; [*1193.0020.0002] 
    // MUSICAL SYMBOL KIEVAN RECITATIVE MARK

    uint32_t const cps[1] = { 0x1d1e1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1193), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_014)
{
    // 1D1E2 ; [*1194.0020.0002] 
    // MUSICAL SYMBOL KIEVAN WHOLE NOTE

    uint32_t const cps[1] = { 0x1d1e2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1194), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_015)
{
    // 1D1E3 ; [*1195.0020.0002] 
    // MUSICAL SYMBOL KIEVAN HALF NOTE

    uint32_t const cps[1] = { 0x1d1e3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1195), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_016)
{
    // 1D1E4 ; [*1196.0020.0002] 
    // MUSICAL SYMBOL KIEVAN QUARTER NOTE STEM DOWN

    uint32_t const cps[1] = { 0x1d1e4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1196), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_017)
{
    // 1D1E5 ; [*1197.0020.0002] 
    // MUSICAL SYMBOL KIEVAN QUARTER NOTE STEM UP

    uint32_t const cps[1] = { 0x1d1e5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1197), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_018)
{
    // 1D1E6 ; [*1198.0020.0002] 
    // MUSICAL SYMBOL KIEVAN EIGHTH NOTE STEM DOWN

    uint32_t const cps[1] = { 0x1d1e6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1198), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_019)
{
    // 1D1E7 ; [*1199.0020.0002] 
    // MUSICAL SYMBOL KIEVAN EIGHTH NOTE STEM UP

    uint32_t const cps[1] = { 0x1d1e7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1199), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_020)
{
    // 1D1E8 ; [*119A.0020.0002] 
    // MUSICAL SYMBOL KIEVAN FLAT SIGN

    uint32_t const cps[1] = { 0x1d1e8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x119a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_021)
{
    // 1D200 ; [*119B.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-1

    uint32_t const cps[1] = { 0x1d200 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x119b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_022)
{
    // 1D201 ; [*119C.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-2

    uint32_t const cps[1] = { 0x1d201 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x119c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_023)
{
    // 1D202 ; [*119D.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-3

    uint32_t const cps[1] = { 0x1d202 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x119d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_024)
{
    // 1D203 ; [*119E.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-4

    uint32_t const cps[1] = { 0x1d203 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x119e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_025)
{
    // 1D204 ; [*119F.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-5

    uint32_t const cps[1] = { 0x1d204 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x119f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_026)
{
    // 1D205 ; [*11A0.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-6

    uint32_t const cps[1] = { 0x1d205 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_027)
{
    // 1D206 ; [*11A1.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-7

    uint32_t const cps[1] = { 0x1d206 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_028)
{
    // 1D207 ; [*11A2.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-8

    uint32_t const cps[1] = { 0x1d207 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11a2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_029)
{
    // 1D208 ; [*11A3.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-9

    uint32_t const cps[1] = { 0x1d208 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11a3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_030)
{
    // 1D209 ; [*11A4.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-10

    uint32_t const cps[1] = { 0x1d209 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_031)
{
    // 1D20A ; [*11A5.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-11

    uint32_t const cps[1] = { 0x1d20a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_032)
{
    // 1D20B ; [*11A6.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-12

    uint32_t const cps[1] = { 0x1d20b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_033)
{
    // 1D20C ; [*11A7.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-13

    uint32_t const cps[1] = { 0x1d20c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_034)
{
    // 1D20D ; [*11A8.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-14

    uint32_t const cps[1] = { 0x1d20d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_035)
{
    // 1D20E ; [*11A9.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-15

    uint32_t const cps[1] = { 0x1d20e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_036)
{
    // 1D20F ; [*11AA.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-16

    uint32_t const cps[1] = { 0x1d20f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_037)
{
    // 1D210 ; [*11AB.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-17

    uint32_t const cps[1] = { 0x1d210 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11ab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_038)
{
    // 1D211 ; [*11AC.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-18

    uint32_t const cps[1] = { 0x1d211 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11ac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_039)
{
    // 1D212 ; [*11AD.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-19

    uint32_t const cps[1] = { 0x1d212 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11ad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_040)
{
    // 1D213 ; [*11AE.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-20

    uint32_t const cps[1] = { 0x1d213 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11ae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_041)
{
    // 1D214 ; [*11AF.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-21

    uint32_t const cps[1] = { 0x1d214 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11af), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_042)
{
    // 1D215 ; [*11B0.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-22

    uint32_t const cps[1] = { 0x1d215 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11b0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_043)
{
    // 1D216 ; [*11B1.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-23

    uint32_t const cps[1] = { 0x1d216 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11b1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_044)
{
    // 1D217 ; [*11B2.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-24

    uint32_t const cps[1] = { 0x1d217 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11b2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_045)
{
    // 1D218 ; [*11B3.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-50

    uint32_t const cps[1] = { 0x1d218 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11b3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_046)
{
    // 1D219 ; [*11B4.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-51

    uint32_t const cps[1] = { 0x1d219 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11b4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_047)
{
    // 1D21A ; [*11B5.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-52

    uint32_t const cps[1] = { 0x1d21a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11b5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_048)
{
    // 1D21B ; [*11B6.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-53

    uint32_t const cps[1] = { 0x1d21b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11b6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_049)
{
    // 1D21C ; [*11B7.0020.0002] 
    // GREEK VOCAL NOTATION SYMBOL-54

    uint32_t const cps[1] = { 0x1d21c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11b7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_050)
{
    // 1D21D ; [*11B8.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-1

    uint32_t const cps[1] = { 0x1d21d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11b8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_051)
{
    // 1D21E ; [*11B9.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-2

    uint32_t const cps[1] = { 0x1d21e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11b9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_052)
{
    // 1D21F ; [*11BA.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-4

    uint32_t const cps[1] = { 0x1d21f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11ba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_053)
{
    // 1D220 ; [*11BB.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-5

    uint32_t const cps[1] = { 0x1d220 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11bb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_054)
{
    // 1D221 ; [*11BC.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-7

    uint32_t const cps[1] = { 0x1d221 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11bc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_055)
{
    // 1D222 ; [*11BD.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-8

    uint32_t const cps[1] = { 0x1d222 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11bd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_056)
{
    // 1D223 ; [*11BE.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-11

    uint32_t const cps[1] = { 0x1d223 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11be), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_057)
{
    // 1D224 ; [*11BF.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-12

    uint32_t const cps[1] = { 0x1d224 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11bf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_058)
{
    // 1D225 ; [*11C0.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-13

    uint32_t const cps[1] = { 0x1d225 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11c0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_059)
{
    // 1D226 ; [*11C1.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-14

    uint32_t const cps[1] = { 0x1d226 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11c1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_060)
{
    // 1D227 ; [*11C2.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-17

    uint32_t const cps[1] = { 0x1d227 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11c2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_061)
{
    // 1D228 ; [*11C3.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-18

    uint32_t const cps[1] = { 0x1d228 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11c3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_062)
{
    // 1D229 ; [*11C4.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-19

    uint32_t const cps[1] = { 0x1d229 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11c4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_063)
{
    // 1D22A ; [*11C5.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-23

    uint32_t const cps[1] = { 0x1d22a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11c5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_064)
{
    // 1D22B ; [*11C6.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-24

    uint32_t const cps[1] = { 0x1d22b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11c6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_065)
{
    // 1D22C ; [*11C7.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-25

    uint32_t const cps[1] = { 0x1d22c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_066)
{
    // 1D22D ; [*11C8.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-26

    uint32_t const cps[1] = { 0x1d22d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_067)
{
    // 1D22E ; [*11C9.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-27

    uint32_t const cps[1] = { 0x1d22e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_068)
{
    // 1D22F ; [*11CA.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-29

    uint32_t const cps[1] = { 0x1d22f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_069)
{
    // 1D230 ; [*11CB.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-30

    uint32_t const cps[1] = { 0x1d230 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_070)
{
    // 1D231 ; [*11CC.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-32

    uint32_t const cps[1] = { 0x1d231 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_071)
{
    // 1D232 ; [*11CD.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-36

    uint32_t const cps[1] = { 0x1d232 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_072)
{
    // 1D233 ; [*11CE.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-37

    uint32_t const cps[1] = { 0x1d233 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_073)
{
    // 1D234 ; [*11CF.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-38

    uint32_t const cps[1] = { 0x1d234 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_074)
{
    // 1D235 ; [*11D0.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-39

    uint32_t const cps[1] = { 0x1d235 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_075)
{
    // 1D236 ; [*11D1.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-40

    uint32_t const cps[1] = { 0x1d236 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_076)
{
    // 1D237 ; [*11D2.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-42

    uint32_t const cps[1] = { 0x1d237 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_077)
{
    // 1D238 ; [*11D3.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-43

    uint32_t const cps[1] = { 0x1d238 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_078)
{
    // 1D239 ; [*11D4.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-45

    uint32_t const cps[1] = { 0x1d239 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_079)
{
    // 1D23A ; [*11D5.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-47

    uint32_t const cps[1] = { 0x1d23a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_080)
{
    // 1D23B ; [*11D6.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-48

    uint32_t const cps[1] = { 0x1d23b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_081)
{
    // 1D23C ; [*11D7.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-49

    uint32_t const cps[1] = { 0x1d23c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_082)
{
    // 1D23D ; [*11D8.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-50

    uint32_t const cps[1] = { 0x1d23d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_083)
{
    // 1D23E ; [*11D9.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-51

    uint32_t const cps[1] = { 0x1d23e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_084)
{
    // 1D23F ; [*11DA.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-52

    uint32_t const cps[1] = { 0x1d23f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11da), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_085)
{
    // 1D240 ; [*11DB.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-53

    uint32_t const cps[1] = { 0x1d240 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11db), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_086)
{
    // 1D241 ; [*11DC.0020.0002] 
    // GREEK INSTRUMENTAL NOTATION SYMBOL-54

    uint32_t const cps[1] = { 0x1d241 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_087)
{
    // 1D242 ; [.0000.0000.0000] 
    // COMBINING GREEK MUSICAL TRISEME

    uint32_t const cps[1] = { 0x1d242 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_088)
{
    // 1D243 ; [.0000.0000.0000] 
    // COMBINING GREEK MUSICAL TETRASEME

    uint32_t const cps[1] = { 0x1d243 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_089)
{
    // 1D244 ; [.0000.0000.0000] 
    // COMBINING GREEK MUSICAL PENTASEME

    uint32_t const cps[1] = { 0x1d244 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_090)
{
    // 1D245 ; [*11DD.0020.0002] 
    // GREEK MUSICAL LEIMMA

    uint32_t const cps[1] = { 0x1d245 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x11dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_091)
{
    // 1D300 ; [*0F02.0020.0002] 
    // MONOGRAM FOR EARTH

    uint32_t const cps[1] = { 0x1d300 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf02), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_092)
{
    // 1D301 ; [*0F03.0020.0002] 
    // DIGRAM FOR HEAVENLY EARTH

    uint32_t const cps[1] = { 0x1d301 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf03), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_093)
{
    // 1D302 ; [*0F04.0020.0002] 
    // DIGRAM FOR HUMAN EARTH

    uint32_t const cps[1] = { 0x1d302 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf04), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_094)
{
    // 1D303 ; [*0F05.0020.0002] 
    // DIGRAM FOR EARTHLY HEAVEN

    uint32_t const cps[1] = { 0x1d303 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf05), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_095)
{
    // 1D304 ; [*0F06.0020.0002] 
    // DIGRAM FOR EARTHLY HUMAN

    uint32_t const cps[1] = { 0x1d304 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf06), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_096)
{
    // 1D305 ; [*0F07.0020.0002] 
    // DIGRAM FOR EARTH

    uint32_t const cps[1] = { 0x1d305 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf07), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_097)
{
    // 1D306 ; [*0F08.0020.0002] 
    // TETRAGRAM FOR CENTRE

    uint32_t const cps[1] = { 0x1d306 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf08), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_098)
{
    // 1D307 ; [*0F09.0020.0002] 
    // TETRAGRAM FOR FULL CIRCLE

    uint32_t const cps[1] = { 0x1d307 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf09), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_099)
{
    // 1D308 ; [*0F0A.0020.0002] 
    // TETRAGRAM FOR MIRED

    uint32_t const cps[1] = { 0x1d308 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf0a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_100)
{
    // 1D309 ; [*0F0B.0020.0002] 
    // TETRAGRAM FOR BARRIER

    uint32_t const cps[1] = { 0x1d309 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf0b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_101)
{
    // 1D30A ; [*0F0C.0020.0002] 
    // TETRAGRAM FOR KEEPING SMALL

    uint32_t const cps[1] = { 0x1d30a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf0c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_102)
{
    // 1D30B ; [*0F0D.0020.0002] 
    // TETRAGRAM FOR CONTRARIETY

    uint32_t const cps[1] = { 0x1d30b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf0d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_103)
{
    // 1D30C ; [*0F0E.0020.0002] 
    // TETRAGRAM FOR ASCENT

    uint32_t const cps[1] = { 0x1d30c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf0e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_104)
{
    // 1D30D ; [*0F0F.0020.0002] 
    // TETRAGRAM FOR OPPOSITION

    uint32_t const cps[1] = { 0x1d30d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf0f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_105)
{
    // 1D30E ; [*0F10.0020.0002] 
    // TETRAGRAM FOR BRANCHING OUT

    uint32_t const cps[1] = { 0x1d30e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf10), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_106)
{
    // 1D30F ; [*0F11.0020.0002] 
    // TETRAGRAM FOR DEFECTIVENESS OR DISTORTION

    uint32_t const cps[1] = { 0x1d30f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf11), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_107)
{
    // 1D310 ; [*0F12.0020.0002] 
    // TETRAGRAM FOR DIVERGENCE

    uint32_t const cps[1] = { 0x1d310 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf12), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_108)
{
    // 1D311 ; [*0F13.0020.0002] 
    // TETRAGRAM FOR YOUTHFULNESS

    uint32_t const cps[1] = { 0x1d311 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf13), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_109)
{
    // 1D312 ; [*0F14.0020.0002] 
    // TETRAGRAM FOR INCREASE

    uint32_t const cps[1] = { 0x1d312 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf14), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_110)
{
    // 1D313 ; [*0F15.0020.0002] 
    // TETRAGRAM FOR PENETRATION

    uint32_t const cps[1] = { 0x1d313 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf15), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_111)
{
    // 1D314 ; [*0F16.0020.0002] 
    // TETRAGRAM FOR REACH

    uint32_t const cps[1] = { 0x1d314 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf16), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_112)
{
    // 1D315 ; [*0F17.0020.0002] 
    // TETRAGRAM FOR CONTACT

    uint32_t const cps[1] = { 0x1d315 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf17), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_113)
{
    // 1D316 ; [*0F18.0020.0002] 
    // TETRAGRAM FOR HOLDING BACK

    uint32_t const cps[1] = { 0x1d316 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf18), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_114)
{
    // 1D317 ; [*0F19.0020.0002] 
    // TETRAGRAM FOR WAITING

    uint32_t const cps[1] = { 0x1d317 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf19), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_115)
{
    // 1D318 ; [*0F1A.0020.0002] 
    // TETRAGRAM FOR FOLLOWING

    uint32_t const cps[1] = { 0x1d318 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf1a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_116)
{
    // 1D319 ; [*0F1B.0020.0002] 
    // TETRAGRAM FOR ADVANCE

    uint32_t const cps[1] = { 0x1d319 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf1b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_117)
{
    // 1D31A ; [*0F1C.0020.0002] 
    // TETRAGRAM FOR RELEASE

    uint32_t const cps[1] = { 0x1d31a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf1c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_118)
{
    // 1D31B ; [*0F1D.0020.0002] 
    // TETRAGRAM FOR RESISTANCE

    uint32_t const cps[1] = { 0x1d31b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf1d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_119)
{
    // 1D31C ; [*0F1E.0020.0002] 
    // TETRAGRAM FOR EASE

    uint32_t const cps[1] = { 0x1d31c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf1e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_120)
{
    // 1D31D ; [*0F1F.0020.0002] 
    // TETRAGRAM FOR JOY

    uint32_t const cps[1] = { 0x1d31d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf1f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_121)
{
    // 1D31E ; [*0F20.0020.0002] 
    // TETRAGRAM FOR CONTENTION

    uint32_t const cps[1] = { 0x1d31e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf20), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_122)
{
    // 1D31F ; [*0F21.0020.0002] 
    // TETRAGRAM FOR ENDEAVOUR

    uint32_t const cps[1] = { 0x1d31f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf21), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_123)
{
    // 1D320 ; [*0F22.0020.0002] 
    // TETRAGRAM FOR DUTIES

    uint32_t const cps[1] = { 0x1d320 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf22), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_124)
{
    // 1D321 ; [*0F23.0020.0002] 
    // TETRAGRAM FOR CHANGE

    uint32_t const cps[1] = { 0x1d321 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf23), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_125)
{
    // 1D322 ; [*0F24.0020.0002] 
    // TETRAGRAM FOR DECISIVENESS

    uint32_t const cps[1] = { 0x1d322 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf24), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_126)
{
    // 1D323 ; [*0F25.0020.0002] 
    // TETRAGRAM FOR BOLD RESOLUTION

    uint32_t const cps[1] = { 0x1d323 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf25), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_127)
{
    // 1D324 ; [*0F26.0020.0002] 
    // TETRAGRAM FOR PACKING

    uint32_t const cps[1] = { 0x1d324 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf26), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_128)
{
    // 1D325 ; [*0F27.0020.0002] 
    // TETRAGRAM FOR LEGION

    uint32_t const cps[1] = { 0x1d325 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf27), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_129)
{
    // 1D326 ; [*0F28.0020.0002] 
    // TETRAGRAM FOR CLOSENESS

    uint32_t const cps[1] = { 0x1d326 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf28), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_130)
{
    // 1D327 ; [*0F29.0020.0002] 
    // TETRAGRAM FOR KINSHIP

    uint32_t const cps[1] = { 0x1d327 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf29), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_131)
{
    // 1D328 ; [*0F2A.0020.0002] 
    // TETRAGRAM FOR GATHERING

    uint32_t const cps[1] = { 0x1d328 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf2a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_132)
{
    // 1D329 ; [*0F2B.0020.0002] 
    // TETRAGRAM FOR STRENGTH

    uint32_t const cps[1] = { 0x1d329 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf2b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_133)
{
    // 1D32A ; [*0F2C.0020.0002] 
    // TETRAGRAM FOR PURITY

    uint32_t const cps[1] = { 0x1d32a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf2c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_134)
{
    // 1D32B ; [*0F2D.0020.0002] 
    // TETRAGRAM FOR FULLNESS

    uint32_t const cps[1] = { 0x1d32b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf2d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_135)
{
    // 1D32C ; [*0F2E.0020.0002] 
    // TETRAGRAM FOR RESIDENCE

    uint32_t const cps[1] = { 0x1d32c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf2e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_136)
{
    // 1D32D ; [*0F2F.0020.0002] 
    // TETRAGRAM FOR LAW OR MODEL

    uint32_t const cps[1] = { 0x1d32d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf2f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_137)
{
    // 1D32E ; [*0F30.0020.0002] 
    // TETRAGRAM FOR RESPONSE

    uint32_t const cps[1] = { 0x1d32e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf30), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_138)
{
    // 1D32F ; [*0F31.0020.0002] 
    // TETRAGRAM FOR GOING TO MEET

    uint32_t const cps[1] = { 0x1d32f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf31), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_139)
{
    // 1D330 ; [*0F32.0020.0002] 
    // TETRAGRAM FOR ENCOUNTERS

    uint32_t const cps[1] = { 0x1d330 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf32), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_140)
{
    // 1D331 ; [*0F33.0020.0002] 
    // TETRAGRAM FOR STOVE

    uint32_t const cps[1] = { 0x1d331 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf33), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_141)
{
    // 1D332 ; [*0F34.0020.0002] 
    // TETRAGRAM FOR GREATNESS

    uint32_t const cps[1] = { 0x1d332 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf34), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_142)
{
    // 1D333 ; [*0F35.0020.0002] 
    // TETRAGRAM FOR ENLARGEMENT

    uint32_t const cps[1] = { 0x1d333 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf35), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_143)
{
    // 1D334 ; [*0F36.0020.0002] 
    // TETRAGRAM FOR PATTERN

    uint32_t const cps[1] = { 0x1d334 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf36), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_144)
{
    // 1D335 ; [*0F37.0020.0002] 
    // TETRAGRAM FOR RITUAL

    uint32_t const cps[1] = { 0x1d335 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf37), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_145)
{
    // 1D336 ; [*0F38.0020.0002] 
    // TETRAGRAM FOR FLIGHT

    uint32_t const cps[1] = { 0x1d336 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf38), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_146)
{
    // 1D337 ; [*0F39.0020.0002] 
    // TETRAGRAM FOR VASTNESS OR WASTING

    uint32_t const cps[1] = { 0x1d337 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf39), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_147)
{
    // 1D338 ; [*0F3A.0020.0002] 
    // TETRAGRAM FOR CONSTANCY

    uint32_t const cps[1] = { 0x1d338 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf3a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_148)
{
    // 1D339 ; [*0F3B.0020.0002] 
    // TETRAGRAM FOR MEASURE

    uint32_t const cps[1] = { 0x1d339 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf3b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_174_149)
{
    // 1D33A ; [*0F3C.0020.0002] 
    // TETRAGRAM FOR ETERNITY

    uint32_t const cps[1] = { 0x1d33a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf3c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

