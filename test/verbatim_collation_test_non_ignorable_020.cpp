// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_020_000)
{
    // 19FD 003F;	
    // (᧽) KHMER SYMBOL DAP-BEI ROC	[0584 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FD, 0x003F };
    uint32_t const ces[9] = { 0x0584, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_001)
{
    // 19FD 0061;	
    // (᧽) KHMER SYMBOL DAP-BEI ROC	[0584 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FD, 0x0061 };
    uint32_t const ces[9] = { 0x0584, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_002)
{
    // 19FD 0041;	
    // (᧽) KHMER SYMBOL DAP-BEI ROC	[0584 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19FD, 0x0041 };
    uint32_t const ces[9] = { 0x0584, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_003)
{
    // 19FD 0062;	
    // (᧽) KHMER SYMBOL DAP-BEI ROC	[0584 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FD, 0x0062 };
    uint32_t const ces[9] = { 0x0584, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_004)
{
    // 19FE 0021;	
    // (᧾) KHMER SYMBOL DAP-BUON ROC	[0585 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FE, 0x0021 };
    uint32_t const ces[9] = { 0x0585, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_005)
{
    // 19FE 003F;	
    // (᧾) KHMER SYMBOL DAP-BUON ROC	[0585 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FE, 0x003F };
    uint32_t const ces[9] = { 0x0585, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_006)
{
    // 19FE 0061;	
    // (᧾) KHMER SYMBOL DAP-BUON ROC	[0585 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FE, 0x0061 };
    uint32_t const ces[9] = { 0x0585, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_007)
{
    // 19FE 0041;	
    // (᧾) KHMER SYMBOL DAP-BUON ROC	[0585 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19FE, 0x0041 };
    uint32_t const ces[9] = { 0x0585, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_008)
{
    // 19FE 0062;	
    // (᧾) KHMER SYMBOL DAP-BUON ROC	[0585 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FE, 0x0062 };
    uint32_t const ces[9] = { 0x0585, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_009)
{
    // 19FF 0021;	
    // (᧿) KHMER SYMBOL DAP-PRAM ROC	[0586 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FF, 0x0021 };
    uint32_t const ces[9] = { 0x0586, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_010)
{
    // 19FF 003F;	
    // (᧿) KHMER SYMBOL DAP-PRAM ROC	[0586 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FF, 0x003F };
    uint32_t const ces[9] = { 0x0586, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_011)
{
    // 19FF 0061;	
    // (᧿) KHMER SYMBOL DAP-PRAM ROC	[0586 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FF, 0x0061 };
    uint32_t const ces[9] = { 0x0586, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_012)
{
    // 19FF 0041;	
    // (᧿) KHMER SYMBOL DAP-PRAM ROC	[0586 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x19FF, 0x0041 };
    uint32_t const ces[9] = { 0x0586, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_013)
{
    // 19FF 0062;	
    // (᧿) KHMER SYMBOL DAP-PRAM ROC	[0586 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x19FF, 0x0062 };
    uint32_t const ces[9] = { 0x0586, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_014)
{
    // 1B61 0021;	
    // (᭡) BALINESE MUSICAL SYMBOL DONG	[0587 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B61, 0x0021 };
    uint32_t const ces[9] = { 0x0587, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_015)
{
    // 1B61 003F;	
    // (᭡) BALINESE MUSICAL SYMBOL DONG	[0587 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B61, 0x003F };
    uint32_t const ces[9] = { 0x0587, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_016)
{
    // 1B61 0061;	
    // (᭡) BALINESE MUSICAL SYMBOL DONG	[0587 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B61, 0x0061 };
    uint32_t const ces[9] = { 0x0587, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_017)
{
    // 1B61 0041;	
    // (᭡) BALINESE MUSICAL SYMBOL DONG	[0587 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B61, 0x0041 };
    uint32_t const ces[9] = { 0x0587, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_018)
{
    // 1B61 0062;	
    // (᭡) BALINESE MUSICAL SYMBOL DONG	[0587 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B61, 0x0062 };
    uint32_t const ces[9] = { 0x0587, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_019)
{
    // 1B62 0021;	
    // (᭢) BALINESE MUSICAL SYMBOL DENG	[0588 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B62, 0x0021 };
    uint32_t const ces[9] = { 0x0588, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_020)
{
    // 1B62 003F;	
    // (᭢) BALINESE MUSICAL SYMBOL DENG	[0588 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B62, 0x003F };
    uint32_t const ces[9] = { 0x0588, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_021)
{
    // 1B62 0061;	
    // (᭢) BALINESE MUSICAL SYMBOL DENG	[0588 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B62, 0x0061 };
    uint32_t const ces[9] = { 0x0588, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_022)
{
    // 1B62 0041;	
    // (᭢) BALINESE MUSICAL SYMBOL DENG	[0588 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B62, 0x0041 };
    uint32_t const ces[9] = { 0x0588, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_023)
{
    // 1B62 0062;	
    // (᭢) BALINESE MUSICAL SYMBOL DENG	[0588 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B62, 0x0062 };
    uint32_t const ces[9] = { 0x0588, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_024)
{
    // 1B63 0021;	
    // (᭣) BALINESE MUSICAL SYMBOL DUNG	[0589 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B63, 0x0021 };
    uint32_t const ces[9] = { 0x0589, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_025)
{
    // 1B63 003F;	
    // (᭣) BALINESE MUSICAL SYMBOL DUNG	[0589 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B63, 0x003F };
    uint32_t const ces[9] = { 0x0589, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_026)
{
    // 1B63 0061;	
    // (᭣) BALINESE MUSICAL SYMBOL DUNG	[0589 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B63, 0x0061 };
    uint32_t const ces[9] = { 0x0589, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_027)
{
    // 1B63 0041;	
    // (᭣) BALINESE MUSICAL SYMBOL DUNG	[0589 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B63, 0x0041 };
    uint32_t const ces[9] = { 0x0589, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_028)
{
    // 1B63 0062;	
    // (᭣) BALINESE MUSICAL SYMBOL DUNG	[0589 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B63, 0x0062 };
    uint32_t const ces[9] = { 0x0589, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_029)
{
    // 1B64 0021;	
    // (᭤) BALINESE MUSICAL SYMBOL DANG	[058A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B64, 0x0021 };
    uint32_t const ces[9] = { 0x058A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_030)
{
    // 1B64 003F;	
    // (᭤) BALINESE MUSICAL SYMBOL DANG	[058A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B64, 0x003F };
    uint32_t const ces[9] = { 0x058A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_031)
{
    // 1B64 0061;	
    // (᭤) BALINESE MUSICAL SYMBOL DANG	[058A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B64, 0x0061 };
    uint32_t const ces[9] = { 0x058A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_032)
{
    // 1B64 0041;	
    // (᭤) BALINESE MUSICAL SYMBOL DANG	[058A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B64, 0x0041 };
    uint32_t const ces[9] = { 0x058A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_033)
{
    // 1B64 0062;	
    // (᭤) BALINESE MUSICAL SYMBOL DANG	[058A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B64, 0x0062 };
    uint32_t const ces[9] = { 0x058A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_034)
{
    // 1B65 0021;	
    // (᭥) BALINESE MUSICAL SYMBOL DANG SURANG	[058B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B65, 0x0021 };
    uint32_t const ces[9] = { 0x058B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_035)
{
    // 1B65 003F;	
    // (᭥) BALINESE MUSICAL SYMBOL DANG SURANG	[058B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B65, 0x003F };
    uint32_t const ces[9] = { 0x058B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_036)
{
    // 1B65 0061;	
    // (᭥) BALINESE MUSICAL SYMBOL DANG SURANG	[058B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B65, 0x0061 };
    uint32_t const ces[9] = { 0x058B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_037)
{
    // 1B65 0041;	
    // (᭥) BALINESE MUSICAL SYMBOL DANG SURANG	[058B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B65, 0x0041 };
    uint32_t const ces[9] = { 0x058B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_038)
{
    // 1B65 0062;	
    // (᭥) BALINESE MUSICAL SYMBOL DANG SURANG	[058B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B65, 0x0062 };
    uint32_t const ces[9] = { 0x058B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_039)
{
    // 1B66 0021;	
    // (᭦) BALINESE MUSICAL SYMBOL DING	[058C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B66, 0x0021 };
    uint32_t const ces[9] = { 0x058C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_040)
{
    // 1B66 003F;	
    // (᭦) BALINESE MUSICAL SYMBOL DING	[058C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B66, 0x003F };
    uint32_t const ces[9] = { 0x058C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_041)
{
    // 1B66 0061;	
    // (᭦) BALINESE MUSICAL SYMBOL DING	[058C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B66, 0x0061 };
    uint32_t const ces[9] = { 0x058C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_042)
{
    // 1B66 0041;	
    // (᭦) BALINESE MUSICAL SYMBOL DING	[058C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B66, 0x0041 };
    uint32_t const ces[9] = { 0x058C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_043)
{
    // 1B66 0062;	
    // (᭦) BALINESE MUSICAL SYMBOL DING	[058C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B66, 0x0062 };
    uint32_t const ces[9] = { 0x058C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_044)
{
    // 1B67 0021;	
    // (᭧) BALINESE MUSICAL SYMBOL DAENG	[058D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B67, 0x0021 };
    uint32_t const ces[9] = { 0x058D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_045)
{
    // 1B67 003F;	
    // (᭧) BALINESE MUSICAL SYMBOL DAENG	[058D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B67, 0x003F };
    uint32_t const ces[9] = { 0x058D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_046)
{
    // 1B67 0061;	
    // (᭧) BALINESE MUSICAL SYMBOL DAENG	[058D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B67, 0x0061 };
    uint32_t const ces[9] = { 0x058D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_047)
{
    // 1B67 0041;	
    // (᭧) BALINESE MUSICAL SYMBOL DAENG	[058D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B67, 0x0041 };
    uint32_t const ces[9] = { 0x058D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_048)
{
    // 1B67 0062;	
    // (᭧) BALINESE MUSICAL SYMBOL DAENG	[058D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B67, 0x0062 };
    uint32_t const ces[9] = { 0x058D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_049)
{
    // 1B68 0021;	
    // (᭨) BALINESE MUSICAL SYMBOL DEUNG	[058E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B68, 0x0021 };
    uint32_t const ces[9] = { 0x058E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_050)
{
    // 1B68 003F;	
    // (᭨) BALINESE MUSICAL SYMBOL DEUNG	[058E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B68, 0x003F };
    uint32_t const ces[9] = { 0x058E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_051)
{
    // 1B68 0061;	
    // (᭨) BALINESE MUSICAL SYMBOL DEUNG	[058E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B68, 0x0061 };
    uint32_t const ces[9] = { 0x058E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_052)
{
    // 1B68 0041;	
    // (᭨) BALINESE MUSICAL SYMBOL DEUNG	[058E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B68, 0x0041 };
    uint32_t const ces[9] = { 0x058E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_053)
{
    // 1B68 0062;	
    // (᭨) BALINESE MUSICAL SYMBOL DEUNG	[058E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B68, 0x0062 };
    uint32_t const ces[9] = { 0x058E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_054)
{
    // 1B69 0021;	
    // (᭩) BALINESE MUSICAL SYMBOL DAING	[058F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B69, 0x0021 };
    uint32_t const ces[9] = { 0x058F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_055)
{
    // 1B69 003F;	
    // (᭩) BALINESE MUSICAL SYMBOL DAING	[058F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B69, 0x003F };
    uint32_t const ces[9] = { 0x058F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_056)
{
    // 1B69 0061;	
    // (᭩) BALINESE MUSICAL SYMBOL DAING	[058F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B69, 0x0061 };
    uint32_t const ces[9] = { 0x058F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_057)
{
    // 1B69 0041;	
    // (᭩) BALINESE MUSICAL SYMBOL DAING	[058F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B69, 0x0041 };
    uint32_t const ces[9] = { 0x058F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_058)
{
    // 1B69 0062;	
    // (᭩) BALINESE MUSICAL SYMBOL DAING	[058F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B69, 0x0062 };
    uint32_t const ces[9] = { 0x058F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_059)
{
    // 1B6A 0021;	
    // (᭪) BALINESE MUSICAL SYMBOL DANG GEDE	[0590 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B6A, 0x0021 };
    uint32_t const ces[9] = { 0x0590, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_060)
{
    // 1B6A 003F;	
    // (᭪) BALINESE MUSICAL SYMBOL DANG GEDE	[0590 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B6A, 0x003F };
    uint32_t const ces[9] = { 0x0590, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_061)
{
    // 1B6A 0061;	
    // (᭪) BALINESE MUSICAL SYMBOL DANG GEDE	[0590 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B6A, 0x0061 };
    uint32_t const ces[9] = { 0x0590, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_062)
{
    // 1B6A 0041;	
    // (᭪) BALINESE MUSICAL SYMBOL DANG GEDE	[0590 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B6A, 0x0041 };
    uint32_t const ces[9] = { 0x0590, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_063)
{
    // 1B6A 0062;	
    // (᭪) BALINESE MUSICAL SYMBOL DANG GEDE	[0590 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B6A, 0x0062 };
    uint32_t const ces[9] = { 0x0590, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_064)
{
    // 1B74 0021;	
    // (᭴) BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DUG	[0591 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B74, 0x0021 };
    uint32_t const ces[9] = { 0x0591, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_065)
{
    // 1B74 003F;	
    // (᭴) BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DUG	[0591 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B74, 0x003F };
    uint32_t const ces[9] = { 0x0591, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_066)
{
    // 1B74 0061;	
    // (᭴) BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DUG	[0591 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B74, 0x0061 };
    uint32_t const ces[9] = { 0x0591, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_067)
{
    // 1B74 0041;	
    // (᭴) BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DUG	[0591 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B74, 0x0041 };
    uint32_t const ces[9] = { 0x0591, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_068)
{
    // 1B74 0062;	
    // (᭴) BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DUG	[0591 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B74, 0x0062 };
    uint32_t const ces[9] = { 0x0591, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_069)
{
    // 1B75 0021;	
    // (᭵) BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DAG	[0592 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B75, 0x0021 };
    uint32_t const ces[9] = { 0x0592, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_070)
{
    // 1B75 003F;	
    // (᭵) BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DAG	[0592 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B75, 0x003F };
    uint32_t const ces[9] = { 0x0592, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_071)
{
    // 1B75 0061;	
    // (᭵) BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DAG	[0592 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B75, 0x0061 };
    uint32_t const ces[9] = { 0x0592, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_072)
{
    // 1B75 0041;	
    // (᭵) BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DAG	[0592 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B75, 0x0041 };
    uint32_t const ces[9] = { 0x0592, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_073)
{
    // 1B75 0062;	
    // (᭵) BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DAG	[0592 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B75, 0x0062 };
    uint32_t const ces[9] = { 0x0592, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_074)
{
    // 1B76 0021;	
    // (᭶) BALINESE MUSICAL SYMBOL RIGHT-HAND CLOSED TUK	[0593 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B76, 0x0021 };
    uint32_t const ces[9] = { 0x0593, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_075)
{
    // 1B76 003F;	
    // (᭶) BALINESE MUSICAL SYMBOL RIGHT-HAND CLOSED TUK	[0593 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B76, 0x003F };
    uint32_t const ces[9] = { 0x0593, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_076)
{
    // 1B76 0061;	
    // (᭶) BALINESE MUSICAL SYMBOL RIGHT-HAND CLOSED TUK	[0593 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B76, 0x0061 };
    uint32_t const ces[9] = { 0x0593, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_077)
{
    // 1B76 0041;	
    // (᭶) BALINESE MUSICAL SYMBOL RIGHT-HAND CLOSED TUK	[0593 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B76, 0x0041 };
    uint32_t const ces[9] = { 0x0593, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_078)
{
    // 1B76 0062;	
    // (᭶) BALINESE MUSICAL SYMBOL RIGHT-HAND CLOSED TUK	[0593 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B76, 0x0062 };
    uint32_t const ces[9] = { 0x0593, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_079)
{
    // 1B77 0021;	
    // (᭷) BALINESE MUSICAL SYMBOL RIGHT-HAND CLOSED TAK	[0594 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B77, 0x0021 };
    uint32_t const ces[9] = { 0x0594, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_080)
{
    // 1B77 003F;	
    // (᭷) BALINESE MUSICAL SYMBOL RIGHT-HAND CLOSED TAK	[0594 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B77, 0x003F };
    uint32_t const ces[9] = { 0x0594, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_081)
{
    // 1B77 0061;	
    // (᭷) BALINESE MUSICAL SYMBOL RIGHT-HAND CLOSED TAK	[0594 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B77, 0x0061 };
    uint32_t const ces[9] = { 0x0594, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_082)
{
    // 1B77 0041;	
    // (᭷) BALINESE MUSICAL SYMBOL RIGHT-HAND CLOSED TAK	[0594 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B77, 0x0041 };
    uint32_t const ces[9] = { 0x0594, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_083)
{
    // 1B77 0062;	
    // (᭷) BALINESE MUSICAL SYMBOL RIGHT-HAND CLOSED TAK	[0594 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B77, 0x0062 };
    uint32_t const ces[9] = { 0x0594, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_084)
{
    // 1B78 0021;	
    // (᭸) BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PANG	[0595 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B78, 0x0021 };
    uint32_t const ces[9] = { 0x0595, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_085)
{
    // 1B78 003F;	
    // (᭸) BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PANG	[0595 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B78, 0x003F };
    uint32_t const ces[9] = { 0x0595, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_086)
{
    // 1B78 0061;	
    // (᭸) BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PANG	[0595 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B78, 0x0061 };
    uint32_t const ces[9] = { 0x0595, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_087)
{
    // 1B78 0041;	
    // (᭸) BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PANG	[0595 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B78, 0x0041 };
    uint32_t const ces[9] = { 0x0595, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_088)
{
    // 1B78 0062;	
    // (᭸) BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PANG	[0595 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B78, 0x0062 };
    uint32_t const ces[9] = { 0x0595, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_089)
{
    // 1B79 0021;	
    // (᭹) BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PUNG	[0596 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B79, 0x0021 };
    uint32_t const ces[9] = { 0x0596, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_090)
{
    // 1B79 003F;	
    // (᭹) BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PUNG	[0596 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B79, 0x003F };
    uint32_t const ces[9] = { 0x0596, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_091)
{
    // 1B79 0061;	
    // (᭹) BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PUNG	[0596 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B79, 0x0061 };
    uint32_t const ces[9] = { 0x0596, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_092)
{
    // 1B79 0041;	
    // (᭹) BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PUNG	[0596 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B79, 0x0041 };
    uint32_t const ces[9] = { 0x0596, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_093)
{
    // 1B79 0062;	
    // (᭹) BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PUNG	[0596 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B79, 0x0062 };
    uint32_t const ces[9] = { 0x0596, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_094)
{
    // 1B7A 0021;	
    // (᭺) BALINESE MUSICAL SYMBOL LEFT-HAND CLOSED PLAK	[0597 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B7A, 0x0021 };
    uint32_t const ces[9] = { 0x0597, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_095)
{
    // 1B7A 003F;	
    // (᭺) BALINESE MUSICAL SYMBOL LEFT-HAND CLOSED PLAK	[0597 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B7A, 0x003F };
    uint32_t const ces[9] = { 0x0597, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_096)
{
    // 1B7A 0061;	
    // (᭺) BALINESE MUSICAL SYMBOL LEFT-HAND CLOSED PLAK	[0597 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B7A, 0x0061 };
    uint32_t const ces[9] = { 0x0597, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_097)
{
    // 1B7A 0041;	
    // (᭺) BALINESE MUSICAL SYMBOL LEFT-HAND CLOSED PLAK	[0597 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B7A, 0x0041 };
    uint32_t const ces[9] = { 0x0597, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_098)
{
    // 1B7A 0062;	
    // (᭺) BALINESE MUSICAL SYMBOL LEFT-HAND CLOSED PLAK	[0597 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B7A, 0x0062 };
    uint32_t const ces[9] = { 0x0597, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_099)
{
    // 1B7B 0021;	
    // (᭻) BALINESE MUSICAL SYMBOL LEFT-HAND CLOSED PLUK	[0598 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B7B, 0x0021 };
    uint32_t const ces[9] = { 0x0598, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_100)
{
    // 1B7B 003F;	
    // (᭻) BALINESE MUSICAL SYMBOL LEFT-HAND CLOSED PLUK	[0598 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B7B, 0x003F };
    uint32_t const ces[9] = { 0x0598, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_101)
{
    // 1B7B 0061;	
    // (᭻) BALINESE MUSICAL SYMBOL LEFT-HAND CLOSED PLUK	[0598 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B7B, 0x0061 };
    uint32_t const ces[9] = { 0x0598, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_102)
{
    // 1B7B 0041;	
    // (᭻) BALINESE MUSICAL SYMBOL LEFT-HAND CLOSED PLUK	[0598 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B7B, 0x0041 };
    uint32_t const ces[9] = { 0x0598, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_103)
{
    // 1B7B 0062;	
    // (᭻) BALINESE MUSICAL SYMBOL LEFT-HAND CLOSED PLUK	[0598 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B7B, 0x0062 };
    uint32_t const ces[9] = { 0x0598, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_104)
{
    // 1B7C 0021;	
    // (᭼) BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PING	[0599 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B7C, 0x0021 };
    uint32_t const ces[9] = { 0x0599, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_105)
{
    // 1B7C 003F;	
    // (᭼) BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PING	[0599 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B7C, 0x003F };
    uint32_t const ces[9] = { 0x0599, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_106)
{
    // 1B7C 0061;	
    // (᭼) BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PING	[0599 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B7C, 0x0061 };
    uint32_t const ces[9] = { 0x0599, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_107)
{
    // 1B7C 0041;	
    // (᭼) BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PING	[0599 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B7C, 0x0041 };
    uint32_t const ces[9] = { 0x0599, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_108)
{
    // 1B7C 0062;	
    // (᭼) BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PING	[0599 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B7C, 0x0062 };
    uint32_t const ces[9] = { 0x0599, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_109)
{
    // 00A9 0021;	
    // (©) COPYRIGHT SIGN	[059A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A9, 0x0021 };
    uint32_t const ces[9] = { 0x059A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_110)
{
    // 00A9 003F;	
    // (©) COPYRIGHT SIGN	[059A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A9, 0x003F };
    uint32_t const ces[9] = { 0x059A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_111)
{
    // 00A9 0061;	
    // (©) COPYRIGHT SIGN	[059A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A9, 0x0061 };
    uint32_t const ces[9] = { 0x059A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_112)
{
    // 00A9 0041;	
    // (©) COPYRIGHT SIGN	[059A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x00A9, 0x0041 };
    uint32_t const ces[9] = { 0x059A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_113)
{
    // 00A9 0062;	
    // (©) COPYRIGHT SIGN	[059A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A9, 0x0062 };
    uint32_t const ces[9] = { 0x059A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_114)
{
    // 00AE 0021;	
    // (®) REGISTERED SIGN	[059B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00AE, 0x0021 };
    uint32_t const ces[9] = { 0x059B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_115)
{
    // 00AE 003F;	
    // (®) REGISTERED SIGN	[059B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00AE, 0x003F };
    uint32_t const ces[9] = { 0x059B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_116)
{
    // 00AE 0061;	
    // (®) REGISTERED SIGN	[059B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00AE, 0x0061 };
    uint32_t const ces[9] = { 0x059B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_117)
{
    // 00AE 0041;	
    // (®) REGISTERED SIGN	[059B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x00AE, 0x0041 };
    uint32_t const ces[9] = { 0x059B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_118)
{
    // 00AE 0062;	
    // (®) REGISTERED SIGN	[059B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00AE, 0x0062 };
    uint32_t const ces[9] = { 0x059B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_119)
{
    // 2104 0021;	
    // (℄) CENTRE LINE SYMBOL	[059C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2104, 0x0021 };
    uint32_t const ces[9] = { 0x059C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_120)
{
    // 2104 003F;	
    // (℄) CENTRE LINE SYMBOL	[059C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2104, 0x003F };
    uint32_t const ces[9] = { 0x059C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_121)
{
    // 2104 0061;	
    // (℄) CENTRE LINE SYMBOL	[059C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2104, 0x0061 };
    uint32_t const ces[9] = { 0x059C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_122)
{
    // 2104 0041;	
    // (℄) CENTRE LINE SYMBOL	[059C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2104, 0x0041 };
    uint32_t const ces[9] = { 0x059C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_123)
{
    // 2104 0062;	
    // (℄) CENTRE LINE SYMBOL	[059C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2104, 0x0062 };
    uint32_t const ces[9] = { 0x059C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_124)
{
    // 2108 0021;	
    // (℈) SCRUPLE	[059D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2108, 0x0021 };
    uint32_t const ces[9] = { 0x059D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_125)
{
    // 2108 003F;	
    // (℈) SCRUPLE	[059D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2108, 0x003F };
    uint32_t const ces[9] = { 0x059D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_126)
{
    // 2108 0061;	
    // (℈) SCRUPLE	[059D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2108, 0x0061 };
    uint32_t const ces[9] = { 0x059D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_127)
{
    // 2108 0041;	
    // (℈) SCRUPLE	[059D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2108, 0x0041 };
    uint32_t const ces[9] = { 0x059D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_128)
{
    // 2108 0062;	
    // (℈) SCRUPLE	[059D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2108, 0x0062 };
    uint32_t const ces[9] = { 0x059D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_129)
{
    // 2114 0021;	
    // (℔) L B BAR SYMBOL	[059E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2114, 0x0021 };
    uint32_t const ces[9] = { 0x059E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_130)
{
    // 2114 003F;	
    // (℔) L B BAR SYMBOL	[059E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2114, 0x003F };
    uint32_t const ces[9] = { 0x059E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_131)
{
    // 2114 0061;	
    // (℔) L B BAR SYMBOL	[059E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2114, 0x0061 };
    uint32_t const ces[9] = { 0x059E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_132)
{
    // 2114 0041;	
    // (℔) L B BAR SYMBOL	[059E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2114, 0x0041 };
    uint32_t const ces[9] = { 0x059E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_133)
{
    // 2114 0062;	
    // (℔) L B BAR SYMBOL	[059E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2114, 0x0062 };
    uint32_t const ces[9] = { 0x059E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_134)
{
    // 2117 0021;	
    // (℗) SOUND RECORDING COPYRIGHT	[059F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2117, 0x0021 };
    uint32_t const ces[9] = { 0x059F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_135)
{
    // 2117 003F;	
    // (℗) SOUND RECORDING COPYRIGHT	[059F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2117, 0x003F };
    uint32_t const ces[9] = { 0x059F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_136)
{
    // 2117 0061;	
    // (℗) SOUND RECORDING COPYRIGHT	[059F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2117, 0x0061 };
    uint32_t const ces[9] = { 0x059F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_137)
{
    // 2117 0041;	
    // (℗) SOUND RECORDING COPYRIGHT	[059F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2117, 0x0041 };
    uint32_t const ces[9] = { 0x059F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_138)
{
    // 2117 0062;	
    // (℗) SOUND RECORDING COPYRIGHT	[059F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2117, 0x0062 };
    uint32_t const ces[9] = { 0x059F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_139)
{
    // 2118 0021;	
    // (℘) SCRIPT CAPITAL P	[05A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2118, 0x0021 };
    uint32_t const ces[9] = { 0x05A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_140)
{
    // 2118 003F;	
    // (℘) SCRIPT CAPITAL P	[05A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2118, 0x003F };
    uint32_t const ces[9] = { 0x05A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_141)
{
    // 2118 0061;	
    // (℘) SCRIPT CAPITAL P	[05A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2118, 0x0061 };
    uint32_t const ces[9] = { 0x05A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_142)
{
    // 2118 0041;	
    // (℘) SCRIPT CAPITAL P	[05A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2118, 0x0041 };
    uint32_t const ces[9] = { 0x05A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_143)
{
    // 2118 0062;	
    // (℘) SCRIPT CAPITAL P	[05A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2118, 0x0062 };
    uint32_t const ces[9] = { 0x05A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_144)
{
    // 211E 0021;	
    // (℞) PRESCRIPTION TAKE	[05A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x211E, 0x0021 };
    uint32_t const ces[9] = { 0x05A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_145)
{
    // 211E 003F;	
    // (℞) PRESCRIPTION TAKE	[05A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x211E, 0x003F };
    uint32_t const ces[9] = { 0x05A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_146)
{
    // 211E 0061;	
    // (℞) PRESCRIPTION TAKE	[05A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x211E, 0x0061 };
    uint32_t const ces[9] = { 0x05A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_147)
{
    // 211E 0041;	
    // (℞) PRESCRIPTION TAKE	[05A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x211E, 0x0041 };
    uint32_t const ces[9] = { 0x05A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_148)
{
    // 211E 0062;	
    // (℞) PRESCRIPTION TAKE	[05A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x211E, 0x0062 };
    uint32_t const ces[9] = { 0x05A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_149)
{
    // 211F 0021;	
    // (℟) RESPONSE	[05A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x211F, 0x0021 };
    uint32_t const ces[9] = { 0x05A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_150)
{
    // 211F 003F;	
    // (℟) RESPONSE	[05A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x211F, 0x003F };
    uint32_t const ces[9] = { 0x05A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_151)
{
    // 211F 0061;	
    // (℟) RESPONSE	[05A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x211F, 0x0061 };
    uint32_t const ces[9] = { 0x05A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_152)
{
    // 211F 0041;	
    // (℟) RESPONSE	[05A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x211F, 0x0041 };
    uint32_t const ces[9] = { 0x05A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_153)
{
    // 211F 0062;	
    // (℟) RESPONSE	[05A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x211F, 0x0062 };
    uint32_t const ces[9] = { 0x05A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_154)
{
    // 2123 0021;	
    // (℣) VERSICLE	[05A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2123, 0x0021 };
    uint32_t const ces[9] = { 0x05A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_155)
{
    // 2123 003F;	
    // (℣) VERSICLE	[05A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2123, 0x003F };
    uint32_t const ces[9] = { 0x05A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_156)
{
    // 2123 0061;	
    // (℣) VERSICLE	[05A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2123, 0x0061 };
    uint32_t const ces[9] = { 0x05A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_157)
{
    // 2123 0041;	
    // (℣) VERSICLE	[05A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2123, 0x0041 };
    uint32_t const ces[9] = { 0x05A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_158)
{
    // 2123 0062;	
    // (℣) VERSICLE	[05A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2123, 0x0062 };
    uint32_t const ces[9] = { 0x05A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_159)
{
    // 2125 0021;	
    // (℥) OUNCE SIGN	[05A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2125, 0x0021 };
    uint32_t const ces[9] = { 0x05A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_160)
{
    // 2125 003F;	
    // (℥) OUNCE SIGN	[05A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2125, 0x003F };
    uint32_t const ces[9] = { 0x05A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_161)
{
    // 2125 0061;	
    // (℥) OUNCE SIGN	[05A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2125, 0x0061 };
    uint32_t const ces[9] = { 0x05A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_162)
{
    // 2125 0041;	
    // (℥) OUNCE SIGN	[05A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2125, 0x0041 };
    uint32_t const ces[9] = { 0x05A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_163)
{
    // 2125 0062;	
    // (℥) OUNCE SIGN	[05A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2125, 0x0062 };
    uint32_t const ces[9] = { 0x05A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_164)
{
    // 2127 0021;	
    // (℧) INVERTED OHM SIGN	[05A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2127, 0x0021 };
    uint32_t const ces[9] = { 0x05A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_165)
{
    // 2127 003F;	
    // (℧) INVERTED OHM SIGN	[05A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2127, 0x003F };
    uint32_t const ces[9] = { 0x05A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_166)
{
    // 2127 0061;	
    // (℧) INVERTED OHM SIGN	[05A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2127, 0x0061 };
    uint32_t const ces[9] = { 0x05A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_167)
{
    // 2127 0041;	
    // (℧) INVERTED OHM SIGN	[05A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2127, 0x0041 };
    uint32_t const ces[9] = { 0x05A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_168)
{
    // 2127 0062;	
    // (℧) INVERTED OHM SIGN	[05A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2127, 0x0062 };
    uint32_t const ces[9] = { 0x05A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_169)
{
    // 2129 0021;	
    // (℩) TURNED GREEK SMALL LETTER IOTA	[05A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2129, 0x0021 };
    uint32_t const ces[9] = { 0x05A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_170)
{
    // 2129 003F;	
    // (℩) TURNED GREEK SMALL LETTER IOTA	[05A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2129, 0x003F };
    uint32_t const ces[9] = { 0x05A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_171)
{
    // 2129 0061;	
    // (℩) TURNED GREEK SMALL LETTER IOTA	[05A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2129, 0x0061 };
    uint32_t const ces[9] = { 0x05A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_172)
{
    // 2129 0041;	
    // (℩) TURNED GREEK SMALL LETTER IOTA	[05A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2129, 0x0041 };
    uint32_t const ces[9] = { 0x05A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_173)
{
    // 2129 0062;	
    // (℩) TURNED GREEK SMALL LETTER IOTA	[05A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2129, 0x0062 };
    uint32_t const ces[9] = { 0x05A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_174)
{
    // 212E 0021;	
    // (℮) ESTIMATED SYMBOL	[05A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x212E, 0x0021 };
    uint32_t const ces[9] = { 0x05A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_175)
{
    // 212E 003F;	
    // (℮) ESTIMATED SYMBOL	[05A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x212E, 0x003F };
    uint32_t const ces[9] = { 0x05A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_176)
{
    // 212E 0061;	
    // (℮) ESTIMATED SYMBOL	[05A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x212E, 0x0061 };
    uint32_t const ces[9] = { 0x05A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_177)
{
    // 212E 0041;	
    // (℮) ESTIMATED SYMBOL	[05A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x212E, 0x0041 };
    uint32_t const ces[9] = { 0x05A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_178)
{
    // 212E 0062;	
    // (℮) ESTIMATED SYMBOL	[05A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x212E, 0x0062 };
    uint32_t const ces[9] = { 0x05A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_179)
{
    // 213A 0021;	
    // (℺) ROTATED CAPITAL Q	[05A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x213A, 0x0021 };
    uint32_t const ces[9] = { 0x05A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_180)
{
    // 213A 003F;	
    // (℺) ROTATED CAPITAL Q	[05A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x213A, 0x003F };
    uint32_t const ces[9] = { 0x05A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_181)
{
    // 213A 0061;	
    // (℺) ROTATED CAPITAL Q	[05A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x213A, 0x0061 };
    uint32_t const ces[9] = { 0x05A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_182)
{
    // 213A 0041;	
    // (℺) ROTATED CAPITAL Q	[05A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x213A, 0x0041 };
    uint32_t const ces[9] = { 0x05A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_183)
{
    // 213A 0062;	
    // (℺) ROTATED CAPITAL Q	[05A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x213A, 0x0062 };
    uint32_t const ces[9] = { 0x05A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_184)
{
    // 2141 0021;	
    // (⅁) TURNED SANS-SERIF CAPITAL G	[05A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2141, 0x0021 };
    uint32_t const ces[9] = { 0x05A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_185)
{
    // 2141 003F;	
    // (⅁) TURNED SANS-SERIF CAPITAL G	[05A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2141, 0x003F };
    uint32_t const ces[9] = { 0x05A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_186)
{
    // 2141 0061;	
    // (⅁) TURNED SANS-SERIF CAPITAL G	[05A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2141, 0x0061 };
    uint32_t const ces[9] = { 0x05A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_187)
{
    // 2141 0041;	
    // (⅁) TURNED SANS-SERIF CAPITAL G	[05A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2141, 0x0041 };
    uint32_t const ces[9] = { 0x05A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_188)
{
    // 2141 0062;	
    // (⅁) TURNED SANS-SERIF CAPITAL G	[05A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2141, 0x0062 };
    uint32_t const ces[9] = { 0x05A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_189)
{
    // 2142 0021;	
    // (⅂) TURNED SANS-SERIF CAPITAL L	[05AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2142, 0x0021 };
    uint32_t const ces[9] = { 0x05AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_190)
{
    // 2142 003F;	
    // (⅂) TURNED SANS-SERIF CAPITAL L	[05AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2142, 0x003F };
    uint32_t const ces[9] = { 0x05AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_191)
{
    // 2142 0061;	
    // (⅂) TURNED SANS-SERIF CAPITAL L	[05AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2142, 0x0061 };
    uint32_t const ces[9] = { 0x05AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_192)
{
    // 2142 0041;	
    // (⅂) TURNED SANS-SERIF CAPITAL L	[05AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2142, 0x0041 };
    uint32_t const ces[9] = { 0x05AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_193)
{
    // 2142 0062;	
    // (⅂) TURNED SANS-SERIF CAPITAL L	[05AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2142, 0x0062 };
    uint32_t const ces[9] = { 0x05AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_194)
{
    // 2143 0021;	
    // (⅃) REVERSED SANS-SERIF CAPITAL L	[05AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2143, 0x0021 };
    uint32_t const ces[9] = { 0x05AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_195)
{
    // 2143 003F;	
    // (⅃) REVERSED SANS-SERIF CAPITAL L	[05AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2143, 0x003F };
    uint32_t const ces[9] = { 0x05AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_196)
{
    // 2143 0061;	
    // (⅃) REVERSED SANS-SERIF CAPITAL L	[05AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2143, 0x0061 };
    uint32_t const ces[9] = { 0x05AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_197)
{
    // 2143 0041;	
    // (⅃) REVERSED SANS-SERIF CAPITAL L	[05AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2143, 0x0041 };
    uint32_t const ces[9] = { 0x05AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_198)
{
    // 2143 0062;	
    // (⅃) REVERSED SANS-SERIF CAPITAL L	[05AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2143, 0x0062 };
    uint32_t const ces[9] = { 0x05AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_199)
{
    // 2144 0021;	
    // (⅄) TURNED SANS-SERIF CAPITAL Y	[05AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2144, 0x0021 };
    uint32_t const ces[9] = { 0x05AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_200)
{
    // 2144 003F;	
    // (⅄) TURNED SANS-SERIF CAPITAL Y	[05AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2144, 0x003F };
    uint32_t const ces[9] = { 0x05AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_201)
{
    // 2144 0061;	
    // (⅄) TURNED SANS-SERIF CAPITAL Y	[05AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2144, 0x0061 };
    uint32_t const ces[9] = { 0x05AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_202)
{
    // 2144 0041;	
    // (⅄) TURNED SANS-SERIF CAPITAL Y	[05AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2144, 0x0041 };
    uint32_t const ces[9] = { 0x05AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_203)
{
    // 2144 0062;	
    // (⅄) TURNED SANS-SERIF CAPITAL Y	[05AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2144, 0x0062 };
    uint32_t const ces[9] = { 0x05AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_204)
{
    // 214A 0021;	
    // (⅊) PROPERTY LINE	[05AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x214A, 0x0021 };
    uint32_t const ces[9] = { 0x05AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_205)
{
    // 214A 003F;	
    // (⅊) PROPERTY LINE	[05AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x214A, 0x003F };
    uint32_t const ces[9] = { 0x05AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_206)
{
    // 214A 0061;	
    // (⅊) PROPERTY LINE	[05AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x214A, 0x0061 };
    uint32_t const ces[9] = { 0x05AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_207)
{
    // 214A 0041;	
    // (⅊) PROPERTY LINE	[05AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x214A, 0x0041 };
    uint32_t const ces[9] = { 0x05AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_208)
{
    // 214A 0062;	
    // (⅊) PROPERTY LINE	[05AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x214A, 0x0062 };
    uint32_t const ces[9] = { 0x05AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_209)
{
    // 214C 0021;	
    // (⅌) PER SIGN	[05AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x214C, 0x0021 };
    uint32_t const ces[9] = { 0x05AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_210)
{
    // 214C 003F;	
    // (⅌) PER SIGN	[05AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x214C, 0x003F };
    uint32_t const ces[9] = { 0x05AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_211)
{
    // 214C 0061;	
    // (⅌) PER SIGN	[05AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x214C, 0x0061 };
    uint32_t const ces[9] = { 0x05AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_212)
{
    // 214C 0041;	
    // (⅌) PER SIGN	[05AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x214C, 0x0041 };
    uint32_t const ces[9] = { 0x05AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_213)
{
    // 214C 0062;	
    // (⅌) PER SIGN	[05AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x214C, 0x0062 };
    uint32_t const ces[9] = { 0x05AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_214)
{
    // 214F 0021;	
    // (⅏) SYMBOL FOR SAMARITAN SOURCE	[05AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x214F, 0x0021 };
    uint32_t const ces[9] = { 0x05AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_215)
{
    // 214F 003F;	
    // (⅏) SYMBOL FOR SAMARITAN SOURCE	[05AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x214F, 0x003F };
    uint32_t const ces[9] = { 0x05AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_216)
{
    // 214F 0061;	
    // (⅏) SYMBOL FOR SAMARITAN SOURCE	[05AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x214F, 0x0061 };
    uint32_t const ces[9] = { 0x05AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_217)
{
    // 214F 0041;	
    // (⅏) SYMBOL FOR SAMARITAN SOURCE	[05AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x214F, 0x0041 };
    uint32_t const ces[9] = { 0x05AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_218)
{
    // 214F 0062;	
    // (⅏) SYMBOL FOR SAMARITAN SOURCE	[05AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x214F, 0x0062 };
    uint32_t const ces[9] = { 0x05AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_219)
{
    // 218A 0021;	
    // (↊) TURNED DIGIT TWO	[05B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x218A, 0x0021 };
    uint32_t const ces[9] = { 0x05B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_220)
{
    // 218A 003F;	
    // (↊) TURNED DIGIT TWO	[05B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x218A, 0x003F };
    uint32_t const ces[9] = { 0x05B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_221)
{
    // 218A 0061;	
    // (↊) TURNED DIGIT TWO	[05B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x218A, 0x0061 };
    uint32_t const ces[9] = { 0x05B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_222)
{
    // 218A 0041;	
    // (↊) TURNED DIGIT TWO	[05B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x218A, 0x0041 };
    uint32_t const ces[9] = { 0x05B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_223)
{
    // 218A 0062;	
    // (↊) TURNED DIGIT TWO	[05B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x218A, 0x0062 };
    uint32_t const ces[9] = { 0x05B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_224)
{
    // 218B 0021;	
    // (↋) TURNED DIGIT THREE	[05B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x218B, 0x0021 };
    uint32_t const ces[9] = { 0x05B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_225)
{
    // 218B 003F;	
    // (↋) TURNED DIGIT THREE	[05B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x218B, 0x003F };
    uint32_t const ces[9] = { 0x05B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_226)
{
    // 218B 0061;	
    // (↋) TURNED DIGIT THREE	[05B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x218B, 0x0061 };
    uint32_t const ces[9] = { 0x05B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_227)
{
    // 218B 0041;	
    // (↋) TURNED DIGIT THREE	[05B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x218B, 0x0041 };
    uint32_t const ces[9] = { 0x05B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_228)
{
    // 218B 0062;	
    // (↋) TURNED DIGIT THREE	[05B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x218B, 0x0062 };
    uint32_t const ces[9] = { 0x05B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_229)
{
    // 2190 0338 0334;	
    // (↚) LEFTWARDS ARROW, COMBINING LONG SOLIDUS OVERLAY	[05B2 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2190, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x05B2, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_230)
{
    // 219A 0334;	
    // (↚) LEFTWARDS ARROW WITH STROKE	[05B2 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x219A, 0x0334 };
    uint32_t const ces[10] = { 0x05B2, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_231)
{
    // 2190 0021;	
    // (←) LEFTWARDS ARROW	[05B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2190, 0x0021 };
    uint32_t const ces[9] = { 0x05B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_232)
{
    // FFE9 0021;	
    // (￩) HALFWIDTH LEFTWARDS ARROW	[05B2 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFE9, 0x0021 };
    uint32_t const ces[9] = { 0x05B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_233)
{
    // 219A 0021;	
    // (↚) LEFTWARDS ARROW WITH STROKE	[05B2 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x219A, 0x0021 };
    uint32_t const ces[11] = { 0x05B2, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_234)
{
    // 2190 003F;	
    // (←) LEFTWARDS ARROW	[05B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2190, 0x003F };
    uint32_t const ces[9] = { 0x05B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_235)
{
    // FFE9 003F;	
    // (￩) HALFWIDTH LEFTWARDS ARROW	[05B2 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFE9, 0x003F };
    uint32_t const ces[9] = { 0x05B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_236)
{
    // 219A 003F;	
    // (↚) LEFTWARDS ARROW WITH STROKE	[05B2 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x219A, 0x003F };
    uint32_t const ces[11] = { 0x05B2, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_237)
{
    // 2190 0061;	
    // (←) LEFTWARDS ARROW	[05B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2190, 0x0061 };
    uint32_t const ces[9] = { 0x05B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_238)
{
    // 2190 0041;	
    // (←) LEFTWARDS ARROW	[05B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2190, 0x0041 };
    uint32_t const ces[9] = { 0x05B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_239)
{
    // FFE9 0061;	
    // (￩) HALFWIDTH LEFTWARDS ARROW	[05B2 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFE9, 0x0061 };
    uint32_t const ces[9] = { 0x05B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_240)
{
    // FFE9 0041;	
    // (￩) HALFWIDTH LEFTWARDS ARROW	[05B2 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFFE9, 0x0041 };
    uint32_t const ces[9] = { 0x05B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_241)
{
    // 219A 0061;	
    // (↚) LEFTWARDS ARROW WITH STROKE	[05B2 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x219A, 0x0061 };
    uint32_t const ces[11] = { 0x05B2, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_242)
{
    // 219A 0041;	
    // (↚) LEFTWARDS ARROW WITH STROKE	[05B2 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x219A, 0x0041 };
    uint32_t const ces[11] = { 0x05B2, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_243)
{
    // 2190 0062;	
    // (←) LEFTWARDS ARROW	[05B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2190, 0x0062 };
    uint32_t const ces[9] = { 0x05B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_244)
{
    // FFE9 0062;	
    // (￩) HALFWIDTH LEFTWARDS ARROW	[05B2 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFE9, 0x0062 };
    uint32_t const ces[9] = { 0x05B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_245)
{
    // 219A 0062;	
    // (↚) LEFTWARDS ARROW WITH STROKE	[05B2 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x219A, 0x0062 };
    uint32_t const ces[11] = { 0x05B2, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_246)
{
    // 2192 0338 0334;	
    // (↛) RIGHTWARDS ARROW, COMBINING LONG SOLIDUS OVERLAY	[05B3 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2192, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x05B3, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_247)
{
    // 219B 0334;	
    // (↛) RIGHTWARDS ARROW WITH STROKE	[05B3 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x219B, 0x0334 };
    uint32_t const ces[10] = { 0x05B3, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_248)
{
    // 2192 0021;	
    // (→) RIGHTWARDS ARROW	[05B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2192, 0x0021 };
    uint32_t const ces[9] = { 0x05B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_249)
{
    // FFEB 0021;	
    // (￫) HALFWIDTH RIGHTWARDS ARROW	[05B3 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFEB, 0x0021 };
    uint32_t const ces[9] = { 0x05B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_250)
{
    // 219B 0021;	
    // (↛) RIGHTWARDS ARROW WITH STROKE	[05B3 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x219B, 0x0021 };
    uint32_t const ces[11] = { 0x05B3, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_251)
{
    // 2192 003F;	
    // (→) RIGHTWARDS ARROW	[05B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2192, 0x003F };
    uint32_t const ces[9] = { 0x05B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_252)
{
    // FFEB 003F;	
    // (￫) HALFWIDTH RIGHTWARDS ARROW	[05B3 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFEB, 0x003F };
    uint32_t const ces[9] = { 0x05B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_253)
{
    // 219B 003F;	
    // (↛) RIGHTWARDS ARROW WITH STROKE	[05B3 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x219B, 0x003F };
    uint32_t const ces[11] = { 0x05B3, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_254)
{
    // 2192 0061;	
    // (→) RIGHTWARDS ARROW	[05B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2192, 0x0061 };
    uint32_t const ces[9] = { 0x05B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_255)
{
    // 2192 0041;	
    // (→) RIGHTWARDS ARROW	[05B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2192, 0x0041 };
    uint32_t const ces[9] = { 0x05B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_256)
{
    // FFEB 0061;	
    // (￫) HALFWIDTH RIGHTWARDS ARROW	[05B3 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFEB, 0x0061 };
    uint32_t const ces[9] = { 0x05B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_257)
{
    // FFEB 0041;	
    // (￫) HALFWIDTH RIGHTWARDS ARROW	[05B3 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFFEB, 0x0041 };
    uint32_t const ces[9] = { 0x05B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_258)
{
    // 219B 0061;	
    // (↛) RIGHTWARDS ARROW WITH STROKE	[05B3 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x219B, 0x0061 };
    uint32_t const ces[11] = { 0x05B3, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_259)
{
    // 219B 0041;	
    // (↛) RIGHTWARDS ARROW WITH STROKE	[05B3 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x219B, 0x0041 };
    uint32_t const ces[11] = { 0x05B3, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_260)
{
    // 2192 0062;	
    // (→) RIGHTWARDS ARROW	[05B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2192, 0x0062 };
    uint32_t const ces[9] = { 0x05B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_261)
{
    // FFEB 0062;	
    // (￫) HALFWIDTH RIGHTWARDS ARROW	[05B3 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFEB, 0x0062 };
    uint32_t const ces[9] = { 0x05B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_262)
{
    // 219B 0062;	
    // (↛) RIGHTWARDS ARROW WITH STROKE	[05B3 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x219B, 0x0062 };
    uint32_t const ces[11] = { 0x05B3, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_263)
{
    // 2191 0021;	
    // (↑) UPWARDS ARROW	[05B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2191, 0x0021 };
    uint32_t const ces[9] = { 0x05B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_264)
{
    // FFEA 0021;	
    // (￪) HALFWIDTH UPWARDS ARROW	[05B4 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFEA, 0x0021 };
    uint32_t const ces[9] = { 0x05B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_265)
{
    // 2191 003F;	
    // (↑) UPWARDS ARROW	[05B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2191, 0x003F };
    uint32_t const ces[9] = { 0x05B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_266)
{
    // FFEA 003F;	
    // (￪) HALFWIDTH UPWARDS ARROW	[05B4 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFEA, 0x003F };
    uint32_t const ces[9] = { 0x05B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_267)
{
    // 2191 0061;	
    // (↑) UPWARDS ARROW	[05B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2191, 0x0061 };
    uint32_t const ces[9] = { 0x05B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_268)
{
    // 2191 0041;	
    // (↑) UPWARDS ARROW	[05B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2191, 0x0041 };
    uint32_t const ces[9] = { 0x05B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_269)
{
    // FFEA 0061;	
    // (￪) HALFWIDTH UPWARDS ARROW	[05B4 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFEA, 0x0061 };
    uint32_t const ces[9] = { 0x05B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_270)
{
    // FFEA 0041;	
    // (￪) HALFWIDTH UPWARDS ARROW	[05B4 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFFEA, 0x0041 };
    uint32_t const ces[9] = { 0x05B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_271)
{
    // 2191 0062;	
    // (↑) UPWARDS ARROW	[05B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2191, 0x0062 };
    uint32_t const ces[9] = { 0x05B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_272)
{
    // FFEA 0062;	
    // (￪) HALFWIDTH UPWARDS ARROW	[05B4 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFEA, 0x0062 };
    uint32_t const ces[9] = { 0x05B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_273)
{
    // 2193 0021;	
    // (↓) DOWNWARDS ARROW	[05B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2193, 0x0021 };
    uint32_t const ces[9] = { 0x05B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_274)
{
    // FFEC 0021;	
    // (￬) HALFWIDTH DOWNWARDS ARROW	[05B5 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFEC, 0x0021 };
    uint32_t const ces[9] = { 0x05B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_275)
{
    // 2193 003F;	
    // (↓) DOWNWARDS ARROW	[05B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2193, 0x003F };
    uint32_t const ces[9] = { 0x05B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_276)
{
    // FFEC 003F;	
    // (￬) HALFWIDTH DOWNWARDS ARROW	[05B5 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFEC, 0x003F };
    uint32_t const ces[9] = { 0x05B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_277)
{
    // 2193 0061;	
    // (↓) DOWNWARDS ARROW	[05B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2193, 0x0061 };
    uint32_t const ces[9] = { 0x05B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_278)
{
    // 2193 0041;	
    // (↓) DOWNWARDS ARROW	[05B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2193, 0x0041 };
    uint32_t const ces[9] = { 0x05B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_279)
{
    // FFEC 0061;	
    // (￬) HALFWIDTH DOWNWARDS ARROW	[05B5 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFEC, 0x0061 };
    uint32_t const ces[9] = { 0x05B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_280)
{
    // FFEC 0041;	
    // (￬) HALFWIDTH DOWNWARDS ARROW	[05B5 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFFEC, 0x0041 };
    uint32_t const ces[9] = { 0x05B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_281)
{
    // 2193 0062;	
    // (↓) DOWNWARDS ARROW	[05B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2193, 0x0062 };
    uint32_t const ces[9] = { 0x05B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_282)
{
    // FFEC 0062;	
    // (￬) HALFWIDTH DOWNWARDS ARROW	[05B5 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFFEC, 0x0062 };
    uint32_t const ces[9] = { 0x05B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_283)
{
    // 2194 0338 0334;	
    // (↮) LEFT RIGHT ARROW, COMBINING LONG SOLIDUS OVERLAY	[05B6 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x2194, 0x0338, 0x0334 };
    uint32_t const ces[10] = { 0x05B6, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_284)
{
    // 21AE 0334;	
    // (↮) LEFT RIGHT ARROW WITH STROKE	[05B6 | 0020 002F 004A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x21AE, 0x0334 };
    uint32_t const ces[10] = { 0x05B6, 0x0000, 0x0020, 0x002F, 0x004A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_285)
{
    // 2194 0021;	
    // (↔) LEFT RIGHT ARROW	[05B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2194, 0x0021 };
    uint32_t const ces[9] = { 0x05B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_286)
{
    // 21AE 0021;	
    // (↮) LEFT RIGHT ARROW WITH STROKE	[05B6 0261 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x21AE, 0x0021 };
    uint32_t const ces[11] = { 0x05B6, 0x0261, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_287)
{
    // 2194 003F;	
    // (↔) LEFT RIGHT ARROW	[05B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2194, 0x003F };
    uint32_t const ces[9] = { 0x05B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_288)
{
    // 21AE 003F;	
    // (↮) LEFT RIGHT ARROW WITH STROKE	[05B6 0267 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x21AE, 0x003F };
    uint32_t const ces[11] = { 0x05B6, 0x0267, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_289)
{
    // 2194 0061;	
    // (↔) LEFT RIGHT ARROW	[05B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2194, 0x0061 };
    uint32_t const ces[9] = { 0x05B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_290)
{
    // 2194 0041;	
    // (↔) LEFT RIGHT ARROW	[05B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2194, 0x0041 };
    uint32_t const ces[9] = { 0x05B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_291)
{
    // 21AE 0061;	
    // (↮) LEFT RIGHT ARROW WITH STROKE	[05B6 1CAD | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x21AE, 0x0061 };
    uint32_t const ces[11] = { 0x05B6, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_292)
{
    // 21AE 0041;	
    // (↮) LEFT RIGHT ARROW WITH STROKE	[05B6 1CAD | 0020 002F 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x21AE, 0x0041 };
    uint32_t const ces[11] = { 0x05B6, 0x1CAD, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_293)
{
    // 2194 0062;	
    // (↔) LEFT RIGHT ARROW	[05B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2194, 0x0062 };
    uint32_t const ces[9] = { 0x05B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_294)
{
    // 21AE 0062;	
    // (↮) LEFT RIGHT ARROW WITH STROKE	[05B6 1CC6 | 0020 002F 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x21AE, 0x0062 };
    uint32_t const ces[11] = { 0x05B6, 0x1CC6, 0x0000, 0x0020, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_295)
{
    // 2195 0021;	
    // (↕) UP DOWN ARROW	[05B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2195, 0x0021 };
    uint32_t const ces[9] = { 0x05B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_296)
{
    // 2195 003F;	
    // (↕) UP DOWN ARROW	[05B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2195, 0x003F };
    uint32_t const ces[9] = { 0x05B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_297)
{
    // 2195 0061;	
    // (↕) UP DOWN ARROW	[05B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2195, 0x0061 };
    uint32_t const ces[9] = { 0x05B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_298)
{
    // 2195 0041;	
    // (↕) UP DOWN ARROW	[05B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2195, 0x0041 };
    uint32_t const ces[9] = { 0x05B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_299)
{
    // 2195 0062;	
    // (↕) UP DOWN ARROW	[05B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2195, 0x0062 };
    uint32_t const ces[9] = { 0x05B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_300)
{
    // 2196 0021;	
    // (↖) NORTH WEST ARROW	[05B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2196, 0x0021 };
    uint32_t const ces[9] = { 0x05B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_301)
{
    // 2196 003F;	
    // (↖) NORTH WEST ARROW	[05B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2196, 0x003F };
    uint32_t const ces[9] = { 0x05B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_302)
{
    // 2196 0061;	
    // (↖) NORTH WEST ARROW	[05B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2196, 0x0061 };
    uint32_t const ces[9] = { 0x05B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_303)
{
    // 2196 0041;	
    // (↖) NORTH WEST ARROW	[05B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2196, 0x0041 };
    uint32_t const ces[9] = { 0x05B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_304)
{
    // 2196 0062;	
    // (↖) NORTH WEST ARROW	[05B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2196, 0x0062 };
    uint32_t const ces[9] = { 0x05B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_305)
{
    // 2197 0021;	
    // (↗) NORTH EAST ARROW	[05B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2197, 0x0021 };
    uint32_t const ces[9] = { 0x05B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_306)
{
    // 2197 003F;	
    // (↗) NORTH EAST ARROW	[05B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2197, 0x003F };
    uint32_t const ces[9] = { 0x05B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_307)
{
    // 2197 0061;	
    // (↗) NORTH EAST ARROW	[05B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2197, 0x0061 };
    uint32_t const ces[9] = { 0x05B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_308)
{
    // 2197 0041;	
    // (↗) NORTH EAST ARROW	[05B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2197, 0x0041 };
    uint32_t const ces[9] = { 0x05B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_309)
{
    // 2197 0062;	
    // (↗) NORTH EAST ARROW	[05B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2197, 0x0062 };
    uint32_t const ces[9] = { 0x05B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_310)
{
    // 2198 0021;	
    // (↘) SOUTH EAST ARROW	[05BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2198, 0x0021 };
    uint32_t const ces[9] = { 0x05BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_311)
{
    // 2198 003F;	
    // (↘) SOUTH EAST ARROW	[05BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2198, 0x003F };
    uint32_t const ces[9] = { 0x05BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_312)
{
    // 2198 0061;	
    // (↘) SOUTH EAST ARROW	[05BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2198, 0x0061 };
    uint32_t const ces[9] = { 0x05BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_313)
{
    // 2198 0041;	
    // (↘) SOUTH EAST ARROW	[05BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2198, 0x0041 };
    uint32_t const ces[9] = { 0x05BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_314)
{
    // 2198 0062;	
    // (↘) SOUTH EAST ARROW	[05BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2198, 0x0062 };
    uint32_t const ces[9] = { 0x05BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_315)
{
    // 2199 0021;	
    // (↙) SOUTH WEST ARROW	[05BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2199, 0x0021 };
    uint32_t const ces[9] = { 0x05BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_316)
{
    // 2199 003F;	
    // (↙) SOUTH WEST ARROW	[05BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2199, 0x003F };
    uint32_t const ces[9] = { 0x05BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_317)
{
    // 2199 0061;	
    // (↙) SOUTH WEST ARROW	[05BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2199, 0x0061 };
    uint32_t const ces[9] = { 0x05BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_318)
{
    // 2199 0041;	
    // (↙) SOUTH WEST ARROW	[05BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2199, 0x0041 };
    uint32_t const ces[9] = { 0x05BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_319)
{
    // 2199 0062;	
    // (↙) SOUTH WEST ARROW	[05BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2199, 0x0062 };
    uint32_t const ces[9] = { 0x05BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_320)
{
    // 219C 0021;	
    // (↜) LEFTWARDS WAVE ARROW	[05BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x219C, 0x0021 };
    uint32_t const ces[9] = { 0x05BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_321)
{
    // 219C 003F;	
    // (↜) LEFTWARDS WAVE ARROW	[05BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x219C, 0x003F };
    uint32_t const ces[9] = { 0x05BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_322)
{
    // 219C 0061;	
    // (↜) LEFTWARDS WAVE ARROW	[05BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x219C, 0x0061 };
    uint32_t const ces[9] = { 0x05BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_323)
{
    // 219C 0041;	
    // (↜) LEFTWARDS WAVE ARROW	[05BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x219C, 0x0041 };
    uint32_t const ces[9] = { 0x05BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_324)
{
    // 219C 0062;	
    // (↜) LEFTWARDS WAVE ARROW	[05BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x219C, 0x0062 };
    uint32_t const ces[9] = { 0x05BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_325)
{
    // 219D 0021;	
    // (↝) RIGHTWARDS WAVE ARROW	[05BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x219D, 0x0021 };
    uint32_t const ces[9] = { 0x05BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_326)
{
    // 219D 003F;	
    // (↝) RIGHTWARDS WAVE ARROW	[05BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x219D, 0x003F };
    uint32_t const ces[9] = { 0x05BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_327)
{
    // 219D 0061;	
    // (↝) RIGHTWARDS WAVE ARROW	[05BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x219D, 0x0061 };
    uint32_t const ces[9] = { 0x05BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_328)
{
    // 219D 0041;	
    // (↝) RIGHTWARDS WAVE ARROW	[05BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x219D, 0x0041 };
    uint32_t const ces[9] = { 0x05BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_329)
{
    // 219D 0062;	
    // (↝) RIGHTWARDS WAVE ARROW	[05BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x219D, 0x0062 };
    uint32_t const ces[9] = { 0x05BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_330)
{
    // 219E 0021;	
    // (↞) LEFTWARDS TWO HEADED ARROW	[05BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x219E, 0x0021 };
    uint32_t const ces[9] = { 0x05BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_331)
{
    // 219E 003F;	
    // (↞) LEFTWARDS TWO HEADED ARROW	[05BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x219E, 0x003F };
    uint32_t const ces[9] = { 0x05BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_332)
{
    // 219E 0061;	
    // (↞) LEFTWARDS TWO HEADED ARROW	[05BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x219E, 0x0061 };
    uint32_t const ces[9] = { 0x05BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_333)
{
    // 219E 0041;	
    // (↞) LEFTWARDS TWO HEADED ARROW	[05BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x219E, 0x0041 };
    uint32_t const ces[9] = { 0x05BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_334)
{
    // 219E 0062;	
    // (↞) LEFTWARDS TWO HEADED ARROW	[05BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x219E, 0x0062 };
    uint32_t const ces[9] = { 0x05BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_335)
{
    // 219F 0021;	
    // (↟) UPWARDS TWO HEADED ARROW	[05BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x219F, 0x0021 };
    uint32_t const ces[9] = { 0x05BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_336)
{
    // 219F 003F;	
    // (↟) UPWARDS TWO HEADED ARROW	[05BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x219F, 0x003F };
    uint32_t const ces[9] = { 0x05BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_337)
{
    // 219F 0061;	
    // (↟) UPWARDS TWO HEADED ARROW	[05BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x219F, 0x0061 };
    uint32_t const ces[9] = { 0x05BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_338)
{
    // 219F 0041;	
    // (↟) UPWARDS TWO HEADED ARROW	[05BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x219F, 0x0041 };
    uint32_t const ces[9] = { 0x05BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_339)
{
    // 219F 0062;	
    // (↟) UPWARDS TWO HEADED ARROW	[05BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x219F, 0x0062 };
    uint32_t const ces[9] = { 0x05BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_340)
{
    // 21A0 0021;	
    // (↠) RIGHTWARDS TWO HEADED ARROW	[05C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A0, 0x0021 };
    uint32_t const ces[9] = { 0x05C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_341)
{
    // 21A0 003F;	
    // (↠) RIGHTWARDS TWO HEADED ARROW	[05C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A0, 0x003F };
    uint32_t const ces[9] = { 0x05C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_342)
{
    // 21A0 0061;	
    // (↠) RIGHTWARDS TWO HEADED ARROW	[05C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A0, 0x0061 };
    uint32_t const ces[9] = { 0x05C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_343)
{
    // 21A0 0041;	
    // (↠) RIGHTWARDS TWO HEADED ARROW	[05C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21A0, 0x0041 };
    uint32_t const ces[9] = { 0x05C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_344)
{
    // 21A0 0062;	
    // (↠) RIGHTWARDS TWO HEADED ARROW	[05C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A0, 0x0062 };
    uint32_t const ces[9] = { 0x05C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_345)
{
    // 21A1 0021;	
    // (↡) DOWNWARDS TWO HEADED ARROW	[05C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A1, 0x0021 };
    uint32_t const ces[9] = { 0x05C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_346)
{
    // 21A1 003F;	
    // (↡) DOWNWARDS TWO HEADED ARROW	[05C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A1, 0x003F };
    uint32_t const ces[9] = { 0x05C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_347)
{
    // 21A1 0061;	
    // (↡) DOWNWARDS TWO HEADED ARROW	[05C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A1, 0x0061 };
    uint32_t const ces[9] = { 0x05C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_348)
{
    // 21A1 0041;	
    // (↡) DOWNWARDS TWO HEADED ARROW	[05C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21A1, 0x0041 };
    uint32_t const ces[9] = { 0x05C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_349)
{
    // 21A1 0062;	
    // (↡) DOWNWARDS TWO HEADED ARROW	[05C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A1, 0x0062 };
    uint32_t const ces[9] = { 0x05C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_350)
{
    // 21A2 0021;	
    // (↢) LEFTWARDS ARROW WITH TAIL	[05C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A2, 0x0021 };
    uint32_t const ces[9] = { 0x05C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_351)
{
    // 21A2 003F;	
    // (↢) LEFTWARDS ARROW WITH TAIL	[05C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A2, 0x003F };
    uint32_t const ces[9] = { 0x05C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_352)
{
    // 21A2 0061;	
    // (↢) LEFTWARDS ARROW WITH TAIL	[05C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A2, 0x0061 };
    uint32_t const ces[9] = { 0x05C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_353)
{
    // 21A2 0041;	
    // (↢) LEFTWARDS ARROW WITH TAIL	[05C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21A2, 0x0041 };
    uint32_t const ces[9] = { 0x05C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_354)
{
    // 21A2 0062;	
    // (↢) LEFTWARDS ARROW WITH TAIL	[05C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A2, 0x0062 };
    uint32_t const ces[9] = { 0x05C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_355)
{
    // 21A3 0021;	
    // (↣) RIGHTWARDS ARROW WITH TAIL	[05C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A3, 0x0021 };
    uint32_t const ces[9] = { 0x05C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_356)
{
    // 21A3 003F;	
    // (↣) RIGHTWARDS ARROW WITH TAIL	[05C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A3, 0x003F };
    uint32_t const ces[9] = { 0x05C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_357)
{
    // 21A3 0061;	
    // (↣) RIGHTWARDS ARROW WITH TAIL	[05C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A3, 0x0061 };
    uint32_t const ces[9] = { 0x05C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_358)
{
    // 21A3 0041;	
    // (↣) RIGHTWARDS ARROW WITH TAIL	[05C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21A3, 0x0041 };
    uint32_t const ces[9] = { 0x05C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_359)
{
    // 21A3 0062;	
    // (↣) RIGHTWARDS ARROW WITH TAIL	[05C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A3, 0x0062 };
    uint32_t const ces[9] = { 0x05C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_360)
{
    // 21A4 0021;	
    // (↤) LEFTWARDS ARROW FROM BAR	[05C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A4, 0x0021 };
    uint32_t const ces[9] = { 0x05C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_361)
{
    // 21A4 003F;	
    // (↤) LEFTWARDS ARROW FROM BAR	[05C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A4, 0x003F };
    uint32_t const ces[9] = { 0x05C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_362)
{
    // 21A4 0061;	
    // (↤) LEFTWARDS ARROW FROM BAR	[05C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A4, 0x0061 };
    uint32_t const ces[9] = { 0x05C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_363)
{
    // 21A4 0041;	
    // (↤) LEFTWARDS ARROW FROM BAR	[05C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21A4, 0x0041 };
    uint32_t const ces[9] = { 0x05C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_364)
{
    // 21A4 0062;	
    // (↤) LEFTWARDS ARROW FROM BAR	[05C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A4, 0x0062 };
    uint32_t const ces[9] = { 0x05C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_365)
{
    // 21A5 0021;	
    // (↥) UPWARDS ARROW FROM BAR	[05C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A5, 0x0021 };
    uint32_t const ces[9] = { 0x05C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_366)
{
    // 21A5 003F;	
    // (↥) UPWARDS ARROW FROM BAR	[05C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A5, 0x003F };
    uint32_t const ces[9] = { 0x05C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_367)
{
    // 21A5 0061;	
    // (↥) UPWARDS ARROW FROM BAR	[05C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A5, 0x0061 };
    uint32_t const ces[9] = { 0x05C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_368)
{
    // 21A5 0041;	
    // (↥) UPWARDS ARROW FROM BAR	[05C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21A5, 0x0041 };
    uint32_t const ces[9] = { 0x05C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_369)
{
    // 21A5 0062;	
    // (↥) UPWARDS ARROW FROM BAR	[05C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A5, 0x0062 };
    uint32_t const ces[9] = { 0x05C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_370)
{
    // 21A6 0021;	
    // (↦) RIGHTWARDS ARROW FROM BAR	[05C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A6, 0x0021 };
    uint32_t const ces[9] = { 0x05C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_371)
{
    // 21A6 003F;	
    // (↦) RIGHTWARDS ARROW FROM BAR	[05C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A6, 0x003F };
    uint32_t const ces[9] = { 0x05C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_372)
{
    // 21A6 0061;	
    // (↦) RIGHTWARDS ARROW FROM BAR	[05C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A6, 0x0061 };
    uint32_t const ces[9] = { 0x05C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_373)
{
    // 21A6 0041;	
    // (↦) RIGHTWARDS ARROW FROM BAR	[05C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21A6, 0x0041 };
    uint32_t const ces[9] = { 0x05C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_374)
{
    // 21A6 0062;	
    // (↦) RIGHTWARDS ARROW FROM BAR	[05C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A6, 0x0062 };
    uint32_t const ces[9] = { 0x05C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_375)
{
    // 21A7 0021;	
    // (↧) DOWNWARDS ARROW FROM BAR	[05C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A7, 0x0021 };
    uint32_t const ces[9] = { 0x05C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_376)
{
    // 21A7 003F;	
    // (↧) DOWNWARDS ARROW FROM BAR	[05C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A7, 0x003F };
    uint32_t const ces[9] = { 0x05C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_377)
{
    // 21A7 0061;	
    // (↧) DOWNWARDS ARROW FROM BAR	[05C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A7, 0x0061 };
    uint32_t const ces[9] = { 0x05C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_378)
{
    // 21A7 0041;	
    // (↧) DOWNWARDS ARROW FROM BAR	[05C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21A7, 0x0041 };
    uint32_t const ces[9] = { 0x05C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_379)
{
    // 21A7 0062;	
    // (↧) DOWNWARDS ARROW FROM BAR	[05C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A7, 0x0062 };
    uint32_t const ces[9] = { 0x05C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_380)
{
    // 21A8 0021;	
    // (↨) UP DOWN ARROW WITH BASE	[05C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A8, 0x0021 };
    uint32_t const ces[9] = { 0x05C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_381)
{
    // 21A8 003F;	
    // (↨) UP DOWN ARROW WITH BASE	[05C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A8, 0x003F };
    uint32_t const ces[9] = { 0x05C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_382)
{
    // 21A8 0061;	
    // (↨) UP DOWN ARROW WITH BASE	[05C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A8, 0x0061 };
    uint32_t const ces[9] = { 0x05C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_383)
{
    // 21A8 0041;	
    // (↨) UP DOWN ARROW WITH BASE	[05C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21A8, 0x0041 };
    uint32_t const ces[9] = { 0x05C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_384)
{
    // 21A8 0062;	
    // (↨) UP DOWN ARROW WITH BASE	[05C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A8, 0x0062 };
    uint32_t const ces[9] = { 0x05C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_385)
{
    // 21A9 0021;	
    // (↩) LEFTWARDS ARROW WITH HOOK	[05C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A9, 0x0021 };
    uint32_t const ces[9] = { 0x05C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_386)
{
    // 21A9 003F;	
    // (↩) LEFTWARDS ARROW WITH HOOK	[05C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A9, 0x003F };
    uint32_t const ces[9] = { 0x05C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_387)
{
    // 21A9 0061;	
    // (↩) LEFTWARDS ARROW WITH HOOK	[05C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A9, 0x0061 };
    uint32_t const ces[9] = { 0x05C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_388)
{
    // 21A9 0041;	
    // (↩) LEFTWARDS ARROW WITH HOOK	[05C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21A9, 0x0041 };
    uint32_t const ces[9] = { 0x05C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_389)
{
    // 21A9 0062;	
    // (↩) LEFTWARDS ARROW WITH HOOK	[05C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21A9, 0x0062 };
    uint32_t const ces[9] = { 0x05C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_390)
{
    // 21AA 0021;	
    // (↪) RIGHTWARDS ARROW WITH HOOK	[05CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21AA, 0x0021 };
    uint32_t const ces[9] = { 0x05CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_391)
{
    // 21AA 003F;	
    // (↪) RIGHTWARDS ARROW WITH HOOK	[05CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21AA, 0x003F };
    uint32_t const ces[9] = { 0x05CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_392)
{
    // 21AA 0061;	
    // (↪) RIGHTWARDS ARROW WITH HOOK	[05CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21AA, 0x0061 };
    uint32_t const ces[9] = { 0x05CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_393)
{
    // 21AA 0041;	
    // (↪) RIGHTWARDS ARROW WITH HOOK	[05CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21AA, 0x0041 };
    uint32_t const ces[9] = { 0x05CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_394)
{
    // 21AA 0062;	
    // (↪) RIGHTWARDS ARROW WITH HOOK	[05CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21AA, 0x0062 };
    uint32_t const ces[9] = { 0x05CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_395)
{
    // 21AB 0021;	
    // (↫) LEFTWARDS ARROW WITH LOOP	[05CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21AB, 0x0021 };
    uint32_t const ces[9] = { 0x05CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_396)
{
    // 21AB 003F;	
    // (↫) LEFTWARDS ARROW WITH LOOP	[05CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21AB, 0x003F };
    uint32_t const ces[9] = { 0x05CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_397)
{
    // 21AB 0061;	
    // (↫) LEFTWARDS ARROW WITH LOOP	[05CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21AB, 0x0061 };
    uint32_t const ces[9] = { 0x05CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_398)
{
    // 21AB 0041;	
    // (↫) LEFTWARDS ARROW WITH LOOP	[05CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21AB, 0x0041 };
    uint32_t const ces[9] = { 0x05CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_399)
{
    // 21AB 0062;	
    // (↫) LEFTWARDS ARROW WITH LOOP	[05CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21AB, 0x0062 };
    uint32_t const ces[9] = { 0x05CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_400)
{
    // 21AC 0021;	
    // (↬) RIGHTWARDS ARROW WITH LOOP	[05CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21AC, 0x0021 };
    uint32_t const ces[9] = { 0x05CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_401)
{
    // 21AC 003F;	
    // (↬) RIGHTWARDS ARROW WITH LOOP	[05CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21AC, 0x003F };
    uint32_t const ces[9] = { 0x05CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_402)
{
    // 21AC 0061;	
    // (↬) RIGHTWARDS ARROW WITH LOOP	[05CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21AC, 0x0061 };
    uint32_t const ces[9] = { 0x05CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_403)
{
    // 21AC 0041;	
    // (↬) RIGHTWARDS ARROW WITH LOOP	[05CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21AC, 0x0041 };
    uint32_t const ces[9] = { 0x05CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_404)
{
    // 21AC 0062;	
    // (↬) RIGHTWARDS ARROW WITH LOOP	[05CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21AC, 0x0062 };
    uint32_t const ces[9] = { 0x05CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_405)
{
    // 21AD 0021;	
    // (↭) LEFT RIGHT WAVE ARROW	[05CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21AD, 0x0021 };
    uint32_t const ces[9] = { 0x05CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_406)
{
    // 21AD 003F;	
    // (↭) LEFT RIGHT WAVE ARROW	[05CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21AD, 0x003F };
    uint32_t const ces[9] = { 0x05CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_407)
{
    // 21AD 0061;	
    // (↭) LEFT RIGHT WAVE ARROW	[05CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21AD, 0x0061 };
    uint32_t const ces[9] = { 0x05CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_408)
{
    // 21AD 0041;	
    // (↭) LEFT RIGHT WAVE ARROW	[05CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21AD, 0x0041 };
    uint32_t const ces[9] = { 0x05CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_409)
{
    // 21AD 0062;	
    // (↭) LEFT RIGHT WAVE ARROW	[05CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21AD, 0x0062 };
    uint32_t const ces[9] = { 0x05CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_410)
{
    // 21AF 0021;	
    // (↯) DOWNWARDS ZIGZAG ARROW	[05CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21AF, 0x0021 };
    uint32_t const ces[9] = { 0x05CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_411)
{
    // 21AF 003F;	
    // (↯) DOWNWARDS ZIGZAG ARROW	[05CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21AF, 0x003F };
    uint32_t const ces[9] = { 0x05CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_412)
{
    // 21AF 0061;	
    // (↯) DOWNWARDS ZIGZAG ARROW	[05CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21AF, 0x0061 };
    uint32_t const ces[9] = { 0x05CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_413)
{
    // 21AF 0041;	
    // (↯) DOWNWARDS ZIGZAG ARROW	[05CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21AF, 0x0041 };
    uint32_t const ces[9] = { 0x05CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_414)
{
    // 21AF 0062;	
    // (↯) DOWNWARDS ZIGZAG ARROW	[05CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21AF, 0x0062 };
    uint32_t const ces[9] = { 0x05CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_415)
{
    // 21B0 0021;	
    // (↰) UPWARDS ARROW WITH TIP LEFTWARDS	[05CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B0, 0x0021 };
    uint32_t const ces[9] = { 0x05CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_416)
{
    // 21B0 003F;	
    // (↰) UPWARDS ARROW WITH TIP LEFTWARDS	[05CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B0, 0x003F };
    uint32_t const ces[9] = { 0x05CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_417)
{
    // 21B0 0061;	
    // (↰) UPWARDS ARROW WITH TIP LEFTWARDS	[05CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B0, 0x0061 };
    uint32_t const ces[9] = { 0x05CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_418)
{
    // 21B0 0041;	
    // (↰) UPWARDS ARROW WITH TIP LEFTWARDS	[05CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21B0, 0x0041 };
    uint32_t const ces[9] = { 0x05CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_419)
{
    // 21B0 0062;	
    // (↰) UPWARDS ARROW WITH TIP LEFTWARDS	[05CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B0, 0x0062 };
    uint32_t const ces[9] = { 0x05CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_420)
{
    // 21B1 0021;	
    // (↱) UPWARDS ARROW WITH TIP RIGHTWARDS	[05D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B1, 0x0021 };
    uint32_t const ces[9] = { 0x05D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_421)
{
    // 21B1 003F;	
    // (↱) UPWARDS ARROW WITH TIP RIGHTWARDS	[05D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B1, 0x003F };
    uint32_t const ces[9] = { 0x05D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_422)
{
    // 21B1 0061;	
    // (↱) UPWARDS ARROW WITH TIP RIGHTWARDS	[05D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B1, 0x0061 };
    uint32_t const ces[9] = { 0x05D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_423)
{
    // 21B1 0041;	
    // (↱) UPWARDS ARROW WITH TIP RIGHTWARDS	[05D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21B1, 0x0041 };
    uint32_t const ces[9] = { 0x05D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_424)
{
    // 21B1 0062;	
    // (↱) UPWARDS ARROW WITH TIP RIGHTWARDS	[05D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B1, 0x0062 };
    uint32_t const ces[9] = { 0x05D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_425)
{
    // 21B2 0021;	
    // (↲) DOWNWARDS ARROW WITH TIP LEFTWARDS	[05D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B2, 0x0021 };
    uint32_t const ces[9] = { 0x05D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_426)
{
    // 21B2 003F;	
    // (↲) DOWNWARDS ARROW WITH TIP LEFTWARDS	[05D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B2, 0x003F };
    uint32_t const ces[9] = { 0x05D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_427)
{
    // 21B2 0061;	
    // (↲) DOWNWARDS ARROW WITH TIP LEFTWARDS	[05D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B2, 0x0061 };
    uint32_t const ces[9] = { 0x05D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_428)
{
    // 21B2 0041;	
    // (↲) DOWNWARDS ARROW WITH TIP LEFTWARDS	[05D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21B2, 0x0041 };
    uint32_t const ces[9] = { 0x05D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_429)
{
    // 21B2 0062;	
    // (↲) DOWNWARDS ARROW WITH TIP LEFTWARDS	[05D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B2, 0x0062 };
    uint32_t const ces[9] = { 0x05D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_430)
{
    // 21B3 0021;	
    // (↳) DOWNWARDS ARROW WITH TIP RIGHTWARDS	[05D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B3, 0x0021 };
    uint32_t const ces[9] = { 0x05D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_431)
{
    // 21B3 003F;	
    // (↳) DOWNWARDS ARROW WITH TIP RIGHTWARDS	[05D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B3, 0x003F };
    uint32_t const ces[9] = { 0x05D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_432)
{
    // 21B3 0061;	
    // (↳) DOWNWARDS ARROW WITH TIP RIGHTWARDS	[05D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B3, 0x0061 };
    uint32_t const ces[9] = { 0x05D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_433)
{
    // 21B3 0041;	
    // (↳) DOWNWARDS ARROW WITH TIP RIGHTWARDS	[05D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21B3, 0x0041 };
    uint32_t const ces[9] = { 0x05D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_434)
{
    // 21B3 0062;	
    // (↳) DOWNWARDS ARROW WITH TIP RIGHTWARDS	[05D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B3, 0x0062 };
    uint32_t const ces[9] = { 0x05D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_435)
{
    // 21B4 0021;	
    // (↴) RIGHTWARDS ARROW WITH CORNER DOWNWARDS	[05D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B4, 0x0021 };
    uint32_t const ces[9] = { 0x05D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_436)
{
    // 21B4 003F;	
    // (↴) RIGHTWARDS ARROW WITH CORNER DOWNWARDS	[05D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B4, 0x003F };
    uint32_t const ces[9] = { 0x05D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_437)
{
    // 21B4 0061;	
    // (↴) RIGHTWARDS ARROW WITH CORNER DOWNWARDS	[05D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B4, 0x0061 };
    uint32_t const ces[9] = { 0x05D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_438)
{
    // 21B4 0041;	
    // (↴) RIGHTWARDS ARROW WITH CORNER DOWNWARDS	[05D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21B4, 0x0041 };
    uint32_t const ces[9] = { 0x05D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_439)
{
    // 21B4 0062;	
    // (↴) RIGHTWARDS ARROW WITH CORNER DOWNWARDS	[05D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B4, 0x0062 };
    uint32_t const ces[9] = { 0x05D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_440)
{
    // 21B5 0021;	
    // (↵) DOWNWARDS ARROW WITH CORNER LEFTWARDS	[05D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B5, 0x0021 };
    uint32_t const ces[9] = { 0x05D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_441)
{
    // 21B5 003F;	
    // (↵) DOWNWARDS ARROW WITH CORNER LEFTWARDS	[05D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B5, 0x003F };
    uint32_t const ces[9] = { 0x05D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_442)
{
    // 21B5 0061;	
    // (↵) DOWNWARDS ARROW WITH CORNER LEFTWARDS	[05D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B5, 0x0061 };
    uint32_t const ces[9] = { 0x05D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_443)
{
    // 21B5 0041;	
    // (↵) DOWNWARDS ARROW WITH CORNER LEFTWARDS	[05D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21B5, 0x0041 };
    uint32_t const ces[9] = { 0x05D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_444)
{
    // 21B5 0062;	
    // (↵) DOWNWARDS ARROW WITH CORNER LEFTWARDS	[05D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B5, 0x0062 };
    uint32_t const ces[9] = { 0x05D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_445)
{
    // 21B6 0021;	
    // (↶) ANTICLOCKWISE TOP SEMICIRCLE ARROW	[05D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B6, 0x0021 };
    uint32_t const ces[9] = { 0x05D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_446)
{
    // 21B6 003F;	
    // (↶) ANTICLOCKWISE TOP SEMICIRCLE ARROW	[05D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B6, 0x003F };
    uint32_t const ces[9] = { 0x05D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_447)
{
    // 21B6 0061;	
    // (↶) ANTICLOCKWISE TOP SEMICIRCLE ARROW	[05D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B6, 0x0061 };
    uint32_t const ces[9] = { 0x05D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_448)
{
    // 21B6 0041;	
    // (↶) ANTICLOCKWISE TOP SEMICIRCLE ARROW	[05D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21B6, 0x0041 };
    uint32_t const ces[9] = { 0x05D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_449)
{
    // 21B6 0062;	
    // (↶) ANTICLOCKWISE TOP SEMICIRCLE ARROW	[05D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B6, 0x0062 };
    uint32_t const ces[9] = { 0x05D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_450)
{
    // 21B7 0021;	
    // (↷) CLOCKWISE TOP SEMICIRCLE ARROW	[05D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B7, 0x0021 };
    uint32_t const ces[9] = { 0x05D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_451)
{
    // 21B7 003F;	
    // (↷) CLOCKWISE TOP SEMICIRCLE ARROW	[05D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B7, 0x003F };
    uint32_t const ces[9] = { 0x05D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_452)
{
    // 21B7 0061;	
    // (↷) CLOCKWISE TOP SEMICIRCLE ARROW	[05D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B7, 0x0061 };
    uint32_t const ces[9] = { 0x05D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_453)
{
    // 21B7 0041;	
    // (↷) CLOCKWISE TOP SEMICIRCLE ARROW	[05D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21B7, 0x0041 };
    uint32_t const ces[9] = { 0x05D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_454)
{
    // 21B7 0062;	
    // (↷) CLOCKWISE TOP SEMICIRCLE ARROW	[05D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B7, 0x0062 };
    uint32_t const ces[9] = { 0x05D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_455)
{
    // 21B8 0021;	
    // (↸) NORTH WEST ARROW TO LONG BAR	[05D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B8, 0x0021 };
    uint32_t const ces[9] = { 0x05D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_456)
{
    // 21B8 003F;	
    // (↸) NORTH WEST ARROW TO LONG BAR	[05D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B8, 0x003F };
    uint32_t const ces[9] = { 0x05D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_457)
{
    // 21B8 0061;	
    // (↸) NORTH WEST ARROW TO LONG BAR	[05D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B8, 0x0061 };
    uint32_t const ces[9] = { 0x05D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_458)
{
    // 21B8 0041;	
    // (↸) NORTH WEST ARROW TO LONG BAR	[05D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21B8, 0x0041 };
    uint32_t const ces[9] = { 0x05D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_459)
{
    // 21B8 0062;	
    // (↸) NORTH WEST ARROW TO LONG BAR	[05D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B8, 0x0062 };
    uint32_t const ces[9] = { 0x05D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_460)
{
    // 21B9 0021;	
    // (↹) LEFTWARDS ARROW TO BAR OVER RIGHTWARDS ARROW TO BAR	[05D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B9, 0x0021 };
    uint32_t const ces[9] = { 0x05D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_461)
{
    // 21B9 003F;	
    // (↹) LEFTWARDS ARROW TO BAR OVER RIGHTWARDS ARROW TO BAR	[05D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B9, 0x003F };
    uint32_t const ces[9] = { 0x05D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_462)
{
    // 21B9 0061;	
    // (↹) LEFTWARDS ARROW TO BAR OVER RIGHTWARDS ARROW TO BAR	[05D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B9, 0x0061 };
    uint32_t const ces[9] = { 0x05D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_463)
{
    // 21B9 0041;	
    // (↹) LEFTWARDS ARROW TO BAR OVER RIGHTWARDS ARROW TO BAR	[05D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21B9, 0x0041 };
    uint32_t const ces[9] = { 0x05D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_464)
{
    // 21B9 0062;	
    // (↹) LEFTWARDS ARROW TO BAR OVER RIGHTWARDS ARROW TO BAR	[05D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21B9, 0x0062 };
    uint32_t const ces[9] = { 0x05D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_465)
{
    // 21BA 0021;	
    // (↺) ANTICLOCKWISE OPEN CIRCLE ARROW	[05D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BA, 0x0021 };
    uint32_t const ces[9] = { 0x05D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_466)
{
    // 21BA 003F;	
    // (↺) ANTICLOCKWISE OPEN CIRCLE ARROW	[05D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BA, 0x003F };
    uint32_t const ces[9] = { 0x05D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_467)
{
    // 21BA 0061;	
    // (↺) ANTICLOCKWISE OPEN CIRCLE ARROW	[05D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BA, 0x0061 };
    uint32_t const ces[9] = { 0x05D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_468)
{
    // 21BA 0041;	
    // (↺) ANTICLOCKWISE OPEN CIRCLE ARROW	[05D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21BA, 0x0041 };
    uint32_t const ces[9] = { 0x05D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_469)
{
    // 21BA 0062;	
    // (↺) ANTICLOCKWISE OPEN CIRCLE ARROW	[05D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BA, 0x0062 };
    uint32_t const ces[9] = { 0x05D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_470)
{
    // 21BB 0021;	
    // (↻) CLOCKWISE OPEN CIRCLE ARROW	[05DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BB, 0x0021 };
    uint32_t const ces[9] = { 0x05DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_471)
{
    // 21BB 003F;	
    // (↻) CLOCKWISE OPEN CIRCLE ARROW	[05DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BB, 0x003F };
    uint32_t const ces[9] = { 0x05DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_472)
{
    // 21BB 0061;	
    // (↻) CLOCKWISE OPEN CIRCLE ARROW	[05DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BB, 0x0061 };
    uint32_t const ces[9] = { 0x05DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_473)
{
    // 21BB 0041;	
    // (↻) CLOCKWISE OPEN CIRCLE ARROW	[05DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21BB, 0x0041 };
    uint32_t const ces[9] = { 0x05DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_474)
{
    // 21BB 0062;	
    // (↻) CLOCKWISE OPEN CIRCLE ARROW	[05DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BB, 0x0062 };
    uint32_t const ces[9] = { 0x05DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_475)
{
    // 21BC 0021;	
    // (↼) LEFTWARDS HARPOON WITH BARB UPWARDS	[05DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BC, 0x0021 };
    uint32_t const ces[9] = { 0x05DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_476)
{
    // 21BC 003F;	
    // (↼) LEFTWARDS HARPOON WITH BARB UPWARDS	[05DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BC, 0x003F };
    uint32_t const ces[9] = { 0x05DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_477)
{
    // 21BC 0061;	
    // (↼) LEFTWARDS HARPOON WITH BARB UPWARDS	[05DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BC, 0x0061 };
    uint32_t const ces[9] = { 0x05DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_478)
{
    // 21BC 0041;	
    // (↼) LEFTWARDS HARPOON WITH BARB UPWARDS	[05DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21BC, 0x0041 };
    uint32_t const ces[9] = { 0x05DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_479)
{
    // 21BC 0062;	
    // (↼) LEFTWARDS HARPOON WITH BARB UPWARDS	[05DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BC, 0x0062 };
    uint32_t const ces[9] = { 0x05DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_480)
{
    // 21BD 0021;	
    // (↽) LEFTWARDS HARPOON WITH BARB DOWNWARDS	[05DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BD, 0x0021 };
    uint32_t const ces[9] = { 0x05DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_481)
{
    // 21BD 003F;	
    // (↽) LEFTWARDS HARPOON WITH BARB DOWNWARDS	[05DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BD, 0x003F };
    uint32_t const ces[9] = { 0x05DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_482)
{
    // 21BD 0061;	
    // (↽) LEFTWARDS HARPOON WITH BARB DOWNWARDS	[05DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BD, 0x0061 };
    uint32_t const ces[9] = { 0x05DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_483)
{
    // 21BD 0041;	
    // (↽) LEFTWARDS HARPOON WITH BARB DOWNWARDS	[05DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21BD, 0x0041 };
    uint32_t const ces[9] = { 0x05DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_484)
{
    // 21BD 0062;	
    // (↽) LEFTWARDS HARPOON WITH BARB DOWNWARDS	[05DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BD, 0x0062 };
    uint32_t const ces[9] = { 0x05DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_485)
{
    // 21BE 0021;	
    // (↾) UPWARDS HARPOON WITH BARB RIGHTWARDS	[05DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BE, 0x0021 };
    uint32_t const ces[9] = { 0x05DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_486)
{
    // 21BE 003F;	
    // (↾) UPWARDS HARPOON WITH BARB RIGHTWARDS	[05DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BE, 0x003F };
    uint32_t const ces[9] = { 0x05DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_487)
{
    // 21BE 0061;	
    // (↾) UPWARDS HARPOON WITH BARB RIGHTWARDS	[05DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BE, 0x0061 };
    uint32_t const ces[9] = { 0x05DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_488)
{
    // 21BE 0041;	
    // (↾) UPWARDS HARPOON WITH BARB RIGHTWARDS	[05DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21BE, 0x0041 };
    uint32_t const ces[9] = { 0x05DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_489)
{
    // 21BE 0062;	
    // (↾) UPWARDS HARPOON WITH BARB RIGHTWARDS	[05DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BE, 0x0062 };
    uint32_t const ces[9] = { 0x05DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_490)
{
    // 21BF 0021;	
    // (↿) UPWARDS HARPOON WITH BARB LEFTWARDS	[05DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BF, 0x0021 };
    uint32_t const ces[9] = { 0x05DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_491)
{
    // 21BF 003F;	
    // (↿) UPWARDS HARPOON WITH BARB LEFTWARDS	[05DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BF, 0x003F };
    uint32_t const ces[9] = { 0x05DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_492)
{
    // 21BF 0061;	
    // (↿) UPWARDS HARPOON WITH BARB LEFTWARDS	[05DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BF, 0x0061 };
    uint32_t const ces[9] = { 0x05DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_493)
{
    // 21BF 0041;	
    // (↿) UPWARDS HARPOON WITH BARB LEFTWARDS	[05DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21BF, 0x0041 };
    uint32_t const ces[9] = { 0x05DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_494)
{
    // 21BF 0062;	
    // (↿) UPWARDS HARPOON WITH BARB LEFTWARDS	[05DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21BF, 0x0062 };
    uint32_t const ces[9] = { 0x05DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_495)
{
    // 21C0 0021;	
    // (⇀) RIGHTWARDS HARPOON WITH BARB UPWARDS	[05DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C0, 0x0021 };
    uint32_t const ces[9] = { 0x05DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_496)
{
    // 21C0 003F;	
    // (⇀) RIGHTWARDS HARPOON WITH BARB UPWARDS	[05DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C0, 0x003F };
    uint32_t const ces[9] = { 0x05DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_497)
{
    // 21C0 0061;	
    // (⇀) RIGHTWARDS HARPOON WITH BARB UPWARDS	[05DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C0, 0x0061 };
    uint32_t const ces[9] = { 0x05DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_498)
{
    // 21C0 0041;	
    // (⇀) RIGHTWARDS HARPOON WITH BARB UPWARDS	[05DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x21C0, 0x0041 };
    uint32_t const ces[9] = { 0x05DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_020_499)
{
    // 21C0 0062;	
    // (⇀) RIGHTWARDS HARPOON WITH BARB UPWARDS	[05DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x21C0, 0x0062 };
    uint32_t const ces[9] = { 0x05DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

