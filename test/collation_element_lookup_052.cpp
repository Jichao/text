// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_052_000)
{
    // 1FFC  ; [.2047.0020.0008][.0000.004C.0002] 
    // GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI

    uint32_t const cps[1] = { 0x1ffc };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x8)}, {uint16_t(0x0), uint8_t(0x2c), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_052_001)
{
    // 1FFD  ; [*0499.0020.0002] 
    // GREEK OXIA

    uint32_t const cps[1] = { 0x1ffd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x499), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_002)
{
    // 1FFE  ; [*04A5.0020.0002] 
    // GREEK DASIA

    uint32_t const cps[1] = { 0x1ffe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_003)
{
    // 2000  ; [*0209.0020.0004] 
    // EN QUAD

    uint32_t const cps[1] = { 0x2000 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x209), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_004)
{
    // 2001  ; [*0209.0020.0004] 
    // EM QUAD

    uint32_t const cps[1] = { 0x2001 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x209), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_005)
{
    // 2002  ; [*0209.0020.0004] 
    // EN SPACE

    uint32_t const cps[1] = { 0x2002 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x209), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_006)
{
    // 2003  ; [*0209.0020.0004] 
    // EM SPACE

    uint32_t const cps[1] = { 0x2003 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x209), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_007)
{
    // 2004  ; [*0209.0020.0004] 
    // THREE-PER-EM SPACE

    uint32_t const cps[1] = { 0x2004 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x209), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_008)
{
    // 2005  ; [*0209.0020.0004] 
    // FOUR-PER-EM SPACE

    uint32_t const cps[1] = { 0x2005 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x209), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_009)
{
    // 2006  ; [*0209.0020.0004] 
    // SIX-PER-EM SPACE

    uint32_t const cps[1] = { 0x2006 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x209), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_010)
{
    // 2007  ; [*0209.0020.001B] 
    // FIGURE SPACE

    uint32_t const cps[1] = { 0x2007 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x209), uint8_t(0x0), uint8_t(0x1b)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_011)
{
    // 2008  ; [*0209.0020.0004] 
    // PUNCTUATION SPACE

    uint32_t const cps[1] = { 0x2008 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x209), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_012)
{
    // 2009  ; [*0209.0020.0004] 
    // THIN SPACE

    uint32_t const cps[1] = { 0x2009 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x209), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_013)
{
    // 200A  ; [*0209.0020.0004] 
    // HAIR SPACE

    uint32_t const cps[1] = { 0x200a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x209), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_014)
{
    // 200B  ; [.0000.0000.0000] 
    // ZERO WIDTH SPACE

    uint32_t const cps[1] = { 0x200b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_015)
{
    // 200C  ; [.0000.0000.0000] 
    // ZERO WIDTH NON-JOINER

    uint32_t const cps[1] = { 0x200c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_016)
{
    // 200D  ; [.0000.0000.0000] 
    // ZERO WIDTH JOINER

    uint32_t const cps[1] = { 0x200d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_017)
{
    // 200E  ; [.0000.0000.0000] 
    // LEFT-TO-RIGHT MARK

    uint32_t const cps[1] = { 0x200e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_018)
{
    // 200F  ; [.0000.0000.0000] 
    // RIGHT-TO-LEFT MARK

    uint32_t const cps[1] = { 0x200f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_019)
{
    // 2010  ; [*0213.0020.0002] 
    // HYPHEN

    uint32_t const cps[1] = { 0x2010 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x213), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_020)
{
    // 2011  ; [*0213.0020.001B] 
    // NON-BREAKING HYPHEN

    uint32_t const cps[1] = { 0x2011 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x213), uint8_t(0x0), uint8_t(0x1b)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_021)
{
    // 2012  ; [*0214.0020.0002] 
    // FIGURE DASH

    uint32_t const cps[1] = { 0x2012 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x214), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_022)
{
    // 2013  ; [*0215.0020.0002] 
    // EN DASH

    uint32_t const cps[1] = { 0x2013 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x215), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_023)
{
    // 2014  ; [*0216.0020.0002] 
    // EM DASH

    uint32_t const cps[1] = { 0x2014 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x216), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_024)
{
    // 2015  ; [*0217.0020.0002] 
    // HORIZONTAL BAR

    uint32_t const cps[1] = { 0x2015 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x217), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_025)
{
    // 2016  ; [*0384.0020.0002] 
    // DOUBLE VERTICAL LINE

    uint32_t const cps[1] = { 0x2016 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x384), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_026)
{
    // 2017  ; [*020C.0020.0002] 
    // DOUBLE LOW LINE

    uint32_t const cps[1] = { 0x2017 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_027)
{
    // 2018  ; [*0307.0020.0002] 
    // LEFT SINGLE QUOTATION MARK

    uint32_t const cps[1] = { 0x2018 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x307), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_028)
{
    // 2019  ; [*0308.0020.0002] 
    // RIGHT SINGLE QUOTATION MARK

    uint32_t const cps[1] = { 0x2019 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x308), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_029)
{
    // 201A  ; [*0309.0020.0002] 
    // SINGLE LOW-9 QUOTATION MARK

    uint32_t const cps[1] = { 0x201a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x309), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_030)
{
    // 201B  ; [*030A.0020.0002] 
    // SINGLE HIGH-REVERSED-9 QUOTATION MARK

    uint32_t const cps[1] = { 0x201b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_031)
{
    // 201C  ; [*030E.0020.0002] 
    // LEFT DOUBLE QUOTATION MARK

    uint32_t const cps[1] = { 0x201c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_032)
{
    // 201D  ; [*030F.0020.0002] 
    // RIGHT DOUBLE QUOTATION MARK

    uint32_t const cps[1] = { 0x201d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_033)
{
    // 201E  ; [*0310.0020.0002] 
    // DOUBLE LOW-9 QUOTATION MARK

    uint32_t const cps[1] = { 0x201e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x310), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_034)
{
    // 201F  ; [*0311.0020.0002] 
    // DOUBLE HIGH-REVERSED-9 QUOTATION MARK

    uint32_t const cps[1] = { 0x201f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x311), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_035)
{
    // 2020  ; [*03A0.0020.0002] 
    // DAGGER

    uint32_t const cps[1] = { 0x2020 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_036)
{
    // 2021  ; [*03A1.0020.0002] 
    // DOUBLE DAGGER

    uint32_t const cps[1] = { 0x2021 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_037)
{
    // 2022  ; [*03A5.0020.0002] 
    // BULLET

    uint32_t const cps[1] = { 0x2022 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_038)
{
    // 2023  ; [*03A6.0020.0002] 
    // TRIANGULAR BULLET

    uint32_t const cps[1] = { 0x2023 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_039)
{
    // 2024  ; [*0278.0020.0004] 
    // ONE DOT LEADER

    uint32_t const cps[1] = { 0x2024 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_040)
{
    // 2025  ; [*0278.0020.0004][*0278.0020.0004] 
    // TWO DOT LEADER

    uint32_t const cps[1] = { 0x2025 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_052_041)
{
    // 2026  ; [*0278.0020.0004][*0278.0020.0004][*0278.0020.0004] 
    // HORIZONTAL ELLIPSIS

    uint32_t const cps[1] = { 0x2026 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_052_042)
{
    // 2027  ; [*03A7.0020.0002] 
    // HYPHENATION POINT

    uint32_t const cps[1] = { 0x2027 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_043)
{
    // 2028  ; [*0207.0020.0002] 
    // LINE SEPARATOR

    uint32_t const cps[1] = { 0x2028 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x207), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_044)
{
    // 2029  ; [*0208.0020.0002] 
    // PARAGRAPH SEPARATOR

    uint32_t const cps[1] = { 0x2029 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x208), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_045)
{
    // 202A  ; [.0000.0000.0000] 
    // LEFT-TO-RIGHT EMBEDDING

    uint32_t const cps[1] = { 0x202a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_046)
{
    // 202B  ; [.0000.0000.0000] 
    // RIGHT-TO-LEFT EMBEDDING

    uint32_t const cps[1] = { 0x202b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_047)
{
    // 202C  ; [.0000.0000.0000] 
    // POP DIRECTIONAL FORMATTING

    uint32_t const cps[1] = { 0x202c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_048)
{
    // 202D  ; [.0000.0000.0000] 
    // LEFT-TO-RIGHT OVERRIDE

    uint32_t const cps[1] = { 0x202d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_049)
{
    // 202E  ; [.0000.0000.0000] 
    // RIGHT-TO-LEFT OVERRIDE

    uint32_t const cps[1] = { 0x202e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_050)
{
    // 202F  ; [*0209.0020.001B] 
    // NARROW NO-BREAK SPACE

    uint32_t const cps[1] = { 0x202f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x209), uint8_t(0x0), uint8_t(0x1b)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_051)
{
    // 2030  ; [*039C.0020.0002] 
    // PER MILLE SIGN

    uint32_t const cps[1] = { 0x2030 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x39c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_052)
{
    // 2031  ; [*039E.0020.0002] 
    // PER TEN THOUSAND SIGN

    uint32_t const cps[1] = { 0x2031 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x39e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_053)
{
    // 2032  ; [*03AB.0020.0002] 
    // PRIME

    uint32_t const cps[1] = { 0x2032 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3ab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_054)
{
    // 2033  ; [*03AB.0020.0004][*03AB.0020.0004] 
    // DOUBLE PRIME

    uint32_t const cps[1] = { 0x2033 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x3ab), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3ab), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_052_055)
{
    // 2034  ; [*03AB.0020.0004][*03AB.0020.0004][*03AB.0020.0004] 
    // TRIPLE PRIME

    uint32_t const cps[1] = { 0x2034 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x3ab), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3ab), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3ab), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_052_056)
{
    // 2035  ; [*03AC.0020.0002] 
    // REVERSED PRIME

    uint32_t const cps[1] = { 0x2035 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3ac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_057)
{
    // 2036  ; [*03AC.0020.0004][*03AC.0020.0004] 
    // REVERSED DOUBLE PRIME

    uint32_t const cps[1] = { 0x2036 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x3ac), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3ac), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_052_058)
{
    // 2037  ; [*03AC.0020.0004][*03AC.0020.0004][*03AC.0020.0004] 
    // REVERSED TRIPLE PRIME

    uint32_t const cps[1] = { 0x2037 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x3ac), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3ac), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3ac), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_052_059)
{
    // 2038  ; [*03AF.0020.0002] 
    // CARET

    uint32_t const cps[1] = { 0x2038 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3af), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_060)
{
    // 2039  ; [*030B.0020.0002] 
    // SINGLE LEFT-POINTING ANGLE QUOTATION MARK

    uint32_t const cps[1] = { 0x2039 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_061)
{
    // 203A  ; [*030C.0020.0002] 
    // SINGLE RIGHT-POINTING ANGLE QUOTATION MARK

    uint32_t const cps[1] = { 0x203a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x30c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_062)
{
    // 203B  ; [*03B0.0020.0002] 
    // REFERENCE MARK

    uint32_t const cps[1] = { 0x203b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3b0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_063)
{
    // 203C  ; [*0261.0020.0004][*0261.0020.0004] 
    // DOUBLE EXCLAMATION MARK

    uint32_t const cps[1] = { 0x203c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x261), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x261), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_052_064)
{
    // 203D  ; [*0276.0020.0002] 
    // INTERROBANG

    uint32_t const cps[1] = { 0x203d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x276), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_065)
{
    // 203E  ; [*020A.0020.0002] 
    // OVERLINE

    uint32_t const cps[1] = { 0x203e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_066)
{
    // 203F  ; [*03B1.0020.0002] 
    // UNDERTIE

    uint32_t const cps[1] = { 0x203f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3b1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_067)
{
    // 2040  ; [*03B3.0020.0002] 
    // CHARACTER TIE

    uint32_t const cps[1] = { 0x2040 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3b3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_068)
{
    // 2041  ; [*03B5.0020.0002] 
    // CARET INSERTION POINT

    uint32_t const cps[1] = { 0x2041 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3b5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_069)
{
    // 2042  ; [*03B6.0020.0002] 
    // ASTERISM

    uint32_t const cps[1] = { 0x2042 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3b6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_070)
{
    // 2043  ; [*03A8.0020.0002] 
    // HYPHEN BULLET

    uint32_t const cps[1] = { 0x2043 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_071)
{
    // 2044  ; [*063C.0020.0002] 
    // FRACTION SLASH

    uint32_t const cps[1] = { 0x2044 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x63c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_072)
{
    // 2045  ; [*0324.0020.0002] 
    // LEFT SQUARE BRACKET WITH QUILL

    uint32_t const cps[1] = { 0x2045 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x324), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_073)
{
    // 2046  ; [*0325.0020.0002] 
    // RIGHT SQUARE BRACKET WITH QUILL

    uint32_t const cps[1] = { 0x2046 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x325), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_074)
{
    // 2047  ; [*0267.0020.0004][*0267.0020.0004] 
    // DOUBLE QUESTION MARK

    uint32_t const cps[1] = { 0x2047 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x267), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x267), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_052_075)
{
    // 2048  ; [*0267.0020.0004][*0261.0020.0004] 
    // QUESTION EXCLAMATION MARK

    uint32_t const cps[1] = { 0x2048 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x267), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x261), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_052_076)
{
    // 2049  ; [*0261.0020.0004][*0267.0020.0004] 
    // EXCLAMATION QUESTION MARK

    uint32_t const cps[1] = { 0x2049 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x261), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x267), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_052_077)
{
    // 204A  ; [*0398.0020.0002] 
    // TIRONIAN SIGN ET

    uint32_t const cps[1] = { 0x204a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x398), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_078)
{
    // 204B  ; [*038D.0020.0002] 
    // REVERSED PILCROW SIGN

    uint32_t const cps[1] = { 0x204b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_079)
{
    // 204C  ; [*03A9.0020.0002] 
    // BLACK LEFTWARDS BULLET

    uint32_t const cps[1] = { 0x204c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_080)
{
    // 204D  ; [*03AA.0020.0002] 
    // BLACK RIGHTWARDS BULLET

    uint32_t const cps[1] = { 0x204d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_081)
{
    // 204E  ; [*0391.0020.0002] 
    // LOW ASTERISK

    uint32_t const cps[1] = { 0x204e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x391), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_082)
{
    // 204F  ; [*0236.0020.0002] 
    // REVERSED SEMICOLON

    uint32_t const cps[1] = { 0x204f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x236), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_083)
{
    // 2050  ; [*03B4.0020.0002] 
    // CLOSE UP

    uint32_t const cps[1] = { 0x2050 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3b4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_084)
{
    // 2051  ; [*0392.0020.0002] 
    // TWO ASTERISKS ALIGNED VERTICALLY

    uint32_t const cps[1] = { 0x2051 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x392), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_085)
{
    // 2052  ; [*0638.0020.0002] 
    // COMMERCIAL MINUS SIGN

    uint32_t const cps[1] = { 0x2052 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x638), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_086)
{
    // 2053  ; [*021A.0020.0002] 
    // SWUNG DASH

    uint32_t const cps[1] = { 0x2053 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x21a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_087)
{
    // 2054  ; [*03B2.0020.0002] 
    // INVERTED UNDERTIE

    uint32_t const cps[1] = { 0x2054 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3b2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_088)
{
    // 2055  ; [*02E9.0020.0002] 
    // FLOWER PUNCTUATION MARK

    uint32_t const cps[1] = { 0x2055 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_089)
{
    // 2056  ; [*02EA.0020.0002] 
    // THREE DOT PUNCTUATION

    uint32_t const cps[1] = { 0x2056 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_090)
{
    // 2057  ; [*03AB.0020.0004][*03AB.0020.0004][*03AB.0020.0004][*03AB.0020.0004] 
    // QUADRUPLE PRIME

    uint32_t const cps[1] = { 0x2057 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x3ab), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3ab), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3ab), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3ab), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_052_091)
{
    // 2058  ; [*02EB.0020.0002] 
    // FOUR DOT PUNCTUATION

    uint32_t const cps[1] = { 0x2058 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_092)
{
    // 2059  ; [*02EC.0020.0002] 
    // FIVE DOT PUNCTUATION

    uint32_t const cps[1] = { 0x2059 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_093)
{
    // 205A  ; [*02ED.0020.0002] 
    // TWO DOT PUNCTUATION

    uint32_t const cps[1] = { 0x205a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_094)
{
    // 205B  ; [*02EE.0020.0002] 
    // FOUR DOT MARK

    uint32_t const cps[1] = { 0x205b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_095)
{
    // 205C  ; [*02EF.0020.0002] 
    // DOTTED CROSS

    uint32_t const cps[1] = { 0x205c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_096)
{
    // 205D  ; [*02F0.0020.0002] 
    // TRICOLON

    uint32_t const cps[1] = { 0x205d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_097)
{
    // 205E  ; [*02F1.0020.0002] 
    // VERTICAL FOUR DOTS

    uint32_t const cps[1] = { 0x205e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_098)
{
    // 205F  ; [*0209.0020.0004] 
    // MEDIUM MATHEMATICAL SPACE

    uint32_t const cps[1] = { 0x205f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x209), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_099)
{
    // 2060  ; [.0000.0000.0000] 
    // WORD JOINER

    uint32_t const cps[1] = { 0x2060 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_100)
{
    // 2061  ; [.0000.0000.0000] 
    // FUNCTION APPLICATION

    uint32_t const cps[1] = { 0x2061 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_101)
{
    // 2062  ; [.0000.0000.0000] 
    // INVISIBLE TIMES

    uint32_t const cps[1] = { 0x2062 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_102)
{
    // 2063  ; [.0000.0000.0000] 
    // INVISIBLE SEPARATOR

    uint32_t const cps[1] = { 0x2063 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_103)
{
    // 2064  ; [.0000.0000.0000] 
    // INVISIBLE PLUS

    uint32_t const cps[1] = { 0x2064 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_104)
{
    // 2066  ; [.0000.0000.0000] 
    // LEFT-TO-RIGHT ISOLATE

    uint32_t const cps[1] = { 0x2066 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_105)
{
    // 2067  ; [.0000.0000.0000] 
    // RIGHT-TO-LEFT ISOLATE

    uint32_t const cps[1] = { 0x2067 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_106)
{
    // 2068  ; [.0000.0000.0000] 
    // FIRST STRONG ISOLATE

    uint32_t const cps[1] = { 0x2068 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_107)
{
    // 2069  ; [.0000.0000.0000] 
    // POP DIRECTIONAL ISOLATE

    uint32_t const cps[1] = { 0x2069 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_108)
{
    // 206A  ; [.0000.0000.0000] 
    // INHIBIT SYMMETRIC SWAPPING

    uint32_t const cps[1] = { 0x206a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_109)
{
    // 206B  ; [.0000.0000.0000] 
    // ACTIVATE SYMMETRIC SWAPPING

    uint32_t const cps[1] = { 0x206b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_110)
{
    // 206C  ; [.0000.0000.0000] 
    // INHIBIT ARABIC FORM SHAPING

    uint32_t const cps[1] = { 0x206c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_111)
{
    // 206D  ; [.0000.0000.0000] 
    // ACTIVATE ARABIC FORM SHAPING

    uint32_t const cps[1] = { 0x206d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_112)
{
    // 206E  ; [.0000.0000.0000] 
    // NATIONAL DIGIT SHAPES

    uint32_t const cps[1] = { 0x206e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_113)
{
    // 206F  ; [.0000.0000.0000] 
    // NOMINAL DIGIT SHAPES

    uint32_t const cps[1] = { 0x206f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_114)
{
    // 2070  ; [.1CA3.0020.0014] 
    // SUPERSCRIPT ZERO

    uint32_t const cps[1] = { 0x2070 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_115)
{
    // 2071  ; [.1D98.0020.0014] 
    // SUPERSCRIPT LATIN SMALL LETTER I

    uint32_t const cps[1] = { 0x2071 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_116)
{
    // 2074  ; [.1CA7.0020.0014] 
    // SUPERSCRIPT FOUR

    uint32_t const cps[1] = { 0x2074 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_117)
{
    // 2075  ; [.1CA8.0020.0014] 
    // SUPERSCRIPT FIVE

    uint32_t const cps[1] = { 0x2075 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_118)
{
    // 2076  ; [.1CA9.0020.0014] 
    // SUPERSCRIPT SIX

    uint32_t const cps[1] = { 0x2076 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_119)
{
    // 2077  ; [.1CAA.0020.0014] 
    // SUPERSCRIPT SEVEN

    uint32_t const cps[1] = { 0x2077 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_120)
{
    // 2078  ; [.1CAB.0020.0014] 
    // SUPERSCRIPT EIGHT

    uint32_t const cps[1] = { 0x2078 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_121)
{
    // 2079  ; [.1CAC.0020.0014] 
    // SUPERSCRIPT NINE

    uint32_t const cps[1] = { 0x2079 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_122)
{
    // 207A  ; [*062C.0020.0014] 
    // SUPERSCRIPT PLUS SIGN

    uint32_t const cps[1] = { 0x207a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x62c), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_123)
{
    // 207B  ; [*0637.0020.0014] 
    // SUPERSCRIPT MINUS

    uint32_t const cps[1] = { 0x207b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x637), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_124)
{
    // 207C  ; [*0631.0020.0014] 
    // SUPERSCRIPT EQUALS SIGN

    uint32_t const cps[1] = { 0x207c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x631), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_125)
{
    // 207D  ; [*0318.0020.0014] 
    // SUPERSCRIPT LEFT PARENTHESIS

    uint32_t const cps[1] = { 0x207d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_126)
{
    // 207E  ; [*0319.0020.0014] 
    // SUPERSCRIPT RIGHT PARENTHESIS

    uint32_t const cps[1] = { 0x207e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x319), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_127)
{
    // 207F  ; [.1E1F.0020.0014] 
    // SUPERSCRIPT LATIN SMALL LETTER N

    uint32_t const cps[1] = { 0x207f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_128)
{
    // 2080  ; [.1CA3.0020.0015] 
    // SUBSCRIPT ZERO

    uint32_t const cps[1] = { 0x2080 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_129)
{
    // 2081  ; [.1CA4.0020.0015] 
    // SUBSCRIPT ONE

    uint32_t const cps[1] = { 0x2081 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_130)
{
    // 2082  ; [.1CA5.0020.0015] 
    // SUBSCRIPT TWO

    uint32_t const cps[1] = { 0x2082 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_131)
{
    // 2083  ; [.1CA6.0020.0015] 
    // SUBSCRIPT THREE

    uint32_t const cps[1] = { 0x2083 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_132)
{
    // 2084  ; [.1CA7.0020.0015] 
    // SUBSCRIPT FOUR

    uint32_t const cps[1] = { 0x2084 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_133)
{
    // 2085  ; [.1CA8.0020.0015] 
    // SUBSCRIPT FIVE

    uint32_t const cps[1] = { 0x2085 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_134)
{
    // 2086  ; [.1CA9.0020.0015] 
    // SUBSCRIPT SIX

    uint32_t const cps[1] = { 0x2086 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_135)
{
    // 2087  ; [.1CAA.0020.0015] 
    // SUBSCRIPT SEVEN

    uint32_t const cps[1] = { 0x2087 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_136)
{
    // 2088  ; [.1CAB.0020.0015] 
    // SUBSCRIPT EIGHT

    uint32_t const cps[1] = { 0x2088 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_137)
{
    // 2089  ; [.1CAC.0020.0015] 
    // SUBSCRIPT NINE

    uint32_t const cps[1] = { 0x2089 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_138)
{
    // 208A  ; [*062C.0020.0015] 
    // SUBSCRIPT PLUS SIGN

    uint32_t const cps[1] = { 0x208a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x62c), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_139)
{
    // 208B  ; [*0637.0020.0015] 
    // SUBSCRIPT MINUS

    uint32_t const cps[1] = { 0x208b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x637), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_140)
{
    // 208C  ; [*0631.0020.0015] 
    // SUBSCRIPT EQUALS SIGN

    uint32_t const cps[1] = { 0x208c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x631), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_141)
{
    // 208D  ; [*0318.0020.0015] 
    // SUBSCRIPT LEFT PARENTHESIS

    uint32_t const cps[1] = { 0x208d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_142)
{
    // 208E  ; [*0319.0020.0015] 
    // SUBSCRIPT RIGHT PARENTHESIS

    uint32_t const cps[1] = { 0x208e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x319), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_143)
{
    // 2090  ; [.1CAD.0020.0015] 
    // LATIN SUBSCRIPT SMALL LETTER A

    uint32_t const cps[1] = { 0x2090 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_144)
{
    // 2091  ; [.1D10.0020.0015] 
    // LATIN SUBSCRIPT SMALL LETTER E

    uint32_t const cps[1] = { 0x2091 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_145)
{
    // 2092  ; [.1E43.0020.0015] 
    // LATIN SUBSCRIPT SMALL LETTER O

    uint32_t const cps[1] = { 0x2092 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_146)
{
    // 2093  ; [.1F65.0020.0015] 
    // LATIN SUBSCRIPT SMALL LETTER X

    uint32_t const cps[1] = { 0x2093 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_147)
{
    // 2094  ; [.1D23.0020.0015] 
    // LATIN SUBSCRIPT SMALL LETTER SCHWA

    uint32_t const cps[1] = { 0x2094 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d23), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_148)
{
    // 2095  ; [.1D7E.0020.0015] 
    // LATIN SUBSCRIPT SMALL LETTER H

    uint32_t const cps[1] = { 0x2095 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_052_149)
{
    // 2096  ; [.1DCB.0020.0015] 
    // LATIN SUBSCRIPT SMALL LETTER K

    uint32_t const cps[1] = { 0x2096 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x15)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

