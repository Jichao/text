
// Warning! This file is autogenerated.
#include <boost/text/collation_tailoring.hpp>
#include <boost/text/collate.hpp>
#include <boost/text/data/all.hpp>

#include <gtest/gtest.h>

using namespace boost::text;

auto const error = [](string const & s) { std::cout << s; };
auto const warning = [](string const & s) {};

tailored_collation_element_table const & table()
{
    static tailored_collation_element_table retval =
        make_tailored_collation_element_table(
            data::und::emoji_collation_tailoring(),
            "und::emoji_collation_tailoring()", error, warning);
    return retval;
}
TEST(tailoring, und_emoji_000_001)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00b7),
        std::vector<uint32_t>(1, 0x1f3fb),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00b7),
        std::vector<uint32_t>(1, 0x1f3fb),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f3fb),
        std::vector<uint32_t>(1, 0x1f3fc),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f3fb),
        std::vector<uint32_t>(1, 0x1f3fc),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f3fc),
        std::vector<uint32_t>(1, 0x1f3fd),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f3fc),
        std::vector<uint32_t>(1, 0x1f3fd),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f3fd),
        std::vector<uint32_t>(1, 0x1f3fe),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f3fd),
        std::vector<uint32_t>(1, 0x1f3fe),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f3fe),
        std::vector<uint32_t>(1, 0x1f3ff),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f3fe),
        std::vector<uint32_t>(1, 0x1f3ff),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f600),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f600),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f600),
        std::vector<uint32_t>(1, 0x1f601),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f601),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f601),
        std::vector<uint32_t>(1, 0x1f602),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f602),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f602),
        std::vector<uint32_t>(1, 0x1f923),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f923),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f923),
        std::vector<uint32_t>(1, 0x1f603),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f603),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f603),
        std::vector<uint32_t>(1, 0x1f604),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f604),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f604),
        std::vector<uint32_t>(1, 0x1f605),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f605),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f605),
        std::vector<uint32_t>(1, 0x1f606),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f606),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f606),
        std::vector<uint32_t>(1, 0x1f609),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f609),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f609),
        std::vector<uint32_t>(1, 0x1f60a),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f60a),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f60a),
        std::vector<uint32_t>(1, 0x1f60b),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f60b),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f60b),
        std::vector<uint32_t>(1, 0x1f60e),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f60e),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f60e),
        std::vector<uint32_t>(1, 0x1f60d),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f60d),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f60d),
        std::vector<uint32_t>(1, 0x1f618),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f618),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f618),
        std::vector<uint32_t>(1, 0x1f617),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f617),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f617),
        std::vector<uint32_t>(1, 0x1f619),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f619),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f619),
        std::vector<uint32_t>(1, 0x1f61a),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f61a),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f61a),
        std::vector<uint32_t>(1, 0x263a),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x263a),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x263a),
        std::vector<uint32_t>(1, 0x1f642),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f642),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f642),
        std::vector<uint32_t>(1, 0x1f917),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f917),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f917),
        std::vector<uint32_t>(1, 0x1f929),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f929),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f929),
        std::vector<uint32_t>(1, 0x1f914),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f914),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f914),
        std::vector<uint32_t>(1, 0x1f928),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f928),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f928),
        std::vector<uint32_t>(1, 0x1f610),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f610),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f610),
        std::vector<uint32_t>(1, 0x1f611),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f611),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f611),
        std::vector<uint32_t>(1, 0x1f636),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f636),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f636),
        std::vector<uint32_t>(1, 0x1f644),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f644),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f644),
        std::vector<uint32_t>(1, 0x1f60f),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f60f),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f60f),
        std::vector<uint32_t>(1, 0x1f623),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f623),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f623),
        std::vector<uint32_t>(1, 0x1f625),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f625),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f625),
        std::vector<uint32_t>(1, 0x1f62e),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f62e),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f62e),
        std::vector<uint32_t>(1, 0x1f910),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f910),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f910),
        std::vector<uint32_t>(1, 0x1f62f),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f62f),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f62f),
        std::vector<uint32_t>(1, 0x1f62a),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f62a),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f62a),
        std::vector<uint32_t>(1, 0x1f62b),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f62b),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f62b),
        std::vector<uint32_t>(1, 0x1f634),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f634),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f634),
        std::vector<uint32_t>(1, 0x1f60c),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f60c),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f60c),
        std::vector<uint32_t>(1, 0x1f61b),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f61b),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f61b),
        std::vector<uint32_t>(1, 0x1f61c),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f61c),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f61c),
        std::vector<uint32_t>(1, 0x1f61d),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f61d),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f61d),
        std::vector<uint32_t>(1, 0x1f924),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f924),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f924),
        std::vector<uint32_t>(1, 0x1f612),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f612),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f612),
        std::vector<uint32_t>(1, 0x1f613),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f613),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f613),
        std::vector<uint32_t>(1, 0x1f614),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f614),
        table(), collation_strength::quaternary),
        1);
}

TEST(tailoring, und_emoji_000_002)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f614),
        std::vector<uint32_t>(1, 0x1f615),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f615),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f615),
        std::vector<uint32_t>(1, 0x1f643),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f643),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f643),
        std::vector<uint32_t>(1, 0x1f911),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f911),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f911),
        std::vector<uint32_t>(1, 0x1f632),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f632),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f632),
        std::vector<uint32_t>(1, 0x2639),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x2639),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x2639),
        std::vector<uint32_t>(1, 0x1f641),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f641),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f641),
        std::vector<uint32_t>(1, 0x1f616),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f616),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f616),
        std::vector<uint32_t>(1, 0x1f61e),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f61e),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f61e),
        std::vector<uint32_t>(1, 0x1f61f),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f61f),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f61f),
        std::vector<uint32_t>(1, 0x1f624),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f624),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f624),
        std::vector<uint32_t>(1, 0x1f622),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f622),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f622),
        std::vector<uint32_t>(1, 0x1f62d),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f62d),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f62d),
        std::vector<uint32_t>(1, 0x1f626),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f626),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f626),
        std::vector<uint32_t>(1, 0x1f627),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f627),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f627),
        std::vector<uint32_t>(1, 0x1f628),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f628),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f628),
        std::vector<uint32_t>(1, 0x1f629),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f629),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f629),
        std::vector<uint32_t>(1, 0x1f92f),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f92f),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f92f),
        std::vector<uint32_t>(1, 0x1f62c),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f62c),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f62c),
        std::vector<uint32_t>(1, 0x1f630),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f630),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f630),
        std::vector<uint32_t>(1, 0x1f631),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f631),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f631),
        std::vector<uint32_t>(1, 0x1f633),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f633),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f633),
        std::vector<uint32_t>(1, 0x1f92a),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f92a),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f92a),
        std::vector<uint32_t>(1, 0x1f635),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f635),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f635),
        std::vector<uint32_t>(1, 0x1f621),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f621),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f621),
        std::vector<uint32_t>(1, 0x1f620),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f620),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f620),
        std::vector<uint32_t>(1, 0x1f92c),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f92c),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f92c),
        std::vector<uint32_t>(1, 0x1f637),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f637),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f637),
        std::vector<uint32_t>(1, 0x1f912),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f912),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f912),
        std::vector<uint32_t>(1, 0x1f915),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f915),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f915),
        std::vector<uint32_t>(1, 0x1f922),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f922),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f922),
        std::vector<uint32_t>(1, 0x1f92e),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f92e),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f92e),
        std::vector<uint32_t>(1, 0x1f927),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f927),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f927),
        std::vector<uint32_t>(1, 0x1f607),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f607),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f607),
        std::vector<uint32_t>(1, 0x1f920),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f920),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f920),
        std::vector<uint32_t>(1, 0x1f921),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f921),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f921),
        std::vector<uint32_t>(1, 0x1f925),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f925),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f925),
        std::vector<uint32_t>(1, 0x1f92b),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f92b),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f92b),
        std::vector<uint32_t>(1, 0x1f92d),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f92d),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f92d),
        std::vector<uint32_t>(1, 0x1f9d0),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f9d0),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f9d0),
        std::vector<uint32_t>(1, 0x1f913),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f913),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f913),
        std::vector<uint32_t>(1, 0x1f608),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f608),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f608),
        std::vector<uint32_t>(1, 0x1f47f),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f47f),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f47f),
        std::vector<uint32_t>(1, 0x1f479),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f479),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f479),
        std::vector<uint32_t>(1, 0x1f47a),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f47a),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f47a),
        std::vector<uint32_t>(1, 0x1f480),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f480),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f480),
        std::vector<uint32_t>(1, 0x2620),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x2620),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x2620),
        std::vector<uint32_t>(1, 0x1f47b),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f47b),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f47b),
        std::vector<uint32_t>(1, 0x1f47d),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f47d),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f47d),
        std::vector<uint32_t>(1, 0x1f47e),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f47e),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f47e),
        std::vector<uint32_t>(1, 0x1f916),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f916),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f916),
        std::vector<uint32_t>(1, 0x1f4a9),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f4a9),
        table(), collation_strength::quaternary),
        1);
}

TEST(tailoring, und_emoji_000_003)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f4a9),
        std::vector<uint32_t>(1, 0x1f63a),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f63a),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f63a),
        std::vector<uint32_t>(1, 0x1f638),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f638),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f638),
        std::vector<uint32_t>(1, 0x1f639),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f639),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f639),
        std::vector<uint32_t>(1, 0x1f63b),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f63b),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f63b),
        std::vector<uint32_t>(1, 0x1f63c),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f63c),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f63c),
        std::vector<uint32_t>(1, 0x1f63d),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f63d),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f63d),
        std::vector<uint32_t>(1, 0x1f640),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f640),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f640),
        std::vector<uint32_t>(1, 0x1f63f),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f63f),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f63f),
        std::vector<uint32_t>(1, 0x1f63e),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f63e),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f63e),
        std::vector<uint32_t>(1, 0x1f648),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f648),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f648),
        std::vector<uint32_t>(1, 0x1f649),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f649),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f649),
        std::vector<uint32_t>(1, 0x1f64a),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f64a),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f64a),
        std::vector<uint32_t>(1, 0x1f476),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f476),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f476),
        std::vector<uint32_t>(1, 0x1f9d2),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f9d2),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f9d2),
        std::vector<uint32_t>(1, 0x1f466),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f466),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f466),
        std::vector<uint32_t>(1, 0x1f467),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f467),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f467),
        std::vector<uint32_t>(1, 0x1f9d1),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f9d1),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f9d1),
        std::vector<uint32_t>(1, 0x1f468),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f468),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f468),
        std::vector<uint32_t>(1, 0x1f469),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f469),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f469),
        std::vector<uint32_t>(1, 0x1f9d3),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f9d3),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f9d3),
        std::vector<uint32_t>(1, 0x1f474),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f474),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f474),
        std::vector<uint32_t>(1, 0x1f475),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f475),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f475),
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x2695},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x2695},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x2695},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x2695},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x2695},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x2695},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x2695},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x2695},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x2695},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x2695},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x2695},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x2695},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x2695},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x2695},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x2695},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x2695},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x2695},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f468, 0x200d, 0x2695},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x200d, 0x2695},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x2695},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x2695},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x2695},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x2695},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x2695},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x2695},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x2695},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x2695},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x2695},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x2695},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x2695},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x2695},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x2695},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x2695},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x2695},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f469, 0x200d, 0x2695},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x200d, 0x2695},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x2695},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x2695},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x2695},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x2695},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x2695},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x2695},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x2695},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x2695},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x2695},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x2695},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x2695},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x2695},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x2695},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x2695},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x2695},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x2695},
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f393},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f393},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f393},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f393},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f393},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f393},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f393},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f393},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f393},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f393},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f393},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f393},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f393},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f393},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f393},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f393},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f393},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f393},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f393},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f393},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f393},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f393},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f393},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f393},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f393},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f393},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f393},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f393},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f393},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f393},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f393},
        table(), collation_strength::quaternary),
        1);
}

TEST(tailoring, und_emoji_000_004)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f393},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f393},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f393},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f393},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f393},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f393},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f393},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f393},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f393},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f393},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f393},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f393},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f393},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f393},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f393},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f393},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f393},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f393},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f393},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f393},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f393},
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f3eb},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f3eb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f3eb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f3eb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f3eb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f3eb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f3eb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f3eb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f3eb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f3eb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f3eb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f3eb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f3eb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f3eb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f3eb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f3eb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f3eb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f3eb},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f3eb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f3eb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f3eb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f3eb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f3eb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f3eb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f3eb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f3eb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f3eb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f3eb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f3eb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f3eb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f3eb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f3eb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f3eb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f3eb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f3eb},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f3eb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f3eb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f3eb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f3eb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f3eb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f3eb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f3eb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f3eb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f3eb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f3eb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f3eb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f3eb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f3eb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f3eb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f3eb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f3eb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f3eb},
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x2696},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x2696},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x2696},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x2696},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x2696},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x2696},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x2696},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x2696},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x2696},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x2696},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x2696},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x2696},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x2696},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x2696},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x2696},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x2696},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x2696},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f468, 0x200d, 0x2696},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x200d, 0x2696},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x2696},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x2696},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x2696},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x2696},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x2696},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x2696},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x2696},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x2696},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x2696},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x2696},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x2696},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x2696},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x2696},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x2696},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x2696},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f469, 0x200d, 0x2696},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x200d, 0x2696},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x2696},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x2696},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x2696},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x2696},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x2696},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x2696},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x2696},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x2696},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x2696},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x2696},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x2696},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x2696},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x2696},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x2696},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x2696},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x2696},
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f33e},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f33e},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f33e},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f33e},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f33e},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f33e},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f33e},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f33e},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f33e},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f33e},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f33e},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f33e},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f33e},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f33e},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f33e},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f33e},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f33e},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f33e},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f33e},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f33e},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f33e},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f33e},
        table(), collation_strength::quaternary),
        1);
}

TEST(tailoring, und_emoji_000_005)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f33e},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f33e},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f33e},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f33e},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f33e},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f33e},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f33e},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f33e},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f33e},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f33e},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f33e},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f33e},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f33e},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f33e},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f33e},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f33e},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f33e},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f33e},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f33e},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f33e},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f33e},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f33e},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f33e},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f33e},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f33e},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f33e},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f33e},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f33e},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f33e},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f33e},
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f373},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f373},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f373},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f373},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f373},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f373},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f373},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f373},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f373},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f373},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f373},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f373},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f373},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f373},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f373},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f373},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f373},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f373},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f373},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f373},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f373},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f373},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f373},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f373},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f373},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f373},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f373},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f373},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f373},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f373},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f373},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f373},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f373},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f373},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f373},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f373},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f373},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f373},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f373},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f373},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f373},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f373},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f373},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f373},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f373},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f373},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f373},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f373},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f373},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f373},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f373},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f373},
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f527},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f527},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f527},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f527},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f527},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f527},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f527},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f527},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f527},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f527},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f527},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f527},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f527},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f527},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f527},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f527},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f527},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f527},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f527},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f527},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f527},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f527},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f527},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f527},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f527},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f527},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f527},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f527},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f527},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f527},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f527},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f527},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f527},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f527},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f527},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f527},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f527},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f527},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f527},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f527},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f527},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f527},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f527},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f527},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f527},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f527},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f527},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f527},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f527},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f527},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f527},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f527},
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f3ed},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f3ed},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f3ed},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f3ed},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f3ed},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f3ed},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f3ed},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f3ed},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f3ed},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f3ed},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f3ed},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f3ed},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f3ed},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f3ed},
        table(), collation_strength::quaternary),
        1);
}

TEST(tailoring, und_emoji_000_006)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f3ed},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f3ed},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f3ed},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f3ed},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f3ed},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f3ed},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f3ed},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f3ed},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f3ed},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f3ed},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f3ed},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f3ed},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f3ed},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f3ed},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f3ed},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f3ed},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f3ed},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f3ed},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f3ed},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f3ed},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f3ed},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f3ed},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f3ed},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f3ed},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f3ed},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f3ed},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f3ed},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f3ed},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f3ed},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f3ed},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f3ed},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f3ed},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f3ed},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f3ed},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f3ed},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f3ed},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f3ed},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f3ed},
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f4bc},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f4bc},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f4bc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f4bc},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f4bc},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f4bc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f4bc},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f4bc},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f4bc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f4bc},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f4bc},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f4bc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f4bc},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f4bc},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f4bc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f4bc},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f4bc},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f4bc},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f4bc},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f4bc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f4bc},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f4bc},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f4bc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f4bc},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f4bc},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f4bc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f4bc},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f4bc},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f4bc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f4bc},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f4bc},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f4bc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f4bc},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f4bc},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f4bc},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f4bc},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f4bc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f4bc},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f4bc},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f4bc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f4bc},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f4bc},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f4bc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f4bc},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f4bc},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f4bc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f4bc},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f4bc},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f4bc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f4bc},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f4bc},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f4bc},
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f52c},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f52c},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f52c},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f52c},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f52c},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f52c},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f52c},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f52c},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f52c},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f52c},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f52c},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f52c},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f52c},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f52c},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f52c},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f52c},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f52c},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f52c},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f52c},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f52c},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f52c},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f52c},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f52c},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f52c},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f52c},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f52c},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f52c},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f52c},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f52c},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f52c},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f52c},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f52c},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f52c},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f52c},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f52c},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f52c},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f52c},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f52c},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f52c},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f52c},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f52c},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f52c},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f52c},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f52c},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f52c},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f52c},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f52c},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f52c},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f52c},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f52c},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f52c},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f52c},
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f4bb},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f4bb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f4bb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f4bb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f4bb},
        table(), collation_strength::quaternary),
        1);
}

TEST(tailoring, und_emoji_000_007)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f4bb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f4bb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f4bb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f4bb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f4bb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f4bb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f4bb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f4bb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f4bb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f4bb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f4bb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f4bb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f4bb},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f4bb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f4bb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f4bb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f4bb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f4bb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f4bb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f4bb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f4bb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f4bb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f4bb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f4bb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f4bb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f4bb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f4bb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f4bb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f4bb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f4bb},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f4bb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f4bb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f4bb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f4bb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f4bb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f4bb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f4bb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f4bb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f4bb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f4bb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f4bb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f4bb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f4bb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f4bb},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f4bb},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f4bb},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f4bb},
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f3a4},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f3a4},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f3a4},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f3a4},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f3a4},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f3a4},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f3a4},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f3a4},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f3a4},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f3a4},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f3a4},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f3a4},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f3a4},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f3a4},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f3a4},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f3a4},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f3a4},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f3a4},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f3a4},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f3a4},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f3a4},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f3a4},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f3a4},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f3a4},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f3a4},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f3a4},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f3a4},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f3a4},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f3a4},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f3a4},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f3a4},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f3a4},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f3a4},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f3a4},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f3a4},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f3a4},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f3a4},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f3a4},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f3a4},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f3a4},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f3a4},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f3a4},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f3a4},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f3a4},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f3a4},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f3a4},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f3a4},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f3a4},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f3a4},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f3a4},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f3a4},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f3a4},
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f3a8},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f3a8},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f3a8},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f3a8},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f3a8},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f3a8},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f3a8},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f3a8},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f3a8},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f3a8},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f3a8},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f3a8},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f3a8},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f3a8},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f3a8},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f3a8},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f3a8},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f3a8},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f3a8},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f3a8},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f3a8},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f3a8},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f3a8},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f3a8},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f3a8},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f3a8},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f3a8},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f3a8},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f3a8},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f3a8},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f3a8},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f3a8},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f3a8},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f3a8},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f3a8},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f3a8},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f3a8},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f3a8},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f3a8},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f3a8},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f3a8},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f3a8},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f3a8},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f3a8},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f3a8},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f3a8},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f3a8},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f3a8},
        table(), collation_strength::quaternary),
        1);
}

TEST(tailoring, und_emoji_000_008)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f3a8},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f3a8},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f3a8},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f3a8},
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x2708},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x2708},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x2708},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x2708},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x2708},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x2708},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x2708},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x2708},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x2708},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x2708},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x2708},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x2708},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x2708},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x2708},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x2708},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x2708},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x2708},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f468, 0x200d, 0x2708},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x200d, 0x2708},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x2708},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x2708},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x2708},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x2708},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x2708},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x2708},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x2708},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x2708},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x2708},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x2708},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x2708},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x2708},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x2708},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x2708},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x2708},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f469, 0x200d, 0x2708},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x200d, 0x2708},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x2708},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x2708},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x2708},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x2708},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x2708},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x2708},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x2708},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x2708},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x2708},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x2708},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x2708},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x2708},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x2708},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x2708},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x2708},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x2708},
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f680},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f680},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f680},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f680},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f680},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f680},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f680},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f680},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f680},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f680},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f680},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f680},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f680},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f680},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f680},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f680},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f680},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f680},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f680},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f680},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f680},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f680},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f680},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f680},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f680},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f680},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f680},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f680},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f680},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f680},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f680},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f680},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f680},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f680},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f680},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f680},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f680},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f680},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f680},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f680},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f680},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f680},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f680},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f680},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f680},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f680},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f680},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f680},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f680},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f680},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f680},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f680},
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f692},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f692},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f692},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f692},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f692},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f692},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fb, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f692},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f692},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f692},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fc, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f692},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f692},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f692},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fd, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f692},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f692},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f692},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3fe, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f692},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f692},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d1, 0x1f3ff, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f692},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f692},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f692},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f692},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f692},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f692},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fb, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f692},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f692},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f692},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fc, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f692},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f692},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f692},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fd, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f692},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f692},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f692},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3fe, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f692},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f692},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f468, 0x1f3ff, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f692},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f692},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f692},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f692},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f692},
        table(), collation_strength::quaternary),
        1);
}

TEST(tailoring, und_emoji_000_009)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f692},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fb, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f692},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f692},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f692},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fc, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f692},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f692},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f692},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fd, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f692},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f692},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f692},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3fe, 0x200d, 0x1f692},
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f692},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f692},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f469, 0x1f3ff, 0x200d, 0x1f692},
        std::vector<uint32_t>(1, 0x1f46e),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f46e),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f46e),
        std::vector<uint32_t>{0x1f46e, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f46e, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f46e, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f46e, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f46e, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f46e, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f46e, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f46e, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f46e, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f46e, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f46e, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f46e, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f46e, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f46e, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f46e, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f46e, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f46e, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f46e, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f46e, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f46e, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f46e, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f46e, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f46e, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f46e, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f46e, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f46e, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f46e, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f46e, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f46e, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f46e, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f46e, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f46e, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f46e, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f46e, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46e, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f575),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f575),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f575),
        std::vector<uint32_t>{0x1f575, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f575, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f575, 0xfe0f, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f575, 0xfe0f, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0xfe0f, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f575, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0xfe0f, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f575, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f575, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f575, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f575, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f575, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f575, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f575, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f575, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f575, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f575, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f575, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f575, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f575, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f575, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f575, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f575, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f575, 0xfe0f, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f575, 0xfe0f, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0xfe0f, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f575, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0xfe0f, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f575, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f575, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f575, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f575, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f575, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f575, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f575, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f575, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f575, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f575, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f575, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f575, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f575, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f575, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f575, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f482),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f482),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f482),
        std::vector<uint32_t>{0x1f482, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f482, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f482, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f482, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f482, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f482, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f482, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f482, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f482, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f482, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f482, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f482, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f482, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f482, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f482, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f482, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f482, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f482, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f482, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f482, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f482, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f482, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f482, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f482, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f482, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f482, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f482, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f482, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f482, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f482, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f482, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f482, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f482, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f482, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f482, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f477),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f477),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f477),
        std::vector<uint32_t>{0x1f477, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f477, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f477, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f477, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f477, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f477, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f477, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f477, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f477, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f477, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f477, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f477, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f477, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f477, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
}

TEST(tailoring, und_emoji_000_010)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f477, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f477, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f477, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f477, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f477, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f477, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f477, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f477, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f477, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f477, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f477, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f477, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f477, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f477, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f477, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f477, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f477, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f477, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f477, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f477, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f477, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f934),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f934),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f934),
        std::vector<uint32_t>(1, 0x1f478),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f478),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f478),
        std::vector<uint32_t>(1, 0x1f473),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f473),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f473),
        std::vector<uint32_t>{0x1f473, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f473, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f473, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f473, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f473, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f473, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f473, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f473, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f473, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f473, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f473, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f473, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f473, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f473, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f473, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f473, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f473, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f473, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f473, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f473, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f473, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f473, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f473, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f473, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f473, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f473, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f473, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f473, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f473, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f473, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f473, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f473, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f473, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f473, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f473, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f472),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f472),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f472),
        std::vector<uint32_t>(1, 0x1f9d5),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f9d5),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f9d5),
        std::vector<uint32_t>(1, 0x1f9d4),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f9d4),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f9d4),
        std::vector<uint32_t>(1, 0x1f471),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f471),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f471),
        std::vector<uint32_t>{0x1f471, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f471, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f471, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f471, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f471, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f471, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f471, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f471, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f471, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f471, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f471, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f471, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f471, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f471, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f471, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f471, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f471, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f471, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f471, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f471, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f471, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f471, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f471, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f471, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f471, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f471, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f471, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f471, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f471, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f471, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f471, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f471, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f471, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f471, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f471, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f935),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f935),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f935),
        std::vector<uint32_t>(1, 0x1f470),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f470),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f470),
        std::vector<uint32_t>(1, 0x1f930),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f930),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f930),
        std::vector<uint32_t>(1, 0x1f931),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f931),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f931),
        std::vector<uint32_t>(1, 0x1f47c),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f47c),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f47c),
        std::vector<uint32_t>(1, 0x1f385),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f385),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f385),
        std::vector<uint32_t>(1, 0x1f936),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f936),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f936),
        std::vector<uint32_t>(1, 0x1f9d9),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f9d9),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f9d9),
        std::vector<uint32_t>{0x1f9d9, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d9, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d9, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d9, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d9, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d9, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d9, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d9, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d9, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d9, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d9, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d9, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d9, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d9, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
}

TEST(tailoring, und_emoji_000_011)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d9, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d9, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d9, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d9, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d9, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d9, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d9, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d9, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d9, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d9, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d9, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d9, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d9, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d9, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d9, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d9, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d9, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d9, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d9, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d9, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d9, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>(1, 0x1f9da),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f9da),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f9da),
        std::vector<uint32_t>{0x1f9da, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9da, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9da, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9da, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9da, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9da, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9da, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9da, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9da, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9da, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9da, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9da, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9da, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9da, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9da, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9da, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9da, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9da, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9da, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9da, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9da, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9da, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9da, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9da, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9da, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9da, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9da, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9da, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9da, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9da, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9da, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9da, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9da, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9da, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9da, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>(1, 0x1f9db),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f9db),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f9db),
        std::vector<uint32_t>{0x1f9db, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9db, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9db, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9db, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9db, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9db, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9db, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9db, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9db, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9db, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9db, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9db, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9db, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9db, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9db, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9db, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9db, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9db, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9db, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9db, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9db, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9db, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9db, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9db, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9db, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9db, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9db, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9db, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9db, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9db, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9db, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9db, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9db, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9db, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9db, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>(1, 0x1f9dc),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f9dc),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f9dc),
        std::vector<uint32_t>{0x1f9dc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dc, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dc, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dc, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dc, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dc, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dc, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dc, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dc, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dc, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dc, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dc, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dc, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dc, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dc, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dc, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9dc, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9dc, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dc, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9dc, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9dc, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dc, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9dc, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9dc, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dc, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9dc, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9dc, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dc, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9dc, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9dc, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dc, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dc, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>(1, 0x1f9dd),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f9dd),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f9dd),
        std::vector<uint32_t>{0x1f9dd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dd, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dd, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dd, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dd, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dd, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dd, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dd, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dd, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dd, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
}

TEST(tailoring, und_emoji_000_012)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dd, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dd, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dd, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dd, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dd, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dd, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9dd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9dd, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9dd, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dd, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9dd, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9dd, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dd, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9dd, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9dd, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dd, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9dd, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9dd, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dd, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9dd, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9dd, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9dd, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9dd, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>(1, 0x1f9de),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f9de),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f9de),
        std::vector<uint32_t>{0x1f9de, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9de, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9de, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9de, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9de, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9de, 0x200d, 0x2642},
        std::vector<uint32_t>(1, 0x1f9df),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f9df),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f9df),
        std::vector<uint32_t>{0x1f9df, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9df, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9df, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9df, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9df, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9df, 0x200d, 0x2642},
        std::vector<uint32_t>(1, 0x1f64d),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f64d),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f64d),
        std::vector<uint32_t>{0x1f64d, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64d, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64d, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64d, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64d, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64d, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64d, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64d, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64d, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64d, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64d, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64d, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64d, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64d, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64d, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64d, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64d, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64d, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64d, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64d, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64d, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64d, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64d, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64d, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64d, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64d, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64d, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64d, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64d, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64d, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64d, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64d, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64d, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64d, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64d, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f64e),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f64e),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f64e),
        std::vector<uint32_t>{0x1f64e, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64e, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64e, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64e, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64e, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64e, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64e, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64e, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64e, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64e, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64e, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64e, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64e, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64e, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64e, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64e, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64e, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64e, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64e, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64e, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64e, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64e, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64e, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64e, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64e, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64e, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64e, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64e, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64e, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64e, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64e, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64e, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64e, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64e, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64e, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f645),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f645),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f645),
        std::vector<uint32_t>{0x1f645, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f645, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f645, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f645, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f645, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f645, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f645, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f645, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f645, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f645, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f645, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f645, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f645, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f645, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f645, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f645, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f645, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f645, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f645, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f645, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f645, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f645, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f645, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f645, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f645, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f645, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f645, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f645, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
}

TEST(tailoring, und_emoji_000_013)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f645, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f645, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f645, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f645, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f645, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f645, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f645, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f646),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f646),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f646),
        std::vector<uint32_t>{0x1f646, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f646, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f646, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f646, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f646, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f646, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f646, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f646, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f646, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f646, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f646, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f646, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f646, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f646, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f646, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f646, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f646, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f646, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f646, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f646, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f646, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f646, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f646, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f646, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f646, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f646, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f646, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f646, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f646, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f646, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f646, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f646, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f646, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f646, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f646, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f481),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f481),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f481),
        std::vector<uint32_t>{0x1f481, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f481, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f481, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f481, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f481, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f481, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f481, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f481, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f481, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f481, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f481, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f481, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f481, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f481, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f481, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f481, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f481, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f481, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f481, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f481, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f481, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f481, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f481, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f481, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f481, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f481, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f481, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f481, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f481, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f481, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f481, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f481, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f481, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f481, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f481, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f64b),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f64b),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f64b),
        std::vector<uint32_t>{0x1f64b, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64b, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64b, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64b, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64b, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64b, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64b, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64b, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64b, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64b, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64b, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64b, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64b, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64b, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64b, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64b, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64b, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f64b, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64b, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64b, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64b, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64b, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64b, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64b, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64b, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64b, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64b, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64b, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64b, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64b, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64b, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64b, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f64b, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f64b, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f64b, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f647),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f647),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f647),
        std::vector<uint32_t>{0x1f647, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f647, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f647, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f647, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f647, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f647, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f647, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f647, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f647, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f647, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f647, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f647, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f647, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f647, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f647, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f647, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f647, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f647, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f647, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f647, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f647, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f647, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f647, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f647, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f647, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
}

TEST(tailoring, und_emoji_000_014)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f647, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f647, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f647, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f647, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f647, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f647, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f647, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f647, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f647, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f647, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f926),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f926),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f926),
        std::vector<uint32_t>{0x1f926, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f926, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f926, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f926, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f926, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f926, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f926, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f926, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f926, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f926, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f926, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f926, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f926, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f926, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f926, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f926, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f926, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f926, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f926, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f926, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f926, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f926, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f926, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f926, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f926, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f926, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f926, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f926, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f926, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f926, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f926, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f926, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f926, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f926, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f926, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f937),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f937),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f937),
        std::vector<uint32_t>{0x1f937, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f937, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f937, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f937, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f937, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f937, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f937, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f937, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f937, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f937, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f937, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f937, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f937, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f937, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f937, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f937, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f937, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f937, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f937, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f937, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f937, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f937, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f937, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f937, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f937, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f937, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f937, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f937, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f937, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f937, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f937, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f937, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f937, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f937, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f937, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f486),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f486),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f486),
        std::vector<uint32_t>{0x1f486, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f486, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f486, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f486, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f486, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f486, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f486, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f486, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f486, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f486, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f486, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f486, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f486, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f486, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f486, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f486, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f486, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f486, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f486, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f486, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f486, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f486, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f486, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f486, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f486, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f486, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f486, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f486, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f486, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f486, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f486, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f486, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f486, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f486, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f486, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f487),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f487),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f487),
        std::vector<uint32_t>{0x1f487, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f487, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f487, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f487, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f487, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f487, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f487, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f487, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f487, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f487, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f487, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f487, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f487, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f487, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f487, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f487, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f487, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f487, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f487, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f487, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f487, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f487, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
}

TEST(tailoring, und_emoji_000_015)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f487, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f487, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f487, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f487, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f487, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f487, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f487, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f487, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f487, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f487, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f487, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f487, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f487, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f6b6),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f6b6),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f6b6),
        std::vector<uint32_t>{0x1f6b6, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b6, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b6, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b6, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b6, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b6, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b6, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b6, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b6, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b6, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b6, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b6, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b6, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b6, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b6, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b6, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b6, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b6, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b6, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b6, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b6, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b6, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b6, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b6, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b6, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b6, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b6, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b6, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b6, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b6, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b6, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b6, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b6, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b6, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b6, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f3c3),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f3c3),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f3c3),
        std::vector<uint32_t>{0x1f3c3, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c3, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c3, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c3, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c3, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c3, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c3, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c3, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c3, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c3, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c3, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c3, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c3, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c3, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c3, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c3, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c3, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c3, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c3, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3c3, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3c3, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c3, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3c3, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3c3, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c3, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3c3, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3c3, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c3, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3c3, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3c3, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c3, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3c3, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3c3, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c3, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c3, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f483),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f483),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f483),
        std::vector<uint32_t>(1, 0x1f57a),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f57a),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f57a),
        std::vector<uint32_t>(1, 0x1f46f),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f46f),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f46f),
        std::vector<uint32_t>{0x1f46f, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f46f, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46f, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f46f, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f46f, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f46f, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f9d6),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f9d6),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f9d6),
        std::vector<uint32_t>{0x1f9d6, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d6, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d6, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d6, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d6, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d6, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d6, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d6, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d6, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d6, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d6, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d6, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d6, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d6, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d6, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d6, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d6, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d6, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d6, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d6, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d6, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d6, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d6, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d6, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d6, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d6, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d6, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d6, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d6, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d6, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d6, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d6, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d6, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d6, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d6, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>(1, 0x1f9d7),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f9d7),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f9d7),
        std::vector<uint32_t>{0x1f9d7, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d7, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d7, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d7, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d7, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
}

TEST(tailoring, und_emoji_000_016)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d7, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d7, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d7, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d7, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d7, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d7, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d7, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d7, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d7, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d7, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d7, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d7, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d7, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d7, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d7, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d7, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d7, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d7, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d7, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d7, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d7, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d7, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d7, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d7, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d7, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d7, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d7, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d7, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d7, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d7, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>(1, 0x1f9d8),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f9d8),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f9d8),
        std::vector<uint32_t>{0x1f9d8, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d8, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d8, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d8, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d8, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d8, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d8, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d8, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d8, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d8, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d8, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d8, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d8, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d8, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d8, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d8, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d8, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f9d8, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d8, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d8, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d8, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d8, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d8, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d8, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d8, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d8, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d8, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d8, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d8, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d8, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d8, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d8, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f9d8, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f9d8, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f9d8, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>(1, 0x1f6c0),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f6c0),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f6c0),
        std::vector<uint32_t>(1, 0x1f6cc),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f6cc),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f6cc),
        std::vector<uint32_t>(1, 0x1f574),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f574),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f574),
        std::vector<uint32_t>(1, 0x1f5e3),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f5e3),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f5e3),
        std::vector<uint32_t>(1, 0x1f464),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f464),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f464),
        std::vector<uint32_t>(1, 0x1f465),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f465),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f465),
        std::vector<uint32_t>(1, 0x1f93a),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f93a),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f93a),
        std::vector<uint32_t>(1, 0x1f3c7),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f3c7),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f3c7),
        std::vector<uint32_t>(1, 0x26f7),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x26f7),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x26f7),
        std::vector<uint32_t>(1, 0x1f3c2),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f3c2),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f3c2),
        std::vector<uint32_t>(1, 0x1f3cc),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f3cc),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f3cc),
        std::vector<uint32_t>{0x1f3cc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cc, 0xfe0f, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cc, 0xfe0f, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0xfe0f, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cc, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0xfe0f, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cc, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cc, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cc, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cc, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cc, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cc, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cc, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cc, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cc, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cc, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cc, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cc, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cc, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cc, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cc, 0xfe0f, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cc, 0xfe0f, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0xfe0f, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cc, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0xfe0f, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cc, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cc, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cc, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cc, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cc, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cc, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cc, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cc, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cc, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cc, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cc, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cc, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cc, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cc, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cc, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f3c4),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f3c4),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f3c4),
        std::vector<uint32_t>{0x1f3c4, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c4, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c4, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c4, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c4, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
}

TEST(tailoring, und_emoji_000_017)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c4, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c4, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c4, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c4, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c4, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c4, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c4, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c4, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c4, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c4, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c4, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c4, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3c4, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c4, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3c4, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3c4, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c4, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3c4, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3c4, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c4, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3c4, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3c4, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c4, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3c4, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3c4, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c4, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3c4, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3c4, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3c4, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3c4, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f6a3),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f6a3),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f6a3),
        std::vector<uint32_t>{0x1f6a3, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6a3, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6a3, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6a3, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6a3, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6a3, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6a3, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6a3, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6a3, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6a3, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6a3, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6a3, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6a3, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6a3, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6a3, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6a3, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6a3, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6a3, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6a3, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6a3, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6a3, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6a3, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6a3, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6a3, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6a3, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6a3, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6a3, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6a3, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6a3, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6a3, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6a3, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6a3, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6a3, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6a3, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6a3, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f3ca),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f3ca),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f3ca),
        std::vector<uint32_t>{0x1f3ca, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3ca, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3ca, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3ca, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3ca, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3ca, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3ca, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3ca, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3ca, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3ca, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3ca, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3ca, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3ca, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3ca, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3ca, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3ca, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3ca, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3ca, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3ca, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3ca, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3ca, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3ca, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3ca, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3ca, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3ca, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3ca, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3ca, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3ca, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3ca, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3ca, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3ca, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3ca, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3ca, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3ca, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3ca, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x26f9),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x26f9),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x26f9),
        std::vector<uint32_t>{0x26f9, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x26f9, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0x200d, 0x2642},
        std::vector<uint32_t>{0x26f9, 0xfe0f, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x26f9, 0xfe0f, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0xfe0f, 0x200d, 0x2642},
        std::vector<uint32_t>{0x26f9, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0xfe0f, 0x200d, 0x2642},
        std::vector<uint32_t>{0x26f9, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x26f9, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x26f9, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x26f9, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x26f9, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x26f9, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x26f9, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x26f9, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x26f9, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x26f9, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x26f9, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x26f9, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x26f9, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x26f9, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x26f9, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x26f9, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0x200d, 0x2640},
        std::vector<uint32_t>{0x26f9, 0xfe0f, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x26f9, 0xfe0f, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0xfe0f, 0x200d, 0x2640},
        std::vector<uint32_t>{0x26f9, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0xfe0f, 0x200d, 0x2640},
        std::vector<uint32_t>{0x26f9, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x26f9, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x26f9, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x26f9, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x26f9, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x26f9, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x26f9, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x26f9, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x26f9, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x26f9, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x26f9, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x26f9, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x26f9, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x26f9, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
}

TEST(tailoring, und_emoji_000_018)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x26f9, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f3cb),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f3cb),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f3cb),
        std::vector<uint32_t>{0x1f3cb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cb, 0xfe0f, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cb, 0xfe0f, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0xfe0f, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cb, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0xfe0f, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cb, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cb, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cb, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cb, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cb, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cb, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cb, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cb, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cb, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cb, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cb, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cb, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cb, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cb, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f3cb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cb, 0xfe0f, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cb, 0xfe0f, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0xfe0f, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cb, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0xfe0f, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cb, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cb, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cb, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cb, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cb, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cb, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cb, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cb, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cb, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cb, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cb, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cb, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f3cb, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f3cb, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f3cb, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f6b4),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f6b4),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f6b4),
        std::vector<uint32_t>{0x1f6b4, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b4, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b4, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b4, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b4, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b4, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b4, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b4, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b4, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b4, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b4, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b4, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b4, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b4, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b4, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b4, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b4, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b4, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b4, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b4, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b4, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b4, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b4, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b4, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b4, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b4, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b4, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b4, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b4, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b4, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b4, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b4, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b4, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b4, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b4, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f6b5),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f6b5),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f6b5),
        std::vector<uint32_t>{0x1f6b5, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b5, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b5, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b5, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b5, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b5, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b5, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b5, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b5, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b5, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b5, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b5, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b5, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b5, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b5, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b5, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b5, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f6b5, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b5, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b5, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b5, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b5, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b5, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b5, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b5, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b5, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b5, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b5, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b5, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b5, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b5, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b5, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f6b5, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f6b5, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f6b5, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f3ce),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f3ce),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f3ce),
        std::vector<uint32_t>(1, 0x1f3cd),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f3cd),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f3cd),
        std::vector<uint32_t>(1, 0x1f938),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f938),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f938),
        std::vector<uint32_t>{0x1f938, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f938, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f938, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f938, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f938, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f938, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f938, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f938, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f938, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f938, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f938, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f938, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f938, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f938, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f938, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f938, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f938, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f938, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f938, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
}

TEST(tailoring, und_emoji_000_019)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f938, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f938, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f938, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f938, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f938, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f938, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f938, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f938, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f938, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f938, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f938, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f938, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f938, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f938, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f938, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f938, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f93c),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f93c),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f93c),
        std::vector<uint32_t>{0x1f93c, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93c, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93c, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93c, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93c, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93c, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f93d),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f93d),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f93d),
        std::vector<uint32_t>{0x1f93d, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93d, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93d, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93d, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93d, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93d, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93d, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93d, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93d, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93d, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93d, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93d, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93d, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93d, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93d, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93d, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93d, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93d, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93d, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f93d, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f93d, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93d, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f93d, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f93d, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93d, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f93d, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f93d, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93d, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f93d, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f93d, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93d, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f93d, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f93d, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93d, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93d, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f93e),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f93e),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f93e),
        std::vector<uint32_t>{0x1f93e, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93e, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93e, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93e, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93e, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93e, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93e, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93e, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93e, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93e, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93e, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93e, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93e, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93e, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93e, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93e, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93e, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f93e, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93e, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f93e, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f93e, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93e, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f93e, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f93e, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93e, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f93e, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f93e, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93e, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f93e, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f93e, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93e, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f93e, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f93e, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f93e, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f93e, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f939),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f939),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f939),
        std::vector<uint32_t>{0x1f939, 0x200d, 0x2642},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f939, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f939, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f939, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f939, 0x1f3fb, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f939, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x1f3fb, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f939, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f939, 0x1f3fc, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f939, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x1f3fc, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f939, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f939, 0x1f3fd, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f939, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x1f3fd, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f939, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f939, 0x1f3fe, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f939, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x1f3fe, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f939, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f939, 0x1f3ff, 0x200d, 0x2642},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x1f3ff, 0x200d, 0x2642},
        std::vector<uint32_t>{0x1f939, 0x200d, 0x2640},
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f939, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f939, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f939, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f939, 0x1f3fb, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f939, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x1f3fb, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f939, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f939, 0x1f3fc, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f939, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x1f3fc, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f939, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f939, 0x1f3fd, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f939, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x1f3fd, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f939, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f939, 0x1f3fe, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f939, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x1f3fe, 0x200d, 0x2640},
        std::vector<uint32_t>{0x1f939, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>{0x1f939, 0x1f3ff, 0x200d, 0x2640},
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x1f939, 0x1f3ff, 0x200d, 0x2640},
        std::vector<uint32_t>(1, 0x1f46b),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f46b),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f46b),
        std::vector<uint32_t>(1, 0x1f46c),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f46c),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f46c),
        std::vector<uint32_t>(1, 0x1f46d),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f46d),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x1f46d),
        std::vector<uint32_t>(1, 0x1f48f),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00a4),
        std::vector<uint32_t>(1, 0x1f48f),
        table(), collation_strength::quaternary),
        1);
}

